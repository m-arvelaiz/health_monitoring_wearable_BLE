
wearable_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa00  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  0800ab3c  0800ab3c  0000bb3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800adec  0800adec  0000bdec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800adf4  0800adf4  0000bdf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800adf8  0800adf8  0000bdf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  20000008  0800adfc  0000c008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000080  0800ae74  0000c080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000b8  0800aea9  0000c0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000750  200000cc  0800aeba  0000c0cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000081c  0800aeba  0000c81c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ca67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000d000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000d000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800aeba  0000c1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0002d352  00000000  00000000  0000ca97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006321  00000000  00000000  00039de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000027e8  00000000  00000000  00040110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001e7b  00000000  00000000  000428f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002bf1f  00000000  00000000  00044773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002d262  00000000  00000000  00070692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f6fd3  00000000  00000000  0009d8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001948c7  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000a8f0  00000000  00000000  0019490c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000078  00000000  00000000  0019f1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000cc 	.word	0x200000cc
 8000158:	00000000 	.word	0x00000000
 800015c:	0800ab24 	.word	0x0800ab24

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000d0 	.word	0x200000d0
 8000178:	0800ab24 	.word	0x0800ab24

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b988 	b.w	80004b4 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9d08      	ldr	r5, [sp, #32]
 80001c2:	468e      	mov	lr, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14a      	bne.n	8000262 <__udivmoddi4+0xa6>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4617      	mov	r7, r2
 80001d0:	d962      	bls.n	8000298 <__udivmoddi4+0xdc>
 80001d2:	fab2 f682 	clz	r6, r2
 80001d6:	b14e      	cbz	r6, 80001ec <__udivmoddi4+0x30>
 80001d8:	f1c6 0320 	rsb	r3, r6, #32
 80001dc:	fa01 f806 	lsl.w	r8, r1, r6
 80001e0:	fa20 f303 	lsr.w	r3, r0, r3
 80001e4:	40b7      	lsls	r7, r6
 80001e6:	ea43 0808 	orr.w	r8, r3, r8
 80001ea:	40b4      	lsls	r4, r6
 80001ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001f0:	fa1f fc87 	uxth.w	ip, r7
 80001f4:	fbb8 f1fe 	udiv	r1, r8, lr
 80001f8:	0c23      	lsrs	r3, r4, #16
 80001fa:	fb0e 8811 	mls	r8, lr, r1, r8
 80001fe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000202:	fb01 f20c 	mul.w	r2, r1, ip
 8000206:	429a      	cmp	r2, r3
 8000208:	d909      	bls.n	800021e <__udivmoddi4+0x62>
 800020a:	18fb      	adds	r3, r7, r3
 800020c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000210:	f080 80ea 	bcs.w	80003e8 <__udivmoddi4+0x22c>
 8000214:	429a      	cmp	r2, r3
 8000216:	f240 80e7 	bls.w	80003e8 <__udivmoddi4+0x22c>
 800021a:	3902      	subs	r1, #2
 800021c:	443b      	add	r3, r7
 800021e:	1a9a      	subs	r2, r3, r2
 8000220:	b2a3      	uxth	r3, r4
 8000222:	fbb2 f0fe 	udiv	r0, r2, lr
 8000226:	fb0e 2210 	mls	r2, lr, r0, r2
 800022a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800022e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000232:	459c      	cmp	ip, r3
 8000234:	d909      	bls.n	800024a <__udivmoddi4+0x8e>
 8000236:	18fb      	adds	r3, r7, r3
 8000238:	f100 32ff 	add.w	r2, r0, #4294967295
 800023c:	f080 80d6 	bcs.w	80003ec <__udivmoddi4+0x230>
 8000240:	459c      	cmp	ip, r3
 8000242:	f240 80d3 	bls.w	80003ec <__udivmoddi4+0x230>
 8000246:	443b      	add	r3, r7
 8000248:	3802      	subs	r0, #2
 800024a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800024e:	eba3 030c 	sub.w	r3, r3, ip
 8000252:	2100      	movs	r1, #0
 8000254:	b11d      	cbz	r5, 800025e <__udivmoddi4+0xa2>
 8000256:	40f3      	lsrs	r3, r6
 8000258:	2200      	movs	r2, #0
 800025a:	e9c5 3200 	strd	r3, r2, [r5]
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d905      	bls.n	8000272 <__udivmoddi4+0xb6>
 8000266:	b10d      	cbz	r5, 800026c <__udivmoddi4+0xb0>
 8000268:	e9c5 0100 	strd	r0, r1, [r5]
 800026c:	2100      	movs	r1, #0
 800026e:	4608      	mov	r0, r1
 8000270:	e7f5      	b.n	800025e <__udivmoddi4+0xa2>
 8000272:	fab3 f183 	clz	r1, r3
 8000276:	2900      	cmp	r1, #0
 8000278:	d146      	bne.n	8000308 <__udivmoddi4+0x14c>
 800027a:	4573      	cmp	r3, lr
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xc8>
 800027e:	4282      	cmp	r2, r0
 8000280:	f200 8105 	bhi.w	800048e <__udivmoddi4+0x2d2>
 8000284:	1a84      	subs	r4, r0, r2
 8000286:	eb6e 0203 	sbc.w	r2, lr, r3
 800028a:	2001      	movs	r0, #1
 800028c:	4690      	mov	r8, r2
 800028e:	2d00      	cmp	r5, #0
 8000290:	d0e5      	beq.n	800025e <__udivmoddi4+0xa2>
 8000292:	e9c5 4800 	strd	r4, r8, [r5]
 8000296:	e7e2      	b.n	800025e <__udivmoddi4+0xa2>
 8000298:	2a00      	cmp	r2, #0
 800029a:	f000 8090 	beq.w	80003be <__udivmoddi4+0x202>
 800029e:	fab2 f682 	clz	r6, r2
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f040 80a4 	bne.w	80003f0 <__udivmoddi4+0x234>
 80002a8:	1a8a      	subs	r2, r1, r2
 80002aa:	0c03      	lsrs	r3, r0, #16
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	b280      	uxth	r0, r0
 80002b2:	b2bc      	uxth	r4, r7
 80002b4:	2101      	movs	r1, #1
 80002b6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002ba:	fb0e 221c 	mls	r2, lr, ip, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb04 f20c 	mul.w	r2, r4, ip
 80002c6:	429a      	cmp	r2, r3
 80002c8:	d907      	bls.n	80002da <__udivmoddi4+0x11e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80002d0:	d202      	bcs.n	80002d8 <__udivmoddi4+0x11c>
 80002d2:	429a      	cmp	r2, r3
 80002d4:	f200 80e0 	bhi.w	8000498 <__udivmoddi4+0x2dc>
 80002d8:	46c4      	mov	ip, r8
 80002da:	1a9b      	subs	r3, r3, r2
 80002dc:	fbb3 f2fe 	udiv	r2, r3, lr
 80002e0:	fb0e 3312 	mls	r3, lr, r2, r3
 80002e4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002e8:	fb02 f404 	mul.w	r4, r2, r4
 80002ec:	429c      	cmp	r4, r3
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0x144>
 80002f0:	18fb      	adds	r3, r7, r3
 80002f2:	f102 30ff 	add.w	r0, r2, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x142>
 80002f8:	429c      	cmp	r4, r3
 80002fa:	f200 80ca 	bhi.w	8000492 <__udivmoddi4+0x2d6>
 80002fe:	4602      	mov	r2, r0
 8000300:	1b1b      	subs	r3, r3, r4
 8000302:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000306:	e7a5      	b.n	8000254 <__udivmoddi4+0x98>
 8000308:	f1c1 0620 	rsb	r6, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 f706 	lsr.w	r7, r2, r6
 8000312:	431f      	orrs	r7, r3
 8000314:	fa0e f401 	lsl.w	r4, lr, r1
 8000318:	fa20 f306 	lsr.w	r3, r0, r6
 800031c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000320:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000324:	4323      	orrs	r3, r4
 8000326:	fa00 f801 	lsl.w	r8, r0, r1
 800032a:	fa1f fc87 	uxth.w	ip, r7
 800032e:	fbbe f0f9 	udiv	r0, lr, r9
 8000332:	0c1c      	lsrs	r4, r3, #16
 8000334:	fb09 ee10 	mls	lr, r9, r0, lr
 8000338:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800033c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000340:	45a6      	cmp	lr, r4
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x1a0>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 3aff 	add.w	sl, r0, #4294967295
 800034e:	f080 809c 	bcs.w	800048a <__udivmoddi4+0x2ce>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8099 	bls.w	800048a <__udivmoddi4+0x2ce>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	eba4 040e 	sub.w	r4, r4, lr
 8000360:	fa1f fe83 	uxth.w	lr, r3
 8000364:	fbb4 f3f9 	udiv	r3, r4, r9
 8000368:	fb09 4413 	mls	r4, r9, r3, r4
 800036c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000370:	fb03 fc0c 	mul.w	ip, r3, ip
 8000374:	45a4      	cmp	ip, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1ce>
 8000378:	193c      	adds	r4, r7, r4
 800037a:	f103 3eff 	add.w	lr, r3, #4294967295
 800037e:	f080 8082 	bcs.w	8000486 <__udivmoddi4+0x2ca>
 8000382:	45a4      	cmp	ip, r4
 8000384:	d97f      	bls.n	8000486 <__udivmoddi4+0x2ca>
 8000386:	3b02      	subs	r3, #2
 8000388:	443c      	add	r4, r7
 800038a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800038e:	eba4 040c 	sub.w	r4, r4, ip
 8000392:	fba0 ec02 	umull	lr, ip, r0, r2
 8000396:	4564      	cmp	r4, ip
 8000398:	4673      	mov	r3, lr
 800039a:	46e1      	mov	r9, ip
 800039c:	d362      	bcc.n	8000464 <__udivmoddi4+0x2a8>
 800039e:	d05f      	beq.n	8000460 <__udivmoddi4+0x2a4>
 80003a0:	b15d      	cbz	r5, 80003ba <__udivmoddi4+0x1fe>
 80003a2:	ebb8 0203 	subs.w	r2, r8, r3
 80003a6:	eb64 0409 	sbc.w	r4, r4, r9
 80003aa:	fa04 f606 	lsl.w	r6, r4, r6
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	431e      	orrs	r6, r3
 80003b4:	40cc      	lsrs	r4, r1
 80003b6:	e9c5 6400 	strd	r6, r4, [r5]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e74f      	b.n	800025e <__udivmoddi4+0xa2>
 80003be:	fbb1 fcf2 	udiv	ip, r1, r2
 80003c2:	0c01      	lsrs	r1, r0, #16
 80003c4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003c8:	b280      	uxth	r0, r0
 80003ca:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003ce:	463b      	mov	r3, r7
 80003d0:	4638      	mov	r0, r7
 80003d2:	463c      	mov	r4, r7
 80003d4:	46b8      	mov	r8, r7
 80003d6:	46be      	mov	lr, r7
 80003d8:	2620      	movs	r6, #32
 80003da:	fbb1 f1f7 	udiv	r1, r1, r7
 80003de:	eba2 0208 	sub.w	r2, r2, r8
 80003e2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003e6:	e766      	b.n	80002b6 <__udivmoddi4+0xfa>
 80003e8:	4601      	mov	r1, r0
 80003ea:	e718      	b.n	800021e <__udivmoddi4+0x62>
 80003ec:	4610      	mov	r0, r2
 80003ee:	e72c      	b.n	800024a <__udivmoddi4+0x8e>
 80003f0:	f1c6 0220 	rsb	r2, r6, #32
 80003f4:	fa2e f302 	lsr.w	r3, lr, r2
 80003f8:	40b7      	lsls	r7, r6
 80003fa:	40b1      	lsls	r1, r6
 80003fc:	fa20 f202 	lsr.w	r2, r0, r2
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	430a      	orrs	r2, r1
 8000406:	fbb3 f8fe 	udiv	r8, r3, lr
 800040a:	b2bc      	uxth	r4, r7
 800040c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000410:	0c11      	lsrs	r1, r2, #16
 8000412:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000416:	fb08 f904 	mul.w	r9, r8, r4
 800041a:	40b0      	lsls	r0, r6
 800041c:	4589      	cmp	r9, r1
 800041e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000422:	b280      	uxth	r0, r0
 8000424:	d93e      	bls.n	80004a4 <__udivmoddi4+0x2e8>
 8000426:	1879      	adds	r1, r7, r1
 8000428:	f108 3cff 	add.w	ip, r8, #4294967295
 800042c:	d201      	bcs.n	8000432 <__udivmoddi4+0x276>
 800042e:	4589      	cmp	r9, r1
 8000430:	d81f      	bhi.n	8000472 <__udivmoddi4+0x2b6>
 8000432:	eba1 0109 	sub.w	r1, r1, r9
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fb09 f804 	mul.w	r8, r9, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	b292      	uxth	r2, r2
 8000444:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000448:	4542      	cmp	r2, r8
 800044a:	d229      	bcs.n	80004a0 <__udivmoddi4+0x2e4>
 800044c:	18ba      	adds	r2, r7, r2
 800044e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000452:	d2c4      	bcs.n	80003de <__udivmoddi4+0x222>
 8000454:	4542      	cmp	r2, r8
 8000456:	d2c2      	bcs.n	80003de <__udivmoddi4+0x222>
 8000458:	f1a9 0102 	sub.w	r1, r9, #2
 800045c:	443a      	add	r2, r7
 800045e:	e7be      	b.n	80003de <__udivmoddi4+0x222>
 8000460:	45f0      	cmp	r8, lr
 8000462:	d29d      	bcs.n	80003a0 <__udivmoddi4+0x1e4>
 8000464:	ebbe 0302 	subs.w	r3, lr, r2
 8000468:	eb6c 0c07 	sbc.w	ip, ip, r7
 800046c:	3801      	subs	r0, #1
 800046e:	46e1      	mov	r9, ip
 8000470:	e796      	b.n	80003a0 <__udivmoddi4+0x1e4>
 8000472:	eba7 0909 	sub.w	r9, r7, r9
 8000476:	4449      	add	r1, r9
 8000478:	f1a8 0c02 	sub.w	ip, r8, #2
 800047c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000480:	fb09 f804 	mul.w	r8, r9, r4
 8000484:	e7db      	b.n	800043e <__udivmoddi4+0x282>
 8000486:	4673      	mov	r3, lr
 8000488:	e77f      	b.n	800038a <__udivmoddi4+0x1ce>
 800048a:	4650      	mov	r0, sl
 800048c:	e766      	b.n	800035c <__udivmoddi4+0x1a0>
 800048e:	4608      	mov	r0, r1
 8000490:	e6fd      	b.n	800028e <__udivmoddi4+0xd2>
 8000492:	443b      	add	r3, r7
 8000494:	3a02      	subs	r2, #2
 8000496:	e733      	b.n	8000300 <__udivmoddi4+0x144>
 8000498:	f1ac 0c02 	sub.w	ip, ip, #2
 800049c:	443b      	add	r3, r7
 800049e:	e71c      	b.n	80002da <__udivmoddi4+0x11e>
 80004a0:	4649      	mov	r1, r9
 80004a2:	e79c      	b.n	80003de <__udivmoddi4+0x222>
 80004a4:	eba1 0109 	sub.w	r1, r1, r9
 80004a8:	46c4      	mov	ip, r8
 80004aa:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ae:	fb09 f804 	mul.w	r8, r9, r4
 80004b2:	e7c4      	b.n	800043e <__udivmoddi4+0x282>

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80004be:	4b0b      	ldr	r3, [pc, #44]	@ (80004ec <APPD_EnableCPU2+0x34>)
 80004c0:	1d3c      	adds	r4, r7, #4
 80004c2:	461d      	mov	r5, r3
 80004c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004cc:	c403      	stmia	r4!, {r0, r1}
 80004ce:	8022      	strh	r2, [r4, #0]
 80004d0:	3402      	adds	r4, #2
 80004d2:	0c13      	lsrs	r3, r2, #16
 80004d4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80004d6:	f008 fa43 	bl	8008960 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	4618      	mov	r0, r3
 80004de:	f007 fcd4 	bl	8007e8a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80004e2:	bf00      	nop
}
 80004e4:	3720      	adds	r7, #32
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bdb0      	pop	{r4, r5, r7, pc}
 80004ea:	bf00      	nop
 80004ec:	0800ab3c 	.word	0x0800ab3c

080004f0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80004f8:	4b07      	ldr	r3, [pc, #28]	@ (8000518 <LL_C2_PWR_SetPowerMode+0x28>)
 80004fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80004fe:	f023 0207 	bic.w	r2, r3, #7
 8000502:	4905      	ldr	r1, [pc, #20]	@ (8000518 <LL_C2_PWR_SetPowerMode+0x28>)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4313      	orrs	r3, r2
 8000508:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	58000400 	.word	0x58000400

0800051c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <LL_EXTI_EnableIT_32_63+0x24>)
 8000526:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800052a:	4905      	ldr	r1, [pc, #20]	@ (8000540 <LL_EXTI_EnableIT_32_63+0x24>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4313      	orrs	r3, r2
 8000530:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	58000800 	.word	0x58000800

08000544 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800054c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000550:	4a0a      	ldr	r2, [pc, #40]	@ (800057c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000552:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000556:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800055a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800055e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	021b      	lsls	r3, r3, #8
 8000566:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800056a:	4313      	orrs	r3, r2
 800056c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	cafecafe 	.word	0xcafecafe

08000580 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000588:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000592:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4313      	orrs	r3, r2
 800059a:	608b      	str	r3, [r1, #8]
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80005ac:	4b04      	ldr	r3, [pc, #16]	@ (80005c0 <LL_DBGMCU_GetDeviceID+0x18>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	e0042000 	.word	0xe0042000

080005c4 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80005c8:	4b04      	ldr	r3, [pc, #16]	@ (80005dc <LL_DBGMCU_GetRevisionID+0x18>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	0c1b      	lsrs	r3, r3, #16
 80005ce:	b29b      	uxth	r3, r3
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e0042000 	.word	0xe0042000

080005e0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	22ff      	movs	r2, #255	@ 0xff
 80005ec:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b083      	sub	sp, #12
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	22ca      	movs	r2, #202	@ 0xca
 8000606:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2253      	movs	r2, #83	@ 0x53
 800060c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800061a:	b480      	push	{r7}
 800061c:	b083      	sub	sp, #12
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
 8000622:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	f023 0207 	bic.w	r2, r3, #7
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	431a      	orrs	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	609a      	str	r2, [r3, #8]
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000644:	4b04      	ldr	r3, [pc, #16]	@ (8000658 <MX_APPE_Config+0x18>)
 8000646:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800064a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800064c:	f000 f824 	bl	8000698 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000650:	f000 f829 	bl	80006a6 <Config_HSE>

  return;
 8000654:	bf00      	nop
}
 8000656:	bd80      	pop	{r7, pc}
 8000658:	58004000 	.word	0x58004000

0800065c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000660:	f000 f835 	bl	80006ce <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000664:	f000 f84e 	bl	8000704 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000668:	4903      	ldr	r1, [pc, #12]	@ (8000678 <MX_APPE_Init+0x1c>)
 800066a:	2000      	movs	r0, #0
 800066c:	f000 fd68 	bl	8001140 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000670:	f000 f856 	bl	8000720 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000674:	bf00      	nop
}
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000258 	.word	0x20000258

0800067c <Init_Smps>:

void Init_Smps(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000680:	bf00      	nop
}
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <Init_Exti>:

void Init_Exti(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800068e:	2050      	movs	r0, #80	@ 0x50
 8000690:	f7ff ff44 	bl	800051c <LL_EXTI_EnableIT_32_63>

  return;
 8000694:	bf00      	nop
}
 8000696:	bd80      	pop	{r7, pc}

08000698 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800069c:	bf00      	nop
}
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f008 f9e3 	bl	8008a78 <OTP_Read>
 80006b2:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d005      	beq.n	80006c6 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	799b      	ldrb	r3, [r3, #6]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff40 	bl	8000544 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80006c4:	bf00      	nop
 80006c6:	bf00      	nop
}
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <System_Init>:

static void System_Init(void)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	af00      	add	r7, sp, #0
  Init_Smps();
 80006d2:	f7ff ffd3 	bl	800067c <Init_Smps>

  Init_Exti();
 80006d6:	f7ff ffd8 	bl	800068a <Init_Exti>

  Init_Rtc();
 80006da:	f000 f803 	bl	80006e4 <Init_Rtc>

  return;
 80006de:	bf00      	nop
}
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <Init_Rtc>:

static void Init_Rtc(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80006e8:	4805      	ldr	r0, [pc, #20]	@ (8000700 <Init_Rtc+0x1c>)
 80006ea:	f7ff ff86 	bl	80005fa <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80006ee:	2100      	movs	r1, #0
 80006f0:	4803      	ldr	r0, [pc, #12]	@ (8000700 <Init_Rtc+0x1c>)
 80006f2:	f7ff ff92 	bl	800061a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80006f6:	4802      	ldr	r0, [pc, #8]	@ (8000700 <Init_Rtc+0x1c>)
 80006f8:	f7ff ff72 	bl	80005e0 <LL_RTC_EnableWriteProtection>

  return;
 80006fc:	bf00      	nop
}
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40002800 	.word	0x40002800

08000704 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000708:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800070c:	f7ff ff38 	bl	8000580 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000710:	f009 fe96 	bl	800a440 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000714:	2004      	movs	r0, #4
 8000716:	f7ff feeb 	bl	80004f0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800071a:	bf00      	nop
}
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000726:	f007 ff65 	bl	80085f4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800072a:	4a11      	ldr	r2, [pc, #68]	@ (8000770 <appe_Tl_Init+0x50>)
 800072c:	2100      	movs	r1, #0
 800072e:	2008      	movs	r0, #8
 8000730:	f009 ffc4 	bl	800a6bc <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <appe_Tl_Init+0x54>)
 8000736:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <appe_Tl_Init+0x58>)
 800073a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800073c:	463b      	mov	r3, r7
 800073e:	4619      	mov	r1, r3
 8000740:	480e      	ldr	r0, [pc, #56]	@ (800077c <appe_Tl_Init+0x5c>)
 8000742:	f007 fe19 	bl	8008378 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <appe_Tl_Init+0x60>)
 8000748:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800074a:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <appe_Tl_Init+0x64>)
 800074c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <appe_Tl_Init+0x68>)
 8000750:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000752:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000756:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	4618      	mov	r0, r3
 800075e:	f008 f88b 	bl	8008878 <TL_MM_Init>

  TL_Enable();
 8000762:	f007 ff41 	bl	80085e8 <TL_Enable>

  return;
 8000766:	bf00      	nop
}
 8000768:	3720      	adds	r7, #32
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	080083b1 	.word	0x080083b1
 8000774:	20030734 	.word	0x20030734
 8000778:	0800078d 	.word	0x0800078d
 800077c:	080007a5 	.word	0x080007a5
 8000780:	2003094c 	.word	0x2003094c
 8000784:	20030840 	.word	0x20030840
 8000788:	200301f8 	.word	0x200301f8

0800078c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000796:	bf00      	nop
}
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
	...

080007a4 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	330b      	adds	r3, #11
 80007b2:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80007be:	2b07      	cmp	r3, #7
 80007c0:	d81f      	bhi.n	8000802 <APPE_SysUserEvtRx+0x5e>
 80007c2:	a201      	add	r2, pc, #4	@ (adr r2, 80007c8 <APPE_SysUserEvtRx+0x24>)
 80007c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c8:	080007e9 	.word	0x080007e9
 80007cc:	080007fb 	.word	0x080007fb
 80007d0:	08000803 	.word	0x08000803
 80007d4:	08000803 	.word	0x08000803
 80007d8:	08000803 	.word	0x08000803
 80007dc:	08000803 	.word	0x08000803
 80007e0:	08000803 	.word	0x08000803
 80007e4:	08000803 	.word	0x08000803
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4618      	mov	r0, r3
 80007ee:	f007 fb79 	bl	8007ee4 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f000 f81b 	bl	800082e <APPE_SysEvtReadyProcessing>
    break;
 80007f8:	e004      	b.n	8000804 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f000 f806 	bl	800080c <APPE_SysEvtError>
    break;
 8000800:	e000      	b.n	8000804 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000802:	bf00      	nop
  }

  return;
 8000804:	bf00      	nop
}
 8000806:	3720      	adds	r7, #32
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	330b      	adds	r3, #11
 800081a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	3302      	adds	r3, #2
 8000820:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000822:	bf00      	nop
}
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b08a      	sub	sp, #40	@ 0x28
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	330b      	adds	r3, #11
 8000852:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	3302      	adds	r3, #2
 8000858:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800085a:	69bb      	ldr	r3, [r7, #24]
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d11d      	bne.n	800089e <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000862:	f7ff fe29 	bl	80004b8 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000866:	230f      	movs	r3, #15
 8000868:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800086a:	237f      	movs	r3, #127	@ 0x7f
 800086c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800086e:	f7ff fea9 	bl	80005c4 <LL_DBGMCU_GetRevisionID>
 8000872:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000876:	b29b      	uxth	r3, r3
 8000878:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800087a:	f7ff fe95 	bl	80005a8 <LL_DBGMCU_GetDeviceID>
 800087e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000880:	6a3b      	ldr	r3, [r7, #32]
 8000882:	b29b      	uxth	r3, r3
 8000884:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	4618      	mov	r0, r3
 800088c:	f007 fb14 	bl	8007eb8 <SHCI_C2_Config>

    APP_BLE_Init();
 8000890:	f008 f9fc 	bl	8008c8c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000894:	2100      	movs	r1, #0
 8000896:	2001      	movs	r0, #1
 8000898:	f009 fde4 	bl	800a464 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 800089c:	e007      	b.n	80008ae <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d103      	bne.n	80008ae <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
  return;
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
}
 80008b0:	3728      	adds	r7, #40	@ 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80008ba:	f04f 30ff 	mov.w	r0, #4294967295
 80008be:	f009 fe01 	bl	800a4c4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80008ca:	bf00      	nop
}
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80008dc:	2100      	movs	r1, #0
 80008de:	2008      	movs	r0, #8
 80008e0:	f009 ff0e 	bl	800a700 <UTIL_SEQ_SetTask>
  return;
 80008e4:	bf00      	nop
}
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008f4:	2002      	movs	r0, #2
 80008f6:	f009 ff6f 	bl	800a7d8 <UTIL_SEQ_SetEvt>
  return;
 80008fa:	bf00      	nop
}
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800090a:	2002      	movs	r0, #2
 800090c:	f009 ff84 	bl	800a818 <UTIL_SEQ_WaitEvt>
  return;
 8000910:	bf00      	nop
}
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <LL_EXTI_EnableIT_0_31>:
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <LL_EXTI_EnableIT_0_31+0x24>)
 8000922:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8000926:	4905      	ldr	r1, [pc, #20]	@ (800093c <LL_EXTI_EnableIT_0_31+0x24>)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4313      	orrs	r3, r2
 800092c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	58000800 	.word	0x58000800

08000940 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4904      	ldr	r1, [pc, #16]	@ (8000960 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4313      	orrs	r3, r2
 8000952:	600b      	str	r3, [r1, #0]

}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	58000800 	.word	0x58000800

08000964 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <ReadRtcSsrValue+0x3c>)
 800096c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800096e:	b29b      	uxth	r3, r3
 8000970:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <ReadRtcSsrValue+0x3c>)
 8000974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000976:	b29b      	uxth	r3, r3
 8000978:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800097a:	e005      	b.n	8000988 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000980:	4b07      	ldr	r3, [pc, #28]	@ (80009a0 <ReadRtcSsrValue+0x3c>)
 8000982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000984:	b29b      	uxth	r3, r3
 8000986:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	429a      	cmp	r2, r3
 800098e:	d1f5      	bne.n	800097c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000990:	683b      	ldr	r3, [r7, #0]
}
 8000992:	4618      	mov	r0, r3
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40002800 	.word	0x40002800

080009a4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	460a      	mov	r2, r1
 80009ae:	71fb      	strb	r3, [r7, #7]
 80009b0:	4613      	mov	r3, r2
 80009b2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80009b4:	79ba      	ldrb	r2, [r7, #6]
 80009b6:	491d      	ldr	r1, [pc, #116]	@ (8000a2c <LinkTimerAfter+0x88>)
 80009b8:	4613      	mov	r3, r2
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	4413      	add	r3, r2
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	440b      	add	r3, r1
 80009c2:	3315      	adds	r3, #21
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	2b06      	cmp	r3, #6
 80009cc:	d009      	beq.n	80009e2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80009ce:	7bfa      	ldrb	r2, [r7, #15]
 80009d0:	4916      	ldr	r1, [pc, #88]	@ (8000a2c <LinkTimerAfter+0x88>)
 80009d2:	4613      	mov	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	440b      	add	r3, r1
 80009dc:	3314      	adds	r3, #20
 80009de:	79fa      	ldrb	r2, [r7, #7]
 80009e0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	4911      	ldr	r1, [pc, #68]	@ (8000a2c <LinkTimerAfter+0x88>)
 80009e6:	4613      	mov	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	440b      	add	r3, r1
 80009f0:	3315      	adds	r3, #21
 80009f2:	7bfa      	ldrb	r2, [r7, #15]
 80009f4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80009f6:	79fa      	ldrb	r2, [r7, #7]
 80009f8:	490c      	ldr	r1, [pc, #48]	@ (8000a2c <LinkTimerAfter+0x88>)
 80009fa:	4613      	mov	r3, r2
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	4413      	add	r3, r2
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	440b      	add	r3, r1
 8000a04:	3314      	adds	r3, #20
 8000a06:	79ba      	ldrb	r2, [r7, #6]
 8000a08:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000a0a:	79ba      	ldrb	r2, [r7, #6]
 8000a0c:	4907      	ldr	r1, [pc, #28]	@ (8000a2c <LinkTimerAfter+0x88>)
 8000a0e:	4613      	mov	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4413      	add	r3, r2
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	440b      	add	r3, r1
 8000a18:	3315      	adds	r3, #21
 8000a1a:	79fa      	ldrb	r2, [r7, #7]
 8000a1c:	701a      	strb	r2, [r3, #0]

  return;
 8000a1e:	bf00      	nop
}
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	200000e8 	.word	0x200000e8

08000a30 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	460a      	mov	r2, r1
 8000a3a:	71fb      	strb	r3, [r7, #7]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000a40:	4b29      	ldr	r3, [pc, #164]	@ (8000ae8 <LinkTimerBefore+0xb8>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	79ba      	ldrb	r2, [r7, #6]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d032      	beq.n	8000ab2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000a4c:	79ba      	ldrb	r2, [r7, #6]
 8000a4e:	4927      	ldr	r1, [pc, #156]	@ (8000aec <LinkTimerBefore+0xbc>)
 8000a50:	4613      	mov	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4413      	add	r3, r2
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	440b      	add	r3, r1
 8000a5a:	3314      	adds	r3, #20
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000a60:	7bfa      	ldrb	r2, [r7, #15]
 8000a62:	4922      	ldr	r1, [pc, #136]	@ (8000aec <LinkTimerBefore+0xbc>)
 8000a64:	4613      	mov	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	4413      	add	r3, r2
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	440b      	add	r3, r1
 8000a6e:	3315      	adds	r3, #21
 8000a70:	79fa      	ldrb	r2, [r7, #7]
 8000a72:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a74:	79fa      	ldrb	r2, [r7, #7]
 8000a76:	491d      	ldr	r1, [pc, #116]	@ (8000aec <LinkTimerBefore+0xbc>)
 8000a78:	4613      	mov	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	4413      	add	r3, r2
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	440b      	add	r3, r1
 8000a82:	3315      	adds	r3, #21
 8000a84:	79ba      	ldrb	r2, [r7, #6]
 8000a86:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000a88:	79fa      	ldrb	r2, [r7, #7]
 8000a8a:	4918      	ldr	r1, [pc, #96]	@ (8000aec <LinkTimerBefore+0xbc>)
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	4413      	add	r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	440b      	add	r3, r1
 8000a96:	3314      	adds	r3, #20
 8000a98:	7bfa      	ldrb	r2, [r7, #15]
 8000a9a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000a9c:	79ba      	ldrb	r2, [r7, #6]
 8000a9e:	4913      	ldr	r1, [pc, #76]	@ (8000aec <LinkTimerBefore+0xbc>)
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	4413      	add	r3, r2
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	440b      	add	r3, r1
 8000aaa:	3314      	adds	r3, #20
 8000aac:	79fa      	ldrb	r2, [r7, #7]
 8000aae:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000ab0:	e014      	b.n	8000adc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000ab2:	79fa      	ldrb	r2, [r7, #7]
 8000ab4:	490d      	ldr	r1, [pc, #52]	@ (8000aec <LinkTimerBefore+0xbc>)
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	440b      	add	r3, r1
 8000ac0:	3315      	adds	r3, #21
 8000ac2:	79ba      	ldrb	r2, [r7, #6]
 8000ac4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000ac6:	79ba      	ldrb	r2, [r7, #6]
 8000ac8:	4908      	ldr	r1, [pc, #32]	@ (8000aec <LinkTimerBefore+0xbc>)
 8000aca:	4613      	mov	r3, r2
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	4413      	add	r3, r2
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	440b      	add	r3, r1
 8000ad4:	3314      	adds	r3, #20
 8000ad6:	79fa      	ldrb	r2, [r7, #7]
 8000ad8:	701a      	strb	r2, [r3, #0]
  return;
 8000ada:	bf00      	nop
}
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000178 	.word	0x20000178
 8000aec:	200000e8 	.word	0x200000e8

08000af0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000afa:	4b4e      	ldr	r3, [pc, #312]	@ (8000c34 <linkTimer+0x144>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	2b06      	cmp	r3, #6
 8000b02:	d118      	bne.n	8000b36 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000b04:	4b4b      	ldr	r3, [pc, #300]	@ (8000c34 <linkTimer+0x144>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4b4b      	ldr	r3, [pc, #300]	@ (8000c38 <linkTimer+0x148>)
 8000b0c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000b0e:	4a49      	ldr	r2, [pc, #292]	@ (8000c34 <linkTimer+0x144>)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000b14:	79fa      	ldrb	r2, [r7, #7]
 8000b16:	4949      	ldr	r1, [pc, #292]	@ (8000c3c <linkTimer+0x14c>)
 8000b18:	4613      	mov	r3, r2
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	4413      	add	r3, r2
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	440b      	add	r3, r1
 8000b22:	3315      	adds	r3, #21
 8000b24:	2206      	movs	r2, #6
 8000b26:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000b28:	4b45      	ldr	r3, [pc, #276]	@ (8000c40 <linkTimer+0x150>)
 8000b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b2e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	81fb      	strh	r3, [r7, #14]
 8000b34:	e078      	b.n	8000c28 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000b36:	f000 f909 	bl	8000d4c <ReturnTimeElapsed>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	493e      	ldr	r1, [pc, #248]	@ (8000c3c <linkTimer+0x14c>)
 8000b42:	4613      	mov	r3, r2
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	4413      	add	r3, r2
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	440b      	add	r3, r1
 8000b4c:	3308      	adds	r3, #8
 8000b4e:	6819      	ldr	r1, [r3, #0]
 8000b50:	89fb      	ldrh	r3, [r7, #14]
 8000b52:	79fa      	ldrb	r2, [r7, #7]
 8000b54:	4419      	add	r1, r3
 8000b56:	4839      	ldr	r0, [pc, #228]	@ (8000c3c <linkTimer+0x14c>)
 8000b58:	4613      	mov	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	4413      	add	r3, r2
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	4403      	add	r3, r0
 8000b62:	3308      	adds	r3, #8
 8000b64:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000b66:	79fa      	ldrb	r2, [r7, #7]
 8000b68:	4934      	ldr	r1, [pc, #208]	@ (8000c3c <linkTimer+0x14c>)
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	4413      	add	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	440b      	add	r3, r1
 8000b74:	3308      	adds	r3, #8
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000b7a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c34 <linkTimer+0x144>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	4619      	mov	r1, r3
 8000b82:	4a2e      	ldr	r2, [pc, #184]	@ (8000c3c <linkTimer+0x14c>)
 8000b84:	460b      	mov	r3, r1
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	440b      	add	r3, r1
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	4413      	add	r3, r2
 8000b8e:	3308      	adds	r3, #8
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d337      	bcc.n	8000c08 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000b98:	4b26      	ldr	r3, [pc, #152]	@ (8000c34 <linkTimer+0x144>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000b9e:	7b7a      	ldrb	r2, [r7, #13]
 8000ba0:	4926      	ldr	r1, [pc, #152]	@ (8000c3c <linkTimer+0x14c>)
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	4413      	add	r3, r2
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	440b      	add	r3, r1
 8000bac:	3315      	adds	r3, #21
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000bb2:	e013      	b.n	8000bdc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000bb4:	7b7a      	ldrb	r2, [r7, #13]
 8000bb6:	4921      	ldr	r1, [pc, #132]	@ (8000c3c <linkTimer+0x14c>)
 8000bb8:	4613      	mov	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3315      	adds	r3, #21
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000bc8:	7b7a      	ldrb	r2, [r7, #13]
 8000bca:	491c      	ldr	r1, [pc, #112]	@ (8000c3c <linkTimer+0x14c>)
 8000bcc:	4613      	mov	r3, r2
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	4413      	add	r3, r2
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	440b      	add	r3, r1
 8000bd6:	3315      	adds	r3, #21
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000bdc:	7b3b      	ldrb	r3, [r7, #12]
 8000bde:	2b06      	cmp	r3, #6
 8000be0:	d00b      	beq.n	8000bfa <linkTimer+0x10a>
 8000be2:	7b3a      	ldrb	r2, [r7, #12]
 8000be4:	4915      	ldr	r1, [pc, #84]	@ (8000c3c <linkTimer+0x14c>)
 8000be6:	4613      	mov	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4413      	add	r3, r2
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	440b      	add	r3, r1
 8000bf0:	3308      	adds	r3, #8
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	68ba      	ldr	r2, [r7, #8]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d2dc      	bcs.n	8000bb4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000bfa:	7b7a      	ldrb	r2, [r7, #13]
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fecf 	bl	80009a4 <LinkTimerAfter>
 8000c06:	e00f      	b.n	8000c28 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000c08:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <linkTimer+0x144>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4611      	mov	r1, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff0c 	bl	8000a30 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <linkTimer+0x144>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <linkTimer+0x148>)
 8000c20:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000c22:	4a04      	ldr	r2, [pc, #16]	@ (8000c34 <linkTimer+0x144>)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000c28:	89fb      	ldrh	r3, [r7, #14]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000178 	.word	0x20000178
 8000c38:	20000179 	.word	0x20000179
 8000c3c:	200000e8 	.word	0x200000e8
 8000c40:	2000017c 	.word	0x2000017c

08000c44 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	460a      	mov	r2, r1
 8000c4e:	71fb      	strb	r3, [r7, #7]
 8000c50:	4613      	mov	r3, r2
 8000c52:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000c54:	4b39      	ldr	r3, [pc, #228]	@ (8000d3c <UnlinkTimer+0xf8>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	79fa      	ldrb	r2, [r7, #7]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d111      	bne.n	8000c84 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c60:	4b36      	ldr	r3, [pc, #216]	@ (8000d3c <UnlinkTimer+0xf8>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b36      	ldr	r3, [pc, #216]	@ (8000d40 <UnlinkTimer+0xfc>)
 8000c68:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000c6a:	79fa      	ldrb	r2, [r7, #7]
 8000c6c:	4935      	ldr	r1, [pc, #212]	@ (8000d44 <UnlinkTimer+0x100>)
 8000c6e:	4613      	mov	r3, r2
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	4413      	add	r3, r2
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	440b      	add	r3, r1
 8000c78:	3315      	adds	r3, #21
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d3c <UnlinkTimer+0xf8>)
 8000c80:	701a      	strb	r2, [r3, #0]
 8000c82:	e03e      	b.n	8000d02 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000c84:	79fa      	ldrb	r2, [r7, #7]
 8000c86:	492f      	ldr	r1, [pc, #188]	@ (8000d44 <UnlinkTimer+0x100>)
 8000c88:	4613      	mov	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	4413      	add	r3, r2
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	440b      	add	r3, r1
 8000c92:	3314      	adds	r3, #20
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000c98:	79fa      	ldrb	r2, [r7, #7]
 8000c9a:	492a      	ldr	r1, [pc, #168]	@ (8000d44 <UnlinkTimer+0x100>)
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4413      	add	r3, r2
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	440b      	add	r3, r1
 8000ca6:	3315      	adds	r3, #21
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000cac:	79f9      	ldrb	r1, [r7, #7]
 8000cae:	7bfa      	ldrb	r2, [r7, #15]
 8000cb0:	4824      	ldr	r0, [pc, #144]	@ (8000d44 <UnlinkTimer+0x100>)
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	440b      	add	r3, r1
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	4403      	add	r3, r0
 8000cbc:	3315      	adds	r3, #21
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2d8      	uxtb	r0, r3
 8000cc2:	4920      	ldr	r1, [pc, #128]	@ (8000d44 <UnlinkTimer+0x100>)
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4413      	add	r3, r2
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	440b      	add	r3, r1
 8000cce:	3315      	adds	r3, #21
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cd4:	7bbb      	ldrb	r3, [r7, #14]
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d013      	beq.n	8000d02 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000cda:	79f9      	ldrb	r1, [r7, #7]
 8000cdc:	7bba      	ldrb	r2, [r7, #14]
 8000cde:	4819      	ldr	r0, [pc, #100]	@ (8000d44 <UnlinkTimer+0x100>)
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	440b      	add	r3, r1
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	4403      	add	r3, r0
 8000cea:	3314      	adds	r3, #20
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b2d8      	uxtb	r0, r3
 8000cf0:	4914      	ldr	r1, [pc, #80]	@ (8000d44 <UnlinkTimer+0x100>)
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	4413      	add	r3, r2
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	440b      	add	r3, r1
 8000cfc:	3314      	adds	r3, #20
 8000cfe:	4602      	mov	r2, r0
 8000d00:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000d02:	79fa      	ldrb	r2, [r7, #7]
 8000d04:	490f      	ldr	r1, [pc, #60]	@ (8000d44 <UnlinkTimer+0x100>)
 8000d06:	4613      	mov	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	440b      	add	r3, r1
 8000d10:	330c      	adds	r3, #12
 8000d12:	2201      	movs	r2, #1
 8000d14:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <UnlinkTimer+0xf8>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b06      	cmp	r3, #6
 8000d1e:	d107      	bne.n	8000d30 <UnlinkTimer+0xec>
 8000d20:	79bb      	ldrb	r3, [r7, #6]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d104      	bne.n	8000d30 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <UnlinkTimer+0x104>)
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000d2e:	bf00      	nop
 8000d30:	bf00      	nop
}
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	20000178 	.word	0x20000178
 8000d40:	20000179 	.word	0x20000179
 8000d44:	200000e8 	.word	0x200000e8
 8000d48:	2000017c 	.word	0x2000017c

08000d4c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000d52:	4b1a      	ldr	r3, [pc, #104]	@ (8000dbc <ReturnTimeElapsed+0x70>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d5a:	d026      	beq.n	8000daa <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000d5c:	f7ff fe02 	bl	8000964 <ReadRtcSsrValue>
 8000d60:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000d62:	4b16      	ldr	r3, [pc, #88]	@ (8000dbc <ReturnTimeElapsed+0x70>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d805      	bhi.n	8000d78 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000d6c:	4b13      	ldr	r3, [pc, #76]	@ (8000dbc <ReturnTimeElapsed+0x70>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	e00a      	b.n	8000d8e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000d78:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <ReturnTimeElapsed+0x74>)
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000d84:	4b0d      	ldr	r3, [pc, #52]	@ (8000dbc <ReturnTimeElapsed+0x70>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc4 <ReturnTimeElapsed+0x78>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	fb02 f303 	mul.w	r3, r2, r3
 8000d9a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <ReturnTimeElapsed+0x7c>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	40d3      	lsrs	r3, r2
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	e001      	b.n	8000dae <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	b29b      	uxth	r3, r3
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	2000017c 	.word	0x2000017c
 8000dc0:	20000184 	.word	0x20000184
 8000dc4:	20000182 	.word	0x20000182
 8000dc8:	20000181 	.word	0x20000181

08000dcc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d108      	bne.n	8000dee <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ddc:	f7ff fdc2 	bl	8000964 <ReadRtcSsrValue>
 8000de0:	4603      	mov	r3, r0
 8000de2:	4a21      	ldr	r2, [pc, #132]	@ (8000e68 <RestartWakeupCounter+0x9c>)
 8000de4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000de6:	2003      	movs	r0, #3
 8000de8:	f001 fa9f 	bl	800232a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000dec:	e039      	b.n	8000e62 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d803      	bhi.n	8000dfc <RestartWakeupCounter+0x30>
 8000df4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e6c <RestartWakeupCounter+0xa0>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d002      	beq.n	8000e02 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000e02:	bf00      	nop
 8000e04:	4b1a      	ldr	r3, [pc, #104]	@ (8000e70 <RestartWakeupCounter+0xa4>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0f8      	beq.n	8000e04 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000e12:	4b17      	ldr	r3, [pc, #92]	@ (8000e70 <RestartWakeupCounter+0xa4>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <RestartWakeupCounter+0xa4>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000e22:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e24:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <RestartWakeupCounter+0xa8>)
 8000e26:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e2a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	f001 fa8a 	bl	8002346 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000e32:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <RestartWakeupCounter+0xac>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	0c1b      	lsrs	r3, r3, #16
 8000e38:	041b      	lsls	r3, r3, #16
 8000e3a:	88fa      	ldrh	r2, [r7, #6]
 8000e3c:	490e      	ldr	r1, [pc, #56]	@ (8000e78 <RestartWakeupCounter+0xac>)
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e42:	f7ff fd8f 	bl	8000964 <ReadRtcSsrValue>
 8000e46:	4603      	mov	r3, r0
 8000e48:	4a07      	ldr	r2, [pc, #28]	@ (8000e68 <RestartWakeupCounter+0x9c>)
 8000e4a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000e4c:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <RestartWakeupCounter+0xa4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	4b07      	ldr	r3, [pc, #28]	@ (8000e70 <RestartWakeupCounter+0xa4>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e5a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000e5c:	f3af 8000 	nop.w
  return ;
 8000e60:	bf00      	nop
}
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	2000017c 	.word	0x2000017c
 8000e6c:	20000181 	.word	0x20000181
 8000e70:	20000258 	.word	0x20000258
 8000e74:	58000800 	.word	0x58000800
 8000e78:	40002800 	.word	0x40002800

08000e7c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000e82:	4b45      	ldr	r3, [pc, #276]	@ (8000f98 <RescheduleTimerList+0x11c>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e8e:	d107      	bne.n	8000ea0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000e90:	bf00      	nop
 8000e92:	4b42      	ldr	r3, [pc, #264]	@ (8000f9c <RescheduleTimerList+0x120>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1f8      	bne.n	8000e92 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000ea0:	4b3e      	ldr	r3, [pc, #248]	@ (8000f9c <RescheduleTimerList+0x120>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	4b3d      	ldr	r3, [pc, #244]	@ (8000f9c <RescheduleTimerList+0x120>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000eae:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000eb0:	4b3b      	ldr	r3, [pc, #236]	@ (8000fa0 <RescheduleTimerList+0x124>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000eb6:	7bfa      	ldrb	r2, [r7, #15]
 8000eb8:	493a      	ldr	r1, [pc, #232]	@ (8000fa4 <RescheduleTimerList+0x128>)
 8000eba:	4613      	mov	r3, r2
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	4413      	add	r3, r2
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	440b      	add	r3, r1
 8000ec4:	3308      	adds	r3, #8
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000eca:	f7ff ff3f 	bl	8000d4c <ReturnTimeElapsed>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d205      	bcs.n	8000ee6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ede:	4b32      	ldr	r3, [pc, #200]	@ (8000fa8 <RescheduleTimerList+0x12c>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	e04d      	b.n	8000f82 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	4a30      	ldr	r2, [pc, #192]	@ (8000fac <RescheduleTimerList+0x130>)
 8000eea:	8812      	ldrh	r2, [r2, #0]
 8000eec:	b292      	uxth	r2, r2
 8000eee:	4413      	add	r3, r2
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d906      	bls.n	8000f06 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8000fac <RescheduleTimerList+0x130>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000efe:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa8 <RescheduleTimerList+0x12c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
 8000f04:	e03d      	b.n	8000f82 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f10:	4b25      	ldr	r3, [pc, #148]	@ (8000fa8 <RescheduleTimerList+0x12c>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f16:	e034      	b.n	8000f82 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000f18:	7bfa      	ldrb	r2, [r7, #15]
 8000f1a:	4922      	ldr	r1, [pc, #136]	@ (8000fa4 <RescheduleTimerList+0x128>)
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4413      	add	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	440b      	add	r3, r1
 8000f26:	3308      	adds	r3, #8
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d20a      	bcs.n	8000f46 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000f30:	7bfa      	ldrb	r2, [r7, #15]
 8000f32:	491c      	ldr	r1, [pc, #112]	@ (8000fa4 <RescheduleTimerList+0x128>)
 8000f34:	4613      	mov	r3, r2
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4413      	add	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	440b      	add	r3, r1
 8000f3e:	3308      	adds	r3, #8
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	e013      	b.n	8000f6e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000f46:	7bfa      	ldrb	r2, [r7, #15]
 8000f48:	4916      	ldr	r1, [pc, #88]	@ (8000fa4 <RescheduleTimerList+0x128>)
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4413      	add	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	440b      	add	r3, r1
 8000f54:	3308      	adds	r3, #8
 8000f56:	6819      	ldr	r1, [r3, #0]
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	1ac9      	subs	r1, r1, r3
 8000f5e:	4811      	ldr	r0, [pc, #68]	@ (8000fa4 <RescheduleTimerList+0x128>)
 8000f60:	4613      	mov	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	4403      	add	r3, r0
 8000f6a:	3308      	adds	r3, #8
 8000f6c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000f6e:	7bfa      	ldrb	r2, [r7, #15]
 8000f70:	490c      	ldr	r1, [pc, #48]	@ (8000fa4 <RescheduleTimerList+0x128>)
 8000f72:	4613      	mov	r3, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4413      	add	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	440b      	add	r3, r1
 8000f7c:	3315      	adds	r3, #21
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	2b06      	cmp	r3, #6
 8000f86:	d1c7      	bne.n	8000f18 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000f88:	89bb      	ldrh	r3, [r7, #12]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff1e 	bl	8000dcc <RestartWakeupCounter>

  return ;
 8000f90:	bf00      	nop
}
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40002800 	.word	0x40002800
 8000f9c:	20000258 	.word	0x20000258
 8000fa0:	20000178 	.word	0x20000178
 8000fa4:	200000e8 	.word	0x200000e8
 8000fa8:	20000180 	.word	0x20000180
 8000fac:	20000186 	.word	0x20000186

08000fb0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	@ 0x28
 8000fb4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8000fba:	617b      	str	r3, [r7, #20]
  return(result);
 8000fbc:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc0:	b672      	cpsid	i
}
 8000fc2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000fc4:	4b59      	ldr	r3, [pc, #356]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	22ca      	movs	r2, #202	@ 0xca
 8000fca:	625a      	str	r2, [r3, #36]	@ 0x24
 8000fcc:	4b57      	ldr	r3, [pc, #348]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2253      	movs	r2, #83	@ 0x53
 8000fd2:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000fd4:	4b55      	ldr	r3, [pc, #340]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	689a      	ldr	r2, [r3, #8]
 8000fda:	4b54      	ldr	r3, [pc, #336]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000fe2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000fe4:	4b52      	ldr	r3, [pc, #328]	@ (8001130 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000fec:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000ff0:	4950      	ldr	r1, [pc, #320]	@ (8001134 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	440b      	add	r3, r1
 8000ffc:	330c      	adds	r3, #12
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d16e      	bne.n	80010e4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001006:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800100a:	494a      	ldr	r1, [pc, #296]	@ (8001134 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800101a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800101e:	4945      	ldr	r1, [pc, #276]	@ (8001134 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001020:	4613      	mov	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	440b      	add	r3, r1
 800102a:	3310      	adds	r3, #16
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001030:	4b41      	ldr	r3, [pc, #260]	@ (8001138 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d04c      	beq.n	80010d4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800103a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800103e:	493d      	ldr	r1, [pc, #244]	@ (8001134 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	440b      	add	r3, r1
 800104a:	330d      	adds	r3, #13
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b01      	cmp	r3, #1
 8001052:	d124      	bne.n	800109e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001054:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001058:	2101      	movs	r1, #1
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fdf2 	bl	8000c44 <UnlinkTimer>
 8001060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001062:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	f383 8810 	msr	PRIMASK, r3
}
 800106a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800106c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001070:	4930      	ldr	r1, [pc, #192]	@ (8001134 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001072:	4613      	mov	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4413      	add	r3, r2
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	440b      	add	r3, r1
 800107c:	3304      	adds	r3, #4
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f9b8 	bl	80013fc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800108c:	4b27      	ldr	r3, [pc, #156]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	22ca      	movs	r2, #202	@ 0xca
 8001092:	625a      	str	r2, [r3, #36]	@ 0x24
 8001094:	4b25      	ldr	r3, [pc, #148]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2253      	movs	r2, #83	@ 0x53
 800109a:	625a      	str	r2, [r3, #36]	@ 0x24
 800109c:	e012      	b.n	80010c4 <HW_TS_RTC_Wakeup_Handler+0x114>
 800109e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f383 8810 	msr	PRIMASK, r3
}
 80010a8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80010aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f920 	bl	80012f4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80010b4:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	22ca      	movs	r2, #202	@ 0xca
 80010ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80010bc:	4b1b      	ldr	r3, [pc, #108]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2253      	movs	r2, #83	@ 0x53
 80010c2:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80010c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80010c8:	69fa      	ldr	r2, [r7, #28]
 80010ca:	4619      	mov	r1, r3
 80010cc:	69b8      	ldr	r0, [r7, #24]
 80010ce:	f000 fa1b 	bl	8001508 <HW_TS_RTC_Int_AppNot>
 80010d2:	e022      	b.n	800111a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80010d4:	f7ff fed2 	bl	8000e7c <RescheduleTimerList>
 80010d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010da:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	f383 8810 	msr	PRIMASK, r3
}
 80010e2:	e01a      	b.n	800111a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80010e4:	bf00      	nop
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0f8      	beq.n	80010e6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80010f4:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001104:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001106:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001108:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001110:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f383 8810 	msr	PRIMASK, r3
}
 8001118:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800111a:	4b04      	ldr	r3, [pc, #16]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	22ff      	movs	r2, #255	@ 0xff
 8001120:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001122:	bf00      	nop
}
 8001124:	3728      	adds	r7, #40	@ 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000258 	.word	0x20000258
 8001130:	20000178 	.word	0x20000178
 8001134:	200000e8 	.word	0x200000e8
 8001138:	20000180 	.word	0x20000180
 800113c:	58000800 	.word	0x58000800

08001140 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800114c:	4b5e      	ldr	r3, [pc, #376]	@ (80012c8 <HW_TS_Init+0x188>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	22ca      	movs	r2, #202	@ 0xca
 8001152:	625a      	str	r2, [r3, #36]	@ 0x24
 8001154:	4b5c      	ldr	r3, [pc, #368]	@ (80012c8 <HW_TS_Init+0x188>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2253      	movs	r2, #83	@ 0x53
 800115a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800115c:	4b5b      	ldr	r3, [pc, #364]	@ (80012cc <HW_TS_Init+0x18c>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	4a5a      	ldr	r2, [pc, #360]	@ (80012cc <HW_TS_Init+0x18c>)
 8001162:	f043 0320 	orr.w	r3, r3, #32
 8001166:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001168:	4b58      	ldr	r3, [pc, #352]	@ (80012cc <HW_TS_Init+0x18c>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	b2db      	uxtb	r3, r3
 8001174:	f1c3 0304 	rsb	r3, r3, #4
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b55      	ldr	r3, [pc, #340]	@ (80012d0 <HW_TS_Init+0x190>)
 800117c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800117e:	4b53      	ldr	r3, [pc, #332]	@ (80012cc <HW_TS_Init+0x18c>)
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001186:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800118a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	fa92 f2a2 	rbit	r2, r2
 8001192:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	2a00      	cmp	r2, #0
 800119c:	d101      	bne.n	80011a2 <HW_TS_Init+0x62>
  {
    return 32U;
 800119e:	2220      	movs	r2, #32
 80011a0:	e003      	b.n	80011aa <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	fab2 f282 	clz	r2, r2
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	40d3      	lsrs	r3, r2
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	3301      	adds	r3, #1
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b48      	ldr	r3, [pc, #288]	@ (80012d4 <HW_TS_Init+0x194>)
 80011b4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80011b6:	4b45      	ldr	r3, [pc, #276]	@ (80012cc <HW_TS_Init+0x18c>)
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	3301      	adds	r3, #1
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b44      	ldr	r3, [pc, #272]	@ (80012d8 <HW_TS_Init+0x198>)
 80011c8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80011ca:	4b43      	ldr	r3, [pc, #268]	@ (80012d8 <HW_TS_Init+0x198>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	4a40      	ldr	r2, [pc, #256]	@ (80012d4 <HW_TS_Init+0x194>)
 80011d2:	7812      	ldrb	r2, [r2, #0]
 80011d4:	fb02 f303 	mul.w	r3, r2, r3
 80011d8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80011dc:	4a3c      	ldr	r2, [pc, #240]	@ (80012d0 <HW_TS_Init+0x190>)
 80011de:	7812      	ldrb	r2, [r2, #0]
 80011e0:	40d3      	lsrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d904      	bls.n	80011f8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80011ee:	4b3b      	ldr	r3, [pc, #236]	@ (80012dc <HW_TS_Init+0x19c>)
 80011f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011f4:	801a      	strh	r2, [r3, #0]
 80011f6:	e003      	b.n	8001200 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b37      	ldr	r3, [pc, #220]	@ (80012dc <HW_TS_Init+0x19c>)
 80011fe:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001200:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001204:	f7ff fb9c 	bl	8000940 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001208:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800120c:	f7ff fb84 	bl	8000918 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d13d      	bne.n	8001292 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001216:	4b32      	ldr	r3, [pc, #200]	@ (80012e0 <HW_TS_Init+0x1a0>)
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800121c:	4b31      	ldr	r3, [pc, #196]	@ (80012e4 <HW_TS_Init+0x1a4>)
 800121e:	f04f 32ff 	mov.w	r2, #4294967295
 8001222:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001224:	2300      	movs	r3, #0
 8001226:	77fb      	strb	r3, [r7, #31]
 8001228:	e00c      	b.n	8001244 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800122a:	7ffa      	ldrb	r2, [r7, #31]
 800122c:	492e      	ldr	r1, [pc, #184]	@ (80012e8 <HW_TS_Init+0x1a8>)
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	440b      	add	r3, r1
 8001238:	330c      	adds	r3, #12
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800123e:	7ffb      	ldrb	r3, [r7, #31]
 8001240:	3301      	adds	r3, #1
 8001242:	77fb      	strb	r3, [r7, #31]
 8001244:	7ffb      	ldrb	r3, [r7, #31]
 8001246:	2b05      	cmp	r3, #5
 8001248:	d9ef      	bls.n	800122a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800124a:	4b28      	ldr	r3, [pc, #160]	@ (80012ec <HW_TS_Init+0x1ac>)
 800124c:	2206      	movs	r2, #6
 800124e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001250:	4b1d      	ldr	r3, [pc, #116]	@ (80012c8 <HW_TS_Init+0x188>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	4b1c      	ldr	r3, [pc, #112]	@ (80012c8 <HW_TS_Init+0x188>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800125e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001260:	4b19      	ldr	r3, [pc, #100]	@ (80012c8 <HW_TS_Init+0x188>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b17      	ldr	r3, [pc, #92]	@ (80012c8 <HW_TS_Init+0x188>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001270:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001272:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <HW_TS_Init+0x1b0>)
 8001274:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001278:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800127a:	2003      	movs	r0, #3
 800127c:	f001 f863 	bl	8002346 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <HW_TS_Init+0x188>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <HW_TS_Init+0x188>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	e009      	b.n	80012a6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001292:	4b0d      	ldr	r3, [pc, #52]	@ (80012c8 <HW_TS_Init+0x188>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800129c:	2b00      	cmp	r3, #0
 800129e:	d002      	beq.n	80012a6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80012a0:	2003      	movs	r0, #3
 80012a2:	f001 f842 	bl	800232a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80012a6:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <HW_TS_Init+0x188>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	22ff      	movs	r2, #255	@ 0xff
 80012ac:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80012ae:	2200      	movs	r2, #0
 80012b0:	2103      	movs	r1, #3
 80012b2:	2003      	movs	r0, #3
 80012b4:	f000 fff7 	bl	80022a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012b8:	2003      	movs	r0, #3
 80012ba:	f001 f80e 	bl	80022da <HAL_NVIC_EnableIRQ>

  return;
 80012be:	bf00      	nop
}
 80012c0:	3720      	adds	r7, #32
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000258 	.word	0x20000258
 80012cc:	40002800 	.word	0x40002800
 80012d0:	20000181 	.word	0x20000181
 80012d4:	20000182 	.word	0x20000182
 80012d8:	20000184 	.word	0x20000184
 80012dc:	20000186 	.word	0x20000186
 80012e0:	20000180 	.word	0x20000180
 80012e4:	2000017c 	.word	0x2000017c
 80012e8:	200000e8 	.word	0x200000e8
 80012ec:	20000178 	.word	0x20000178
 80012f0:	58000800 	.word	0x58000800

080012f4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012fe:	f3ef 8310 	mrs	r3, PRIMASK
 8001302:	60fb      	str	r3, [r7, #12]
  return(result);
 8001304:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001306:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800130c:	2003      	movs	r0, #3
 800130e:	f000 fff2 	bl	80022f6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001312:	4b34      	ldr	r3, [pc, #208]	@ (80013e4 <HW_TS_Stop+0xf0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	22ca      	movs	r2, #202	@ 0xca
 8001318:	625a      	str	r2, [r3, #36]	@ 0x24
 800131a:	4b32      	ldr	r3, [pc, #200]	@ (80013e4 <HW_TS_Stop+0xf0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2253      	movs	r2, #83	@ 0x53
 8001320:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001322:	79fa      	ldrb	r2, [r7, #7]
 8001324:	4930      	ldr	r1, [pc, #192]	@ (80013e8 <HW_TS_Stop+0xf4>)
 8001326:	4613      	mov	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	440b      	add	r3, r1
 8001330:	330c      	adds	r3, #12
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d142      	bne.n	80013c0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fc80 	bl	8000c44 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001344:	4b29      	ldr	r3, [pc, #164]	@ (80013ec <HW_TS_Stop+0xf8>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800134a:	7cfb      	ldrb	r3, [r7, #19]
 800134c:	2b06      	cmp	r3, #6
 800134e:	d12f      	bne.n	80013b0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001350:	4b27      	ldr	r3, [pc, #156]	@ (80013f0 <HW_TS_Stop+0xfc>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800135c:	d107      	bne.n	800136e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800135e:	bf00      	nop
 8001360:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <HW_TS_Stop+0xf0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f8      	bne.n	8001360 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800136e:	4b1d      	ldr	r3, [pc, #116]	@ (80013e4 <HW_TS_Stop+0xf0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <HW_TS_Stop+0xf0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800137c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800137e:	bf00      	nop
 8001380:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <HW_TS_Stop+0xf0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f8      	beq.n	8001380 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <HW_TS_Stop+0xf0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b13      	ldr	r3, [pc, #76]	@ (80013e4 <HW_TS_Stop+0xf0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800139e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80013a0:	4b14      	ldr	r3, [pc, #80]	@ (80013f4 <HW_TS_Stop+0x100>)
 80013a2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80013a6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 ffcc 	bl	8002346 <HAL_NVIC_ClearPendingIRQ>
 80013ae:	e007      	b.n	80013c0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80013b0:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <HW_TS_Stop+0x104>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	7cfa      	ldrb	r2, [r7, #19]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d001      	beq.n	80013c0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80013bc:	f7ff fd5e 	bl	8000e7c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80013c0:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <HW_TS_Stop+0xf0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	22ff      	movs	r2, #255	@ 0xff
 80013c6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013c8:	2003      	movs	r0, #3
 80013ca:	f000 ff86 	bl	80022da <HAL_NVIC_EnableIRQ>
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	f383 8810 	msr	PRIMASK, r3
}
 80013d8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80013da:	bf00      	nop
}
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000258 	.word	0x20000258
 80013e8:	200000e8 	.word	0x200000e8
 80013ec:	20000178 	.word	0x20000178
 80013f0:	40002800 	.word	0x40002800
 80013f4:	58000800 	.word	0x58000800
 80013f8:	20000179 	.word	0x20000179

080013fc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	6039      	str	r1, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001408:	79fa      	ldrb	r2, [r7, #7]
 800140a:	493b      	ldr	r1, [pc, #236]	@ (80014f8 <HW_TS_Start+0xfc>)
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	440b      	add	r3, r1
 8001416:	330c      	adds	r3, #12
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d103      	bne.n	8001428 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff66 	bl	80012f4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001428:	f3ef 8310 	mrs	r3, PRIMASK
 800142c:	60fb      	str	r3, [r7, #12]
  return(result);
 800142e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001430:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001432:	b672      	cpsid	i
}
 8001434:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001436:	2003      	movs	r0, #3
 8001438:	f000 ff5d 	bl	80022f6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800143c:	4b2f      	ldr	r3, [pc, #188]	@ (80014fc <HW_TS_Start+0x100>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	22ca      	movs	r2, #202	@ 0xca
 8001442:	625a      	str	r2, [r3, #36]	@ 0x24
 8001444:	4b2d      	ldr	r3, [pc, #180]	@ (80014fc <HW_TS_Start+0x100>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2253      	movs	r2, #83	@ 0x53
 800144a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800144c:	79fa      	ldrb	r2, [r7, #7]
 800144e:	492a      	ldr	r1, [pc, #168]	@ (80014f8 <HW_TS_Start+0xfc>)
 8001450:	4613      	mov	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4413      	add	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	440b      	add	r3, r1
 800145a:	330c      	adds	r3, #12
 800145c:	2202      	movs	r2, #2
 800145e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001460:	79fa      	ldrb	r2, [r7, #7]
 8001462:	4925      	ldr	r1, [pc, #148]	@ (80014f8 <HW_TS_Start+0xfc>)
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	3308      	adds	r3, #8
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001474:	79fa      	ldrb	r2, [r7, #7]
 8001476:	4920      	ldr	r1, [pc, #128]	@ (80014f8 <HW_TS_Start+0xfc>)
 8001478:	4613      	mov	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	440b      	add	r3, r1
 8001482:	3304      	adds	r3, #4
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fb30 	bl	8000af0 <linkTimer>
 8001490:	4603      	mov	r3, r0
 8001492:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001494:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <HW_TS_Start+0x104>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800149a:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <HW_TS_Start+0x108>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	7c7a      	ldrb	r2, [r7, #17]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d002      	beq.n	80014ac <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80014a6:	f7ff fce9 	bl	8000e7c <RescheduleTimerList>
 80014aa:	e013      	b.n	80014d4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80014ac:	79fa      	ldrb	r2, [r7, #7]
 80014ae:	4912      	ldr	r1, [pc, #72]	@ (80014f8 <HW_TS_Start+0xfc>)
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	440b      	add	r3, r1
 80014ba:	3308      	adds	r3, #8
 80014bc:	6819      	ldr	r1, [r3, #0]
 80014be:	8a7b      	ldrh	r3, [r7, #18]
 80014c0:	79fa      	ldrb	r2, [r7, #7]
 80014c2:	1ac9      	subs	r1, r1, r3
 80014c4:	480c      	ldr	r0, [pc, #48]	@ (80014f8 <HW_TS_Start+0xfc>)
 80014c6:	4613      	mov	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	4413      	add	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	4403      	add	r3, r0
 80014d0:	3308      	adds	r3, #8
 80014d2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80014d4:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <HW_TS_Start+0x100>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	22ff      	movs	r2, #255	@ 0xff
 80014da:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80014dc:	2003      	movs	r0, #3
 80014de:	f000 fefc 	bl	80022da <HAL_NVIC_EnableIRQ>
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	f383 8810 	msr	PRIMASK, r3
}
 80014ec:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80014ee:	bf00      	nop
}
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200000e8 	.word	0x200000e8
 80014fc:	20000258 	.word	0x20000258
 8001500:	20000178 	.word	0x20000178
 8001504:	20000179 	.word	0x20000179

08001508 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	460b      	mov	r3, r1
 8001512:	607a      	str	r2, [r7, #4]
 8001514:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4798      	blx	r3

  return;
 800151a:	bf00      	nop
}
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <LL_RCC_LSE_SetDriveCapability>:
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800152a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800152e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001532:	f023 0218 	bic.w	r2, r3, #24
 8001536:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4313      	orrs	r3, r2
 800153e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800154e:	b480      	push	{r7}
 8001550:	b085      	sub	sp, #20
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001556:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800155a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800155c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4313      	orrs	r3, r2
 8001564:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800156a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4013      	ands	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001572:	68fb      	ldr	r3, [r7, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001584:	f000 fcce 	bl	8001f24 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001588:	f7ff f85a 	bl	8000640 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800158c:	f000 f818 	bl	80015c0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001590:	f000 f888 	bl	80016a4 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001594:	f000 f8a6 	bl	80016e4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001598:	f000 f940 	bl	800181c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800159c:	f000 f8b6 	bl	800170c <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80015a0:	f000 f908 	bl	80017b4 <MX_RTC_Init>
  MX_RF_Init();
 80015a4:	f000 f8fe 	bl	80017a4 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  data_handler_Init();
 80015a8:	f008 fc6a 	bl	8009e80 <data_handler_Init>
  uart_handler_Init(&hlpuart1);
 80015ac:	4803      	ldr	r0, [pc, #12]	@ (80015bc <main+0x3c>)
 80015ae:	f000 fc15 	bl	8001ddc <uart_handler_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80015b2:	f7ff f853 	bl	800065c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80015b6:	f7ff f97e 	bl	80008b6 <MX_APPE_Process>
 80015ba:	e7fc      	b.n	80015b6 <main+0x36>
 80015bc:	200001c4 	.word	0x200001c4

080015c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b09a      	sub	sp, #104	@ 0x68
 80015c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c6:	f107 0320 	add.w	r3, r7, #32
 80015ca:	2248      	movs	r2, #72	@ 0x48
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f009 fa56 	bl	800aa80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	611a      	str	r2, [r3, #16]
 80015e2:	615a      	str	r2, [r3, #20]
 80015e4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015e6:	f001 f995 	bl	8002914 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80015ea:	2010      	movs	r0, #16
 80015ec:	f7ff ff99 	bl	8001522 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f0:	4b2b      	ldr	r3, [pc, #172]	@ (80016a0 <SystemClock_Config+0xe0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015f8:	4a29      	ldr	r2, [pc, #164]	@ (80016a0 <SystemClock_Config+0xe0>)
 80015fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <SystemClock_Config+0xe0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800160c:	2327      	movs	r3, #39	@ 0x27
 800160e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001610:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001616:	2301      	movs	r3, #1
 8001618:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800161a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800161e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001620:	2301      	movs	r3, #1
 8001622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001624:	2340      	movs	r3, #64	@ 0x40
 8001626:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001628:	2300      	movs	r3, #0
 800162a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800162c:	2360      	movs	r3, #96	@ 0x60
 800162e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001630:	2302      	movs	r3, #2
 8001632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001634:	2301      	movs	r3, #1
 8001636:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001638:	2300      	movs	r3, #0
 800163a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 48;
 800163c:	2330      	movs	r3, #48	@ 0x30
 800163e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001640:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001644:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8001646:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800164a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800164c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001650:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001652:	f107 0320 	add.w	r3, r7, #32
 8001656:	4618      	mov	r0, r3
 8001658:	f001 fcf0 	bl	800303c <HAL_RCC_OscConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001662:	f000 f8e2 	bl	800182a <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001666:	236f      	movs	r3, #111	@ 0x6f
 8001668:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800166a:	2303      	movs	r3, #3
 800166c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800167a:	2380      	movs	r3, #128	@ 0x80
 800167c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	2103      	movs	r1, #3
 8001686:	4618      	mov	r0, r3
 8001688:	f002 f84c 	bl	8003724 <HAL_RCC_ClockConfig>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001692:	f000 f8ca 	bl	800182a <Error_Handler>
  }
}
 8001696:	bf00      	nop
 8001698:	3768      	adds	r7, #104	@ 0x68
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	58000400 	.word	0x58000400

080016a4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b094      	sub	sp, #80	@ 0x50
 80016a8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016aa:	463b      	mov	r3, r7
 80016ac:	2250      	movs	r2, #80	@ 0x50
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f009 f9e5 	bl	800aa80 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80016b6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80016ba:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80016bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016c0:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80016c2:	2300      	movs	r3, #0
 80016c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80016c6:	2310      	movs	r3, #16
 80016c8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ca:	463b      	mov	r3, r7
 80016cc:	4618      	mov	r0, r3
 80016ce:	f002 fc66 	bl	8003f9e <HAL_RCCEx_PeriphCLKConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80016d8:	f000 f8a7 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80016dc:	bf00      	nop
 80016de:	3750      	adds	r7, #80	@ 0x50
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <MX_IPCC_Init+0x20>)
 80016ea:	4a07      	ldr	r2, [pc, #28]	@ (8001708 <MX_IPCC_Init+0x24>)
 80016ec:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	@ (8001704 <MX_IPCC_Init+0x20>)
 80016f0:	f001 f88a 	bl	8002808 <HAL_IPCC_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80016fa:	f000 f896 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000188 	.word	0x20000188
 8001708:	58000c00 	.word	0x58000c00

0800170c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001710:	4b22      	ldr	r3, [pc, #136]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 8001712:	4a23      	ldr	r2, [pc, #140]	@ (80017a0 <MX_LPUART1_UART_Init+0x94>)
 8001714:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001716:	4b21      	ldr	r3, [pc, #132]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 8001718:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800171c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b1f      	ldr	r3, [pc, #124]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800172a:	4b1c      	ldr	r3, [pc, #112]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b1a      	ldr	r3, [pc, #104]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b19      	ldr	r3, [pc, #100]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800173c:	4b17      	ldr	r3, [pc, #92]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 800173e:	2200      	movs	r2, #0
 8001740:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001742:	4b16      	ldr	r3, [pc, #88]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001748:	4b14      	ldr	r3, [pc, #80]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 800174a:	2200      	movs	r2, #0
 800174c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800174e:	4b13      	ldr	r3, [pc, #76]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001754:	4811      	ldr	r0, [pc, #68]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 8001756:	f003 f8a3 	bl	80048a0 <HAL_UART_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001760:	f000 f863 	bl	800182a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001764:	2100      	movs	r1, #0
 8001766:	480d      	ldr	r0, [pc, #52]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 8001768:	f004 fff7 	bl	800675a <HAL_UARTEx_SetTxFifoThreshold>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001772:	f000 f85a 	bl	800182a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001776:	2100      	movs	r1, #0
 8001778:	4808      	ldr	r0, [pc, #32]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 800177a:	f005 f82c 	bl	80067d6 <HAL_UARTEx_SetRxFifoThreshold>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001784:	f000 f851 	bl	800182a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001788:	4804      	ldr	r0, [pc, #16]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 800178a:	f004 ffad 	bl	80066e8 <HAL_UARTEx_DisableFifoMode>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001794:	f000 f849 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200001c4 	.word	0x200001c4
 80017a0:	40008000 	.word	0x40008000

080017a4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017b8:	4b16      	ldr	r3, [pc, #88]	@ (8001814 <MX_RTC_Init+0x60>)
 80017ba:	4a17      	ldr	r2, [pc, #92]	@ (8001818 <MX_RTC_Init+0x64>)
 80017bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017be:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <MX_RTC_Init+0x60>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80017c4:	4b13      	ldr	r3, [pc, #76]	@ (8001814 <MX_RTC_Init+0x60>)
 80017c6:	220f      	movs	r2, #15
 80017c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80017ca:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <MX_RTC_Init+0x60>)
 80017cc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80017d0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017d2:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <MX_RTC_Init+0x60>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <MX_RTC_Init+0x60>)
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017de:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <MX_RTC_Init+0x60>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <MX_RTC_Init+0x60>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017ea:	480a      	ldr	r0, [pc, #40]	@ (8001814 <MX_RTC_Init+0x60>)
 80017ec:	f002 fe5e 	bl	80044ac <HAL_RTC_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80017f6:	f000 f818 	bl	800182a <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80017fa:	2200      	movs	r2, #0
 80017fc:	2100      	movs	r1, #0
 80017fe:	4805      	ldr	r0, [pc, #20]	@ (8001814 <MX_RTC_Init+0x60>)
 8001800:	f002 ff62 	bl	80046c8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800180a:	f000 f80e 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000258 	.word	0x20000258
 8001818:	40002800 	.word	0x40002800

0800181c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	2001      	movs	r0, #1
 8001822:	f7ff fe94 	bl	800154e <LL_AHB2_GRP1_EnableClock>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}

0800182a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800182e:	b672      	cpsid	i
}
 8001830:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001832:	bf00      	nop
 8001834:	e7fd      	b.n	8001832 <Error_Handler+0x8>

08001836 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800183a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800183e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001842:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001846:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800184a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_AHB2_GRP1_EnableClock>:
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001864:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001866:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4313      	orrs	r3, r2
 800186e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001874:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4013      	ands	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800187c:	68fb      	ldr	r3, [r7, #12]
}
 800187e:	bf00      	nop
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800188a:	b480      	push	{r7}
 800188c:	b085      	sub	sp, #20
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001896:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001898:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4313      	orrs	r3, r2
 80018a0:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80018a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4013      	ands	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80018c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80018ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80018d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4013      	ands	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018e0:	68fb      	ldr	r3, [r7, #12]
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b085      	sub	sp, #20
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80018f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4313      	orrs	r3, r2
 8001904:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800190a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4013      	ands	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001912:	68fb      	ldr	r3, [r7, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001924:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001928:	f7ff ffaf 	bl	800188a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	2100      	movs	r1, #0
 8001930:	2005      	movs	r0, #5
 8001932:	f000 fcb8 	bl	80022a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001936:	2005      	movs	r0, #5
 8001938:	f000 fccf 	bl	80022da <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800193c:	2200      	movs	r2, #0
 800193e:	2100      	movs	r1, #0
 8001940:	202e      	movs	r0, #46	@ 0x2e
 8001942:	f000 fcb0 	bl	80022a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001946:	202e      	movs	r0, #46	@ 0x2e
 8001948:	f000 fcc7 	bl	80022da <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_IPCC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hipcc: IPCC handle pointer
  * @retval None
  */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0d      	ldr	r2, [pc, #52]	@ (8001994 <HAL_IPCC_MspInit+0x44>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d113      	bne.n	800198a <HAL_IPCC_MspInit+0x3a>
  {
    /* USER CODE BEGIN IPCC_MspInit 0 */

    /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001962:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001966:	f7ff ff90 	bl	800188a <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	202c      	movs	r0, #44	@ 0x2c
 8001970:	f000 fc99 	bl	80022a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001974:	202c      	movs	r0, #44	@ 0x2c
 8001976:	f000 fcb0 	bl	80022da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	202d      	movs	r0, #45	@ 0x2d
 8001980:	f000 fc91 	bl	80022a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001984:	202d      	movs	r0, #45	@ 0x2d
 8001986:	f000 fca8 	bl	80022da <HAL_NVIC_EnableIRQ>

    /* USER CODE END IPCC_MspInit 1 */

  }

}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	58000c00 	.word	0x58000c00

08001998 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b09c      	sub	sp, #112	@ 0x70
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019b0:	f107 030c 	add.w	r3, r7, #12
 80019b4:	2250      	movs	r2, #80	@ 0x50
 80019b6:	2100      	movs	r1, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f009 f861 	bl	800aa80 <memset>
  if(huart->Instance==LPUART1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a1a      	ldr	r2, [pc, #104]	@ (8001a2c <HAL_UART_MspInit+0x94>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d12c      	bne.n	8001a22 <HAL_UART_MspInit+0x8a>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80019c8:	2302      	movs	r3, #2
 80019ca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	4618      	mov	r0, r3
 80019d6:	f002 fae2 	bl	8003f9e <HAL_RCCEx_PeriphCLKConfig>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019e0:	f7ff ff23 	bl	800182a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80019e4:	2001      	movs	r0, #1
 80019e6:	f7ff ff82 	bl	80018ee <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	2001      	movs	r0, #1
 80019ec:	f7ff ff34 	bl	8001858 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = TX_pin_Pin|RX_pin_Pin;
 80019f0:	230c      	movs	r3, #12
 80019f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a00:	2308      	movs	r3, #8
 8001a02:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a04:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a0e:	f000 fd67 	bl	80024e0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	2025      	movs	r0, #37	@ 0x25
 8001a18:	f000 fc45 	bl	80022a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001a1c:	2025      	movs	r0, #37	@ 0x25
 8001a1e:	f000 fc5c 	bl	80022da <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001a22:	bf00      	nop
 8001a24:	3770      	adds	r7, #112	@ 0x70
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40008000 	.word	0x40008000

08001a30 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b096      	sub	sp, #88	@ 0x58
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a38:	f107 0308 	add.w	r3, r7, #8
 8001a3c:	2250      	movs	r2, #80	@ 0x50
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f009 f81d 	bl	800aa80 <memset>
  if(hrtc->Instance==RTC)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a12      	ldr	r2, [pc, #72]	@ (8001a94 <HAL_RTC_MspInit+0x64>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d11d      	bne.n	8001a8c <HAL_RTC_MspInit+0x5c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a50:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a54:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a5c:	f107 0308 	add.w	r3, r7, #8
 8001a60:	4618      	mov	r0, r3
 8001a62:	f002 fa9c 	bl	8003f9e <HAL_RCCEx_PeriphCLKConfig>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001a6c:	f7ff fedd 	bl	800182a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a70:	f7ff fee1 	bl	8001836 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001a74:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001a78:	f7ff ff20 	bl	80018bc <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2003      	movs	r0, #3
 8001a82:	f000 fc10 	bl	80022a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001a86:	2003      	movs	r0, #3
 8001a88:	f000 fc27 	bl	80022da <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001a8c:	bf00      	nop
 8001a8e:	3758      	adds	r7, #88	@ 0x58
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40002800 	.word	0x40002800

08001a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <NMI_Handler+0x4>

08001aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <HardFault_Handler+0x4>

08001aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <MemManage_Handler+0x4>

08001ab0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <BusFault_Handler+0x4>

08001ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <UsageFault_Handler+0x4>

08001ac0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aee:	f000 fa73 	bl	8001fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001afa:	f7ff fa59 	bl	8000fb0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001b14:	4802      	ldr	r0, [pc, #8]	@ (8001b20 <LPUART1_IRQHandler+0x10>)
 8001b16:	f002 ffa1 	bl	8004a5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200001c4 	.word	0x200001c4

08001b24 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001b28:	f008 fad0 	bl	800a0cc <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001b34:	f008 fb00 	bl	800a138 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001b40:	f000 fe3e 	bl	80027c0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b50:	4a14      	ldr	r2, [pc, #80]	@ (8001ba4 <_sbrk+0x5c>)
 8001b52:	4b15      	ldr	r3, [pc, #84]	@ (8001ba8 <_sbrk+0x60>)
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b5c:	4b13      	ldr	r3, [pc, #76]	@ (8001bac <_sbrk+0x64>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b64:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <_sbrk+0x64>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	@ (8001bb0 <_sbrk+0x68>)
 8001b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6a:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d207      	bcs.n	8001b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b78:	f008 ff9a 	bl	800aab0 <__errno>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	220c      	movs	r2, #12
 8001b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
 8001b86:	e009      	b.n	8001b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b88:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	@ (8001bac <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	4a05      	ldr	r2, [pc, #20]	@ (8001bac <_sbrk+0x64>)
 8001b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20030000 	.word	0x20030000
 8001ba8:	00000400 	.word	0x00000400
 8001bac:	2000027c 	.word	0x2000027c
 8001bb0:	20000820 	.word	0x20000820

08001bb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001bb8:	4b24      	ldr	r3, [pc, #144]	@ (8001c4c <SystemInit+0x98>)
 8001bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bbe:	4a23      	ldr	r2, [pc, #140]	@ (8001c4c <SystemInit+0x98>)
 8001bc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001bd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bdc:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001be0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bec:	4b18      	ldr	r3, [pc, #96]	@ (8001c50 <SystemInit+0x9c>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bfe:	f023 0305 	bic.w	r3, r3, #5
 8001c02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001c06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c12:	f023 0301 	bic.w	r3, r3, #1
 8001c16:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001c1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c1e:	4a0d      	ldr	r2, [pc, #52]	@ (8001c54 <SystemInit+0xa0>)
 8001c20:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001c22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c26:	4a0b      	ldr	r2, [pc, #44]	@ (8001c54 <SystemInit+0xa0>)
 8001c28:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c38:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c3e:	2200      	movs	r2, #0
 8001c40:	619a      	str	r2, [r3, #24]
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00
 8001c50:	faf6fefb 	.word	0xfaf6fefb
 8001c54:	22041000 	.word	0x22041000

08001c58 <HAL_UARTEx_RxEventCallback>:

static void uart_handler_Process_Received_pck(uint8_t* pck, uint16_t size);
static void uart_handler_Send_Cmd(UART_CommandType_t cmd, uint8_t* payload, uint8_t payload_len);


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	807b      	strh	r3, [r7, #2]

	//Check size and the first byte
	if (Size >=7) {
 8001c64:	887b      	ldrh	r3, [r7, #2]
 8001c66:	2b06      	cmp	r3, #6
 8001c68:	d90d      	bls.n	8001c86 <HAL_UARTEx_RxEventCallback+0x2e>

		if (uart_handler->rx_buffer==0xAA){
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	2baa      	cmp	r3, #170	@ 0xaa
 8001c72:	d108      	bne.n	8001c86 <HAL_UARTEx_RxEventCallback+0x2e>

			uart_handler->process_recived_pck(uart_handler->rx_buffer, Size);
 8001c74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca4 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	69d2      	ldr	r2, [r2, #28]
 8001c80:	8879      	ldrh	r1, [r7, #2]
 8001c82:	4610      	mov	r0, r2
 8001c84:	4798      	blx	r3
		}

	 }


	HAL_UARTEx_ReceiveToIdle_IT(uart_handler->huart, uart_handler->rx_buffer, 32);
 8001c86:	4b07      	ldr	r3, [pc, #28]	@ (8001ca4 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68d8      	ldr	r0, [r3, #12]
 8001c8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ca4 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	2220      	movs	r2, #32
 8001c94:	4619      	mov	r1, r3
 8001c96:	f004 fddc 	bl	8006852 <HAL_UARTEx_ReceiveToIdle_IT>

}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000280 	.word	0x20000280

08001ca8 <Calculate_CRC>:

static uint8_t Calculate_CRC(const uint8_t *data, uint8_t length) {
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; ++i) {
 8001cb8:	2300      	movs	r3, #0
 8001cba:	73bb      	strb	r3, [r7, #14]
 8001cbc:	e009      	b.n	8001cd2 <Calculate_CRC+0x2a>
        crc ^= data[i];
 8001cbe:	7bbb      	ldrb	r3, [r7, #14]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	781a      	ldrb	r2, [r3, #0]
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	4053      	eors	r3, r2
 8001cca:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; ++i) {
 8001ccc:	7bbb      	ldrb	r3, [r7, #14]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	73bb      	strb	r3, [r7, #14]
 8001cd2:	7bba      	ldrb	r2, [r7, #14]
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d3f1      	bcc.n	8001cbe <Calculate_CRC+0x16>
    }
    return crc;
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <uart_handler_Process_Received_pck>:

// Local functions (assigned as function pointers)
static void uart_handler_Process_Received_pck(uint8_t* pck, uint16_t size) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	807b      	strh	r3, [r7, #2]
	//Check CRC
	uint8_t actual_crc= *(uart_handler->rx_buffer+size);
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <uart_handler_Process_Received_pck+0x38>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69da      	ldr	r2, [r3, #28]
 8001cfa:	887b      	ldrh	r3, [r7, #2]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	73fb      	strb	r3, [r7, #15]
	uint8_t calculated_crc=Calculate_CRC(uart_handler->rx_buffer, size);
 8001d02:	4b07      	ldr	r3, [pc, #28]	@ (8001d20 <uart_handler_Process_Received_pck+0x38>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	887a      	ldrh	r2, [r7, #2]
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff ffca 	bl	8001ca8 <Calculate_CRC>
 8001d14:	4603      	mov	r3, r0
 8001d16:	73bb      	strb	r3, [r7, #14]
    if (actual_crc == calculated_crc) {

    }


}
 8001d18:	bf00      	nop
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000280 	.word	0x20000280

08001d24 <uart_handler_Send_Cmd>:

static void uart_handler_Send_Cmd(UART_CommandType_t cmd, uint8_t* payload, uint8_t payload_len) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	6039      	str	r1, [r7, #0]
 8001d2e:	71fb      	strb	r3, [r7, #7]
 8001d30:	4613      	mov	r3, r2
 8001d32:	71bb      	strb	r3, [r7, #6]

    uint8_t index = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]

    uart_handler->tx_buffer[index++] = 0xAA;
 8001d38:	4b27      	ldr	r3, [pc, #156]	@ (8001dd8 <uart_handler_Send_Cmd+0xb4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	699a      	ldr	r2, [r3, #24]
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	1c59      	adds	r1, r3, #1
 8001d42:	73f9      	strb	r1, [r7, #15]
 8001d44:	4413      	add	r3, r2
 8001d46:	22aa      	movs	r2, #170	@ 0xaa
 8001d48:	701a      	strb	r2, [r3, #0]
    uart_handler->tx_buffer[index++] = cmd;
 8001d4a:	4b23      	ldr	r3, [pc, #140]	@ (8001dd8 <uart_handler_Send_Cmd+0xb4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	699a      	ldr	r2, [r3, #24]
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	1c59      	adds	r1, r3, #1
 8001d54:	73f9      	strb	r1, [r7, #15]
 8001d56:	4413      	add	r3, r2
 8001d58:	79fa      	ldrb	r2, [r7, #7]
 8001d5a:	701a      	strb	r2, [r3, #0]
    uart_handler->tx_buffer[index++] = payload_len;
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd8 <uart_handler_Send_Cmd+0xb4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699a      	ldr	r2, [r3, #24]
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	1c59      	adds	r1, r3, #1
 8001d66:	73f9      	strb	r1, [r7, #15]
 8001d68:	4413      	add	r3, r2
 8001d6a:	79ba      	ldrb	r2, [r7, #6]
 8001d6c:	701a      	strb	r2, [r3, #0]

    memcpy(&uart_handler->tx_buffer[index], payload, payload_len);
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd8 <uart_handler_Send_Cmd+0xb4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	699a      	ldr	r2, [r3, #24]
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	4413      	add	r3, r2
 8001d78:	79ba      	ldrb	r2, [r7, #6]
 8001d7a:	6839      	ldr	r1, [r7, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f008 fec3 	bl	800ab08 <memcpy>
    index += payload_len;
 8001d82:	7bfa      	ldrb	r2, [r7, #15]
 8001d84:	79bb      	ldrb	r3, [r7, #6]
 8001d86:	4413      	add	r3, r2
 8001d88:	73fb      	strb	r3, [r7, #15]



    uint8_t crc = Calculate_CRC(uart_handler->tx_buffer, index);
 8001d8a:	4b13      	ldr	r3, [pc, #76]	@ (8001dd8 <uart_handler_Send_Cmd+0xb4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff87 	bl	8001ca8 <Calculate_CRC>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	73bb      	strb	r3, [r7, #14]
    uart_handler->tx_buffer[index++] = crc;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <uart_handler_Send_Cmd+0xb4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	699a      	ldr	r2, [r3, #24]
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	1c59      	adds	r1, r3, #1
 8001da8:	73f9      	strb	r1, [r7, #15]
 8001daa:	4413      	add	r3, r2
 8001dac:	7bba      	ldrb	r2, [r7, #14]
 8001dae:	701a      	strb	r2, [r3, #0]

    HAL_UART_Transmit(uart_handler->huart, uart_handler->tx_buffer, index, HAL_MAX_DELAY); /// NOTE: Check if this  is cerrectly send here or i shoudl check this in a timer
 8001db0:	4b09      	ldr	r3, [pc, #36]	@ (8001dd8 <uart_handler_Send_Cmd+0xb4>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68d8      	ldr	r0, [r3, #12]
 8001db6:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <uart_handler_Send_Cmd+0xb4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6999      	ldr	r1, [r3, #24]
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc4:	f002 fdbc 	bl	8004940 <HAL_UART_Transmit>
    uart_handler->state = UART_STATE_IDLE;
 8001dc8:	4b03      	ldr	r3, [pc, #12]	@ (8001dd8 <uart_handler_Send_Cmd+0xb4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000280 	.word	0x20000280

08001ddc <uart_handler_Init>:

void uart_handler_Init(UART_HandleTypeDef *huart) {
 8001ddc:	b590      	push	{r4, r7, lr}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]




    uart_handler = (UART_Handler_t *)malloc(sizeof(UART_Handler_t));
 8001de4:	2020      	movs	r0, #32
 8001de6:	f008 fd95 	bl	800a914 <malloc>
 8001dea:	4603      	mov	r3, r0
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b25      	ldr	r3, [pc, #148]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001df0:	601a      	str	r2, [r3, #0]

    uart_handler->huart = huart;
 8001df2:	4b24      	ldr	r3, [pc, #144]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	60da      	str	r2, [r3, #12]
    uart_handler->cmd_packet = (UART_CommandPacket_t *)malloc(sizeof(UART_CommandPacket_t));
 8001dfa:	4b22      	ldr	r3, [pc, #136]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001dfc:	681c      	ldr	r4, [r3, #0]
 8001dfe:	203e      	movs	r0, #62	@ 0x3e
 8001e00:	f008 fd88 	bl	800a914 <malloc>
 8001e04:	4603      	mov	r3, r0
 8001e06:	6063      	str	r3, [r4, #4]
    uart_handler->resp_packet = (UART_ResponsePacket_t *)malloc(sizeof(UART_ResponsePacket_t));
 8001e08:	4b1e      	ldr	r3, [pc, #120]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001e0a:	681c      	ldr	r4, [r3, #0]
 8001e0c:	203e      	movs	r0, #62	@ 0x3e
 8001e0e:	f008 fd81 	bl	800a914 <malloc>
 8001e12:	4603      	mov	r3, r0
 8001e14:	60a3      	str	r3, [r4, #8]

    uart_handler->state = UART_STATE_IDLE;
 8001e16:	4b1b      	ldr	r3, [pc, #108]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
    uart_handler->max_payload_len = UART_RX_BUFFER_SIZE - 6;
 8001e1e:	4b19      	ldr	r3, [pc, #100]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	223a      	movs	r2, #58	@ 0x3a
 8001e24:	705a      	strb	r2, [r3, #1]

    uart_handler->process_recived_pck = uart_handler_Process_Received_pck;
 8001e26:	4b17      	ldr	r3, [pc, #92]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a17      	ldr	r2, [pc, #92]	@ (8001e88 <uart_handler_Init+0xac>)
 8001e2c:	611a      	str	r2, [r3, #16]
    uart_handler->send_cmd = uart_handler_Send_Cmd;
 8001e2e:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a16      	ldr	r2, [pc, #88]	@ (8001e8c <uart_handler_Init+0xb0>)
 8001e34:	615a      	str	r2, [r3, #20]
    uart_handler->tx_buffer=tx_buffer;
 8001e36:	4b13      	ldr	r3, [pc, #76]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a15      	ldr	r2, [pc, #84]	@ (8001e90 <uart_handler_Init+0xb4>)
 8001e3c:	619a      	str	r2, [r3, #24]
    uart_handler->rx_buffer=rx_buffer;
 8001e3e:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a14      	ldr	r2, [pc, #80]	@ (8001e94 <uart_handler_Init+0xb8>)
 8001e44:	61da      	str	r2, [r3, #28]

    HAL_UARTEx_ReceiveToIdle_IT(uart_handler->huart, uart_handler->rx_buffer, 32);
 8001e46:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68d8      	ldr	r0, [r3, #12]
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	2220      	movs	r2, #32
 8001e54:	4619      	mov	r1, r3
 8001e56:	f004 fcfc 	bl	8006852 <HAL_UARTEx_ReceiveToIdle_IT>

    memset(uart_handler->cmd_packet, 0, sizeof(UART_CommandPacket_t));
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	223e      	movs	r2, #62	@ 0x3e
 8001e62:	2100      	movs	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f008 fe0b 	bl	800aa80 <memset>
    memset(uart_handler->resp_packet, 0, sizeof(UART_ResponsePacket_t));
 8001e6a:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	223e      	movs	r2, #62	@ 0x3e
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f008 fe03 	bl	800aa80 <memset>
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd90      	pop	{r4, r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000280 	.word	0x20000280
 8001e88:	08001ce9 	.word	0x08001ce9
 8001e8c:	08001d25 	.word	0x08001d25
 8001e90:	20000284 	.word	0x20000284
 8001e94:	200002c4 	.word	0x200002c4

08001e98 <uart_handler_get>:
        memset(uart_handler->cmd_packet, 0, sizeof(UART_CommandPacket_t));
        memset(uart_handler->resp_packet, 0, sizeof(UART_ResponsePacket_t));
    }
}

UART_Handler_t* uart_handler_get(void) {
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
    return uart_handler;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	@ (8001eac <uart_handler_get+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000280 	.word	0x20000280

08001eb0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001eb0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eb4:	3304      	adds	r3, #4

08001eb6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001eba:	d3f9      	bcc.n	8001eb0 <CopyDataInit>
  bx lr
 8001ebc:	4770      	bx	lr

08001ebe <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001ebe:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001ec0:	3004      	adds	r0, #4

08001ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001ec2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001ec4:	d3fb      	bcc.n	8001ebe <FillZerobss>
  bx lr
 8001ec6:	4770      	bx	lr

08001ec8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ec8:	480c      	ldr	r0, [pc, #48]	@ (8001efc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001eca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ecc:	f7ff fe72 	bl	8001bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001ed0:	480b      	ldr	r0, [pc, #44]	@ (8001f00 <LoopForever+0x6>)
 8001ed2:	490c      	ldr	r1, [pc, #48]	@ (8001f04 <LoopForever+0xa>)
 8001ed4:	4a0c      	ldr	r2, [pc, #48]	@ (8001f08 <LoopForever+0xe>)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f7ff ffed 	bl	8001eb6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001edc:	480b      	ldr	r0, [pc, #44]	@ (8001f0c <LoopForever+0x12>)
 8001ede:	490c      	ldr	r1, [pc, #48]	@ (8001f10 <LoopForever+0x16>)
 8001ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8001f14 <LoopForever+0x1a>)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f7ff ffe7 	bl	8001eb6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001ee8:	480b      	ldr	r0, [pc, #44]	@ (8001f18 <LoopForever+0x1e>)
 8001eea:	490c      	ldr	r1, [pc, #48]	@ (8001f1c <LoopForever+0x22>)
 8001eec:	2300      	movs	r3, #0
 8001eee:	f7ff ffe8 	bl	8001ec2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ef2:	f008 fde3 	bl	800aabc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001ef6:	f7ff fb43 	bl	8001580 <main>

08001efa <LoopForever>:

LoopForever:
  b LoopForever
 8001efa:	e7fe      	b.n	8001efa <LoopForever>
  ldr   r0, =_estack
 8001efc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001f00:	20000008 	.word	0x20000008
 8001f04:	20000080 	.word	0x20000080
 8001f08:	0800adfc 	.word	0x0800adfc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001f0c:	200301e4 	.word	0x200301e4
 8001f10:	20030a67 	.word	0x20030a67
 8001f14:	0800aeba 	.word	0x0800aeba
  INIT_BSS _sbss, _ebss
 8001f18:	200000cc 	.word	0x200000cc
 8001f1c:	2000081c 	.word	0x2000081c

08001f20 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f20:	e7fe      	b.n	8001f20 <ADC1_IRQHandler>
	...

08001f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f60 <HAL_Init+0x3c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a0b      	ldr	r2, [pc, #44]	@ (8001f60 <HAL_Init+0x3c>)
 8001f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f38:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f3a:	2003      	movs	r0, #3
 8001f3c:	f000 f9a8 	bl	8002290 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f40:	200f      	movs	r0, #15
 8001f42:	f000 f80f 	bl	8001f64 <HAL_InitTick>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	71fb      	strb	r3, [r7, #7]
 8001f50:	e001      	b.n	8001f56 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f52:	f7ff fce5 	bl	8001920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f56:	79fb      	ldrb	r3, [r7, #7]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	58004000 	.word	0x58004000

08001f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001f70:	4b17      	ldr	r3, [pc, #92]	@ (8001fd0 <HAL_InitTick+0x6c>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d024      	beq.n	8001fc2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f78:	f001 fd80 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	4b14      	ldr	r3, [pc, #80]	@ (8001fd0 <HAL_InitTick+0x6c>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	4619      	mov	r1, r3
 8001f84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f88:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 f9be 	bl	8002312 <HAL_SYSTICK_Config>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10f      	bne.n	8001fbc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b0f      	cmp	r3, #15
 8001fa0:	d809      	bhi.n	8001fb6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8001faa:	f000 f97c 	bl	80022a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fae:	4a09      	ldr	r2, [pc, #36]	@ (8001fd4 <HAL_InitTick+0x70>)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	e007      	b.n	8001fc6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
 8001fba:	e004      	b.n	8001fc6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
 8001fc0:	e001      	b.n	8001fc6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000010 	.word	0x20000010
 8001fd4:	2000000c 	.word	0x2000000c

08001fd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <HAL_IncTick+0x20>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <HAL_IncTick+0x24>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4a04      	ldr	r2, [pc, #16]	@ (8001ffc <HAL_IncTick+0x24>)
 8001fea:	6013      	str	r3, [r2, #0]
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20000010 	.word	0x20000010
 8001ffc:	20000304 	.word	0x20000304

08002000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return uwTick;
 8002004:	4b03      	ldr	r3, [pc, #12]	@ (8002014 <HAL_GetTick+0x14>)
 8002006:	681b      	ldr	r3, [r3, #0]
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20000304 	.word	0x20000304

08002018 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800201c:	4b03      	ldr	r3, [pc, #12]	@ (800202c <HAL_GetTickPrio+0x14>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	2000000c 	.word	0x2000000c

08002030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002040:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <__NVIC_SetPriorityGrouping+0x44>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800204c:	4013      	ands	r3, r2
 800204e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002058:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800205c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002062:	4a04      	ldr	r2, [pc, #16]	@ (8002074 <__NVIC_SetPriorityGrouping+0x44>)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	60d3      	str	r3, [r2, #12]
}
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800207c:	4b04      	ldr	r3, [pc, #16]	@ (8002090 <__NVIC_GetPriorityGrouping+0x18>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	f003 0307 	and.w	r3, r3, #7
}
 8002086:	4618      	mov	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	db0b      	blt.n	80020be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	f003 021f 	and.w	r2, r3, #31
 80020ac:	4907      	ldr	r1, [pc, #28]	@ (80020cc <__NVIC_EnableIRQ+0x38>)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	2001      	movs	r0, #1
 80020b6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000e100 	.word	0xe000e100

080020d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	db12      	blt.n	8002108 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	f003 021f 	and.w	r2, r3, #31
 80020e8:	490a      	ldr	r1, [pc, #40]	@ (8002114 <__NVIC_DisableIRQ+0x44>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	2001      	movs	r0, #1
 80020f2:	fa00 f202 	lsl.w	r2, r0, r2
 80020f6:	3320      	adds	r3, #32
 80020f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80020fc:	f3bf 8f4f 	dsb	sy
}
 8002100:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002102:	f3bf 8f6f 	isb	sy
}
 8002106:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000e100 	.word	0xe000e100

08002118 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	2b00      	cmp	r3, #0
 8002128:	db0c      	blt.n	8002144 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	f003 021f 	and.w	r2, r3, #31
 8002130:	4907      	ldr	r1, [pc, #28]	@ (8002150 <__NVIC_SetPendingIRQ+0x38>)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	2001      	movs	r0, #1
 800213a:	fa00 f202 	lsl.w	r2, r0, r2
 800213e:	3340      	adds	r3, #64	@ 0x40
 8002140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000e100 	.word	0xe000e100

08002154 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	2b00      	cmp	r3, #0
 8002164:	db0c      	blt.n	8002180 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	f003 021f 	and.w	r2, r3, #31
 800216c:	4907      	ldr	r1, [pc, #28]	@ (800218c <__NVIC_ClearPendingIRQ+0x38>)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	095b      	lsrs	r3, r3, #5
 8002174:	2001      	movs	r0, #1
 8002176:	fa00 f202 	lsl.w	r2, r0, r2
 800217a:	3360      	adds	r3, #96	@ 0x60
 800217c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000e100 	.word	0xe000e100

08002190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	6039      	str	r1, [r7, #0]
 800219a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	db0a      	blt.n	80021ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	490c      	ldr	r1, [pc, #48]	@ (80021dc <__NVIC_SetPriority+0x4c>)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	0112      	lsls	r2, r2, #4
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	440b      	add	r3, r1
 80021b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b8:	e00a      	b.n	80021d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4908      	ldr	r1, [pc, #32]	@ (80021e0 <__NVIC_SetPriority+0x50>)
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	3b04      	subs	r3, #4
 80021c8:	0112      	lsls	r2, r2, #4
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	440b      	add	r3, r1
 80021ce:	761a      	strb	r2, [r3, #24]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000e100 	.word	0xe000e100
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b089      	sub	sp, #36	@ 0x24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f1c3 0307 	rsb	r3, r3, #7
 80021fe:	2b04      	cmp	r3, #4
 8002200:	bf28      	it	cs
 8002202:	2304      	movcs	r3, #4
 8002204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3304      	adds	r3, #4
 800220a:	2b06      	cmp	r3, #6
 800220c:	d902      	bls.n	8002214 <NVIC_EncodePriority+0x30>
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3b03      	subs	r3, #3
 8002212:	e000      	b.n	8002216 <NVIC_EncodePriority+0x32>
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002218:	f04f 32ff 	mov.w	r2, #4294967295
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43da      	mvns	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	401a      	ands	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800222c:	f04f 31ff 	mov.w	r1, #4294967295
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	43d9      	mvns	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	4313      	orrs	r3, r2
         );
}
 800223e:	4618      	mov	r0, r3
 8002240:	3724      	adds	r7, #36	@ 0x24
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3b01      	subs	r3, #1
 8002258:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800225c:	d301      	bcc.n	8002262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800225e:	2301      	movs	r3, #1
 8002260:	e00f      	b.n	8002282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002262:	4a0a      	ldr	r2, [pc, #40]	@ (800228c <SysTick_Config+0x40>)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3b01      	subs	r3, #1
 8002268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800226a:	210f      	movs	r1, #15
 800226c:	f04f 30ff 	mov.w	r0, #4294967295
 8002270:	f7ff ff8e 	bl	8002190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002274:	4b05      	ldr	r3, [pc, #20]	@ (800228c <SysTick_Config+0x40>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800227a:	4b04      	ldr	r3, [pc, #16]	@ (800228c <SysTick_Config+0x40>)
 800227c:	2207      	movs	r2, #7
 800227e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	e000e010 	.word	0xe000e010

08002290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff fec9 	bl	8002030 <__NVIC_SetPriorityGrouping>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b086      	sub	sp, #24
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4603      	mov	r3, r0
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022b4:	f7ff fee0 	bl	8002078 <__NVIC_GetPriorityGrouping>
 80022b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	6978      	ldr	r0, [r7, #20]
 80022c0:	f7ff ff90 	bl	80021e4 <NVIC_EncodePriority>
 80022c4:	4602      	mov	r2, r0
 80022c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff5f 	bl	8002190 <__NVIC_SetPriority>
}
 80022d2:	bf00      	nop
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fed3 	bl	8002094 <__NVIC_EnableIRQ>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fee3 	bl	80020d0 <__NVIC_DisableIRQ>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff ff96 	bl	800224c <SysTick_Config>
 8002320:	4603      	mov	r3, r0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	4603      	mov	r3, r0
 8002332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff feed 	bl	8002118 <__NVIC_SetPendingIRQ>
}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	4603      	mov	r3, r0
 800234e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fefd 	bl	8002154 <__NVIC_ClearPendingIRQ>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e04f      	b.n	8002414 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d008      	beq.n	8002392 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2204      	movs	r2, #4
 8002384:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e040      	b.n	8002414 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 020e 	bic.w	r2, r2, #14
 80023a0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0201 	bic.w	r2, r2, #1
 80023c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c6:	f003 021c 	and.w	r2, r3, #28
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	2101      	movs	r1, #1
 80023d0:	fa01 f202 	lsl.w	r2, r1, r2
 80023d4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023de:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00c      	beq.n	8002402 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002400:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d005      	beq.n	8002444 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2204      	movs	r2, #4
 800243c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
 8002442:	e047      	b.n	80024d4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 020e 	bic.w	r2, r2, #14
 8002452:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0201 	bic.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800246e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002472:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002478:	f003 021c 	and.w	r2, r3, #28
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002480:	2101      	movs	r1, #1
 8002482:	fa01 f202 	lsl.w	r2, r1, r2
 8002486:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002490:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00c      	beq.n	80024b4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80024b2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	4798      	blx	r3
    }
  }
  return status;
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ee:	e14c      	b.n	800278a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	2101      	movs	r1, #1
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	fa01 f303 	lsl.w	r3, r1, r3
 80024fc:	4013      	ands	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 813e 	beq.w	8002784 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	2b01      	cmp	r3, #1
 8002512:	d005      	beq.n	8002520 <HAL_GPIO_Init+0x40>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d130      	bne.n	8002582 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	2203      	movs	r2, #3
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002556:	2201      	movs	r2, #1
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4013      	ands	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	091b      	lsrs	r3, r3, #4
 800256c:	f003 0201 	and.w	r2, r3, #1
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b03      	cmp	r3, #3
 800258c:	d017      	beq.n	80025be <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	2203      	movs	r2, #3
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4013      	ands	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d123      	bne.n	8002612 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	08da      	lsrs	r2, r3, #3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3208      	adds	r2, #8
 80025d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	220f      	movs	r2, #15
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4013      	ands	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	691a      	ldr	r2, [r3, #16]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	08da      	lsrs	r2, r3, #3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3208      	adds	r2, #8
 800260c:	6939      	ldr	r1, [r7, #16]
 800260e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	2203      	movs	r2, #3
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0203 	and.w	r2, r3, #3
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 8098 	beq.w	8002784 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002654:	4a54      	ldr	r2, [pc, #336]	@ (80027a8 <HAL_GPIO_Init+0x2c8>)
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	089b      	lsrs	r3, r3, #2
 800265a:	3302      	adds	r3, #2
 800265c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002660:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	220f      	movs	r2, #15
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4013      	ands	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800267e:	d019      	beq.n	80026b4 <HAL_GPIO_Init+0x1d4>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a4a      	ldr	r2, [pc, #296]	@ (80027ac <HAL_GPIO_Init+0x2cc>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d013      	beq.n	80026b0 <HAL_GPIO_Init+0x1d0>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a49      	ldr	r2, [pc, #292]	@ (80027b0 <HAL_GPIO_Init+0x2d0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d00d      	beq.n	80026ac <HAL_GPIO_Init+0x1cc>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a48      	ldr	r2, [pc, #288]	@ (80027b4 <HAL_GPIO_Init+0x2d4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d007      	beq.n	80026a8 <HAL_GPIO_Init+0x1c8>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a47      	ldr	r2, [pc, #284]	@ (80027b8 <HAL_GPIO_Init+0x2d8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d101      	bne.n	80026a4 <HAL_GPIO_Init+0x1c4>
 80026a0:	2304      	movs	r3, #4
 80026a2:	e008      	b.n	80026b6 <HAL_GPIO_Init+0x1d6>
 80026a4:	2307      	movs	r3, #7
 80026a6:	e006      	b.n	80026b6 <HAL_GPIO_Init+0x1d6>
 80026a8:	2303      	movs	r3, #3
 80026aa:	e004      	b.n	80026b6 <HAL_GPIO_Init+0x1d6>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e002      	b.n	80026b6 <HAL_GPIO_Init+0x1d6>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <HAL_GPIO_Init+0x1d6>
 80026b4:	2300      	movs	r3, #0
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	f002 0203 	and.w	r2, r2, #3
 80026bc:	0092      	lsls	r2, r2, #2
 80026be:	4093      	lsls	r3, r2
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026c6:	4938      	ldr	r1, [pc, #224]	@ (80027a8 <HAL_GPIO_Init+0x2c8>)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	089b      	lsrs	r3, r3, #2
 80026cc:	3302      	adds	r3, #2
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026d4:	4b39      	ldr	r3, [pc, #228]	@ (80027bc <HAL_GPIO_Init+0x2dc>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	43db      	mvns	r3, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026f8:	4a30      	ldr	r2, [pc, #192]	@ (80027bc <HAL_GPIO_Init+0x2dc>)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80026fe:	4b2f      	ldr	r3, [pc, #188]	@ (80027bc <HAL_GPIO_Init+0x2dc>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	43db      	mvns	r3, r3
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4013      	ands	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002722:	4a26      	ldr	r2, [pc, #152]	@ (80027bc <HAL_GPIO_Init+0x2dc>)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002728:	4b24      	ldr	r3, [pc, #144]	@ (80027bc <HAL_GPIO_Init+0x2dc>)
 800272a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800272e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	43db      	mvns	r3, r3
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800274e:	4a1b      	ldr	r2, [pc, #108]	@ (80027bc <HAL_GPIO_Init+0x2dc>)
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002756:	4b19      	ldr	r3, [pc, #100]	@ (80027bc <HAL_GPIO_Init+0x2dc>)
 8002758:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800275c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	43db      	mvns	r3, r3
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4013      	ands	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800277c:	4a0f      	ldr	r2, [pc, #60]	@ (80027bc <HAL_GPIO_Init+0x2dc>)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	3301      	adds	r3, #1
 8002788:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	fa22 f303 	lsr.w	r3, r2, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	f47f aeab 	bne.w	80024f0 <HAL_GPIO_Init+0x10>
  }
}
 800279a:	bf00      	nop
 800279c:	bf00      	nop
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	40010000 	.word	0x40010000
 80027ac:	48000400 	.word	0x48000400
 80027b0:	48000800 	.word	0x48000800
 80027b4:	48000c00 	.word	0x48000c00
 80027b8:	48001000 	.word	0x48001000
 80027bc:	58000800 	.word	0x58000800

080027c0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80027c6:	4b0a      	ldr	r3, [pc, #40]	@ (80027f0 <HAL_HSEM_IRQHandler+0x30>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80027cc:	4b08      	ldr	r3, [pc, #32]	@ (80027f0 <HAL_HSEM_IRQHandler+0x30>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	4906      	ldr	r1, [pc, #24]	@ (80027f0 <HAL_HSEM_IRQHandler+0x30>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80027da:	4a05      	ldr	r2, [pc, #20]	@ (80027f0 <HAL_HSEM_IRQHandler+0x30>)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f807 	bl	80027f4 <HAL_HSEM_FreeCallback>
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	58001500 	.word	0x58001500

080027f4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d01e      	beq.n	8002858 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800281a:	4b13      	ldr	r3, [pc, #76]	@ (8002868 <HAL_IPCC_Init+0x60>)
 800281c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d102      	bne.n	8002830 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff f890 	bl	8001950 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002830:	68b8      	ldr	r0, [r7, #8]
 8002832:	f000 f85b 	bl	80028ec <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f82c 	bl	80028a0 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8002856:	e001      	b.n	800285c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800285c:	7bfb      	ldrb	r3, [r7, #15]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	58000c00 	.word	0x58000c00

0800286c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	4613      	mov	r3, r2
 8002878:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002886:	b480      	push	{r7}
 8002888:	b085      	sub	sp, #20
 800288a:	af00      	add	r7, sp, #0
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	4613      	mov	r3, r2
 8002892:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	e00f      	b.n	80028ce <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	4a0b      	ldr	r2, [pc, #44]	@ (80028e4 <IPCC_SetDefaultCallbacks+0x44>)
 80028b8:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3306      	adds	r3, #6
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	4a08      	ldr	r2, [pc, #32]	@ (80028e8 <IPCC_SetDefaultCallbacks+0x48>)
 80028c6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	3301      	adds	r3, #1
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b05      	cmp	r3, #5
 80028d2:	d9ec      	bls.n	80028ae <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	0800286d 	.word	0x0800286d
 80028e8:	08002887 	.word	0x08002887

080028ec <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8002900:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	223f      	movs	r2, #63	@ 0x3f
 8002906:	609a      	str	r2, [r3, #8]
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002918:	4b05      	ldr	r3, [pc, #20]	@ (8002930 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a04      	ldr	r2, [pc, #16]	@ (8002930 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800291e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002922:	6013      	str	r3, [r2, #0]
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	58000400 	.word	0x58000400

08002934 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002938:	4b04      	ldr	r3, [pc, #16]	@ (800294c <HAL_PWREx_GetVoltageRange+0x18>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	58000400 	.word	0x58000400

08002950 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800295e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002962:	d101      	bne.n	8002968 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <LL_RCC_HSE_Enable>:
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002982:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002986:	6013      	str	r3, [r2, #0]
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <LL_RCC_HSE_Disable>:
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029a4:	6013      	str	r3, [r2, #0]
}
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <LL_RCC_HSE_IsReady>:
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80029b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029c2:	d101      	bne.n	80029c8 <LL_RCC_HSE_IsReady+0x18>
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <LL_RCC_HSE_IsReady+0x1a>
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <LL_RCC_HSI_Enable>:
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80029d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e6:	6013      	str	r3, [r2, #0]
}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <LL_RCC_HSI_Disable>:
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80029f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a04:	6013      	str	r3, [r2, #0]
}
 8002a06:	bf00      	nop
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <LL_RCC_HSI_IsReady>:
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002a14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a22:	d101      	bne.n	8002a28 <LL_RCC_HSI_IsReady+0x18>
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <LL_RCC_HSI_IsReady+0x1a>
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	061b      	lsls	r3, r3, #24
 8002a4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <LL_RCC_HSI48_Enable>:
{
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002a76:	bf00      	nop
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <LL_RCC_HSI48_Disable>:
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002a84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a90:	f023 0301 	bic.w	r3, r3, #1
 8002a94:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <LL_RCC_HSI48_IsReady>:
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002aa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d101      	bne.n	8002aba <LL_RCC_HSI48_IsReady+0x18>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <LL_RCC_HSI48_IsReady+0x1a>
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <LL_RCC_LSE_Enable>:
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002aca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002ade:	bf00      	nop
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_RCC_LSE_Disable>:
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002aec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002af8:	f023 0301 	bic.w	r3, r3, #1
 8002afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <LL_RCC_LSE_EnableBypass>:
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b1a:	f043 0304 	orr.w	r3, r3, #4
 8002b1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002b22:	bf00      	nop
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <LL_RCC_LSE_DisableBypass>:
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b3c:	f023 0304 	bic.w	r3, r3, #4
 8002b40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <LL_RCC_LSE_IsReady>:
{
 8002b4e:	b480      	push	{r7}
 8002b50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002b52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d101      	bne.n	8002b66 <LL_RCC_LSE_IsReady+0x18>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <LL_RCC_LSE_IsReady+0x1a>
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <LL_RCC_LSI1_Enable>:
{
 8002b72:	b480      	push	{r7}
 8002b74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002b76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002b8a:	bf00      	nop
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <LL_RCC_LSI1_Disable>:
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002b98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ba0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ba4:	f023 0301 	bic.w	r3, r3, #1
 8002ba8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <LL_RCC_LSI1_IsReady>:
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002bba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d101      	bne.n	8002bce <LL_RCC_LSI1_IsReady+0x18>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <LL_RCC_LSI1_IsReady+0x1a>
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <LL_RCC_LSI2_Enable>:
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002bde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002be6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bea:	f043 0304 	orr.w	r3, r3, #4
 8002bee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002bf2:	bf00      	nop
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <LL_RCC_LSI2_Disable>:
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002c00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c0c:	f023 0304 	bic.w	r3, r3, #4
 8002c10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <LL_RCC_LSI2_IsReady>:
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002c22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d101      	bne.n	8002c36 <LL_RCC_LSI2_IsReady+0x18>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <LL_RCC_LSI2_IsReady+0x1a>
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <LL_RCC_LSI2_SetTrimming>:
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002c4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c52:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <LL_RCC_MSI_Enable>:
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6013      	str	r3, [r2, #0]
}
 8002c84:	bf00      	nop
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <LL_RCC_MSI_Disable>:
{
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002c92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c9c:	f023 0301 	bic.w	r3, r3, #1
 8002ca0:	6013      	str	r3, [r2, #0]
}
 8002ca2:	bf00      	nop
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <LL_RCC_MSI_IsReady>:
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002cb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d101      	bne.n	8002cc2 <LL_RCC_MSI_IsReady+0x16>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <LL_RCC_MSI_IsReady+0x18>
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <LL_RCC_MSI_SetRange>:
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002cd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ce0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <LL_RCC_MSI_GetRange>:
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d06:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2bb0      	cmp	r3, #176	@ 0xb0
 8002d0c:	d901      	bls.n	8002d12 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002d0e:	23b0      	movs	r3, #176	@ 0xb0
 8002d10:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002d12:	687b      	ldr	r3, [r7, #4]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	021b      	lsls	r3, r3, #8
 8002d36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	604b      	str	r3, [r1, #4]
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <LL_RCC_SetSysClkSource>:
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002d52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f023 0203 	bic.w	r2, r3, #3
 8002d5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	608b      	str	r3, [r1, #8]
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_RCC_GetSysClkSource>:
{
 8002d72:	b480      	push	{r7}
 8002d74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 030c 	and.w	r3, r3, #12
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <LL_RCC_SetAHBPrescaler>:
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002d92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002dba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dbe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002dc2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <LL_RCC_SetAHB4Prescaler>:
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002de6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dea:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002dee:	f023 020f 	bic.w	r2, r3, #15
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	091b      	lsrs	r3, r3, #4
 8002df6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <LL_RCC_SetAPB1Prescaler>:
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002e14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	608b      	str	r3, [r1, #8]
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_RCC_SetAPB2Prescaler>:
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002e3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	608b      	str	r3, [r1, #8]
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <LL_RCC_GetAHBPrescaler>:
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <LL_RCC_GetAHB4Prescaler>:
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002e78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e7c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <LL_RCC_GetAPB1Prescaler>:
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_RCC_GetAPB2Prescaler>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002eac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ece:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ed2:	6013      	str	r3, [r2, #0]
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002ee2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002eec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ef0:	6013      	str	r3, [r2, #0]
}
 8002ef2:	bf00      	nop
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f0e:	d101      	bne.n	8002f14 <LL_RCC_PLL_IsReady+0x18>
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <LL_RCC_PLL_IsReady+0x1a>
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002f24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	0a1b      	lsrs	r3, r3, #8
 8002f2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002f52:	b480      	push	{r7}
 8002f54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002f56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0303 	and.w	r3, r3, #3
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002f86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f94:	d101      	bne.n	8002f9a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002faa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fae:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fba:	d101      	bne.n	8002fc0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002fd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fd4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fe0:	d101      	bne.n	8002fe6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002ff6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003000:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003004:	d101      	bne.n	800300a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003016:	b480      	push	{r7}
 8003018:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800301a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003024:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003028:	d101      	bne.n	800302e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800303c:	b590      	push	{r4, r7, lr}
 800303e:	b08d      	sub	sp, #52	@ 0x34
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e363      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 808d 	beq.w	8003176 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800305c:	f7ff fe89 	bl	8002d72 <LL_RCC_GetSysClkSource>
 8003060:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003062:	f7ff ff82 	bl	8002f6a <LL_RCC_PLL_GetMainSource>
 8003066:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <HAL_RCC_OscConfig+0x3e>
 800306e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003070:	2b0c      	cmp	r3, #12
 8003072:	d147      	bne.n	8003104 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003076:	2b01      	cmp	r3, #1
 8003078:	d144      	bne.n	8003104 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e347      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800308a:	f7ff fe34 	bl	8002cf6 <LL_RCC_MSI_GetRange>
 800308e:	4603      	mov	r3, r0
 8003090:	429c      	cmp	r4, r3
 8003092:	d914      	bls.n	80030be <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fd2f 	bl	8003afc <RCC_SetFlashLatencyFromMSIRange>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e336      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff fe0e 	bl	8002cce <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff fe32 	bl	8002d20 <LL_RCC_MSI_SetCalibTrimming>
 80030bc:	e013      	b.n	80030e6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fe03 	bl	8002cce <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fe27 	bl	8002d20 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 fd10 	bl	8003afc <RCC_SetFlashLatencyFromMSIRange>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e317      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80030e6:	f000 fcc9 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 80030ea:	4603      	mov	r3, r0
 80030ec:	4aa4      	ldr	r2, [pc, #656]	@ (8003380 <HAL_RCC_OscConfig+0x344>)
 80030ee:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030f0:	4ba4      	ldr	r3, [pc, #656]	@ (8003384 <HAL_RCC_OscConfig+0x348>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fe ff35 	bl	8001f64 <HAL_InitTick>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d039      	beq.n	8003174 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e308      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d01e      	beq.n	800314a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800310c:	f7ff fdb0 	bl	8002c70 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003110:	f7fe ff76 	bl	8002000 <HAL_GetTick>
 8003114:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003118:	f7fe ff72 	bl	8002000 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e2f5      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800312a:	f7ff fdbf 	bl	8002cac <LL_RCC_MSI_IsReady>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f1      	beq.n	8003118 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fdc8 	bl	8002cce <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fdec 	bl	8002d20 <LL_RCC_MSI_SetCalibTrimming>
 8003148:	e015      	b.n	8003176 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800314a:	f7ff fda0 	bl	8002c8e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800314e:	f7fe ff57 	bl	8002000 <HAL_GetTick>
 8003152:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003156:	f7fe ff53 	bl	8002000 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e2d6      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003168:	f7ff fda0 	bl	8002cac <LL_RCC_MSI_IsReady>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f1      	bne.n	8003156 <HAL_RCC_OscConfig+0x11a>
 8003172:	e000      	b.n	8003176 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003174:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d047      	beq.n	8003212 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003182:	f7ff fdf6 	bl	8002d72 <LL_RCC_GetSysClkSource>
 8003186:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003188:	f7ff feef 	bl	8002f6a <LL_RCC_PLL_GetMainSource>
 800318c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	2b08      	cmp	r3, #8
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_OscConfig+0x164>
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	2b0c      	cmp	r3, #12
 8003198:	d108      	bne.n	80031ac <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	2b03      	cmp	r3, #3
 800319e:	d105      	bne.n	80031ac <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d134      	bne.n	8003212 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e2b4      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b4:	d102      	bne.n	80031bc <HAL_RCC_OscConfig+0x180>
 80031b6:	f7ff fbdd 	bl	8002974 <LL_RCC_HSE_Enable>
 80031ba:	e001      	b.n	80031c0 <HAL_RCC_OscConfig+0x184>
 80031bc:	f7ff fbe9 	bl	8002992 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d012      	beq.n	80031ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fe ff1a 	bl	8002000 <HAL_GetTick>
 80031cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d0:	f7fe ff16 	bl	8002000 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b64      	cmp	r3, #100	@ 0x64
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e299      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80031e2:	f7ff fbe5 	bl	80029b0 <LL_RCC_HSE_IsReady>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f1      	beq.n	80031d0 <HAL_RCC_OscConfig+0x194>
 80031ec:	e011      	b.n	8003212 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ee:	f7fe ff07 	bl	8002000 <HAL_GetTick>
 80031f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f6:	f7fe ff03 	bl	8002000 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b64      	cmp	r3, #100	@ 0x64
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e286      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003208:	f7ff fbd2 	bl	80029b0 <LL_RCC_HSE_IsReady>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f1      	bne.n	80031f6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d04c      	beq.n	80032b8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800321e:	f7ff fda8 	bl	8002d72 <LL_RCC_GetSysClkSource>
 8003222:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003224:	f7ff fea1 	bl	8002f6a <LL_RCC_PLL_GetMainSource>
 8003228:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	2b04      	cmp	r3, #4
 800322e:	d005      	beq.n	800323c <HAL_RCC_OscConfig+0x200>
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	2b0c      	cmp	r3, #12
 8003234:	d10e      	bne.n	8003254 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b02      	cmp	r3, #2
 800323a:	d10b      	bne.n	8003254 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e266      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fbf1 	bl	8002a34 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003252:	e031      	b.n	80032b8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d019      	beq.n	8003290 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800325c:	f7ff fbba 	bl	80029d4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003260:	f7fe fece 	bl	8002000 <HAL_GetTick>
 8003264:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003268:	f7fe feca 	bl	8002000 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e24d      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800327a:	f7ff fbc9 	bl	8002a10 <LL_RCC_HSI_IsReady>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0f1      	beq.n	8003268 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff fbd3 	bl	8002a34 <LL_RCC_HSI_SetCalibTrimming>
 800328e:	e013      	b.n	80032b8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003290:	f7ff fbaf 	bl	80029f2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003294:	f7fe feb4 	bl	8002000 <HAL_GetTick>
 8003298:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800329c:	f7fe feb0 	bl	8002000 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e233      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80032ae:	f7ff fbaf 	bl	8002a10 <LL_RCC_HSI_IsReady>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1f1      	bne.n	800329c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d106      	bne.n	80032d2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80a3 	beq.w	8003418 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d076      	beq.n	80033c8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d046      	beq.n	8003374 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80032e6:	f7ff fc66 	bl	8002bb6 <LL_RCC_LSI1_IsReady>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d113      	bne.n	8003318 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80032f0:	f7ff fc3f 	bl	8002b72 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032f4:	f7fe fe84 	bl	8002000 <HAL_GetTick>
 80032f8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80032fc:	f7fe fe80 	bl	8002000 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e203      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800330e:	f7ff fc52 	bl	8002bb6 <LL_RCC_LSI1_IsReady>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0f1      	beq.n	80032fc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003318:	f7ff fc5f 	bl	8002bda <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fe fe70 	bl	8002000 <HAL_GetTick>
 8003320:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003324:	f7fe fe6c 	bl	8002000 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b03      	cmp	r3, #3
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e1ef      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003336:	f7ff fc72 	bl	8002c1e <LL_RCC_LSI2_IsReady>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0f1      	beq.n	8003324 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff fc7c 	bl	8002c42 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800334a:	f7ff fc23 	bl	8002b94 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334e:	f7fe fe57 	bl	8002000 <HAL_GetTick>
 8003352:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003356:	f7fe fe53 	bl	8002000 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e1d6      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003368:	f7ff fc25 	bl	8002bb6 <LL_RCC_LSI1_IsReady>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f1      	bne.n	8003356 <HAL_RCC_OscConfig+0x31a>
 8003372:	e051      	b.n	8003418 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003374:	f7ff fbfd 	bl	8002b72 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7fe fe42 	bl	8002000 <HAL_GetTick>
 800337c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800337e:	e00c      	b.n	800339a <HAL_RCC_OscConfig+0x35e>
 8003380:	20000008 	.word	0x20000008
 8003384:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003388:	f7fe fe3a 	bl	8002000 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e1bd      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800339a:	f7ff fc0c 	bl	8002bb6 <LL_RCC_LSI1_IsReady>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0f1      	beq.n	8003388 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80033a4:	f7ff fc2a 	bl	8002bfc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80033aa:	f7fe fe29 	bl	8002000 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e1ac      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80033bc:	f7ff fc2f 	bl	8002c1e <LL_RCC_LSI2_IsReady>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f1      	bne.n	80033aa <HAL_RCC_OscConfig+0x36e>
 80033c6:	e027      	b.n	8003418 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80033c8:	f7ff fc18 	bl	8002bfc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033cc:	f7fe fe18 	bl	8002000 <HAL_GetTick>
 80033d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80033d4:	f7fe fe14 	bl	8002000 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e197      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80033e6:	f7ff fc1a 	bl	8002c1e <LL_RCC_LSI2_IsReady>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1f1      	bne.n	80033d4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80033f0:	f7ff fbd0 	bl	8002b94 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f4:	f7fe fe04 	bl	8002000 <HAL_GetTick>
 80033f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80033fc:	f7fe fe00 	bl	8002000 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e183      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800340e:	f7ff fbd2 	bl	8002bb6 <LL_RCC_LSI1_IsReady>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f1      	bne.n	80033fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d05b      	beq.n	80034dc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003424:	4ba7      	ldr	r3, [pc, #668]	@ (80036c4 <HAL_RCC_OscConfig+0x688>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800342c:	2b00      	cmp	r3, #0
 800342e:	d114      	bne.n	800345a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003430:	f7ff fa70 	bl	8002914 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003434:	f7fe fde4 	bl	8002000 <HAL_GetTick>
 8003438:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343c:	f7fe fde0 	bl	8002000 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e163      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800344e:	4b9d      	ldr	r3, [pc, #628]	@ (80036c4 <HAL_RCC_OscConfig+0x688>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d102      	bne.n	8003468 <HAL_RCC_OscConfig+0x42c>
 8003462:	f7ff fb30 	bl	8002ac6 <LL_RCC_LSE_Enable>
 8003466:	e00c      	b.n	8003482 <HAL_RCC_OscConfig+0x446>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b05      	cmp	r3, #5
 800346e:	d104      	bne.n	800347a <HAL_RCC_OscConfig+0x43e>
 8003470:	f7ff fb4b 	bl	8002b0a <LL_RCC_LSE_EnableBypass>
 8003474:	f7ff fb27 	bl	8002ac6 <LL_RCC_LSE_Enable>
 8003478:	e003      	b.n	8003482 <HAL_RCC_OscConfig+0x446>
 800347a:	f7ff fb35 	bl	8002ae8 <LL_RCC_LSE_Disable>
 800347e:	f7ff fb55 	bl	8002b2c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d014      	beq.n	80034b4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348a:	f7fe fdb9 	bl	8002000 <HAL_GetTick>
 800348e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003490:	e00a      	b.n	80034a8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003492:	f7fe fdb5 	bl	8002000 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e136      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80034a8:	f7ff fb51 	bl	8002b4e <LL_RCC_LSE_IsReady>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0ef      	beq.n	8003492 <HAL_RCC_OscConfig+0x456>
 80034b2:	e013      	b.n	80034dc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b4:	f7fe fda4 	bl	8002000 <HAL_GetTick>
 80034b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80034ba:	e00a      	b.n	80034d2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034bc:	f7fe fda0 	bl	8002000 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e121      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80034d2:	f7ff fb3c 	bl	8002b4e <LL_RCC_LSE_IsReady>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1ef      	bne.n	80034bc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d02c      	beq.n	8003542 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d014      	beq.n	800351a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034f0:	f7ff fab5 	bl	8002a5e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f4:	f7fe fd84 	bl	8002000 <HAL_GetTick>
 80034f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034fc:	f7fe fd80 	bl	8002000 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e103      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800350e:	f7ff fac8 	bl	8002aa2 <LL_RCC_HSI48_IsReady>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f1      	beq.n	80034fc <HAL_RCC_OscConfig+0x4c0>
 8003518:	e013      	b.n	8003542 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800351a:	f7ff fab1 	bl	8002a80 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351e:	f7fe fd6f 	bl	8002000 <HAL_GetTick>
 8003522:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003526:	f7fe fd6b 	bl	8002000 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e0ee      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003538:	f7ff fab3 	bl	8002aa2 <LL_RCC_HSI48_IsReady>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f1      	bne.n	8003526 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 80e4 	beq.w	8003714 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800354c:	f7ff fc11 	bl	8002d72 <LL_RCC_GetSysClkSource>
 8003550:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003552:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355e:	2b02      	cmp	r3, #2
 8003560:	f040 80b4 	bne.w	80036cc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 0203 	and.w	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356e:	429a      	cmp	r2, r3
 8003570:	d123      	bne.n	80035ba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d11c      	bne.n	80035ba <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	0a1b      	lsrs	r3, r3, #8
 8003584:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800358c:	429a      	cmp	r2, r3
 800358e:	d114      	bne.n	80035ba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800359a:	429a      	cmp	r2, r3
 800359c:	d10d      	bne.n	80035ba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d106      	bne.n	80035ba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d05d      	beq.n	8003676 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	2b0c      	cmp	r3, #12
 80035be:	d058      	beq.n	8003672 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e0a1      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035d2:	f7ff fc84 	bl	8002ede <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035d6:	f7fe fd13 	bl	8002000 <HAL_GetTick>
 80035da:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035de:	f7fe fd0f 	bl	8002000 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e092      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1ef      	bne.n	80035de <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003602:	68da      	ldr	r2, [r3, #12]
 8003604:	4b30      	ldr	r3, [pc, #192]	@ (80036c8 <HAL_RCC_OscConfig+0x68c>)
 8003606:	4013      	ands	r3, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003610:	4311      	orrs	r1, r2
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003616:	0212      	lsls	r2, r2, #8
 8003618:	4311      	orrs	r1, r2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800361e:	4311      	orrs	r1, r2
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003624:	4311      	orrs	r1, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800362a:	430a      	orrs	r2, r1
 800362c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003630:	4313      	orrs	r3, r2
 8003632:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003634:	f7ff fc44 	bl	8002ec0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003638:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003646:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003648:	f7fe fcda 	bl	8002000 <HAL_GetTick>
 800364c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003650:	f7fe fcd6 	bl	8002000 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e059      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003662:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0ef      	beq.n	8003650 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003670:	e050      	b.n	8003714 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e04f      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003676:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d147      	bne.n	8003714 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003684:	f7ff fc1c 	bl	8002ec0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003696:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003698:	f7fe fcb2 	bl	8002000 <HAL_GetTick>
 800369c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a0:	f7fe fcae 	bl	8002000 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e031      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0ef      	beq.n	80036a0 <HAL_RCC_OscConfig+0x664>
 80036c0:	e028      	b.n	8003714 <HAL_RCC_OscConfig+0x6d8>
 80036c2:	bf00      	nop
 80036c4:	58000400 	.word	0x58000400
 80036c8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	2b0c      	cmp	r3, #12
 80036d0:	d01e      	beq.n	8003710 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d2:	f7ff fc04 	bl	8002ede <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d6:	f7fe fc93 	bl	8002000 <HAL_GetTick>
 80036da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036de:	f7fe fc8f 	bl	8002000 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e012      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1ef      	bne.n	80036de <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80036fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003708:	4b05      	ldr	r3, [pc, #20]	@ (8003720 <HAL_RCC_OscConfig+0x6e4>)
 800370a:	4013      	ands	r3, r2
 800370c:	60cb      	str	r3, [r1, #12]
 800370e:	e001      	b.n	8003714 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3734      	adds	r7, #52	@ 0x34
 800371a:	46bd      	mov	sp, r7
 800371c:	bd90      	pop	{r4, r7, pc}
 800371e:	bf00      	nop
 8003720:	eefefffc 	.word	0xeefefffc

08003724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e12d      	b.n	8003994 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003738:	4b98      	ldr	r3, [pc, #608]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d91b      	bls.n	800377e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003746:	4b95      	ldr	r3, [pc, #596]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f023 0207 	bic.w	r2, r3, #7
 800374e:	4993      	ldr	r1, [pc, #588]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	4313      	orrs	r3, r2
 8003754:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003756:	f7fe fc53 	bl	8002000 <HAL_GetTick>
 800375a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800375c:	e008      	b.n	8003770 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800375e:	f7fe fc4f 	bl	8002000 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e111      	b.n	8003994 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003770:	4b8a      	ldr	r3, [pc, #552]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d1ef      	bne.n	800375e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d016      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff fafb 	bl	8002d8a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003794:	f7fe fc34 	bl	8002000 <HAL_GetTick>
 8003798:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800379a:	e008      	b.n	80037ae <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800379c:	f7fe fc30 	bl	8002000 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e0f2      	b.n	8003994 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80037ae:	f7ff fbe8 	bl	8002f82 <LL_RCC_IsActiveFlag_HPRE>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f1      	beq.n	800379c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d016      	beq.n	80037f2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff faf2 	bl	8002db2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037ce:	f7fe fc17 	bl	8002000 <HAL_GetTick>
 80037d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80037d4:	e008      	b.n	80037e8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037d6:	f7fe fc13 	bl	8002000 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e0d5      	b.n	8003994 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80037e8:	f7ff fbdd 	bl	8002fa6 <LL_RCC_IsActiveFlag_C2HPRE>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f1      	beq.n	80037d6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d016      	beq.n	800382c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff faeb 	bl	8002dde <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003808:	f7fe fbfa 	bl	8002000 <HAL_GetTick>
 800380c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800380e:	e008      	b.n	8003822 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003810:	f7fe fbf6 	bl	8002000 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e0b8      	b.n	8003994 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003822:	f7ff fbd3 	bl	8002fcc <LL_RCC_IsActiveFlag_SHDHPRE>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f1      	beq.n	8003810 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d016      	beq.n	8003866 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff fae5 	bl	8002e0c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003842:	f7fe fbdd 	bl	8002000 <HAL_GetTick>
 8003846:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003848:	e008      	b.n	800385c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800384a:	f7fe fbd9 	bl	8002000 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e09b      	b.n	8003994 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800385c:	f7ff fbc9 	bl	8002ff2 <LL_RCC_IsActiveFlag_PPRE1>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f1      	beq.n	800384a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d017      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff fadb 	bl	8002e34 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800387e:	f7fe fbbf 	bl	8002000 <HAL_GetTick>
 8003882:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003884:	e008      	b.n	8003898 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003886:	f7fe fbbb 	bl	8002000 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e07d      	b.n	8003994 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003898:	f7ff fbbd 	bl	8003016 <LL_RCC_IsActiveFlag_PPRE2>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f1      	beq.n	8003886 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d043      	beq.n	8003936 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d106      	bne.n	80038c4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80038b6:	f7ff f87b 	bl	80029b0 <LL_RCC_HSE_IsReady>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d11e      	bne.n	80038fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e067      	b.n	8003994 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d106      	bne.n	80038da <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80038cc:	f7ff fb16 	bl	8002efc <LL_RCC_PLL_IsReady>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d113      	bne.n	80038fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e05c      	b.n	8003994 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80038e2:	f7ff f9e3 	bl	8002cac <LL_RCC_MSI_IsReady>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d108      	bne.n	80038fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e051      	b.n	8003994 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80038f0:	f7ff f88e 	bl	8002a10 <LL_RCC_HSI_IsReady>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e04a      	b.n	8003994 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff fa21 	bl	8002d4a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003908:	f7fe fb7a 	bl	8002000 <HAL_GetTick>
 800390c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390e:	e00a      	b.n	8003926 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003910:	f7fe fb76 	bl	8002000 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800391e:	4293      	cmp	r3, r2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e036      	b.n	8003994 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003926:	f7ff fa24 	bl	8002d72 <LL_RCC_GetSysClkSource>
 800392a:	4602      	mov	r2, r0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	429a      	cmp	r2, r3
 8003934:	d1ec      	bne.n	8003910 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003936:	4b19      	ldr	r3, [pc, #100]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d21b      	bcs.n	800397c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003944:	4b15      	ldr	r3, [pc, #84]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f023 0207 	bic.w	r2, r3, #7
 800394c:	4913      	ldr	r1, [pc, #76]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	4313      	orrs	r3, r2
 8003952:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003954:	f7fe fb54 	bl	8002000 <HAL_GetTick>
 8003958:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800395a:	e008      	b.n	800396e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800395c:	f7fe fb50 	bl	8002000 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e012      	b.n	8003994 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800396e:	4b0b      	ldr	r3, [pc, #44]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d1ef      	bne.n	800395c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800397c:	f000 f87e 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8003980:	4603      	mov	r3, r0
 8003982:	4a07      	ldr	r2, [pc, #28]	@ (80039a0 <HAL_RCC_ClockConfig+0x27c>)
 8003984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003986:	f7fe fb47 	bl	8002018 <HAL_GetTickPrio>
 800398a:	4603      	mov	r3, r0
 800398c:	4618      	mov	r0, r3
 800398e:	f7fe fae9 	bl	8001f64 <HAL_InitTick>
 8003992:	4603      	mov	r3, r0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	58004000 	.word	0x58004000
 80039a0:	20000008 	.word	0x20000008

080039a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a4:	b590      	push	{r4, r7, lr}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039aa:	f7ff f9e2 	bl	8002d72 <LL_RCC_GetSysClkSource>
 80039ae:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10a      	bne.n	80039cc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80039b6:	f7ff f99e 	bl	8002cf6 <LL_RCC_MSI_GetRange>
 80039ba:	4603      	mov	r3, r0
 80039bc:	091b      	lsrs	r3, r3, #4
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	4a2b      	ldr	r2, [pc, #172]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0xcc>)
 80039c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	e04b      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d102      	bne.n	80039d8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039d2:	4b28      	ldr	r3, [pc, #160]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0xd0>)
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	e045      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d10a      	bne.n	80039f4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80039de:	f7fe ffb7 	bl	8002950 <LL_RCC_HSE_IsEnabledDiv2>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d102      	bne.n	80039ee <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80039e8:	4b22      	ldr	r3, [pc, #136]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0xd0>)
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	e03a      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80039ee:	4b22      	ldr	r3, [pc, #136]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0xd4>)
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	e037      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80039f4:	f7ff fab9 	bl	8002f6a <LL_RCC_PLL_GetMainSource>
 80039f8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d003      	beq.n	8003a08 <HAL_RCC_GetSysClockFreq+0x64>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d003      	beq.n	8003a0e <HAL_RCC_GetSysClockFreq+0x6a>
 8003a06:	e00d      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003a08:	4b1a      	ldr	r3, [pc, #104]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a0a:	60bb      	str	r3, [r7, #8]
        break;
 8003a0c:	e015      	b.n	8003a3a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a0e:	f7fe ff9f 	bl	8002950 <LL_RCC_HSE_IsEnabledDiv2>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d102      	bne.n	8003a1e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003a18:	4b16      	ldr	r3, [pc, #88]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a1a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003a1c:	e00d      	b.n	8003a3a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003a1e:	4b16      	ldr	r3, [pc, #88]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a20:	60bb      	str	r3, [r7, #8]
        break;
 8003a22:	e00a      	b.n	8003a3a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003a24:	f7ff f967 	bl	8002cf6 <LL_RCC_MSI_GetRange>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	091b      	lsrs	r3, r3, #4
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	4a0f      	ldr	r2, [pc, #60]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a36:	60bb      	str	r3, [r7, #8]
        break;
 8003a38:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003a3a:	f7ff fa71 	bl	8002f20 <LL_RCC_PLL_GetN>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	fb03 f402 	mul.w	r4, r3, r2
 8003a46:	f7ff fa84 	bl	8002f52 <LL_RCC_PLL_GetDivider>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	3301      	adds	r3, #1
 8003a50:	fbb4 f4f3 	udiv	r4, r4, r3
 8003a54:	f7ff fa71 	bl	8002f3a <LL_RCC_PLL_GetR>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	0f5b      	lsrs	r3, r3, #29
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a62:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003a64:	68fb      	ldr	r3, [r7, #12]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd90      	pop	{r4, r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	0800ad5c 	.word	0x0800ad5c
 8003a74:	00f42400 	.word	0x00f42400
 8003a78:	01e84800 	.word	0x01e84800

08003a7c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a7c:	b598      	push	{r3, r4, r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003a80:	f7ff ff90 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 8003a84:	4604      	mov	r4, r0
 8003a86:	f7ff f9e9 	bl	8002e5c <LL_RCC_GetAHBPrescaler>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	091b      	lsrs	r3, r3, #4
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	4a03      	ldr	r2, [pc, #12]	@ (8003aa0 <HAL_RCC_GetHCLKFreq+0x24>)
 8003a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a98:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	bd98      	pop	{r3, r4, r7, pc}
 8003aa0:	0800acfc 	.word	0x0800acfc

08003aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa4:	b598      	push	{r3, r4, r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003aa8:	f7ff ffe8 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8003aac:	4604      	mov	r4, r0
 8003aae:	f7ff f9ef 	bl	8002e90 <LL_RCC_GetAPB1Prescaler>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	0a1b      	lsrs	r3, r3, #8
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	4a04      	ldr	r2, [pc, #16]	@ (8003acc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	bd98      	pop	{r3, r4, r7, pc}
 8003acc:	0800ad3c 	.word	0x0800ad3c

08003ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ad0:	b598      	push	{r3, r4, r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003ad4:	f7ff ffd2 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8003ad8:	4604      	mov	r4, r0
 8003ada:	f7ff f9e5 	bl	8002ea8 <LL_RCC_GetAPB2Prescaler>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	0adb      	lsrs	r3, r3, #11
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	4a04      	ldr	r2, [pc, #16]	@ (8003af8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	bd98      	pop	{r3, r4, r7, pc}
 8003af8:	0800ad3c 	.word	0x0800ad3c

08003afc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003afc:	b590      	push	{r4, r7, lr}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2bb0      	cmp	r3, #176	@ 0xb0
 8003b08:	d903      	bls.n	8003b12 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003b0a:	4b15      	ldr	r3, [pc, #84]	@ (8003b60 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	e007      	b.n	8003b22 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	4a11      	ldr	r2, [pc, #68]	@ (8003b60 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b20:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003b22:	f7ff f9a7 	bl	8002e74 <LL_RCC_GetAHB4Prescaler>
 8003b26:	4603      	mov	r3, r0
 8003b28:	091b      	lsrs	r3, r3, #4
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	4a0d      	ldr	r2, [pc, #52]	@ (8003b64 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b68 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003b40:	fba2 2303 	umull	r2, r3, r2, r3
 8003b44:	0c9c      	lsrs	r4, r3, #18
 8003b46:	f7fe fef5 	bl	8002934 <HAL_PWREx_GetVoltageRange>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4620      	mov	r0, r4
 8003b50:	f000 f80c 	bl	8003b6c <RCC_SetFlashLatency>
 8003b54:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd90      	pop	{r4, r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	0800ad5c 	.word	0x0800ad5c
 8003b64:	0800acfc 	.word	0x0800acfc
 8003b68:	431bde83 	.word	0x431bde83

08003b6c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003b6c:	b590      	push	{r4, r7, lr}
 8003b6e:	b093      	sub	sp, #76	@ 0x4c
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003b76:	4b37      	ldr	r3, [pc, #220]	@ (8003c54 <RCC_SetFlashLatency+0xe8>)
 8003b78:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003b7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003b82:	4a35      	ldr	r2, [pc, #212]	@ (8003c58 <RCC_SetFlashLatency+0xec>)
 8003b84:	f107 031c 	add.w	r3, r7, #28
 8003b88:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003b8e:	4b33      	ldr	r3, [pc, #204]	@ (8003c5c <RCC_SetFlashLatency+0xf0>)
 8003b90:	f107 040c 	add.w	r4, r7, #12
 8003b94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ba4:	d11a      	bne.n	8003bdc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003baa:	e013      	b.n	8003bd4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003bac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	3348      	adds	r3, #72	@ 0x48
 8003bb2:	443b      	add	r3, r7
 8003bb4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d807      	bhi.n	8003bce <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	3348      	adds	r3, #72	@ 0x48
 8003bc4:	443b      	add	r3, r7
 8003bc6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003bca:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003bcc:	e020      	b.n	8003c10 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003bce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	d9e8      	bls.n	8003bac <RCC_SetFlashLatency+0x40>
 8003bda:	e019      	b.n	8003c10 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003bdc:	2300      	movs	r3, #0
 8003bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003be0:	e013      	b.n	8003c0a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	3348      	adds	r3, #72	@ 0x48
 8003be8:	443b      	add	r3, r7
 8003bea:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d807      	bhi.n	8003c04 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003bf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	3348      	adds	r3, #72	@ 0x48
 8003bfa:	443b      	add	r3, r7
 8003bfc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003c00:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003c02:	e005      	b.n	8003c10 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c06:	3301      	adds	r3, #1
 8003c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d9e8      	bls.n	8003be2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003c10:	4b13      	ldr	r3, [pc, #76]	@ (8003c60 <RCC_SetFlashLatency+0xf4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f023 0207 	bic.w	r2, r3, #7
 8003c18:	4911      	ldr	r1, [pc, #68]	@ (8003c60 <RCC_SetFlashLatency+0xf4>)
 8003c1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c20:	f7fe f9ee 	bl	8002000 <HAL_GetTick>
 8003c24:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c26:	e008      	b.n	8003c3a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c28:	f7fe f9ea 	bl	8002000 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e007      	b.n	8003c4a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c3a:	4b09      	ldr	r3, [pc, #36]	@ (8003c60 <RCC_SetFlashLatency+0xf4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d1ef      	bne.n	8003c28 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	374c      	adds	r7, #76	@ 0x4c
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd90      	pop	{r4, r7, pc}
 8003c52:	bf00      	nop
 8003c54:	0800ab58 	.word	0x0800ab58
 8003c58:	0800ab68 	.word	0x0800ab68
 8003c5c:	0800ab74 	.word	0x0800ab74
 8003c60:	58004000 	.word	0x58004000

08003c64 <LL_RCC_LSE_IsEnabled>:
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003c68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <LL_RCC_LSE_IsEnabled+0x18>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e000      	b.n	8003c7e <LL_RCC_LSE_IsEnabled+0x1a>
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <LL_RCC_LSE_IsReady>:
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d101      	bne.n	8003ca0 <LL_RCC_LSE_IsReady+0x18>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e000      	b.n	8003ca2 <LL_RCC_LSE_IsReady+0x1a>
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <LL_RCC_SetRFWKPClockSource>:
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003cb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cbc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003cc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <LL_RCC_SetSMPSClockSource>:
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003ce0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce6:	f023 0203 	bic.w	r2, r3, #3
 8003cea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <LL_RCC_SetSMPSPrescaler>:
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <LL_RCC_SetUSARTClockSource>:
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003d30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d38:	f023 0203 	bic.w	r2, r3, #3
 8003d3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <LL_RCC_SetLPUARTClockSource>:
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d64:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <LL_RCC_SetI2CClockSource>:
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d8c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	091b      	lsrs	r3, r3, #4
 8003d94:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	401a      	ands	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003da4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <LL_RCC_SetLPTIMClockSource>:
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dc6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	0c1b      	lsrs	r3, r3, #16
 8003dce:	041b      	lsls	r3, r3, #16
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	401a      	ands	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	041b      	lsls	r3, r3, #16
 8003dd8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <LL_RCC_SetSAIClockSource>:
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003df6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <LL_RCC_SetRNGClockSource>:
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003e22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e2a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003e2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <LL_RCC_SetCLK48ClockSource>:
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003e4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <LL_RCC_SetUSBClockSource>:
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b082      	sub	sp, #8
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff ffe3 	bl	8003e46 <LL_RCC_SetCLK48ClockSource>
}
 8003e80:	bf00      	nop
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <LL_RCC_SetADCClockSource>:
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003e90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e98:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <LL_RCC_SetRTCClockSource>:
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003ebc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ec8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <LL_RCC_GetRTCClockSource>:
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003ee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <LL_RCC_ForceBackupDomainReset>:
{
 8003efa:	b480      	push	{r7}
 8003efc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003efe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003f12:	bf00      	nop
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <LL_RCC_ReleaseBackupDomainReset>:
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003f20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003f34:	bf00      	nop
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <LL_RCC_PLLSAI1_Enable>:
{
 8003f3e:	b480      	push	{r7}
 8003f40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003f42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f4c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f50:	6013      	str	r3, [r2, #0]
}
 8003f52:	bf00      	nop
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <LL_RCC_PLLSAI1_Disable>:
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003f60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f6e:	6013      	str	r3, [r2, #0]
}
 8003f70:	bf00      	nop
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <LL_RCC_PLLSAI1_IsReady>:
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f8c:	d101      	bne.n	8003f92 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b088      	sub	sp, #32
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003faa:	2300      	movs	r3, #0
 8003fac:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d034      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003fc2:	d021      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003fc4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003fc8:	d81b      	bhi.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fce:	d01d      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003fd0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fd4:	d815      	bhi.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00b      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003fda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fde:	d110      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003fe0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fee:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ff0:	e00d      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 f947 	bl	800428a <RCCEx_PLLSAI1_ConfigNP>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004000:	e005      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	77fb      	strb	r3, [r7, #31]
        break;
 8004006:	e002      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004008:	bf00      	nop
 800400a:	e000      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800400c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800400e:	7ffb      	ldrb	r3, [r7, #31]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d105      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff fee8 	bl	8003dee <LL_RCC_SetSAIClockSource>
 800401e:	e001      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004020:	7ffb      	ldrb	r3, [r7, #31]
 8004022:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800402c:	2b00      	cmp	r3, #0
 800402e:	d046      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004030:	f7ff ff56 	bl	8003ee0 <LL_RCC_GetRTCClockSource>
 8004034:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	429a      	cmp	r2, r3
 800403e:	d03c      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004040:	f7fe fc68 	bl	8002914 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d105      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff ff30 	bl	8003eb4 <LL_RCC_SetRTCClockSource>
 8004054:	e02e      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004056:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004060:	f7ff ff4b 	bl	8003efa <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004064:	f7ff ff5a 	bl	8003f1c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004072:	4313      	orrs	r3, r2
 8004074:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004076:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004080:	f7ff fdf0 	bl	8003c64 <LL_RCC_LSE_IsEnabled>
 8004084:	4603      	mov	r3, r0
 8004086:	2b01      	cmp	r3, #1
 8004088:	d114      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800408a:	f7fd ffb9 	bl	8002000 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004090:	e00b      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004092:	f7fd ffb5 	bl	8002000 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d902      	bls.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	77fb      	strb	r3, [r7, #31]
              break;
 80040a8:	e004      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80040aa:	f7ff fded 	bl	8003c88 <LL_RCC_LSE_IsReady>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d1ee      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80040b4:	7ffb      	ldrb	r3, [r7, #31]
 80040b6:	77bb      	strb	r3, [r7, #30]
 80040b8:	e001      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ba:	7ffb      	ldrb	r3, [r7, #31]
 80040bc:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d004      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff fe2a 	bl	8003d28 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d004      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff fe35 	bl	8003d54 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d004      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff fe5d 	bl	8003dba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	2b00      	cmp	r3, #0
 800410a:	d004      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff fe52 	bl	8003dba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	2b00      	cmp	r3, #0
 8004120:	d004      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff fe2a 	bl	8003d80 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d004      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff fe1f 	bl	8003d80 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414a:	2b00      	cmp	r3, #0
 800414c:	d022      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff fe8d 	bl	8003e72 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800415c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004160:	d107      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800416c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004170:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004176:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800417a:	d10b      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3304      	adds	r3, #4
 8004180:	4618      	mov	r0, r3
 8004182:	f000 f8dd 	bl	8004340 <RCCEx_PLLSAI1_ConfigNQ>
 8004186:	4603      	mov	r3, r0
 8004188:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800418a:	7ffb      	ldrb	r3, [r7, #31]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004190:	7ffb      	ldrb	r3, [r7, #31]
 8004192:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800419c:	2b00      	cmp	r3, #0
 800419e:	d02b      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041a8:	d008      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041b2:	d003      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d105      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fe2a 	bl	8003e1a <LL_RCC_SetRNGClockSource>
 80041c6:	e00a      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x240>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	2000      	movs	r0, #0
 80041d4:	f7ff fe21 	bl	8003e1a <LL_RCC_SetRNGClockSource>
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f7ff fe34 	bl	8003e46 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e2:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80041e6:	d107      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80041e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004200:	2b00      	cmp	r3, #0
 8004202:	d022      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fe3d 	bl	8003e88 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004212:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004216:	d107      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004222:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004226:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800422c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004230:	d10b      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3304      	adds	r3, #4
 8004236:	4618      	mov	r0, r3
 8004238:	f000 f8dd 	bl	80043f6 <RCCEx_PLLSAI1_ConfigNR>
 800423c:	4603      	mov	r3, r0
 800423e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004240:	7ffb      	ldrb	r3, [r7, #31]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004246:	7ffb      	ldrb	r3, [r7, #31]
 8004248:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d004      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff fd26 	bl	8003cac <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d009      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff fd45 	bl	8003d00 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fd2c 	bl	8003cd8 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004280:	7fbb      	ldrb	r3, [r7, #30]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3720      	adds	r7, #32
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b084      	sub	sp, #16
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004296:	f7ff fe61 	bl	8003f5c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800429a:	f7fd feb1 	bl	8002000 <HAL_GetTick>
 800429e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042a0:	e009      	b.n	80042b6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042a2:	f7fd fead 	bl	8002000 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d902      	bls.n	80042b6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	73fb      	strb	r3, [r7, #15]
      break;
 80042b4:	e004      	b.n	80042c0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042b6:	f7ff fe60 	bl	8003f7a <LL_RCC_PLLSAI1_IsReady>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1f0      	bne.n	80042a2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d137      	bne.n	8004336 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80042c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	021b      	lsls	r3, r3, #8
 80042d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042da:	4313      	orrs	r3, r2
 80042dc:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80042de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042f0:	4313      	orrs	r3, r2
 80042f2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80042f4:	f7ff fe23 	bl	8003f3e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f8:	f7fd fe82 	bl	8002000 <HAL_GetTick>
 80042fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80042fe:	e009      	b.n	8004314 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004300:	f7fd fe7e 	bl	8002000 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d902      	bls.n	8004314 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	73fb      	strb	r3, [r7, #15]
        break;
 8004312:	e004      	b.n	800431e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004314:	f7ff fe31 	bl	8003f7a <LL_RCC_PLLSAI1_IsReady>
 8004318:	4603      	mov	r3, r0
 800431a:	2b01      	cmp	r3, #1
 800431c:	d1f0      	bne.n	8004300 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800431e:	7bfb      	ldrb	r3, [r7, #15]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d108      	bne.n	8004336 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004324:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004332:	4313      	orrs	r3, r2
 8004334:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004336:	7bfb      	ldrb	r3, [r7, #15]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800434c:	f7ff fe06 	bl	8003f5c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004350:	f7fd fe56 	bl	8002000 <HAL_GetTick>
 8004354:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004356:	e009      	b.n	800436c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004358:	f7fd fe52 	bl	8002000 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d902      	bls.n	800436c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	73fb      	strb	r3, [r7, #15]
      break;
 800436a:	e004      	b.n	8004376 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800436c:	f7ff fe05 	bl	8003f7a <LL_RCC_PLLSAI1_IsReady>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004376:	7bfb      	ldrb	r3, [r7, #15]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d137      	bne.n	80043ec <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800437c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	021b      	lsls	r3, r3, #8
 800438c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004390:	4313      	orrs	r3, r2
 8004392:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004394:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043a6:	4313      	orrs	r3, r2
 80043a8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80043aa:	f7ff fdc8 	bl	8003f3e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ae:	f7fd fe27 	bl	8002000 <HAL_GetTick>
 80043b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80043b4:	e009      	b.n	80043ca <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043b6:	f7fd fe23 	bl	8002000 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d902      	bls.n	80043ca <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	73fb      	strb	r3, [r7, #15]
        break;
 80043c8:	e004      	b.n	80043d4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80043ca:	f7ff fdd6 	bl	8003f7a <LL_RCC_PLLSAI1_IsReady>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d1f0      	bne.n	80043b6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d108      	bne.n	80043ec <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80043da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043de:	691a      	ldr	r2, [r3, #16]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043e8:	4313      	orrs	r3, r2
 80043ea:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004402:	f7ff fdab 	bl	8003f5c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004406:	f7fd fdfb 	bl	8002000 <HAL_GetTick>
 800440a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800440c:	e009      	b.n	8004422 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800440e:	f7fd fdf7 	bl	8002000 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d902      	bls.n	8004422 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	73fb      	strb	r3, [r7, #15]
      break;
 8004420:	e004      	b.n	800442c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004422:	f7ff fdaa 	bl	8003f7a <LL_RCC_PLLSAI1_IsReady>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1f0      	bne.n	800440e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d137      	bne.n	80044a2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004446:	4313      	orrs	r3, r2
 8004448:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800444a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800445c:	4313      	orrs	r3, r2
 800445e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004460:	f7ff fd6d 	bl	8003f3e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004464:	f7fd fdcc 	bl	8002000 <HAL_GetTick>
 8004468:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800446a:	e009      	b.n	8004480 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800446c:	f7fd fdc8 	bl	8002000 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d902      	bls.n	8004480 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	73fb      	strb	r3, [r7, #15]
        break;
 800447e:	e004      	b.n	800448a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004480:	f7ff fd7b 	bl	8003f7a <LL_RCC_PLLSAI1_IsReady>
 8004484:	4603      	mov	r3, r0
 8004486:	2b01      	cmp	r3, #1
 8004488:	d1f0      	bne.n	800446c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800448a:	7bfb      	ldrb	r3, [r7, #15]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d108      	bne.n	80044a2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004494:	691a      	ldr	r2, [r3, #16]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800449e:	4313      	orrs	r3, r2
 80044a0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e07a      	b.n	80045b8 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <HAL_RTC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fd faaa 	bl	8001a30 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f003 0310 	and.w	r3, r3, #16
 80044ee:	2b10      	cmp	r3, #16
 80044f0:	d058      	beq.n	80045a4 <HAL_RTC_Init+0xf8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	22ca      	movs	r2, #202	@ 0xca
 80044f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2253      	movs	r2, #83	@ 0x53
 8004500:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f882 	bl	800460c <RTC_EnterInitMode>
 8004508:	4603      	mov	r3, r0
 800450a:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800450c:	7bfb      	ldrb	r3, [r7, #15]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d12c      	bne.n	800456c <HAL_RTC_Init+0xc0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6812      	ldr	r2, [r2, #0]
 800451c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004520:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004524:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6899      	ldr	r1, [r3, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	68d2      	ldr	r2, [r2, #12]
 800454c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6919      	ldr	r1, [r3, #16]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	041a      	lsls	r2, r3, #16
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f88a 	bl	800467c <RTC_ExitInitMode>
 8004568:	4603      	mov	r3, r0
 800456a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800456c:	7bfb      	ldrb	r3, [r7, #15]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d113      	bne.n	800459a <HAL_RTC_Init+0xee>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0203 	bic.w	r2, r2, #3
 8004580:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69da      	ldr	r2, [r3, #28]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	22ff      	movs	r2, #255	@ 0xff
 80045a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80045a2:	e001      	b.n	80045a8 <HAL_RTC_Init+0xfc>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d103      	bne.n	80045b6 <HAL_RTC_Init+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004608 <HAL_RTC_WaitForSynchro+0x48>)
 80045d2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045d4:	f7fd fd14 	bl	8002000 <HAL_GetTick>
 80045d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045da:	e009      	b.n	80045f0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045dc:	f7fd fd10 	bl	8002000 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045ea:	d901      	bls.n	80045f0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e007      	b.n	8004600 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0ee      	beq.n	80045dc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	0001ff5f 	.word	0x0001ff5f

0800460c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004618:	2300      	movs	r3, #0
 800461a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004626:	2b00      	cmp	r3, #0
 8004628:	d123      	bne.n	8004672 <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004638:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800463a:	f7fd fce1 	bl	8002000 <HAL_GetTick>
 800463e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004640:	e00d      	b.n	800465e <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004642:	f7fd fcdd 	bl	8002000 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004650:	d905      	bls.n	800465e <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2204      	movs	r2, #4
 8004656:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004668:	2b00      	cmp	r3, #0
 800466a:	d102      	bne.n	8004672 <RTC_EnterInitMode+0x66>
 800466c:	7bfb      	ldrb	r3, [r7, #15]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d1e7      	bne.n	8004642 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004672:	7bfb      	ldrb	r3, [r7, #15]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004696:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10b      	bne.n	80046be <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7ff ff8a 	bl	80045c0 <HAL_RTC_WaitForSynchro>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d005      	beq.n	80046be <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2204      	movs	r2, #4
 80046b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80046be:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80046d4:	4b5f      	ldr	r3, [pc, #380]	@ (8004854 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a5f      	ldr	r2, [pc, #380]	@ (8004858 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 80046da:	fba2 2303 	umull	r2, r3, r2, r3
 80046de:	0adb      	lsrs	r3, r3, #11
 80046e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80046e4:	fb02 f303 	mul.w	r3, r2, r3
 80046e8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e0a7      	b.n	8004848 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	22ca      	movs	r2, #202	@ 0xca
 800470e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2253      	movs	r2, #83	@ 0x53
 8004716:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004722:	2b00      	cmp	r3, #0
 8004724:	d01a      	beq.n	800475c <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	3b01      	subs	r3, #1
 800472a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10d      	bne.n	800474e <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	22ff      	movs	r2, #255	@ 0xff
 8004738:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2203      	movs	r2, #3
 800473e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e07c      	b.n	8004848 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e4      	bne.n	8004726 <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800476a:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	b2da      	uxtb	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800477c:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800477e:	4b35      	ldr	r3, [pc, #212]	@ (8004854 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a35      	ldr	r2, [pc, #212]	@ (8004858 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 8004784:	fba2 2303 	umull	r2, r3, r2, r3
 8004788:	0adb      	lsrs	r3, r3, #11
 800478a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800478e:	fb02 f303 	mul.w	r3, r2, r3
 8004792:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	3b01      	subs	r3, #1
 8004798:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10d      	bne.n	80047bc <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	22ff      	movs	r2, #255	@ 0xff
 80047a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2203      	movs	r2, #3
 80047ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e045      	b.n	8004848 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0e4      	beq.n	8004794 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0207 	bic.w	r2, r2, #7
 80047d8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6899      	ldr	r1, [r3, #8]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80047f2:	4b1a      	ldr	r3, [pc, #104]	@ (800485c <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 80047f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047f8:	4a18      	ldr	r2, [pc, #96]	@ (800485c <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 80047fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80047fe:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004802:	4b16      	ldr	r3, [pc, #88]	@ (800485c <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a15      	ldr	r2, [pc, #84]	@ (800485c <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8004808:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800480c:	6013      	str	r3, [r2, #0]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800481c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800482c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	22ff      	movs	r2, #255	@ 0xff
 8004834:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	371c      	adds	r7, #28
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	20000008 	.word	0x20000008
 8004858:	10624dd3 	.word	0x10624dd3
 800485c:	58000800 	.word	0x58000800

08004860 <LL_RCC_GetUSARTClockSource>:
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800486c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4013      	ands	r3, r2
}
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <LL_RCC_GetLPUARTClockSource>:
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800488c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4013      	ands	r3, r2
}
 8004894:	4618      	mov	r0, r3
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e042      	b.n	8004938 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d106      	bne.n	80048ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7fd f867 	bl	8001998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2224      	movs	r2, #36	@ 0x24
 80048ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 0201 	bic.w	r2, r2, #1
 80048e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fe3e 	bl	800556c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 fc13 	bl	800511c <UART_SetConfig>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e01b      	b.n	8004938 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800490e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800491e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 febd 	bl	80056b0 <UART_CheckIdleState>
 8004936:	4603      	mov	r3, r0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08a      	sub	sp, #40	@ 0x28
 8004944:	af02      	add	r7, sp, #8
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	4613      	mov	r3, r2
 800494e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004956:	2b20      	cmp	r3, #32
 8004958:	d17b      	bne.n	8004a52 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_UART_Transmit+0x26>
 8004960:	88fb      	ldrh	r3, [r7, #6]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e074      	b.n	8004a54 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2221      	movs	r2, #33	@ 0x21
 8004976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800497a:	f7fd fb41 	bl	8002000 <HAL_GetTick>
 800497e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	88fa      	ldrh	r2, [r7, #6]
 8004984:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	88fa      	ldrh	r2, [r7, #6]
 800498c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004998:	d108      	bne.n	80049ac <HAL_UART_Transmit+0x6c>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d104      	bne.n	80049ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	61bb      	str	r3, [r7, #24]
 80049aa:	e003      	b.n	80049b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049b4:	e030      	b.n	8004a18 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2200      	movs	r2, #0
 80049be:	2180      	movs	r1, #128	@ 0x80
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 ff1f 	bl	8005804 <UART_WaitOnFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d005      	beq.n	80049d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e03d      	b.n	8004a54 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10b      	bne.n	80049f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	3302      	adds	r3, #2
 80049f2:	61bb      	str	r3, [r7, #24]
 80049f4:	e007      	b.n	8004a06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	781a      	ldrb	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	3301      	adds	r3, #1
 8004a04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1c8      	bne.n	80049b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	2140      	movs	r1, #64	@ 0x40
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 fee8 	bl	8005804 <UART_WaitOnFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d005      	beq.n	8004a46 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e006      	b.n	8004a54 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e000      	b.n	8004a54 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004a52:	2302      	movs	r3, #2
  }
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3720      	adds	r7, #32
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b0ba      	sub	sp, #232	@ 0xe8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004a86:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004a90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d11b      	bne.n	8004ad0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a9c:	f003 0320 	and.w	r3, r3, #32
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d015      	beq.n	8004ad0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aa8:	f003 0320 	and.w	r3, r3, #32
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d105      	bne.n	8004abc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ab4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d009      	beq.n	8004ad0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 8300 	beq.w	80050c6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	4798      	blx	r3
      }
      return;
 8004ace:	e2fa      	b.n	80050c6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ad0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 8123 	beq.w	8004d20 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004ada:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004ade:	4b8d      	ldr	r3, [pc, #564]	@ (8004d14 <HAL_UART_IRQHandler+0x2b8>)
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004ae6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004aea:	4b8b      	ldr	r3, [pc, #556]	@ (8004d18 <HAL_UART_IRQHandler+0x2bc>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 8116 	beq.w	8004d20 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d011      	beq.n	8004b24 <HAL_UART_IRQHandler+0xc8>
 8004b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00b      	beq.n	8004b24 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2201      	movs	r2, #1
 8004b12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b1a:	f043 0201 	orr.w	r2, r3, #1
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d011      	beq.n	8004b54 <HAL_UART_IRQHandler+0xf8>
 8004b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00b      	beq.n	8004b54 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2202      	movs	r2, #2
 8004b42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b4a:	f043 0204 	orr.w	r2, r3, #4
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d011      	beq.n	8004b84 <HAL_UART_IRQHandler+0x128>
 8004b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00b      	beq.n	8004b84 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2204      	movs	r2, #4
 8004b72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b7a:	f043 0202 	orr.w	r2, r3, #2
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d017      	beq.n	8004bc0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d105      	bne.n	8004ba8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004b9c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004ba0:	4b5c      	ldr	r3, [pc, #368]	@ (8004d14 <HAL_UART_IRQHandler+0x2b8>)
 8004ba2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00b      	beq.n	8004bc0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2208      	movs	r2, #8
 8004bae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bb6:	f043 0208 	orr.w	r2, r3, #8
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d012      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x196>
 8004bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00c      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004be0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004be8:	f043 0220 	orr.w	r2, r3, #32
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 8266 	beq.w	80050ca <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c02:	f003 0320 	and.w	r3, r3, #32
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d013      	beq.n	8004c32 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d105      	bne.n	8004c22 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d007      	beq.n	8004c32 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c46:	2b40      	cmp	r3, #64	@ 0x40
 8004c48:	d005      	beq.n	8004c56 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c4e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d054      	beq.n	8004d00 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 ff64 	bl	8005b24 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c66:	2b40      	cmp	r3, #64	@ 0x40
 8004c68:	d146      	bne.n	8004cf8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3308      	adds	r3, #8
 8004c70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c78:	e853 3f00 	ldrex	r3, [r3]
 8004c7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3308      	adds	r3, #8
 8004c92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004ca2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004ca6:	e841 2300 	strex	r3, r2, [r1]
 8004caa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004cae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1d9      	bne.n	8004c6a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d017      	beq.n	8004cf0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cc6:	4a15      	ldr	r2, [pc, #84]	@ (8004d1c <HAL_UART_IRQHandler+0x2c0>)
 8004cc8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fd fba5 	bl	8002420 <HAL_DMA_Abort_IT>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d019      	beq.n	8004d10 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004cea:	4610      	mov	r0, r2
 8004cec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cee:	e00f      	b.n	8004d10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 fa09 	bl	8005108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf6:	e00b      	b.n	8004d10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fa05 	bl	8005108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cfe:	e007      	b.n	8004d10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fa01 	bl	8005108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004d0e:	e1dc      	b.n	80050ca <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d10:	bf00      	nop
    return;
 8004d12:	e1da      	b.n	80050ca <HAL_UART_IRQHandler+0x66e>
 8004d14:	10000001 	.word	0x10000001
 8004d18:	04000120 	.word	0x04000120
 8004d1c:	08005bf1 	.word	0x08005bf1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	f040 8170 	bne.w	800500a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d2e:	f003 0310 	and.w	r3, r3, #16
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 8169 	beq.w	800500a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d3c:	f003 0310 	and.w	r3, r3, #16
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 8162 	beq.w	800500a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2210      	movs	r2, #16
 8004d4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d58:	2b40      	cmp	r3, #64	@ 0x40
 8004d5a:	f040 80d8 	bne.w	8004f0e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 80af 	beq.w	8004ed4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004d7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d80:	429a      	cmp	r2, r3
 8004d82:	f080 80a7 	bcs.w	8004ed4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f040 8087 	bne.w	8004eb2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004db0:	e853 3f00 	ldrex	r3, [r3]
 8004db4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004dbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004dce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004dd2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004dda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004dde:	e841 2300 	strex	r3, r2, [r1]
 8004de2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1da      	bne.n	8004da4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3308      	adds	r3, #8
 8004df4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004df8:	e853 3f00 	ldrex	r3, [r3]
 8004dfc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004dfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3308      	adds	r3, #8
 8004e0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004e16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004e1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004e1e:	e841 2300 	strex	r3, r2, [r1]
 8004e22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004e24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1e1      	bne.n	8004dee <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3308      	adds	r3, #8
 8004e30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e34:	e853 3f00 	ldrex	r3, [r3]
 8004e38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004e3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3308      	adds	r3, #8
 8004e4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004e4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004e54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e56:	e841 2300 	strex	r3, r2, [r1]
 8004e5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004e5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e3      	bne.n	8004e2a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e80:	f023 0310 	bic.w	r3, r3, #16
 8004e84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e92:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e94:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004ea0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e4      	bne.n	8004e70 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fd fa58 	bl	8002362 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	4619      	mov	r1, r3
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7fc fec3 	bl	8001c58 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004ed2:	e0fc      	b.n	80050ce <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004eda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	f040 80f5 	bne.w	80050ce <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b20      	cmp	r3, #32
 8004ef4:	f040 80eb 	bne.w	80050ce <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004f04:	4619      	mov	r1, r3
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7fc fea6 	bl	8001c58 <HAL_UARTEx_RxEventCallback>
      return;
 8004f0c:	e0df      	b.n	80050ce <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 80d1 	beq.w	80050d2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004f30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 80cc 	beq.w	80050d2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f42:	e853 3f00 	ldrex	r3, [r3]
 8004f46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004f5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f5e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f64:	e841 2300 	strex	r3, r2, [r1]
 8004f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1e4      	bne.n	8004f3a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3308      	adds	r3, #8
 8004f76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7a:	e853 3f00 	ldrex	r3, [r3]
 8004f7e:	623b      	str	r3, [r7, #32]
   return(result);
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f86:	f023 0301 	bic.w	r3, r3, #1
 8004f8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3308      	adds	r3, #8
 8004f94:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004f98:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fa0:	e841 2300 	strex	r3, r2, [r1]
 8004fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e1      	bne.n	8004f70 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	e853 3f00 	ldrex	r3, [r3]
 8004fcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f023 0310 	bic.w	r3, r3, #16
 8004fd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004fe2:	61fb      	str	r3, [r7, #28]
 8004fe4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe6:	69b9      	ldr	r1, [r7, #24]
 8004fe8:	69fa      	ldr	r2, [r7, #28]
 8004fea:	e841 2300 	strex	r3, r2, [r1]
 8004fee:	617b      	str	r3, [r7, #20]
   return(result);
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1e4      	bne.n	8004fc0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ffc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005000:	4619      	mov	r1, r3
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fc fe28 	bl	8001c58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005008:	e063      	b.n	80050d2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800500a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800500e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00e      	beq.n	8005034 <HAL_UART_IRQHandler+0x5d8>
 8005016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800501a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d008      	beq.n	8005034 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800502a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f001 fb3d 	bl	80066ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005032:	e051      	b.n	80050d8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800503c:	2b00      	cmp	r3, #0
 800503e:	d014      	beq.n	800506a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005048:	2b00      	cmp	r3, #0
 800504a:	d105      	bne.n	8005058 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800504c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005050:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d008      	beq.n	800506a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800505c:	2b00      	cmp	r3, #0
 800505e:	d03a      	beq.n	80050d6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	4798      	blx	r3
    }
    return;
 8005068:	e035      	b.n	80050d6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800506a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800506e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005072:	2b00      	cmp	r3, #0
 8005074:	d009      	beq.n	800508a <HAL_UART_IRQHandler+0x62e>
 8005076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800507a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fdc6 	bl	8005c14 <UART_EndTransmit_IT>
    return;
 8005088:	e026      	b.n	80050d8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800508a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800508e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d009      	beq.n	80050aa <HAL_UART_IRQHandler+0x64e>
 8005096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800509a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f001 fb16 	bl	80066d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050a8:	e016      	b.n	80050d8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80050aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d010      	beq.n	80050d8 <HAL_UART_IRQHandler+0x67c>
 80050b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	da0c      	bge.n	80050d8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f001 fafe 	bl	80066c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050c4:	e008      	b.n	80050d8 <HAL_UART_IRQHandler+0x67c>
      return;
 80050c6:	bf00      	nop
 80050c8:	e006      	b.n	80050d8 <HAL_UART_IRQHandler+0x67c>
    return;
 80050ca:	bf00      	nop
 80050cc:	e004      	b.n	80050d8 <HAL_UART_IRQHandler+0x67c>
      return;
 80050ce:	bf00      	nop
 80050d0:	e002      	b.n	80050d8 <HAL_UART_IRQHandler+0x67c>
      return;
 80050d2:	bf00      	nop
 80050d4:	e000      	b.n	80050d8 <HAL_UART_IRQHandler+0x67c>
    return;
 80050d6:	bf00      	nop
  }
}
 80050d8:	37e8      	adds	r7, #232	@ 0xe8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop

080050e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800511c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005120:	b08c      	sub	sp, #48	@ 0x30
 8005122:	af00      	add	r7, sp, #0
 8005124:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	431a      	orrs	r2, r3
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	431a      	orrs	r2, r3
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	4313      	orrs	r3, r2
 8005142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	4baf      	ldr	r3, [pc, #700]	@ (8005408 <UART_SetConfig+0x2ec>)
 800514c:	4013      	ands	r3, r2
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	6812      	ldr	r2, [r2, #0]
 8005152:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005154:	430b      	orrs	r3, r1
 8005156:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4aa4      	ldr	r2, [pc, #656]	@ (800540c <UART_SetConfig+0x2f0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d004      	beq.n	8005188 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005184:	4313      	orrs	r3, r2
 8005186:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005192:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	6812      	ldr	r2, [r2, #0]
 800519a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800519c:	430b      	orrs	r3, r1
 800519e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a6:	f023 010f 	bic.w	r1, r3, #15
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a95      	ldr	r2, [pc, #596]	@ (8005410 <UART_SetConfig+0x2f4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d125      	bne.n	800520c <UART_SetConfig+0xf0>
 80051c0:	2003      	movs	r0, #3
 80051c2:	f7ff fb4d 	bl	8004860 <LL_RCC_GetUSARTClockSource>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b03      	cmp	r3, #3
 80051ca:	d81b      	bhi.n	8005204 <UART_SetConfig+0xe8>
 80051cc:	a201      	add	r2, pc, #4	@ (adr r2, 80051d4 <UART_SetConfig+0xb8>)
 80051ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d2:	bf00      	nop
 80051d4:	080051e5 	.word	0x080051e5
 80051d8:	080051f5 	.word	0x080051f5
 80051dc:	080051ed 	.word	0x080051ed
 80051e0:	080051fd 	.word	0x080051fd
 80051e4:	2301      	movs	r3, #1
 80051e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ea:	e042      	b.n	8005272 <UART_SetConfig+0x156>
 80051ec:	2302      	movs	r3, #2
 80051ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051f2:	e03e      	b.n	8005272 <UART_SetConfig+0x156>
 80051f4:	2304      	movs	r3, #4
 80051f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051fa:	e03a      	b.n	8005272 <UART_SetConfig+0x156>
 80051fc:	2308      	movs	r3, #8
 80051fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005202:	e036      	b.n	8005272 <UART_SetConfig+0x156>
 8005204:	2310      	movs	r3, #16
 8005206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800520a:	e032      	b.n	8005272 <UART_SetConfig+0x156>
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a7e      	ldr	r2, [pc, #504]	@ (800540c <UART_SetConfig+0x2f0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d12a      	bne.n	800526c <UART_SetConfig+0x150>
 8005216:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800521a:	f7ff fb31 	bl	8004880 <LL_RCC_GetLPUARTClockSource>
 800521e:	4603      	mov	r3, r0
 8005220:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005224:	d01a      	beq.n	800525c <UART_SetConfig+0x140>
 8005226:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800522a:	d81b      	bhi.n	8005264 <UART_SetConfig+0x148>
 800522c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005230:	d00c      	beq.n	800524c <UART_SetConfig+0x130>
 8005232:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005236:	d815      	bhi.n	8005264 <UART_SetConfig+0x148>
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <UART_SetConfig+0x128>
 800523c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005240:	d008      	beq.n	8005254 <UART_SetConfig+0x138>
 8005242:	e00f      	b.n	8005264 <UART_SetConfig+0x148>
 8005244:	2300      	movs	r3, #0
 8005246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800524a:	e012      	b.n	8005272 <UART_SetConfig+0x156>
 800524c:	2302      	movs	r3, #2
 800524e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005252:	e00e      	b.n	8005272 <UART_SetConfig+0x156>
 8005254:	2304      	movs	r3, #4
 8005256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800525a:	e00a      	b.n	8005272 <UART_SetConfig+0x156>
 800525c:	2308      	movs	r3, #8
 800525e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005262:	e006      	b.n	8005272 <UART_SetConfig+0x156>
 8005264:	2310      	movs	r3, #16
 8005266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800526a:	e002      	b.n	8005272 <UART_SetConfig+0x156>
 800526c:	2310      	movs	r3, #16
 800526e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a65      	ldr	r2, [pc, #404]	@ (800540c <UART_SetConfig+0x2f0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	f040 8097 	bne.w	80053ac <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800527e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005282:	2b08      	cmp	r3, #8
 8005284:	d823      	bhi.n	80052ce <UART_SetConfig+0x1b2>
 8005286:	a201      	add	r2, pc, #4	@ (adr r2, 800528c <UART_SetConfig+0x170>)
 8005288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528c:	080052b1 	.word	0x080052b1
 8005290:	080052cf 	.word	0x080052cf
 8005294:	080052b9 	.word	0x080052b9
 8005298:	080052cf 	.word	0x080052cf
 800529c:	080052bf 	.word	0x080052bf
 80052a0:	080052cf 	.word	0x080052cf
 80052a4:	080052cf 	.word	0x080052cf
 80052a8:	080052cf 	.word	0x080052cf
 80052ac:	080052c7 	.word	0x080052c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052b0:	f7fe fbf8 	bl	8003aa4 <HAL_RCC_GetPCLK1Freq>
 80052b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052b6:	e010      	b.n	80052da <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052b8:	4b56      	ldr	r3, [pc, #344]	@ (8005414 <UART_SetConfig+0x2f8>)
 80052ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052bc:	e00d      	b.n	80052da <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052be:	f7fe fb71 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 80052c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052c4:	e009      	b.n	80052da <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052c6:	f248 0306 	movw	r3, #32774	@ 0x8006
 80052ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052cc:	e005      	b.n	80052da <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80052d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 812b 	beq.w	8005538 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e6:	4a4c      	ldr	r2, [pc, #304]	@ (8005418 <UART_SetConfig+0x2fc>)
 80052e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052ec:	461a      	mov	r2, r3
 80052ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	4413      	add	r3, r2
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	429a      	cmp	r2, r3
 8005304:	d305      	bcc.n	8005312 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	429a      	cmp	r2, r3
 8005310:	d903      	bls.n	800531a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005318:	e10e      	b.n	8005538 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800531a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531c:	2200      	movs	r2, #0
 800531e:	60bb      	str	r3, [r7, #8]
 8005320:	60fa      	str	r2, [r7, #12]
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005326:	4a3c      	ldr	r2, [pc, #240]	@ (8005418 <UART_SetConfig+0x2fc>)
 8005328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800532c:	b29b      	uxth	r3, r3
 800532e:	2200      	movs	r2, #0
 8005330:	603b      	str	r3, [r7, #0]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005338:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800533c:	f7fa ff26 	bl	800018c <__aeabi_uldivmod>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4610      	mov	r0, r2
 8005346:	4619      	mov	r1, r3
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	020b      	lsls	r3, r1, #8
 8005352:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005356:	0202      	lsls	r2, r0, #8
 8005358:	6979      	ldr	r1, [r7, #20]
 800535a:	6849      	ldr	r1, [r1, #4]
 800535c:	0849      	lsrs	r1, r1, #1
 800535e:	2000      	movs	r0, #0
 8005360:	460c      	mov	r4, r1
 8005362:	4605      	mov	r5, r0
 8005364:	eb12 0804 	adds.w	r8, r2, r4
 8005368:	eb43 0905 	adc.w	r9, r3, r5
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	469a      	mov	sl, r3
 8005374:	4693      	mov	fp, r2
 8005376:	4652      	mov	r2, sl
 8005378:	465b      	mov	r3, fp
 800537a:	4640      	mov	r0, r8
 800537c:	4649      	mov	r1, r9
 800537e:	f7fa ff05 	bl	800018c <__aeabi_uldivmod>
 8005382:	4602      	mov	r2, r0
 8005384:	460b      	mov	r3, r1
 8005386:	4613      	mov	r3, r2
 8005388:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005390:	d308      	bcc.n	80053a4 <UART_SetConfig+0x288>
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005398:	d204      	bcs.n	80053a4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6a3a      	ldr	r2, [r7, #32]
 80053a0:	60da      	str	r2, [r3, #12]
 80053a2:	e0c9      	b.n	8005538 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80053aa:	e0c5      	b.n	8005538 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053b4:	d16d      	bne.n	8005492 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80053b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80053ba:	3b01      	subs	r3, #1
 80053bc:	2b07      	cmp	r3, #7
 80053be:	d82d      	bhi.n	800541c <UART_SetConfig+0x300>
 80053c0:	a201      	add	r2, pc, #4	@ (adr r2, 80053c8 <UART_SetConfig+0x2ac>)
 80053c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c6:	bf00      	nop
 80053c8:	080053e9 	.word	0x080053e9
 80053cc:	080053f1 	.word	0x080053f1
 80053d0:	0800541d 	.word	0x0800541d
 80053d4:	080053f7 	.word	0x080053f7
 80053d8:	0800541d 	.word	0x0800541d
 80053dc:	0800541d 	.word	0x0800541d
 80053e0:	0800541d 	.word	0x0800541d
 80053e4:	080053ff 	.word	0x080053ff
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053e8:	f7fe fb72 	bl	8003ad0 <HAL_RCC_GetPCLK2Freq>
 80053ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053ee:	e01b      	b.n	8005428 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053f0:	4b08      	ldr	r3, [pc, #32]	@ (8005414 <UART_SetConfig+0x2f8>)
 80053f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053f4:	e018      	b.n	8005428 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053f6:	f7fe fad5 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 80053fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053fc:	e014      	b.n	8005428 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053fe:	f248 0306 	movw	r3, #32774	@ 0x8006
 8005402:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005404:	e010      	b.n	8005428 <UART_SetConfig+0x30c>
 8005406:	bf00      	nop
 8005408:	cfff69f3 	.word	0xcfff69f3
 800540c:	40008000 	.word	0x40008000
 8005410:	40013800 	.word	0x40013800
 8005414:	00f42400 	.word	0x00f42400
 8005418:	0800ad9c 	.word	0x0800ad9c
      default:
        pclk = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005426:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 8084 	beq.w	8005538 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005434:	4a4b      	ldr	r2, [pc, #300]	@ (8005564 <UART_SetConfig+0x448>)
 8005436:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800543a:	461a      	mov	r2, r3
 800543c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005442:	005a      	lsls	r2, r3, #1
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	085b      	lsrs	r3, r3, #1
 800544a:	441a      	add	r2, r3
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	fbb2 f3f3 	udiv	r3, r2, r3
 8005454:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	2b0f      	cmp	r3, #15
 800545a:	d916      	bls.n	800548a <UART_SetConfig+0x36e>
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005462:	d212      	bcs.n	800548a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	b29b      	uxth	r3, r3
 8005468:	f023 030f 	bic.w	r3, r3, #15
 800546c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	085b      	lsrs	r3, r3, #1
 8005472:	b29b      	uxth	r3, r3
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	b29a      	uxth	r2, r3
 800547a:	8bfb      	ldrh	r3, [r7, #30]
 800547c:	4313      	orrs	r3, r2
 800547e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	8bfa      	ldrh	r2, [r7, #30]
 8005486:	60da      	str	r2, [r3, #12]
 8005488:	e056      	b.n	8005538 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005490:	e052      	b.n	8005538 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005492:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005496:	3b01      	subs	r3, #1
 8005498:	2b07      	cmp	r3, #7
 800549a:	d822      	bhi.n	80054e2 <UART_SetConfig+0x3c6>
 800549c:	a201      	add	r2, pc, #4	@ (adr r2, 80054a4 <UART_SetConfig+0x388>)
 800549e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a2:	bf00      	nop
 80054a4:	080054c5 	.word	0x080054c5
 80054a8:	080054cd 	.word	0x080054cd
 80054ac:	080054e3 	.word	0x080054e3
 80054b0:	080054d3 	.word	0x080054d3
 80054b4:	080054e3 	.word	0x080054e3
 80054b8:	080054e3 	.word	0x080054e3
 80054bc:	080054e3 	.word	0x080054e3
 80054c0:	080054db 	.word	0x080054db
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054c4:	f7fe fb04 	bl	8003ad0 <HAL_RCC_GetPCLK2Freq>
 80054c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054ca:	e010      	b.n	80054ee <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054cc:	4b26      	ldr	r3, [pc, #152]	@ (8005568 <UART_SetConfig+0x44c>)
 80054ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054d0:	e00d      	b.n	80054ee <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054d2:	f7fe fa67 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 80054d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054d8:	e009      	b.n	80054ee <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054da:	f248 0306 	movw	r3, #32774	@ 0x8006
 80054de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054e0:	e005      	b.n	80054ee <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80054ec:	bf00      	nop
    }

    if (pclk != 0U)
 80054ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d021      	beq.n	8005538 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005564 <UART_SetConfig+0x448>)
 80054fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054fe:	461a      	mov	r2, r3
 8005500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005502:	fbb3 f2f2 	udiv	r2, r3, r2
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	085b      	lsrs	r3, r3, #1
 800550c:	441a      	add	r2, r3
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	fbb2 f3f3 	udiv	r3, r2, r3
 8005516:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	2b0f      	cmp	r3, #15
 800551c:	d909      	bls.n	8005532 <UART_SetConfig+0x416>
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005524:	d205      	bcs.n	8005532 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	b29a      	uxth	r2, r3
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60da      	str	r2, [r3, #12]
 8005530:	e002      	b.n	8005538 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	2201      	movs	r2, #1
 800553c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2201      	movs	r2, #1
 8005544:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	2200      	movs	r2, #0
 800554c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2200      	movs	r2, #0
 8005552:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005554:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005558:	4618      	mov	r0, r3
 800555a:	3730      	adds	r7, #48	@ 0x30
 800555c:	46bd      	mov	sp, r7
 800555e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005562:	bf00      	nop
 8005564:	0800ad9c 	.word	0x0800ad9c
 8005568:	00f42400 	.word	0x00f42400

0800556c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005578:	f003 0308 	and.w	r3, r3, #8
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00a      	beq.n	8005596 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00a      	beq.n	80055da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005600:	f003 0310 	and.w	r3, r3, #16
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00a      	beq.n	800561e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005622:	f003 0320 	and.w	r3, r3, #32
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01a      	beq.n	8005682 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005666:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800566a:	d10a      	bne.n	8005682 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	605a      	str	r2, [r3, #4]
  }
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b098      	sub	sp, #96	@ 0x60
 80056b4:	af02      	add	r7, sp, #8
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056c0:	f7fc fc9e 	bl	8002000 <HAL_GetTick>
 80056c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0308 	and.w	r3, r3, #8
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d12f      	bne.n	8005734 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056dc:	2200      	movs	r2, #0
 80056de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f88e 	bl	8005804 <UART_WaitOnFlagUntilTimeout>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d022      	beq.n	8005734 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f6:	e853 3f00 	ldrex	r3, [r3]
 80056fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005702:	653b      	str	r3, [r7, #80]	@ 0x50
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800570c:	647b      	str	r3, [r7, #68]	@ 0x44
 800570e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005710:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005712:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005714:	e841 2300 	strex	r3, r2, [r1]
 8005718:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800571a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e6      	bne.n	80056ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2220      	movs	r2, #32
 8005724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e063      	b.n	80057fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	2b04      	cmp	r3, #4
 8005740:	d149      	bne.n	80057d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005742:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800574a:	2200      	movs	r2, #0
 800574c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f857 	bl	8005804 <UART_WaitOnFlagUntilTimeout>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d03c      	beq.n	80057d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	623b      	str	r3, [r7, #32]
   return(result);
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005770:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800577a:	633b      	str	r3, [r7, #48]	@ 0x30
 800577c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005780:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1e6      	bne.n	800575c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3308      	adds	r3, #8
 8005794:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	e853 3f00 	ldrex	r3, [r3]
 800579c:	60fb      	str	r3, [r7, #12]
   return(result);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f023 0301 	bic.w	r3, r3, #1
 80057a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3308      	adds	r3, #8
 80057ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057ae:	61fa      	str	r2, [r7, #28]
 80057b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b2:	69b9      	ldr	r1, [r7, #24]
 80057b4:	69fa      	ldr	r2, [r7, #28]
 80057b6:	e841 2300 	strex	r3, r2, [r1]
 80057ba:	617b      	str	r3, [r7, #20]
   return(result);
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1e5      	bne.n	800578e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2220      	movs	r2, #32
 80057c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e012      	b.n	80057fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2220      	movs	r2, #32
 80057da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2220      	movs	r2, #32
 80057e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3758      	adds	r7, #88	@ 0x58
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	603b      	str	r3, [r7, #0]
 8005810:	4613      	mov	r3, r2
 8005812:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005814:	e04f      	b.n	80058b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581c:	d04b      	beq.n	80058b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800581e:	f7fc fbef 	bl	8002000 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	429a      	cmp	r2, r3
 800582c:	d302      	bcc.n	8005834 <UART_WaitOnFlagUntilTimeout+0x30>
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e04e      	b.n	80058d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0304 	and.w	r3, r3, #4
 8005842:	2b00      	cmp	r3, #0
 8005844:	d037      	beq.n	80058b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2b80      	cmp	r3, #128	@ 0x80
 800584a:	d034      	beq.n	80058b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b40      	cmp	r3, #64	@ 0x40
 8005850:	d031      	beq.n	80058b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	f003 0308 	and.w	r3, r3, #8
 800585c:	2b08      	cmp	r3, #8
 800585e:	d110      	bne.n	8005882 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2208      	movs	r2, #8
 8005866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 f95b 	bl	8005b24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2208      	movs	r2, #8
 8005872:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e029      	b.n	80058d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800588c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005890:	d111      	bne.n	80058b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800589a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 f941 	bl	8005b24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e00f      	b.n	80058d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	4013      	ands	r3, r2
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	bf0c      	ite	eq
 80058c6:	2301      	moveq	r3, #1
 80058c8:	2300      	movne	r3, #0
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	461a      	mov	r2, r3
 80058ce:	79fb      	ldrb	r3, [r7, #7]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d0a0      	beq.n	8005816 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b0a3      	sub	sp, #140	@ 0x8c
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	4613      	mov	r3, r2
 80058ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	88fa      	ldrh	r2, [r7, #6]
 80058f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	88fa      	ldrh	r2, [r7, #6]
 8005900:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005912:	d10e      	bne.n	8005932 <UART_Start_Receive_IT+0x52>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d105      	bne.n	8005928 <UART_Start_Receive_IT+0x48>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005922:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005926:	e02d      	b.n	8005984 <UART_Start_Receive_IT+0xa4>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	22ff      	movs	r2, #255	@ 0xff
 800592c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005930:	e028      	b.n	8005984 <UART_Start_Receive_IT+0xa4>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10d      	bne.n	8005956 <UART_Start_Receive_IT+0x76>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d104      	bne.n	800594c <UART_Start_Receive_IT+0x6c>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	22ff      	movs	r2, #255	@ 0xff
 8005946:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800594a:	e01b      	b.n	8005984 <UART_Start_Receive_IT+0xa4>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	227f      	movs	r2, #127	@ 0x7f
 8005950:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005954:	e016      	b.n	8005984 <UART_Start_Receive_IT+0xa4>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800595e:	d10d      	bne.n	800597c <UART_Start_Receive_IT+0x9c>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d104      	bne.n	8005972 <UART_Start_Receive_IT+0x92>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	227f      	movs	r2, #127	@ 0x7f
 800596c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005970:	e008      	b.n	8005984 <UART_Start_Receive_IT+0xa4>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	223f      	movs	r2, #63	@ 0x3f
 8005976:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800597a:	e003      	b.n	8005984 <UART_Start_Receive_IT+0xa4>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2222      	movs	r2, #34	@ 0x22
 8005990:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3308      	adds	r3, #8
 800599a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80059a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059a6:	f043 0301 	orr.w	r3, r3, #1
 80059aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3308      	adds	r3, #8
 80059b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80059b8:	673a      	str	r2, [r7, #112]	@ 0x70
 80059ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80059be:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80059c0:	e841 2300 	strex	r3, r2, [r1]
 80059c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80059c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1e3      	bne.n	8005994 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059d4:	d14f      	bne.n	8005a76 <UART_Start_Receive_IT+0x196>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80059dc:	88fa      	ldrh	r2, [r7, #6]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d349      	bcc.n	8005a76 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059ea:	d107      	bne.n	80059fc <UART_Start_Receive_IT+0x11c>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d103      	bne.n	80059fc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4a47      	ldr	r2, [pc, #284]	@ (8005b14 <UART_Start_Receive_IT+0x234>)
 80059f8:	675a      	str	r2, [r3, #116]	@ 0x74
 80059fa:	e002      	b.n	8005a02 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4a46      	ldr	r2, [pc, #280]	@ (8005b18 <UART_Start_Receive_IT+0x238>)
 8005a00:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d01a      	beq.n	8005a40 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a12:	e853 3f00 	ldrex	r3, [r3]
 8005a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005a18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	461a      	mov	r2, r3
 8005a28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a2e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a30:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005a32:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005a34:	e841 2300 	strex	r3, r2, [r1]
 8005a38:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005a3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e4      	bne.n	8005a0a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3308      	adds	r3, #8
 8005a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a4a:	e853 3f00 	ldrex	r3, [r3]
 8005a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3308      	adds	r3, #8
 8005a5e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005a60:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005a62:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a64:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005a66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a68:	e841 2300 	strex	r3, r2, [r1]
 8005a6c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e5      	bne.n	8005a40 <UART_Start_Receive_IT+0x160>
 8005a74:	e046      	b.n	8005b04 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a7e:	d107      	bne.n	8005a90 <UART_Start_Receive_IT+0x1b0>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d103      	bne.n	8005a90 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4a24      	ldr	r2, [pc, #144]	@ (8005b1c <UART_Start_Receive_IT+0x23c>)
 8005a8c:	675a      	str	r2, [r3, #116]	@ 0x74
 8005a8e:	e002      	b.n	8005a96 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4a23      	ldr	r2, [pc, #140]	@ (8005b20 <UART_Start_Receive_IT+0x240>)
 8005a94:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d019      	beq.n	8005ad2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa6:	e853 3f00 	ldrex	r3, [r3]
 8005aaa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aae:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005ab2:	677b      	str	r3, [r7, #116]	@ 0x74
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005abe:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005ac2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ac4:	e841 2300 	strex	r3, r2, [r1]
 8005ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e6      	bne.n	8005a9e <UART_Start_Receive_IT+0x1be>
 8005ad0:	e018      	b.n	8005b04 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	e853 3f00 	ldrex	r3, [r3]
 8005ade:	613b      	str	r3, [r7, #16]
   return(result);
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f043 0320 	orr.w	r3, r3, #32
 8005ae6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	461a      	mov	r2, r3
 8005aee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005af0:	623b      	str	r3, [r7, #32]
 8005af2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af4:	69f9      	ldr	r1, [r7, #28]
 8005af6:	6a3a      	ldr	r2, [r7, #32]
 8005af8:	e841 2300 	strex	r3, r2, [r1]
 8005afc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e6      	bne.n	8005ad2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	378c      	adds	r7, #140	@ 0x8c
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	08006341 	.word	0x08006341
 8005b18:	08005fdd 	.word	0x08005fdd
 8005b1c:	08005e25 	.word	0x08005e25
 8005b20:	08005c6d 	.word	0x08005c6d

08005b24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b095      	sub	sp, #84	@ 0x54
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b34:	e853 3f00 	ldrex	r3, [r3]
 8005b38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	461a      	mov	r2, r3
 8005b48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b52:	e841 2300 	strex	r3, r2, [r1]
 8005b56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1e6      	bne.n	8005b2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3308      	adds	r3, #8
 8005b64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b74:	f023 0301 	bic.w	r3, r3, #1
 8005b78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	3308      	adds	r3, #8
 8005b80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e3      	bne.n	8005b5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d118      	bne.n	8005bd0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	e853 3f00 	ldrex	r3, [r3]
 8005baa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f023 0310 	bic.w	r3, r3, #16
 8005bb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bbc:	61bb      	str	r3, [r7, #24]
 8005bbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc0:	6979      	ldr	r1, [r7, #20]
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	e841 2300 	strex	r3, r2, [r1]
 8005bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1e6      	bne.n	8005b9e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005be4:	bf00      	nop
 8005be6:	3754      	adds	r7, #84	@ 0x54
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f7ff fa7e 	bl	8005108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c0c:	bf00      	nop
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b088      	sub	sp, #32
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	e853 3f00 	ldrex	r3, [r3]
 8005c28:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c30:	61fb      	str	r3, [r7, #28]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	461a      	mov	r2, r3
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	61bb      	str	r3, [r7, #24]
 8005c3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3e:	6979      	ldr	r1, [r7, #20]
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	e841 2300 	strex	r3, r2, [r1]
 8005c46:	613b      	str	r3, [r7, #16]
   return(result);
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1e6      	bne.n	8005c1c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2220      	movs	r2, #32
 8005c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff fa3f 	bl	80050e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c62:	bf00      	nop
 8005c64:	3720      	adds	r7, #32
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
	...

08005c6c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b09c      	sub	sp, #112	@ 0x70
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005c7a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c84:	2b22      	cmp	r3, #34	@ 0x22
 8005c86:	f040 80be 	bne.w	8005e06 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c90:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c94:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005c98:	b2d9      	uxtb	r1, r3
 8005c9a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca4:	400a      	ands	r2, r1
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f040 80a1 	bne.w	8005e16 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cdc:	e853 3f00 	ldrex	r3, [r3]
 8005ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ce4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ce8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cf2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cf4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cf8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cfa:	e841 2300 	strex	r3, r2, [r1]
 8005cfe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1e6      	bne.n	8005cd4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3308      	adds	r3, #8
 8005d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d10:	e853 3f00 	ldrex	r3, [r3]
 8005d14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d18:	f023 0301 	bic.w	r3, r3, #1
 8005d1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3308      	adds	r3, #8
 8005d24:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005d26:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d2e:	e841 2300 	strex	r3, r2, [r1]
 8005d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1e5      	bne.n	8005d06 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a33      	ldr	r2, [pc, #204]	@ (8005e20 <UART_RxISR_8BIT+0x1b4>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d01f      	beq.n	8005d98 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d018      	beq.n	8005d98 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6e:	e853 3f00 	ldrex	r3, [r3]
 8005d72:	623b      	str	r3, [r7, #32]
   return(result);
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	461a      	mov	r2, r3
 8005d82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d86:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e6      	bne.n	8005d66 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d12e      	bne.n	8005dfe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	e853 3f00 	ldrex	r3, [r3]
 8005db2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0310 	bic.w	r3, r3, #16
 8005dba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005dc4:	61fb      	str	r3, [r7, #28]
 8005dc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc8:	69b9      	ldr	r1, [r7, #24]
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	e841 2300 	strex	r3, r2, [r1]
 8005dd0:	617b      	str	r3, [r7, #20]
   return(result);
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1e6      	bne.n	8005da6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	f003 0310 	and.w	r3, r3, #16
 8005de2:	2b10      	cmp	r3, #16
 8005de4:	d103      	bne.n	8005dee <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2210      	movs	r2, #16
 8005dec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005df4:	4619      	mov	r1, r3
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7fb ff2e 	bl	8001c58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005dfc:	e00b      	b.n	8005e16 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff f978 	bl	80050f4 <HAL_UART_RxCpltCallback>
}
 8005e04:	e007      	b.n	8005e16 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	699a      	ldr	r2, [r3, #24]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f042 0208 	orr.w	r2, r2, #8
 8005e14:	619a      	str	r2, [r3, #24]
}
 8005e16:	bf00      	nop
 8005e18:	3770      	adds	r7, #112	@ 0x70
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	40008000 	.word	0x40008000

08005e24 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b09c      	sub	sp, #112	@ 0x70
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005e32:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e3c:	2b22      	cmp	r3, #34	@ 0x22
 8005e3e:	f040 80be 	bne.w	8005fbe <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e48:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e50:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005e52:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005e56:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e60:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e66:	1c9a      	adds	r2, r3, #2
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	3b01      	subs	r3, #1
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f040 80a1 	bne.w	8005fce <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e94:	e853 3f00 	ldrex	r3, [r3]
 8005e98:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005e9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ea0:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005eaa:	657b      	str	r3, [r7, #84]	@ 0x54
 8005eac:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005eb0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005eb2:	e841 2300 	strex	r3, r2, [r1]
 8005eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005eb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1e6      	bne.n	8005e8c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3308      	adds	r3, #8
 8005ec4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec8:	e853 3f00 	ldrex	r3, [r3]
 8005ecc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed0:	f023 0301 	bic.w	r3, r3, #1
 8005ed4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	3308      	adds	r3, #8
 8005edc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005ede:	643a      	str	r2, [r7, #64]	@ 0x40
 8005ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ee4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ee6:	e841 2300 	strex	r3, r2, [r1]
 8005eea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1e5      	bne.n	8005ebe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a33      	ldr	r2, [pc, #204]	@ (8005fd8 <UART_RxISR_16BIT+0x1b4>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d01f      	beq.n	8005f50 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d018      	beq.n	8005f50 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	e853 3f00 	ldrex	r3, [r3]
 8005f2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f3e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f44:	e841 2300 	strex	r3, r2, [r1]
 8005f48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1e6      	bne.n	8005f1e <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d12e      	bne.n	8005fb6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	e853 3f00 	ldrex	r3, [r3]
 8005f6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f023 0310 	bic.w	r3, r3, #16
 8005f72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f80:	6979      	ldr	r1, [r7, #20]
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	e841 2300 	strex	r3, r2, [r1]
 8005f88:	613b      	str	r3, [r7, #16]
   return(result);
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1e6      	bne.n	8005f5e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	f003 0310 	and.w	r3, r3, #16
 8005f9a:	2b10      	cmp	r3, #16
 8005f9c:	d103      	bne.n	8005fa6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2210      	movs	r2, #16
 8005fa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005fac:	4619      	mov	r1, r3
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7fb fe52 	bl	8001c58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fb4:	e00b      	b.n	8005fce <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff f89c 	bl	80050f4 <HAL_UART_RxCpltCallback>
}
 8005fbc:	e007      	b.n	8005fce <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	699a      	ldr	r2, [r3, #24]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f042 0208 	orr.w	r2, r2, #8
 8005fcc:	619a      	str	r2, [r3, #24]
}
 8005fce:	bf00      	nop
 8005fd0:	3770      	adds	r7, #112	@ 0x70
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	40008000 	.word	0x40008000

08005fdc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b0ac      	sub	sp, #176	@ 0xb0
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005fea:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	69db      	ldr	r3, [r3, #28]
 8005ff4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006012:	2b22      	cmp	r3, #34	@ 0x22
 8006014:	f040 8183 	bne.w	800631e <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800601e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006022:	e126      	b.n	8006272 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800602e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8006032:	b2d9      	uxtb	r1, r3
 8006034:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006038:	b2da      	uxtb	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800603e:	400a      	ands	r2, r1
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006054:	b29b      	uxth	r3, r3
 8006056:	3b01      	subs	r3, #1
 8006058:	b29a      	uxth	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800606a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	2b00      	cmp	r3, #0
 8006074:	d053      	beq.n	800611e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006076:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	d011      	beq.n	80060a6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006082:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00b      	beq.n	80060a6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2201      	movs	r2, #1
 8006094:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800609c:	f043 0201 	orr.w	r2, r3, #1
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d011      	beq.n	80060d6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80060b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00b      	beq.n	80060d6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2202      	movs	r2, #2
 80060c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060cc:	f043 0204 	orr.w	r2, r3, #4
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060da:	f003 0304 	and.w	r3, r3, #4
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d011      	beq.n	8006106 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80060e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00b      	beq.n	8006106 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2204      	movs	r2, #4
 80060f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060fc:	f043 0202 	orr.w	r2, r3, #2
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800610c:	2b00      	cmp	r3, #0
 800610e:	d006      	beq.n	800611e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7fe fff9 	bl	8005108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006124:	b29b      	uxth	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	f040 80a3 	bne.w	8006272 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800613a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800613c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006140:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	461a      	mov	r2, r3
 800614a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800614e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006150:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006154:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800615c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e4      	bne.n	800612c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3308      	adds	r3, #8
 8006168:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8006172:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006174:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006178:	f023 0301 	bic.w	r3, r3, #1
 800617c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3308      	adds	r3, #8
 8006186:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800618a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800618c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006190:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006192:	e841 2300 	strex	r3, r2, [r1]
 8006196:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006198:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1e1      	bne.n	8006162 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a60      	ldr	r2, [pc, #384]	@ (8006338 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d021      	beq.n	8006200 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d01a      	beq.n	8006200 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061d2:	e853 3f00 	ldrex	r3, [r3]
 80061d6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80061d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80061de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80061ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80061ee:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80061f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80061f4:	e841 2300 	strex	r3, r2, [r1]
 80061f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80061fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1e4      	bne.n	80061ca <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006204:	2b01      	cmp	r3, #1
 8006206:	d130      	bne.n	800626a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006216:	e853 3f00 	ldrex	r3, [r3]
 800621a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800621c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621e:	f023 0310 	bic.w	r3, r3, #16
 8006222:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006230:	643b      	str	r3, [r7, #64]	@ 0x40
 8006232:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006234:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006236:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006238:	e841 2300 	strex	r3, r2, [r1]
 800623c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800623e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1e4      	bne.n	800620e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	f003 0310 	and.w	r3, r3, #16
 800624e:	2b10      	cmp	r3, #16
 8006250:	d103      	bne.n	800625a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2210      	movs	r2, #16
 8006258:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006260:	4619      	mov	r1, r3
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7fb fcf8 	bl	8001c58 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006268:	e00e      	b.n	8006288 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7fe ff42 	bl	80050f4 <HAL_UART_RxCpltCallback>
        break;
 8006270:	e00a      	b.n	8006288 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006272:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006276:	2b00      	cmp	r3, #0
 8006278:	d006      	beq.n	8006288 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800627a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b00      	cmp	r3, #0
 8006284:	f47f aece 	bne.w	8006024 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800628e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006292:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006296:	2b00      	cmp	r3, #0
 8006298:	d049      	beq.n	800632e <UART_RxISR_8BIT_FIFOEN+0x352>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80062a0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d242      	bcs.n	800632e <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3308      	adds	r3, #8
 80062ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	e853 3f00 	ldrex	r3, [r3]
 80062b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3308      	adds	r3, #8
 80062c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80062cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062d4:	e841 2300 	strex	r3, r2, [r1]
 80062d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e3      	bne.n	80062a8 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a16      	ldr	r2, [pc, #88]	@ (800633c <UART_RxISR_8BIT_FIFOEN+0x360>)
 80062e4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	e853 3f00 	ldrex	r3, [r3]
 80062f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f043 0320 	orr.w	r3, r3, #32
 80062fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006308:	61bb      	str	r3, [r7, #24]
 800630a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630c:	6979      	ldr	r1, [r7, #20]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	e841 2300 	strex	r3, r2, [r1]
 8006314:	613b      	str	r3, [r7, #16]
   return(result);
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1e4      	bne.n	80062e6 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800631c:	e007      	b.n	800632e <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	699a      	ldr	r2, [r3, #24]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f042 0208 	orr.w	r2, r2, #8
 800632c:	619a      	str	r2, [r3, #24]
}
 800632e:	bf00      	nop
 8006330:	37b0      	adds	r7, #176	@ 0xb0
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	40008000 	.word	0x40008000
 800633c:	08005c6d 	.word	0x08005c6d

08006340 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b0ae      	sub	sp, #184	@ 0xb8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800634e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006376:	2b22      	cmp	r3, #34	@ 0x22
 8006378:	f040 8187 	bne.w	800668a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006382:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006386:	e12a      	b.n	80065de <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006396:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800639a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800639e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80063a2:	4013      	ands	r3, r2
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80063aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b0:	1c9a      	adds	r2, r3, #2
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80063bc:	b29b      	uxth	r3, r3
 80063be:	3b01      	subs	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80063d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d053      	beq.n	8006486 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d011      	beq.n	800640e <UART_RxISR_16BIT_FIFOEN+0xce>
 80063ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00b      	beq.n	800640e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2201      	movs	r2, #1
 80063fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006404:	f043 0201 	orr.w	r2, r3, #1
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800640e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	2b00      	cmp	r3, #0
 8006418:	d011      	beq.n	800643e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800641a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00b      	beq.n	800643e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2202      	movs	r2, #2
 800642c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006434:	f043 0204 	orr.w	r2, r3, #4
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800643e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006442:	f003 0304 	and.w	r3, r3, #4
 8006446:	2b00      	cmp	r3, #0
 8006448:	d011      	beq.n	800646e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800644a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00b      	beq.n	800646e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2204      	movs	r2, #4
 800645c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006464:	f043 0202 	orr.w	r2, r3, #2
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006474:	2b00      	cmp	r3, #0
 8006476:	d006      	beq.n	8006486 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7fe fe45 	bl	8005108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800648c:	b29b      	uxth	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	f040 80a5 	bne.w	80065de <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800649c:	e853 3f00 	ldrex	r3, [r3]
 80064a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80064a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	461a      	mov	r2, r3
 80064b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80064be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80064c2:	e841 2300 	strex	r3, r2, [r1]
 80064c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80064c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1e2      	bne.n	8006494 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3308      	adds	r3, #8
 80064d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064d8:	e853 3f00 	ldrex	r3, [r3]
 80064dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80064de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064e4:	f023 0301 	bic.w	r3, r3, #1
 80064e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	3308      	adds	r3, #8
 80064f2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80064f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80064f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80064fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80064fe:	e841 2300 	strex	r3, r2, [r1]
 8006502:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006504:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1e1      	bne.n	80064ce <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2220      	movs	r2, #32
 800650e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a60      	ldr	r2, [pc, #384]	@ (80066a4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d021      	beq.n	800656c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d01a      	beq.n	800656c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800653e:	e853 3f00 	ldrex	r3, [r3]
 8006542:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006546:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800654a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	461a      	mov	r2, r3
 8006554:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006558:	65bb      	str	r3, [r7, #88]	@ 0x58
 800655a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800655e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006566:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e4      	bne.n	8006536 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006570:	2b01      	cmp	r3, #1
 8006572:	d130      	bne.n	80065d6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006582:	e853 3f00 	ldrex	r3, [r3]
 8006586:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800658a:	f023 0310 	bic.w	r3, r3, #16
 800658e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	461a      	mov	r2, r3
 8006598:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800659c:	647b      	str	r3, [r7, #68]	@ 0x44
 800659e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065a4:	e841 2300 	strex	r3, r2, [r1]
 80065a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e4      	bne.n	800657a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	f003 0310 	and.w	r3, r3, #16
 80065ba:	2b10      	cmp	r3, #16
 80065bc:	d103      	bne.n	80065c6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2210      	movs	r2, #16
 80065c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80065cc:	4619      	mov	r1, r3
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7fb fb42 	bl	8001c58 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80065d4:	e00e      	b.n	80065f4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7fe fd8c 	bl	80050f4 <HAL_UART_RxCpltCallback>
        break;
 80065dc:	e00a      	b.n	80065f4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80065de:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d006      	beq.n	80065f4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 80065e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f47f aeca 	bne.w	8006388 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80065fa:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80065fe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006602:	2b00      	cmp	r3, #0
 8006604:	d049      	beq.n	800669a <UART_RxISR_16BIT_FIFOEN+0x35a>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800660c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8006610:	429a      	cmp	r2, r3
 8006612:	d242      	bcs.n	800669a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3308      	adds	r3, #8
 800661a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661e:	e853 3f00 	ldrex	r3, [r3]
 8006622:	623b      	str	r3, [r7, #32]
   return(result);
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800662a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3308      	adds	r3, #8
 8006634:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006638:	633a      	str	r2, [r7, #48]	@ 0x30
 800663a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800663e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e3      	bne.n	8006614 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a16      	ldr	r2, [pc, #88]	@ (80066a8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8006650:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	e853 3f00 	ldrex	r3, [r3]
 800665e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f043 0320 	orr.w	r3, r3, #32
 8006666:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006674:	61fb      	str	r3, [r7, #28]
 8006676:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006678:	69b9      	ldr	r1, [r7, #24]
 800667a:	69fa      	ldr	r2, [r7, #28]
 800667c:	e841 2300 	strex	r3, r2, [r1]
 8006680:	617b      	str	r3, [r7, #20]
   return(result);
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1e4      	bne.n	8006652 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006688:	e007      	b.n	800669a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	699a      	ldr	r2, [r3, #24]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f042 0208 	orr.w	r2, r2, #8
 8006698:	619a      	str	r2, [r3, #24]
}
 800669a:	bf00      	nop
 800669c:	37b8      	adds	r7, #184	@ 0xb8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	40008000 	.word	0x40008000
 80066a8:	08005e25 	.word	0x08005e25

080066ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d101      	bne.n	80066fe <HAL_UARTEx_DisableFifoMode+0x16>
 80066fa:	2302      	movs	r3, #2
 80066fc:	e027      	b.n	800674e <HAL_UARTEx_DisableFifoMode+0x66>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2224      	movs	r2, #36	@ 0x24
 800670a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0201 	bic.w	r2, r2, #1
 8006724:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800672c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2220      	movs	r2, #32
 8006740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b084      	sub	sp, #16
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800676a:	2b01      	cmp	r3, #1
 800676c:	d101      	bne.n	8006772 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800676e:	2302      	movs	r3, #2
 8006770:	e02d      	b.n	80067ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2224      	movs	r2, #36	@ 0x24
 800677e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0201 	bic.w	r2, r2, #1
 8006798:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f8a0 	bl	80068f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2220      	movs	r2, #32
 80067c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b084      	sub	sp, #16
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d101      	bne.n	80067ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067ea:	2302      	movs	r3, #2
 80067ec:	e02d      	b.n	800684a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2224      	movs	r2, #36	@ 0x24
 80067fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f022 0201 	bic.w	r2, r2, #1
 8006814:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f862 	bl	80068f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2220      	movs	r2, #32
 800683c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b08c      	sub	sp, #48	@ 0x30
 8006856:	af00      	add	r7, sp, #0
 8006858:	60f8      	str	r0, [r7, #12]
 800685a:	60b9      	str	r1, [r7, #8]
 800685c:	4613      	mov	r3, r2
 800685e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800686c:	2b20      	cmp	r3, #32
 800686e:	d13b      	bne.n	80068e8 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d002      	beq.n	800687c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8006876:	88fb      	ldrh	r3, [r7, #6]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e034      	b.n	80068ea <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2201      	movs	r2, #1
 8006884:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800688c:	88fb      	ldrh	r3, [r7, #6]
 800688e:	461a      	mov	r2, r3
 8006890:	68b9      	ldr	r1, [r7, #8]
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f7ff f824 	bl	80058e0 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800689c:	2b01      	cmp	r3, #1
 800689e:	d11d      	bne.n	80068dc <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2210      	movs	r2, #16
 80068a6:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	617b      	str	r3, [r7, #20]
   return(result);
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f043 0310 	orr.w	r3, r3, #16
 80068bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80068c8:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	6a39      	ldr	r1, [r7, #32]
 80068cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068ce:	e841 2300 	strex	r3, r2, [r1]
 80068d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e6      	bne.n	80068a8 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 80068da:	e002      	b.n	80068e2 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 80068e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80068e6:	e000      	b.n	80068ea <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 80068e8:	2302      	movs	r3, #2
  }
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3730      	adds	r7, #48	@ 0x30
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
	...

080068f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006900:	2b00      	cmp	r3, #0
 8006902:	d108      	bne.n	8006916 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006914:	e031      	b.n	800697a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006916:	2308      	movs	r3, #8
 8006918:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800691a:	2308      	movs	r3, #8
 800691c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	0e5b      	lsrs	r3, r3, #25
 8006926:	b2db      	uxtb	r3, r3
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	0f5b      	lsrs	r3, r3, #29
 8006936:	b2db      	uxtb	r3, r3
 8006938:	f003 0307 	and.w	r3, r3, #7
 800693c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800693e:	7bbb      	ldrb	r3, [r7, #14]
 8006940:	7b3a      	ldrb	r2, [r7, #12]
 8006942:	4911      	ldr	r1, [pc, #68]	@ (8006988 <UARTEx_SetNbDataToProcess+0x94>)
 8006944:	5c8a      	ldrb	r2, [r1, r2]
 8006946:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800694a:	7b3a      	ldrb	r2, [r7, #12]
 800694c:	490f      	ldr	r1, [pc, #60]	@ (800698c <UARTEx_SetNbDataToProcess+0x98>)
 800694e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006950:	fb93 f3f2 	sdiv	r3, r3, r2
 8006954:	b29a      	uxth	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	7b7a      	ldrb	r2, [r7, #13]
 8006960:	4909      	ldr	r1, [pc, #36]	@ (8006988 <UARTEx_SetNbDataToProcess+0x94>)
 8006962:	5c8a      	ldrb	r2, [r1, r2]
 8006964:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006968:	7b7a      	ldrb	r2, [r7, #13]
 800696a:	4908      	ldr	r1, [pc, #32]	@ (800698c <UARTEx_SetNbDataToProcess+0x98>)
 800696c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800696e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006972:	b29a      	uxth	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800697a:	bf00      	nop
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	0800adb4 	.word	0x0800adb4
 800698c:	0800adbc 	.word	0x0800adbc

08006990 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006996:	2300      	movs	r3, #0
 8006998:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800699a:	f107 0308 	add.w	r3, r7, #8
 800699e:	2218      	movs	r2, #24
 80069a0:	2100      	movs	r1, #0
 80069a2:	4618      	mov	r0, r3
 80069a4:	f001 f92d 	bl	8007c02 <Osal_MemSet>
  rq.ogf = 0x3f;
 80069a8:	233f      	movs	r3, #63	@ 0x3f
 80069aa:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80069ac:	2381      	movs	r3, #129	@ 0x81
 80069ae:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80069b0:	1dfb      	adds	r3, r7, #7
 80069b2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80069b4:	2301      	movs	r3, #1
 80069b6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80069b8:	f107 0308 	add.w	r3, r7, #8
 80069bc:	2100      	movs	r1, #0
 80069be:	4618      	mov	r0, r3
 80069c0:	f001 fba8 	bl	8008114 <hci_send_req>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	da01      	bge.n	80069ce <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80069ca:	23ff      	movs	r3, #255	@ 0xff
 80069cc:	e000      	b.n	80069d0 <aci_gap_set_non_discoverable+0x40>
  return status;
 80069ce:	79fb      	ldrb	r3, [r7, #7]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3720      	adds	r7, #32
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80069d8:	b5b0      	push	{r4, r5, r7, lr}
 80069da:	b0ce      	sub	sp, #312	@ 0x138
 80069dc:	af00      	add	r7, sp, #0
 80069de:	4605      	mov	r5, r0
 80069e0:	460c      	mov	r4, r1
 80069e2:	4610      	mov	r0, r2
 80069e4:	4619      	mov	r1, r3
 80069e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80069ea:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80069ee:	462a      	mov	r2, r5
 80069f0:	701a      	strb	r2, [r3, #0]
 80069f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80069f6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80069fa:	4622      	mov	r2, r4
 80069fc:	801a      	strh	r2, [r3, #0]
 80069fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006a02:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8006a06:	4602      	mov	r2, r0
 8006a08:	801a      	strh	r2, [r3, #0]
 8006a0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006a0e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8006a12:	460a      	mov	r2, r1
 8006a14:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8006a16:	f107 0310 	add.w	r3, r7, #16
 8006a1a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006a1e:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8006a22:	3308      	adds	r3, #8
 8006a24:	f107 0210 	add.w	r2, r7, #16
 8006a28:	4413      	add	r3, r2
 8006a2a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006a2e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006a32:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8006a36:	4413      	add	r3, r2
 8006a38:	3309      	adds	r3, #9
 8006a3a:	f107 0210 	add.w	r2, r7, #16
 8006a3e:	4413      	add	r3, r2
 8006a40:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006a44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006a48:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006a50:	2300      	movs	r3, #0
 8006a52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8006a56:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006a5a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006a5e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8006a62:	7812      	ldrb	r2, [r2, #0]
 8006a64:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006a66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8006a70:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006a74:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006a78:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8006a7c:	8812      	ldrh	r2, [r2, #0]
 8006a7e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006a82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a86:	3302      	adds	r3, #2
 8006a88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006a8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006a90:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006a94:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8006a98:	8812      	ldrh	r2, [r2, #0]
 8006a9a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006a9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006aa2:	3302      	adds	r3, #2
 8006aa4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006aa8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006aac:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006ab0:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8006ab4:	7812      	ldrb	r2, [r2, #0]
 8006ab6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006ab8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006abc:	3301      	adds	r3, #1
 8006abe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8006ac2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006ac6:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8006aca:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006acc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8006ad6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006ada:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006ade:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8006ae0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8006aea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006aee:	3308      	adds	r3, #8
 8006af0:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006af4:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8006af8:	4618      	mov	r0, r3
 8006afa:	f001 f872 	bl	8007be2 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8006afe:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8006b02:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006b06:	4413      	add	r3, r2
 8006b08:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8006b0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006b10:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006b14:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006b16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8006b20:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006b24:	3301      	adds	r3, #1
 8006b26:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006b2a:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f001 f857 	bl	8007be2 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006b34:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8006b38:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8006b42:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006b46:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8006b4a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006b4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006b50:	3302      	adds	r3, #2
 8006b52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8006b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006b5a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8006b5e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006b60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006b64:	3302      	adds	r3, #2
 8006b66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006b6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006b6e:	2218      	movs	r2, #24
 8006b70:	2100      	movs	r1, #0
 8006b72:	4618      	mov	r0, r3
 8006b74:	f001 f845 	bl	8007c02 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006b78:	233f      	movs	r3, #63	@ 0x3f
 8006b7a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8006b7e:	2383      	movs	r3, #131	@ 0x83
 8006b80:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006b84:	f107 0310 	add.w	r3, r7, #16
 8006b88:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006b8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006b90:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006b94:	f107 030f 	add.w	r3, r7, #15
 8006b98:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006ba2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f001 fab3 	bl	8008114 <hci_send_req>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	da01      	bge.n	8006bb8 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8006bb4:	23ff      	movs	r3, #255	@ 0xff
 8006bb6:	e004      	b.n	8006bc2 <aci_gap_set_discoverable+0x1ea>
  return status;
 8006bb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006bbc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006bc0:	781b      	ldrb	r3, [r3, #0]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bdb0      	pop	{r4, r5, r7, pc}

08006bcc <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b0cc      	sub	sp, #304	@ 0x130
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006bd8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006bdc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8006bde:	f107 0310 	add.w	r3, r7, #16
 8006be2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006be6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006bea:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006bee:	2200      	movs	r2, #0
 8006bf0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8006bf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006bfc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006c00:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006c04:	7812      	ldrb	r2, [r2, #0]
 8006c06:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006c08:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006c12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006c16:	2218      	movs	r2, #24
 8006c18:	2100      	movs	r1, #0
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 fff1 	bl	8007c02 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006c20:	233f      	movs	r3, #63	@ 0x3f
 8006c22:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8006c26:	2385      	movs	r3, #133	@ 0x85
 8006c28:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006c2c:	f107 0310 	add.w	r3, r7, #16
 8006c30:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006c34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c38:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006c3c:	f107 030f 	add.w	r3, r7, #15
 8006c40:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006c44:	2301      	movs	r3, #1
 8006c46:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006c4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006c4e:	2100      	movs	r1, #0
 8006c50:	4618      	mov	r0, r3
 8006c52:	f001 fa5f 	bl	8008114 <hci_send_req>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	da01      	bge.n	8006c60 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8006c5c:	23ff      	movs	r3, #255	@ 0xff
 8006c5e:	e004      	b.n	8006c6a <aci_gap_set_io_capability+0x9e>
  return status;
 8006c60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c64:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006c68:	781b      	ldrb	r3, [r3, #0]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8006c74:	b5b0      	push	{r4, r5, r7, lr}
 8006c76:	b0cc      	sub	sp, #304	@ 0x130
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	4605      	mov	r5, r0
 8006c7c:	460c      	mov	r4, r1
 8006c7e:	4610      	mov	r0, r2
 8006c80:	4619      	mov	r1, r3
 8006c82:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c86:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006c8a:	462a      	mov	r2, r5
 8006c8c:	701a      	strb	r2, [r3, #0]
 8006c8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c92:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006c96:	4622      	mov	r2, r4
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c9e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	701a      	strb	r2, [r3, #0]
 8006ca6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006caa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006cae:	460a      	mov	r2, r1
 8006cb0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8006cb2:	f107 0310 	add.w	r3, r7, #16
 8006cb6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006cba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006cbe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8006ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006cd0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006cd4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006cd8:	7812      	ldrb	r2, [r2, #0]
 8006cda:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006cdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8006ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006cea:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006cee:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006cf2:	7812      	ldrb	r2, [r2, #0]
 8006cf4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006cf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8006d00:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d04:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006d08:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006d0c:	7812      	ldrb	r2, [r2, #0]
 8006d0e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006d10:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d14:	3301      	adds	r3, #1
 8006d16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8006d1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d1e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006d22:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8006d26:	7812      	ldrb	r2, [r2, #0]
 8006d28:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8006d2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d2e:	3301      	adds	r3, #1
 8006d30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8006d34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d38:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8006d3c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006d3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d42:	3301      	adds	r3, #1
 8006d44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8006d48:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d4c:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8006d50:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006d52:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d56:	3301      	adds	r3, #1
 8006d58:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8006d5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d60:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8006d64:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006d66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8006d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d74:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8006d78:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8006d7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d80:	3304      	adds	r3, #4
 8006d82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8006d86:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d8a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8006d8e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8006d90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d94:	3301      	adds	r3, #1
 8006d96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006d9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006d9e:	2218      	movs	r2, #24
 8006da0:	2100      	movs	r1, #0
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 ff2d 	bl	8007c02 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006da8:	233f      	movs	r3, #63	@ 0x3f
 8006daa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8006dae:	2386      	movs	r3, #134	@ 0x86
 8006db0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006db4:	f107 0310 	add.w	r3, r7, #16
 8006db8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006dbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006dc0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006dc4:	f107 030f 	add.w	r3, r7, #15
 8006dc8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006dd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f001 f99b 	bl	8008114 <hci_send_req>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	da01      	bge.n	8006de8 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8006de4:	23ff      	movs	r3, #255	@ 0xff
 8006de6:	e004      	b.n	8006df2 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8006de8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006dec:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006df0:	781b      	ldrb	r3, [r3, #0]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bdb0      	pop	{r4, r5, r7, pc}

08006dfc <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b0cc      	sub	sp, #304	@ 0x130
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	4602      	mov	r2, r0
 8006e04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e08:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006e0c:	6019      	str	r1, [r3, #0]
 8006e0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e12:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006e16:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8006e18:	f107 0310 	add.w	r3, r7, #16
 8006e1c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006e20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e24:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006e28:	2200      	movs	r2, #0
 8006e2a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006e32:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006e36:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006e3a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006e3e:	8812      	ldrh	r2, [r2, #0]
 8006e40:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006e42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e46:	3302      	adds	r3, #2
 8006e48:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8006e4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006e50:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006e54:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8006e58:	6812      	ldr	r2, [r2, #0]
 8006e5a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8006e5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e62:	3304      	adds	r3, #4
 8006e64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006e68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e6c:	2218      	movs	r2, #24
 8006e6e:	2100      	movs	r1, #0
 8006e70:	4618      	mov	r0, r3
 8006e72:	f000 fec6 	bl	8007c02 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006e76:	233f      	movs	r3, #63	@ 0x3f
 8006e78:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8006e7c:	2388      	movs	r3, #136	@ 0x88
 8006e7e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006e82:	f107 0310 	add.w	r3, r7, #16
 8006e86:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006e8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e8e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006e92:	f107 030f 	add.w	r3, r7, #15
 8006e96:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006ea0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f001 f934 	bl	8008114 <hci_send_req>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	da01      	bge.n	8006eb6 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8006eb2:	23ff      	movs	r3, #255	@ 0xff
 8006eb4:	e004      	b.n	8006ec0 <aci_gap_pass_key_resp+0xc4>
  return status;
 8006eb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006eba:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006ebe:	781b      	ldrb	r3, [r3, #0]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8006eca:	b590      	push	{r4, r7, lr}
 8006ecc:	b0cd      	sub	sp, #308	@ 0x134
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	4608      	mov	r0, r1
 8006ed4:	4611      	mov	r1, r2
 8006ed6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006eda:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8006ede:	6013      	str	r3, [r2, #0]
 8006ee0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ee4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006ee8:	4622      	mov	r2, r4
 8006eea:	701a      	strb	r2, [r3, #0]
 8006eec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ef0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	701a      	strb	r2, [r3, #0]
 8006ef8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006efc:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006f00:	460a      	mov	r2, r1
 8006f02:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8006f04:	f107 0310 	add.w	r3, r7, #16
 8006f08:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006f0c:	f107 0308 	add.w	r3, r7, #8
 8006f10:	2207      	movs	r2, #7
 8006f12:	2100      	movs	r1, #0
 8006f14:	4618      	mov	r0, r3
 8006f16:	f000 fe74 	bl	8007c02 <Osal_MemSet>
  int index_input = 0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8006f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006f24:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006f28:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006f2c:	7812      	ldrb	r2, [r2, #0]
 8006f2e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006f30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f34:	3301      	adds	r3, #1
 8006f36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8006f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006f3e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006f42:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006f46:	7812      	ldrb	r2, [r2, #0]
 8006f48:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006f4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f4e:	3301      	adds	r3, #1
 8006f50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8006f54:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006f58:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006f5c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006f60:	7812      	ldrb	r2, [r2, #0]
 8006f62:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006f64:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f68:	3301      	adds	r3, #1
 8006f6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006f6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006f72:	2218      	movs	r2, #24
 8006f74:	2100      	movs	r1, #0
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 fe43 	bl	8007c02 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006f7c:	233f      	movs	r3, #63	@ 0x3f
 8006f7e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8006f82:	238a      	movs	r3, #138	@ 0x8a
 8006f84:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006f88:	f107 0310 	add.w	r3, r7, #16
 8006f8c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006f90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f94:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8006f98:	f107 0308 	add.w	r3, r7, #8
 8006f9c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8006fa0:	2307      	movs	r3, #7
 8006fa2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006fa6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006faa:	2100      	movs	r1, #0
 8006fac:	4618      	mov	r0, r3
 8006fae:	f001 f8b1 	bl	8008114 <hci_send_req>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	da01      	bge.n	8006fbc <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8006fb8:	23ff      	movs	r3, #255	@ 0xff
 8006fba:	e02e      	b.n	800701a <aci_gap_init+0x150>
  if ( resp.Status )
 8006fbc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006fc0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d005      	beq.n	8006fd6 <aci_gap_init+0x10c>
    return resp.Status;
 8006fca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006fce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	e021      	b.n	800701a <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8006fd6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006fda:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006fde:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006fe8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8006ff0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ff4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006ff8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007002:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8007004:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007008:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800700c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007010:	b29a      	uxth	r2, r3
 8007012:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007016:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8007020:	46bd      	mov	sp, r7
 8007022:	bd90      	pop	{r4, r7, pc}

08007024 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b0cc      	sub	sp, #304	@ 0x130
 8007028:	af00      	add	r7, sp, #0
 800702a:	4602      	mov	r2, r0
 800702c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007030:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007034:	6019      	str	r1, [r3, #0]
 8007036:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800703a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800703e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8007040:	f107 0310 	add.w	r3, r7, #16
 8007044:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007048:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800704c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007050:	2200      	movs	r2, #0
 8007052:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007054:	2300      	movs	r3, #0
 8007056:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800705a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800705e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007062:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007066:	7812      	ldrb	r2, [r2, #0]
 8007068:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800706a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800706e:	3301      	adds	r3, #1
 8007070:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8007074:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007078:	1c58      	adds	r0, r3, #1
 800707a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800707e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007082:	781a      	ldrb	r2, [r3, #0]
 8007084:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007088:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800708c:	6819      	ldr	r1, [r3, #0]
 800708e:	f000 fda8 	bl	8007be2 <Osal_MemCpy>
  index_input += AdvDataLen;
 8007092:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007096:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80070a0:	4413      	add	r3, r2
 80070a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80070a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80070aa:	2218      	movs	r2, #24
 80070ac:	2100      	movs	r1, #0
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 fda7 	bl	8007c02 <Osal_MemSet>
  rq.ogf = 0x3f;
 80070b4:	233f      	movs	r3, #63	@ 0x3f
 80070b6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 80070ba:	238e      	movs	r3, #142	@ 0x8e
 80070bc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80070c0:	f107 0310 	add.w	r3, r7, #16
 80070c4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80070c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80070cc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80070d0:	f107 030f 	add.w	r3, r7, #15
 80070d4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80070d8:	2301      	movs	r3, #1
 80070da:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80070de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80070e2:	2100      	movs	r1, #0
 80070e4:	4618      	mov	r0, r3
 80070e6:	f001 f815 	bl	8008114 <hci_send_req>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	da01      	bge.n	80070f4 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80070f0:	23ff      	movs	r3, #255	@ 0xff
 80070f2:	e004      	b.n	80070fe <aci_gap_update_adv_data+0xda>
  return status;
 80070f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80070f8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80070fc:	781b      	ldrb	r3, [r3, #0]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800710e:	2300      	movs	r3, #0
 8007110:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007112:	f107 0308 	add.w	r3, r7, #8
 8007116:	2218      	movs	r2, #24
 8007118:	2100      	movs	r1, #0
 800711a:	4618      	mov	r0, r3
 800711c:	f000 fd71 	bl	8007c02 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007120:	233f      	movs	r3, #63	@ 0x3f
 8007122:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8007124:	2392      	movs	r3, #146	@ 0x92
 8007126:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007128:	1dfb      	adds	r3, r7, #7
 800712a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800712c:	2301      	movs	r3, #1
 800712e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007130:	f107 0308 	add.w	r3, r7, #8
 8007134:	2100      	movs	r1, #0
 8007136:	4618      	mov	r0, r3
 8007138:	f000 ffec 	bl	8008114 <hci_send_req>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	da01      	bge.n	8007146 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007142:	23ff      	movs	r3, #255	@ 0xff
 8007144:	e000      	b.n	8007148 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8007146:	79fb      	ldrb	r3, [r7, #7]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3720      	adds	r7, #32
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b0cc      	sub	sp, #304	@ 0x130
 8007154:	af00      	add	r7, sp, #0
 8007156:	4602      	mov	r2, r0
 8007158:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800715c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007160:	801a      	strh	r2, [r3, #0]
 8007162:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007166:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800716a:	460a      	mov	r2, r1
 800716c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800716e:	f107 0310 	add.w	r3, r7, #16
 8007172:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007176:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800717a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800717e:	2200      	movs	r2, #0
 8007180:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007182:	2300      	movs	r3, #0
 8007184:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007188:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800718c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007190:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007194:	8812      	ldrh	r2, [r2, #0]
 8007196:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007198:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800719c:	3302      	adds	r3, #2
 800719e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80071a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80071a6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80071aa:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80071ae:	7812      	ldrb	r2, [r2, #0]
 80071b0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80071b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80071b6:	3301      	adds	r3, #1
 80071b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80071bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80071c0:	2218      	movs	r2, #24
 80071c2:	2100      	movs	r1, #0
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 fd1c 	bl	8007c02 <Osal_MemSet>
  rq.ogf = 0x3f;
 80071ca:	233f      	movs	r3, #63	@ 0x3f
 80071cc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 80071d0:	23a5      	movs	r3, #165	@ 0xa5
 80071d2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80071d6:	f107 0310 	add.w	r3, r7, #16
 80071da:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80071de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80071e2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80071e6:	f107 030f 	add.w	r3, r7, #15
 80071ea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80071ee:	2301      	movs	r3, #1
 80071f0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80071f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80071f8:	2100      	movs	r1, #0
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 ff8a 	bl	8008114 <hci_send_req>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	da01      	bge.n	800720a <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8007206:	23ff      	movs	r3, #255	@ 0xff
 8007208:	e004      	b.n	8007214 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800720a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800720e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007212:	781b      	ldrb	r3, [r3, #0]
}
 8007214:	4618      	mov	r0, r3
 8007216:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b088      	sub	sp, #32
 8007222:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007224:	2300      	movs	r3, #0
 8007226:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007228:	f107 0308 	add.w	r3, r7, #8
 800722c:	2218      	movs	r2, #24
 800722e:	2100      	movs	r1, #0
 8007230:	4618      	mov	r0, r3
 8007232:	f000 fce6 	bl	8007c02 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007236:	233f      	movs	r3, #63	@ 0x3f
 8007238:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800723a:	f240 1301 	movw	r3, #257	@ 0x101
 800723e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007240:	1dfb      	adds	r3, r7, #7
 8007242:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007244:	2301      	movs	r3, #1
 8007246:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007248:	f107 0308 	add.w	r3, r7, #8
 800724c:	2100      	movs	r1, #0
 800724e:	4618      	mov	r0, r3
 8007250:	f000 ff60 	bl	8008114 <hci_send_req>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	da01      	bge.n	800725e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800725a:	23ff      	movs	r3, #255	@ 0xff
 800725c:	e000      	b.n	8007260 <aci_gatt_init+0x42>
  return status;
 800725e:	79fb      	ldrb	r3, [r7, #7]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3720      	adds	r7, #32
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8007268:	b590      	push	{r4, r7, lr}
 800726a:	b0cf      	sub	sp, #316	@ 0x13c
 800726c:	af00      	add	r7, sp, #0
 800726e:	4604      	mov	r4, r0
 8007270:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8007274:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8007278:	6001      	str	r1, [r0, #0]
 800727a:	4610      	mov	r0, r2
 800727c:	4619      	mov	r1, r3
 800727e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007282:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8007286:	4622      	mov	r2, r4
 8007288:	701a      	strb	r2, [r3, #0]
 800728a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800728e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8007292:	4602      	mov	r2, r0
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800729a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800729e:	460a      	mov	r2, r1
 80072a0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80072a2:	f107 0310 	add.w	r3, r7, #16
 80072a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80072aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072ae:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d00a      	beq.n	80072ce <aci_gatt_add_service+0x66>
 80072b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072bc:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d101      	bne.n	80072ca <aci_gatt_add_service+0x62>
 80072c6:	2311      	movs	r3, #17
 80072c8:	e002      	b.n	80072d0 <aci_gatt_add_service+0x68>
 80072ca:	2301      	movs	r3, #1
 80072cc:	e000      	b.n	80072d0 <aci_gatt_add_service+0x68>
 80072ce:	2303      	movs	r3, #3
 80072d0:	f107 0210 	add.w	r2, r7, #16
 80072d4:	4413      	add	r3, r2
 80072d6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80072da:	f107 030c 	add.w	r3, r7, #12
 80072de:	2203      	movs	r2, #3
 80072e0:	2100      	movs	r1, #0
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 fc8d 	bl	8007c02 <Osal_MemSet>
  int index_input = 0;
 80072e8:	2300      	movs	r3, #0
 80072ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80072ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80072f2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80072f6:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80072fa:	7812      	ldrb	r2, [r2, #0]
 80072fc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80072fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007302:	3301      	adds	r3, #1
 8007304:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8007308:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800730c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d002      	beq.n	800731c <aci_gatt_add_service+0xb4>
 8007316:	2b02      	cmp	r3, #2
 8007318:	d004      	beq.n	8007324 <aci_gatt_add_service+0xbc>
 800731a:	e007      	b.n	800732c <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800731c:	2302      	movs	r3, #2
 800731e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8007322:	e005      	b.n	8007330 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8007324:	2310      	movs	r3, #16
 8007326:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800732a:	e001      	b.n	8007330 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800732c:	2397      	movs	r3, #151	@ 0x97
 800732e:	e06c      	b.n	800740a <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007330:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007334:	1c58      	adds	r0, r3, #1
 8007336:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800733a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800733e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007342:	6819      	ldr	r1, [r3, #0]
 8007344:	f000 fc4d 	bl	8007be2 <Osal_MemCpy>
    index_input += size;
 8007348:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800734c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007350:	4413      	add	r3, r2
 8007352:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8007356:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800735a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800735e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8007362:	7812      	ldrb	r2, [r2, #0]
 8007364:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007366:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800736a:	3301      	adds	r3, #1
 800736c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8007370:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007374:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007378:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800737c:	7812      	ldrb	r2, [r2, #0]
 800737e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8007380:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007384:	3301      	adds	r3, #1
 8007386:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800738a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800738e:	2218      	movs	r2, #24
 8007390:	2100      	movs	r1, #0
 8007392:	4618      	mov	r0, r3
 8007394:	f000 fc35 	bl	8007c02 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007398:	233f      	movs	r3, #63	@ 0x3f
 800739a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800739e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80073a2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80073a6:	f107 0310 	add.w	r3, r7, #16
 80073aa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80073ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80073b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80073b6:	f107 030c 	add.w	r3, r7, #12
 80073ba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80073be:	2303      	movs	r3, #3
 80073c0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80073c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80073c8:	2100      	movs	r1, #0
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 fea2 	bl	8008114 <hci_send_req>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	da01      	bge.n	80073da <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80073d6:	23ff      	movs	r3, #255	@ 0xff
 80073d8:	e017      	b.n	800740a <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80073da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d005      	beq.n	80073f4 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80073e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	e00a      	b.n	800740a <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80073f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073fc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007400:	b29a      	uxth	r2, r3
 8007402:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8007406:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8007410:	46bd      	mov	sp, r7
 8007412:	bd90      	pop	{r4, r7, pc}

08007414 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8007414:	b590      	push	{r4, r7, lr}
 8007416:	b0d1      	sub	sp, #324	@ 0x144
 8007418:	af00      	add	r7, sp, #0
 800741a:	4604      	mov	r4, r0
 800741c:	4608      	mov	r0, r1
 800741e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8007422:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8007426:	600a      	str	r2, [r1, #0]
 8007428:	4619      	mov	r1, r3
 800742a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800742e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8007432:	4622      	mov	r2, r4
 8007434:	801a      	strh	r2, [r3, #0]
 8007436:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800743a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800743e:	4602      	mov	r2, r0
 8007440:	701a      	strb	r2, [r3, #0]
 8007442:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007446:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800744a:	460a      	mov	r2, r1
 800744c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800744e:	f107 0318 	add.w	r3, r7, #24
 8007452:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8007456:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800745a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d00a      	beq.n	800747a <aci_gatt_add_char+0x66>
 8007464:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007468:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	2b02      	cmp	r3, #2
 8007470:	d101      	bne.n	8007476 <aci_gatt_add_char+0x62>
 8007472:	2313      	movs	r3, #19
 8007474:	e002      	b.n	800747c <aci_gatt_add_char+0x68>
 8007476:	2303      	movs	r3, #3
 8007478:	e000      	b.n	800747c <aci_gatt_add_char+0x68>
 800747a:	2305      	movs	r3, #5
 800747c:	f107 0218 	add.w	r2, r7, #24
 8007480:	4413      	add	r3, r2
 8007482:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007486:	f107 0314 	add.w	r3, r7, #20
 800748a:	2203      	movs	r2, #3
 800748c:	2100      	movs	r1, #0
 800748e:	4618      	mov	r0, r3
 8007490:	f000 fbb7 	bl	8007c02 <Osal_MemSet>
  int index_input = 0;
 8007494:	2300      	movs	r3, #0
 8007496:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800749a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800749e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80074a2:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80074a6:	8812      	ldrh	r2, [r2, #0]
 80074a8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80074aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80074ae:	3302      	adds	r3, #2
 80074b0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80074b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80074b8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80074bc:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80074c0:	7812      	ldrb	r2, [r2, #0]
 80074c2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80074c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80074c8:	3301      	adds	r3, #1
 80074ca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80074ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80074d2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d002      	beq.n	80074e2 <aci_gatt_add_char+0xce>
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d004      	beq.n	80074ea <aci_gatt_add_char+0xd6>
 80074e0:	e007      	b.n	80074f2 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80074e2:	2302      	movs	r3, #2
 80074e4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80074e8:	e005      	b.n	80074f6 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80074ea:	2310      	movs	r3, #16
 80074ec:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80074f0:	e001      	b.n	80074f6 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80074f2:	2397      	movs	r3, #151	@ 0x97
 80074f4:	e091      	b.n	800761a <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80074f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80074fa:	1cd8      	adds	r0, r3, #3
 80074fc:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8007500:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007504:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007508:	6819      	ldr	r1, [r3, #0]
 800750a:	f000 fb6a 	bl	8007be2 <Osal_MemCpy>
    index_input += size;
 800750e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8007512:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007516:	4413      	add	r3, r2
 8007518:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800751c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007520:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8007524:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8007528:	8812      	ldrh	r2, [r2, #0]
 800752a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800752c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007530:	3302      	adds	r3, #2
 8007532:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8007536:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800753a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800753e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8007540:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007544:	3301      	adds	r3, #1
 8007546:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800754a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800754e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8007552:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8007554:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007558:	3301      	adds	r3, #1
 800755a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800755e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007562:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8007566:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007568:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800756c:	3301      	adds	r3, #1
 800756e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8007572:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007576:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800757a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800757c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007580:	3301      	adds	r3, #1
 8007582:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8007586:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800758a:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800758e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007590:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007594:	3301      	adds	r3, #1
 8007596:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800759a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800759e:	2218      	movs	r2, #24
 80075a0:	2100      	movs	r1, #0
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 fb2d 	bl	8007c02 <Osal_MemSet>
  rq.ogf = 0x3f;
 80075a8:	233f      	movs	r3, #63	@ 0x3f
 80075aa:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 80075ae:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80075b2:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 80075b6:	f107 0318 	add.w	r3, r7, #24
 80075ba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80075be:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80075c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80075c6:	f107 0314 	add.w	r3, r7, #20
 80075ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80075ce:	2303      	movs	r3, #3
 80075d0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80075d4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80075d8:	2100      	movs	r1, #0
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 fd9a 	bl	8008114 <hci_send_req>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	da01      	bge.n	80075ea <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80075e6:	23ff      	movs	r3, #255	@ 0xff
 80075e8:	e017      	b.n	800761a <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80075ea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80075ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d005      	beq.n	8007604 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80075f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80075fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	e00a      	b.n	800761a <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8007604:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007608:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800760c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007610:	b29a      	uxth	r2, r3
 8007612:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8007616:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8007620:	46bd      	mov	sp, r7
 8007622:	bd90      	pop	{r4, r7, pc}

08007624 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007624:	b5b0      	push	{r4, r5, r7, lr}
 8007626:	b0cc      	sub	sp, #304	@ 0x130
 8007628:	af00      	add	r7, sp, #0
 800762a:	4605      	mov	r5, r0
 800762c:	460c      	mov	r4, r1
 800762e:	4610      	mov	r0, r2
 8007630:	4619      	mov	r1, r3
 8007632:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007636:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800763a:	462a      	mov	r2, r5
 800763c:	801a      	strh	r2, [r3, #0]
 800763e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007642:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007646:	4622      	mov	r2, r4
 8007648:	801a      	strh	r2, [r3, #0]
 800764a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800764e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8007652:	4602      	mov	r2, r0
 8007654:	701a      	strb	r2, [r3, #0]
 8007656:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800765a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800765e:	460a      	mov	r2, r1
 8007660:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8007662:	f107 0310 	add.w	r3, r7, #16
 8007666:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800766a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800766e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007672:	2200      	movs	r2, #0
 8007674:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007676:	2300      	movs	r3, #0
 8007678:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800767c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007680:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007684:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007688:	8812      	ldrh	r2, [r2, #0]
 800768a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800768c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007690:	3302      	adds	r3, #2
 8007692:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8007696:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800769a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800769e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80076a2:	8812      	ldrh	r2, [r2, #0]
 80076a4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80076a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80076aa:	3302      	adds	r3, #2
 80076ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 80076b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80076b4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80076b8:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 80076bc:	7812      	ldrb	r2, [r2, #0]
 80076be:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80076c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80076c4:	3301      	adds	r3, #1
 80076c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80076ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80076ce:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80076d2:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80076d6:	7812      	ldrb	r2, [r2, #0]
 80076d8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80076da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80076de:	3301      	adds	r3, #1
 80076e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80076e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80076e8:	1d98      	adds	r0, r3, #6
 80076ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80076ee:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	461a      	mov	r2, r3
 80076f6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80076fa:	f000 fa72 	bl	8007be2 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80076fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007702:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800770c:	4413      	add	r3, r2
 800770e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007712:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007716:	2218      	movs	r2, #24
 8007718:	2100      	movs	r1, #0
 800771a:	4618      	mov	r0, r3
 800771c:	f000 fa71 	bl	8007c02 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007720:	233f      	movs	r3, #63	@ 0x3f
 8007722:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8007726:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800772a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800772e:	f107 0310 	add.w	r3, r7, #16
 8007732:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007736:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800773a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800773e:	f107 030f 	add.w	r3, r7, #15
 8007742:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007746:	2301      	movs	r3, #1
 8007748:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800774c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007750:	2100      	movs	r1, #0
 8007752:	4618      	mov	r0, r3
 8007754:	f000 fcde 	bl	8008114 <hci_send_req>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	da01      	bge.n	8007762 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800775e:	23ff      	movs	r3, #255	@ 0xff
 8007760:	e004      	b.n	800776c <aci_gatt_update_char_value+0x148>
  return status;
 8007762:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007766:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800776a:	781b      	ldrb	r3, [r3, #0]
}
 800776c:	4618      	mov	r0, r3
 800776e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007772:	46bd      	mov	sp, r7
 8007774:	bdb0      	pop	{r4, r5, r7, pc}

08007776 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b0cc      	sub	sp, #304	@ 0x130
 800777a:	af00      	add	r7, sp, #0
 800777c:	4602      	mov	r2, r0
 800777e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007782:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007786:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8007788:	f107 0310 	add.w	r3, r7, #16
 800778c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007790:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007794:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007798:	2200      	movs	r2, #0
 800779a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800779c:	2300      	movs	r3, #0
 800779e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80077a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80077a6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80077aa:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80077ae:	8812      	ldrh	r2, [r2, #0]
 80077b0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80077b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80077b6:	3302      	adds	r3, #2
 80077b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80077bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80077c0:	2218      	movs	r2, #24
 80077c2:	2100      	movs	r1, #0
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 fa1c 	bl	8007c02 <Osal_MemSet>
  rq.ogf = 0x3f;
 80077ca:	233f      	movs	r3, #63	@ 0x3f
 80077cc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 80077d0:	f240 1325 	movw	r3, #293	@ 0x125
 80077d4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80077d8:	f107 0310 	add.w	r3, r7, #16
 80077dc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80077e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80077e4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80077e8:	f107 030f 	add.w	r3, r7, #15
 80077ec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80077f0:	2301      	movs	r3, #1
 80077f2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80077f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80077fa:	2100      	movs	r1, #0
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 fc89 	bl	8008114 <hci_send_req>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	da01      	bge.n	800780c <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8007808:	23ff      	movs	r3, #255	@ 0xff
 800780a:	e004      	b.n	8007816 <aci_gatt_confirm_indication+0xa0>
  return status;
 800780c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007810:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007814:	781b      	ldrb	r3, [r3, #0]
}
 8007816:	4618      	mov	r0, r3
 8007818:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b0cc      	sub	sp, #304	@ 0x130
 8007824:	af00      	add	r7, sp, #0
 8007826:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800782a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007834:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007838:	4602      	mov	r2, r0
 800783a:	701a      	strb	r2, [r3, #0]
 800783c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007840:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007844:	460a      	mov	r2, r1
 8007846:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007848:	f107 0310 	add.w	r3, r7, #16
 800784c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007850:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007854:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007858:	2200      	movs	r2, #0
 800785a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800785c:	2300      	movs	r3, #0
 800785e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8007862:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007866:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800786a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800786e:	7812      	ldrb	r2, [r2, #0]
 8007870:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007872:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007876:	3301      	adds	r3, #1
 8007878:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800787c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007880:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007884:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007888:	7812      	ldrb	r2, [r2, #0]
 800788a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800788c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007890:	3301      	adds	r3, #1
 8007892:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007896:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800789a:	1c98      	adds	r0, r3, #2
 800789c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80078a0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80078a4:	781a      	ldrb	r2, [r3, #0]
 80078a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80078aa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80078ae:	6819      	ldr	r1, [r3, #0]
 80078b0:	f000 f997 	bl	8007be2 <Osal_MemCpy>
  index_input += Length;
 80078b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80078b8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80078c2:	4413      	add	r3, r2
 80078c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80078c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80078cc:	2218      	movs	r2, #24
 80078ce:	2100      	movs	r1, #0
 80078d0:	4618      	mov	r0, r3
 80078d2:	f000 f996 	bl	8007c02 <Osal_MemSet>
  rq.ogf = 0x3f;
 80078d6:	233f      	movs	r3, #63	@ 0x3f
 80078d8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 80078dc:	230c      	movs	r3, #12
 80078de:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80078e2:	f107 0310 	add.w	r3, r7, #16
 80078e6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80078ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80078ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80078f2:	f107 030f 	add.w	r3, r7, #15
 80078f6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80078fa:	2301      	movs	r3, #1
 80078fc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007900:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007904:	2100      	movs	r1, #0
 8007906:	4618      	mov	r0, r3
 8007908:	f000 fc04 	bl	8008114 <hci_send_req>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	da01      	bge.n	8007916 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8007912:	23ff      	movs	r3, #255	@ 0xff
 8007914:	e004      	b.n	8007920 <aci_hal_write_config_data+0x100>
  return status;
 8007916:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800791a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800791e:	781b      	ldrb	r3, [r3, #0]
}
 8007920:	4618      	mov	r0, r3
 8007922:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b0cc      	sub	sp, #304	@ 0x130
 800792e:	af00      	add	r7, sp, #0
 8007930:	4602      	mov	r2, r0
 8007932:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007936:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800793a:	701a      	strb	r2, [r3, #0]
 800793c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007940:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007944:	460a      	mov	r2, r1
 8007946:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007948:	f107 0310 	add.w	r3, r7, #16
 800794c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007950:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007954:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007958:	2200      	movs	r2, #0
 800795a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800795c:	2300      	movs	r3, #0
 800795e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8007962:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007966:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800796a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800796e:	7812      	ldrb	r2, [r2, #0]
 8007970:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007972:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007976:	3301      	adds	r3, #1
 8007978:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800797c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007980:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007984:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007988:	7812      	ldrb	r2, [r2, #0]
 800798a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800798c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007990:	3301      	adds	r3, #1
 8007992:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007996:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800799a:	2218      	movs	r2, #24
 800799c:	2100      	movs	r1, #0
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 f92f 	bl	8007c02 <Osal_MemSet>
  rq.ogf = 0x3f;
 80079a4:	233f      	movs	r3, #63	@ 0x3f
 80079a6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 80079aa:	230f      	movs	r3, #15
 80079ac:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80079b0:	f107 0310 	add.w	r3, r7, #16
 80079b4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80079b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80079bc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80079c0:	f107 030f 	add.w	r3, r7, #15
 80079c4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80079c8:	2301      	movs	r3, #1
 80079ca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80079ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80079d2:	2100      	movs	r1, #0
 80079d4:	4618      	mov	r0, r3
 80079d6:	f000 fb9d 	bl	8008114 <hci_send_req>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	da01      	bge.n	80079e4 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80079e0:	23ff      	movs	r3, #255	@ 0xff
 80079e2:	e004      	b.n	80079ee <aci_hal_set_tx_power_level+0xc4>
  return status;
 80079e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80079e8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80079ec:	781b      	ldrb	r3, [r3, #0]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b0cc      	sub	sp, #304	@ 0x130
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	4602      	mov	r2, r0
 8007a00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007a04:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007a08:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8007a0a:	f107 0310 	add.w	r3, r7, #16
 8007a0e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007a12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007a16:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007a28:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007a2c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007a30:	8812      	ldrh	r2, [r2, #0]
 8007a32:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007a34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007a38:	3302      	adds	r3, #2
 8007a3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007a42:	2218      	movs	r2, #24
 8007a44:	2100      	movs	r1, #0
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 f8db 	bl	8007c02 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a4c:	233f      	movs	r3, #63	@ 0x3f
 8007a4e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8007a52:	2318      	movs	r3, #24
 8007a54:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007a58:	f107 0310 	add.w	r3, r7, #16
 8007a5c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007a60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007a64:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007a68:	f107 030f 	add.w	r3, r7, #15
 8007a6c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007a70:	2301      	movs	r3, #1
 8007a72:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f000 fb49 	bl	8008114 <hci_send_req>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	da01      	bge.n	8007a8c <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8007a88:	23ff      	movs	r3, #255	@ 0xff
 8007a8a:	e004      	b.n	8007a96 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8007a8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007a90:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007a94:	781b      	ldrb	r3, [r3, #0]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b088      	sub	sp, #32
 8007aa4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007aaa:	f107 0308 	add.w	r3, r7, #8
 8007aae:	2218      	movs	r2, #24
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f000 f8a5 	bl	8007c02 <Osal_MemSet>
  rq.ogf = 0x03;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007abc:	2303      	movs	r3, #3
 8007abe:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007ac0:	1dfb      	adds	r3, r7, #7
 8007ac2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ac8:	f107 0308 	add.w	r3, r7, #8
 8007acc:	2100      	movs	r1, #0
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f000 fb20 	bl	8008114 <hci_send_req>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	da01      	bge.n	8007ade <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007ada:	23ff      	movs	r3, #255	@ 0xff
 8007adc:	e000      	b.n	8007ae0 <hci_reset+0x40>
  return status;
 8007ade:	79fb      	ldrb	r3, [r7, #7]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3720      	adds	r7, #32
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8007ae8:	b590      	push	{r4, r7, lr}
 8007aea:	b0cd      	sub	sp, #308	@ 0x134
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	4604      	mov	r4, r0
 8007af0:	4608      	mov	r0, r1
 8007af2:	4611      	mov	r1, r2
 8007af4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007af8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007afc:	4622      	mov	r2, r4
 8007afe:	701a      	strb	r2, [r3, #0]
 8007b00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007b04:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007b08:	4602      	mov	r2, r0
 8007b0a:	701a      	strb	r2, [r3, #0]
 8007b0c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007b10:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8007b14:	460a      	mov	r2, r1
 8007b16:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8007b18:	f107 0310 	add.w	r3, r7, #16
 8007b1c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007b20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007b24:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007b28:	2200      	movs	r2, #0
 8007b2a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8007b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007b36:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007b3a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007b3e:	7812      	ldrb	r2, [r2, #0]
 8007b40:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007b42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007b46:	3301      	adds	r3, #1
 8007b48:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8007b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007b50:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007b54:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007b58:	7812      	ldrb	r2, [r2, #0]
 8007b5a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007b5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007b60:	3301      	adds	r3, #1
 8007b62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007b6a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007b6e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8007b72:	7812      	ldrb	r2, [r2, #0]
 8007b74:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007b76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007b84:	2218      	movs	r2, #24
 8007b86:	2100      	movs	r1, #0
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f000 f83a 	bl	8007c02 <Osal_MemSet>
  rq.ogf = 0x08;
 8007b8e:	2308      	movs	r3, #8
 8007b90:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8007b94:	2331      	movs	r3, #49	@ 0x31
 8007b96:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007b9a:	f107 0310 	add.w	r3, r7, #16
 8007b9e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007ba2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007ba6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007baa:	f107 030f 	add.w	r3, r7, #15
 8007bae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007bb8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 faa8 	bl	8008114 <hci_send_req>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	da01      	bge.n	8007bce <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8007bca:	23ff      	movs	r3, #255	@ 0xff
 8007bcc:	e004      	b.n	8007bd8 <hci_le_set_default_phy+0xf0>
  return status;
 8007bce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007bd2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007bd6:	781b      	ldrb	r3, [r3, #0]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd90      	pop	{r4, r7, pc}

08007be2 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	60f8      	str	r0, [r7, #12]
 8007bea:	60b9      	str	r1, [r7, #8]
 8007bec:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	68b9      	ldr	r1, [r7, #8]
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f002 ff88 	bl	800ab08 <memcpy>
 8007bf8:	4603      	mov	r3, r0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b084      	sub	sp, #16
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	60f8      	str	r0, [r7, #12]
 8007c0a:	60b9      	str	r1, [r7, #8]
 8007c0c:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	68b9      	ldr	r1, [r7, #8]
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f002 ff34 	bl	800aa80 <memset>
 8007c18:	4603      	mov	r3, r0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8007c22:	b480      	push	{r7}
 8007c24:	af00      	add	r7, sp, #0
  return;
 8007c26:	bf00      	nop
}
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8007c30:	b480      	push	{r7}
 8007c32:	af00      	add	r7, sp, #0
  return;
 8007c34:	bf00      	nop
}
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8007c3e:	b480      	push	{r7}
 8007c40:	af00      	add	r7, sp, #0
  return;
 8007c42:	bf00      	nop
}
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	af00      	add	r7, sp, #0
  return;
 8007c50:	bf00      	nop
}
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	af00      	add	r7, sp, #0
  return;
 8007c5e:	bf00      	nop
}
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8007c68:	b480      	push	{r7}
 8007c6a:	af00      	add	r7, sp, #0
  return;
 8007c6c:	bf00      	nop
}
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8007c76:	b480      	push	{r7}
 8007c78:	af00      	add	r7, sp, #0
  return;
 8007c7a:	bf00      	nop
}
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8007c84:	b480      	push	{r7}
 8007c86:	af00      	add	r7, sp, #0
  return;
 8007c88:	bf00      	nop
}
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8007c92:	b480      	push	{r7}
 8007c94:	af00      	add	r7, sp, #0
  return;
 8007c96:	bf00      	nop
}
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	af00      	add	r7, sp, #0
  return;
 8007ca4:	bf00      	nop
}
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8007cae:	b480      	push	{r7}
 8007cb0:	af00      	add	r7, sp, #0
  return;
 8007cb2:	bf00      	nop
}
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	af00      	add	r7, sp, #0
  return;
 8007cc0:	bf00      	nop
}
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8007cca:	b480      	push	{r7}
 8007ccc:	af00      	add	r7, sp, #0
  return;
 8007cce:	bf00      	nop
}
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8007cd8:	b480      	push	{r7}
 8007cda:	af00      	add	r7, sp, #0
  return;
 8007cdc:	bf00      	nop
}
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	af00      	add	r7, sp, #0
  return;
 8007cea:	bf00      	nop
}
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	af00      	add	r7, sp, #0
  return;
 8007cf8:	bf00      	nop
}
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8007d02:	b480      	push	{r7}
 8007d04:	af00      	add	r7, sp, #0
  return;
 8007d06:	bf00      	nop
}
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007d14:	4b04      	ldr	r3, [pc, #16]	@ (8007d28 <SVCCTL_Init+0x18>)
 8007d16:	2200      	movs	r2, #0
 8007d18:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8007d1a:	4b04      	ldr	r3, [pc, #16]	@ (8007d2c <SVCCTL_Init+0x1c>)
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007d20:	f000 f806 	bl	8007d30 <SVCCTL_SvcInit>

  return;
 8007d24:	bf00      	nop
}
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	20000080 	.word	0x20000080
 8007d2c:	200000a0 	.word	0x200000a0

08007d30 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	af00      	add	r7, sp, #0
  BAS_Init();
 8007d34:	f7ff ff75 	bl	8007c22 <BAS_Init>

  BLS_Init();
 8007d38:	f7ff ff7a 	bl	8007c30 <BLS_Init>

  CRS_STM_Init();
 8007d3c:	f7ff ff7f 	bl	8007c3e <CRS_STM_Init>

  DIS_Init();
 8007d40:	f7ff ff84 	bl	8007c4c <DIS_Init>

  EDS_STM_Init();
 8007d44:	f7ff ff89 	bl	8007c5a <EDS_STM_Init>

  HIDS_Init();
 8007d48:	f7ff ff8e 	bl	8007c68 <HIDS_Init>

  HRS_Init();
 8007d4c:	f7ff ff93 	bl	8007c76 <HRS_Init>

  HTS_Init();
 8007d50:	f7ff ff98 	bl	8007c84 <HTS_Init>

  IAS_Init();
 8007d54:	f7ff ff9d 	bl	8007c92 <IAS_Init>

  LLS_Init();
 8007d58:	f7ff ffa2 	bl	8007ca0 <LLS_Init>

  TPS_Init();
 8007d5c:	f7ff ffa7 	bl	8007cae <TPS_Init>

  MOTENV_STM_Init();
 8007d60:	f7ff ffac 	bl	8007cbc <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007d64:	f7ff ffb1 	bl	8007cca <P2PS_STM_Init>

  ZDD_STM_Init();
 8007d68:	f7ff ffb6 	bl	8007cd8 <ZDD_STM_Init>

  OTAS_STM_Init();
 8007d6c:	f7ff ffbb 	bl	8007ce6 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8007d70:	f7ff ffc7 	bl	8007d02 <BVOPUS_STM_Init>

  MESH_Init();
 8007d74:	f7ff ffbe 	bl	8007cf4 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007d78:	f001 fc66 	bl	8009648 <SVCCTL_InitCustomSvc>
  
  return;
 8007d7c:	bf00      	nop
}
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8007d88:	4b09      	ldr	r3, [pc, #36]	@ (8007db0 <SVCCTL_RegisterSvcHandler+0x30>)
 8007d8a:	7f1b      	ldrb	r3, [r3, #28]
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	4a08      	ldr	r2, [pc, #32]	@ (8007db0 <SVCCTL_RegisterSvcHandler+0x30>)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8007d96:	4b06      	ldr	r3, [pc, #24]	@ (8007db0 <SVCCTL_RegisterSvcHandler+0x30>)
 8007d98:	7f1b      	ldrb	r3, [r3, #28]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	b2da      	uxtb	r2, r3
 8007d9e:	4b04      	ldr	r3, [pc, #16]	@ (8007db0 <SVCCTL_RegisterSvcHandler+0x30>)
 8007da0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8007da2:	bf00      	nop
}
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	20000080 	.word	0x20000080

08007db4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	2bff      	cmp	r3, #255	@ 0xff
 8007dcc:	d125      	bne.n	8007e1a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	3302      	adds	r3, #2
 8007dd2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	881b      	ldrh	r3, [r3, #0]
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007dde:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007de2:	d118      	bne.n	8007e16 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007de4:	2300      	movs	r3, #0
 8007de6:	757b      	strb	r3, [r7, #21]
 8007de8:	e00d      	b.n	8007e06 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8007dea:	7d7b      	ldrb	r3, [r7, #21]
 8007dec:	4a1a      	ldr	r2, [pc, #104]	@ (8007e58 <SVCCTL_UserEvtRx+0xa4>)
 8007dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	4798      	blx	r3
 8007df6:	4603      	mov	r3, r0
 8007df8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8007dfa:	7dfb      	ldrb	r3, [r7, #23]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d108      	bne.n	8007e12 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007e00:	7d7b      	ldrb	r3, [r7, #21]
 8007e02:	3301      	adds	r3, #1
 8007e04:	757b      	strb	r3, [r7, #21]
 8007e06:	4b14      	ldr	r3, [pc, #80]	@ (8007e58 <SVCCTL_UserEvtRx+0xa4>)
 8007e08:	7f1b      	ldrb	r3, [r3, #28]
 8007e0a:	7d7a      	ldrb	r2, [r7, #21]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d3ec      	bcc.n	8007dea <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8007e10:	e002      	b.n	8007e18 <SVCCTL_UserEvtRx+0x64>
              break;
 8007e12:	bf00      	nop
          break;
 8007e14:	e000      	b.n	8007e18 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8007e16:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007e18:	e000      	b.n	8007e1c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8007e1a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8007e1c:	7dfb      	ldrb	r3, [r7, #23]
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d00f      	beq.n	8007e42 <SVCCTL_UserEvtRx+0x8e>
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	dc10      	bgt.n	8007e48 <SVCCTL_UserEvtRx+0x94>
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <SVCCTL_UserEvtRx+0x7c>
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d006      	beq.n	8007e3c <SVCCTL_UserEvtRx+0x88>
 8007e2e:	e00b      	b.n	8007e48 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 ff8f 	bl	8008d54 <SVCCTL_App_Notification>
 8007e36:	4603      	mov	r3, r0
 8007e38:	75bb      	strb	r3, [r7, #22]
      break;
 8007e3a:	e008      	b.n	8007e4e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	75bb      	strb	r3, [r7, #22]
      break;
 8007e40:	e005      	b.n	8007e4e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007e42:	2300      	movs	r3, #0
 8007e44:	75bb      	strb	r3, [r7, #22]
      break;
 8007e46:	e002      	b.n	8007e4e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	75bb      	strb	r3, [r7, #22]
      break;
 8007e4c:	bf00      	nop
  }

  return (return_status);
 8007e4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3718      	adds	r7, #24
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	20000080 	.word	0x20000080

08007e5c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b088      	sub	sp, #32
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007e64:	f107 030c 	add.w	r3, r7, #12
 8007e68:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	212e      	movs	r1, #46	@ 0x2e
 8007e74:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8007e78:	f000 fae8 	bl	800844c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	330b      	adds	r3, #11
 8007e80:	78db      	ldrb	r3, [r3, #3]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3720      	adds	r7, #32
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b088      	sub	sp, #32
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007e92:	f107 030c 	add.w	r3, r7, #12
 8007e96:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	210f      	movs	r1, #15
 8007ea2:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8007ea6:	f000 fad1 	bl	800844c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	330b      	adds	r3, #11
 8007eae:	78db      	ldrb	r3, [r3, #3]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3720      	adds	r7, #32
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b088      	sub	sp, #32
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007ec0:	f107 030c 	add.w	r3, r7, #12
 8007ec4:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	2110      	movs	r1, #16
 8007ecc:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8007ed0:	f000 fabc 	bl	800844c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	330b      	adds	r3, #11
 8007ed8:	78db      	ldrb	r3, [r3, #3]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3720      	adds	r7, #32
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
	...

08007ee4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b08b      	sub	sp, #44	@ 0x2c
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8007efc:	2300      	movs	r3, #0
 8007efe:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8007f00:	2300      	movs	r3, #0
 8007f02:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8007f04:	2300      	movs	r3, #0
 8007f06:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8007f0c:	4b4a      	ldr	r3, [pc, #296]	@ (8008038 <SHCI_GetWirelessFwInfo+0x154>)
 8007f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f10:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007f14:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8007f1e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a44      	ldr	r2, [pc, #272]	@ (800803c <SHCI_GetWirelessFwInfo+0x158>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d10f      	bne.n	8007f50 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	695b      	ldr	r3, [r3, #20]
 8007f34:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	69db      	ldr	r3, [r3, #28]
 8007f40:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	617b      	str	r3, [r7, #20]
 8007f4e:	e01a      	b.n	8007f86 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8007f58:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8007f5c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f88:	0e1b      	lsrs	r3, r3, #24
 8007f8a:	b2da      	uxtb	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f92:	0c1b      	lsrs	r3, r3, #16
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f9c:	0a1b      	lsrs	r3, r3, #8
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa6:	091b      	lsrs	r3, r3, #4
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	f003 030f 	and.w	r3, r3, #15
 8007fae:	b2da      	uxtb	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	f003 030f 	and.w	r3, r3, #15
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007fc2:	6a3b      	ldr	r3, [r7, #32]
 8007fc4:	0e1b      	lsrs	r3, r3, #24
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007fcc:	6a3b      	ldr	r3, [r7, #32]
 8007fce:	0c1b      	lsrs	r3, r3, #16
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8007fd6:	6a3b      	ldr	r3, [r7, #32]
 8007fd8:	0a1b      	lsrs	r3, r3, #8
 8007fda:	b2da      	uxtb	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	0e1b      	lsrs	r3, r3, #24
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	0c1b      	lsrs	r3, r3, #16
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	0a1b      	lsrs	r3, r3, #8
 8008008:	b2da      	uxtb	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	0e1b      	lsrs	r3, r3, #24
 8008012:	b2da      	uxtb	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	0c1b      	lsrs	r3, r3, #16
 800801c:	b2da      	uxtb	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	b2da      	uxtb	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	372c      	adds	r7, #44	@ 0x2c
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	58004000 	.word	0x58004000
 800803c:	a94656b9 	.word	0xa94656b9

08008040 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	4a08      	ldr	r2, [pc, #32]	@ (8008070 <hci_init+0x30>)
 8008050:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8008052:	4a08      	ldr	r2, [pc, #32]	@ (8008074 <hci_init+0x34>)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008058:	4806      	ldr	r0, [pc, #24]	@ (8008074 <hci_init+0x34>)
 800805a:	f000 f979 	bl	8008350 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4618      	mov	r0, r3
 8008064:	f000 f8da 	bl	800821c <TlInit>

  return;
 8008068:	bf00      	nop
}
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	20000330 	.word	0x20000330
 8008074:	20000308 	.word	0x20000308

08008078 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800807e:	4822      	ldr	r0, [pc, #136]	@ (8008108 <hci_user_evt_proc+0x90>)
 8008080:	f000 fd32 	bl	8008ae8 <LST_is_empty>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d12b      	bne.n	80080e2 <hci_user_evt_proc+0x6a>
 800808a:	4b20      	ldr	r3, [pc, #128]	@ (800810c <hci_user_evt_proc+0x94>)
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d027      	beq.n	80080e2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008092:	f107 030c 	add.w	r3, r7, #12
 8008096:	4619      	mov	r1, r3
 8008098:	481b      	ldr	r0, [pc, #108]	@ (8008108 <hci_user_evt_proc+0x90>)
 800809a:	f000 fdb4 	bl	8008c06 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800809e:	4b1c      	ldr	r3, [pc, #112]	@ (8008110 <hci_user_evt_proc+0x98>)
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00c      	beq.n	80080c0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80080aa:	2301      	movs	r3, #1
 80080ac:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80080ae:	4b18      	ldr	r3, [pc, #96]	@ (8008110 <hci_user_evt_proc+0x98>)
 80080b0:	69db      	ldr	r3, [r3, #28]
 80080b2:	1d3a      	adds	r2, r7, #4
 80080b4:	4610      	mov	r0, r2
 80080b6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80080b8:	793a      	ldrb	r2, [r7, #4]
 80080ba:	4b14      	ldr	r3, [pc, #80]	@ (800810c <hci_user_evt_proc+0x94>)
 80080bc:	701a      	strb	r2, [r3, #0]
 80080be:	e002      	b.n	80080c6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80080c0:	4b12      	ldr	r3, [pc, #72]	@ (800810c <hci_user_evt_proc+0x94>)
 80080c2:	2201      	movs	r2, #1
 80080c4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80080c6:	4b11      	ldr	r3, [pc, #68]	@ (800810c <hci_user_evt_proc+0x94>)
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d004      	beq.n	80080d8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 fc0d 	bl	80088f0 <TL_MM_EvtDone>
 80080d6:	e004      	b.n	80080e2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	4619      	mov	r1, r3
 80080dc:	480a      	ldr	r0, [pc, #40]	@ (8008108 <hci_user_evt_proc+0x90>)
 80080de:	f000 fd25 	bl	8008b2c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80080e2:	4809      	ldr	r0, [pc, #36]	@ (8008108 <hci_user_evt_proc+0x90>)
 80080e4:	f000 fd00 	bl	8008ae8 <LST_is_empty>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d107      	bne.n	80080fe <hci_user_evt_proc+0x86>
 80080ee:	4b07      	ldr	r3, [pc, #28]	@ (800810c <hci_user_evt_proc+0x94>)
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d003      	beq.n	80080fe <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80080f6:	4804      	ldr	r0, [pc, #16]	@ (8008108 <hci_user_evt_proc+0x90>)
 80080f8:	f001 f860 	bl	80091bc <hci_notify_asynch_evt>
  }


  return;
 80080fc:	bf00      	nop
 80080fe:	bf00      	nop
}
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	200000a8 	.word	0x200000a8
 800810c:	200000b4 	.word	0x200000b4
 8008110:	20000308 	.word	0x20000308

08008114 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b088      	sub	sp, #32
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008120:	2000      	movs	r0, #0
 8008122:	f000 f8d1 	bl	80082c8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8008126:	2300      	movs	r3, #0
 8008128:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	885b      	ldrh	r3, [r3, #2]
 800812e:	b21b      	sxth	r3, r3
 8008130:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008134:	b21a      	sxth	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	881b      	ldrh	r3, [r3, #0]
 800813a:	b21b      	sxth	r3, r3
 800813c:	029b      	lsls	r3, r3, #10
 800813e:	b21b      	sxth	r3, r3
 8008140:	4313      	orrs	r3, r2
 8008142:	b21b      	sxth	r3, r3
 8008144:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8008146:	4b33      	ldr	r3, [pc, #204]	@ (8008214 <hci_send_req+0x100>)
 8008148:	2201      	movs	r2, #1
 800814a:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	b2d9      	uxtb	r1, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	689a      	ldr	r2, [r3, #8]
 8008156:	8bbb      	ldrh	r3, [r7, #28]
 8008158:	4618      	mov	r0, r3
 800815a:	f000 f88f 	bl	800827c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800815e:	e04e      	b.n	80081fe <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008160:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8008164:	f001 f841 	bl	80091ea <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008168:	e043      	b.n	80081f2 <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800816a:	f107 030c 	add.w	r3, r7, #12
 800816e:	4619      	mov	r1, r3
 8008170:	4829      	ldr	r0, [pc, #164]	@ (8008218 <hci_send_req+0x104>)
 8008172:	f000 fd48 	bl	8008c06 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	7a5b      	ldrb	r3, [r3, #9]
 800817a:	2b0f      	cmp	r3, #15
 800817c:	d114      	bne.n	80081a8 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	330b      	adds	r3, #11
 8008182:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	885b      	ldrh	r3, [r3, #2]
 8008188:	b29b      	uxth	r3, r3
 800818a:	8bba      	ldrh	r2, [r7, #28]
 800818c:	429a      	cmp	r2, r3
 800818e:	d104      	bne.n	800819a <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	7812      	ldrb	r2, [r2, #0]
 8008198:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	785b      	ldrb	r3, [r3, #1]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d027      	beq.n	80081f2 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80081a2:	2301      	movs	r3, #1
 80081a4:	77fb      	strb	r3, [r7, #31]
 80081a6:	e024      	b.n	80081f2 <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	330b      	adds	r3, #11
 80081ac:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	8bba      	ldrh	r2, [r7, #28]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d114      	bne.n	80081e6 <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	7a9b      	ldrb	r3, [r3, #10]
 80081c0:	3b03      	subs	r3, #3
 80081c2:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	695a      	ldr	r2, [r3, #20]
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	bfa8      	it	ge
 80081ce:	461a      	movge	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6918      	ldr	r0, [r3, #16]
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	1cd9      	adds	r1, r3, #3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	461a      	mov	r2, r3
 80081e2:	f002 fc91 	bl	800ab08 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80081ee:	2301      	movs	r3, #1
 80081f0:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80081f2:	4809      	ldr	r0, [pc, #36]	@ (8008218 <hci_send_req+0x104>)
 80081f4:	f000 fc78 	bl	8008ae8 <LST_is_empty>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d0b5      	beq.n	800816a <hci_send_req+0x56>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80081fe:	7ffb      	ldrb	r3, [r7, #31]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d0ad      	beq.n	8008160 <hci_send_req+0x4c>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8008204:	2001      	movs	r0, #1
 8008206:	f000 f85f 	bl	80082c8 <NotifyCmdStatus>

  return 0;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3720      	adds	r7, #32
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	20000334 	.word	0x20000334
 8008218:	20000328 	.word	0x20000328

0800821c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b086      	sub	sp, #24
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008224:	480f      	ldr	r0, [pc, #60]	@ (8008264 <TlInit+0x48>)
 8008226:	f000 fc4f 	bl	8008ac8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800822a:	4a0f      	ldr	r2, [pc, #60]	@ (8008268 <TlInit+0x4c>)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008230:	480e      	ldr	r0, [pc, #56]	@ (800826c <TlInit+0x50>)
 8008232:	f000 fc49 	bl	8008ac8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008236:	4b0e      	ldr	r3, [pc, #56]	@ (8008270 <TlInit+0x54>)
 8008238:	2201      	movs	r2, #1
 800823a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800823c:	4b0d      	ldr	r3, [pc, #52]	@ (8008274 <TlInit+0x58>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00a      	beq.n	800825a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008248:	4b0b      	ldr	r3, [pc, #44]	@ (8008278 <TlInit+0x5c>)
 800824a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800824c:	4b09      	ldr	r3, [pc, #36]	@ (8008274 <TlInit+0x58>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f107 0208 	add.w	r2, r7, #8
 8008254:	4610      	mov	r0, r2
 8008256:	4798      	blx	r3
  }

  return;
 8008258:	bf00      	nop
 800825a:	bf00      	nop
}
 800825c:	3718      	adds	r7, #24
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	20000328 	.word	0x20000328
 8008268:	200000b0 	.word	0x200000b0
 800826c:	200000a8 	.word	0x200000a8
 8008270:	200000b4 	.word	0x200000b4
 8008274:	20000308 	.word	0x20000308
 8008278:	08008309 	.word	0x08008309

0800827c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	4603      	mov	r3, r0
 8008284:	603a      	str	r2, [r7, #0]
 8008286:	80fb      	strh	r3, [r7, #6]
 8008288:	460b      	mov	r3, r1
 800828a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800828c:	4b0c      	ldr	r3, [pc, #48]	@ (80082c0 <SendCmd+0x44>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	88fa      	ldrh	r2, [r7, #6]
 8008292:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8008296:	4b0a      	ldr	r3, [pc, #40]	@ (80082c0 <SendCmd+0x44>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	797a      	ldrb	r2, [r7, #5]
 800829c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800829e:	4b08      	ldr	r3, [pc, #32]	@ (80082c0 <SendCmd+0x44>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	330c      	adds	r3, #12
 80082a4:	797a      	ldrb	r2, [r7, #5]
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	4618      	mov	r0, r3
 80082aa:	f002 fc2d 	bl	800ab08 <memcpy>

  hciContext.io.Send(0,0);
 80082ae:	4b05      	ldr	r3, [pc, #20]	@ (80082c4 <SendCmd+0x48>)
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	2100      	movs	r1, #0
 80082b4:	2000      	movs	r0, #0
 80082b6:	4798      	blx	r3

  return;
 80082b8:	bf00      	nop
}
 80082ba:	3708      	adds	r7, #8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	200000b0 	.word	0x200000b0
 80082c4:	20000308 	.word	0x20000308

080082c8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	4603      	mov	r3, r0
 80082d0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80082d2:	79fb      	ldrb	r3, [r7, #7]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d108      	bne.n	80082ea <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80082d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008304 <NotifyCmdStatus+0x3c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00d      	beq.n	80082fc <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80082e0:	4b08      	ldr	r3, [pc, #32]	@ (8008304 <NotifyCmdStatus+0x3c>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2000      	movs	r0, #0
 80082e6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80082e8:	e008      	b.n	80082fc <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80082ea:	4b06      	ldr	r3, [pc, #24]	@ (8008304 <NotifyCmdStatus+0x3c>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d004      	beq.n	80082fc <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80082f2:	4b04      	ldr	r3, [pc, #16]	@ (8008304 <NotifyCmdStatus+0x3c>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2001      	movs	r0, #1
 80082f8:	4798      	blx	r3
  return;
 80082fa:	bf00      	nop
 80082fc:	bf00      	nop
}
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	20000330 	.word	0x20000330

08008308 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	7a5b      	ldrb	r3, [r3, #9]
 8008314:	2b0f      	cmp	r3, #15
 8008316:	d003      	beq.n	8008320 <TlEvtReceived+0x18>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	7a5b      	ldrb	r3, [r3, #9]
 800831c:	2b0e      	cmp	r3, #14
 800831e:	d107      	bne.n	8008330 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8008320:	6879      	ldr	r1, [r7, #4]
 8008322:	4809      	ldr	r0, [pc, #36]	@ (8008348 <TlEvtReceived+0x40>)
 8008324:	f000 fc28 	bl	8008b78 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8008328:	2000      	movs	r0, #0
 800832a:	f000 ff53 	bl	80091d4 <hci_cmd_resp_release>
 800832e:	e006      	b.n	800833e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008330:	6879      	ldr	r1, [r7, #4]
 8008332:	4806      	ldr	r0, [pc, #24]	@ (800834c <TlEvtReceived+0x44>)
 8008334:	f000 fc20 	bl	8008b78 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008338:	4804      	ldr	r0, [pc, #16]	@ (800834c <TlEvtReceived+0x44>)
 800833a:	f000 ff3f 	bl	80091bc <hci_notify_asynch_evt>
  }

  return;
 800833e:	bf00      	nop
}
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	20000328 	.word	0x20000328
 800834c:	200000a8 	.word	0x200000a8

08008350 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a05      	ldr	r2, [pc, #20]	@ (8008370 <hci_register_io_bus+0x20>)
 800835c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a04      	ldr	r2, [pc, #16]	@ (8008374 <hci_register_io_bus+0x24>)
 8008362:	611a      	str	r2, [r3, #16]

  return;
 8008364:	bf00      	nop
}
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	08008669 	.word	0x08008669
 8008374:	080086d1 	.word	0x080086d1

08008378 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	4a08      	ldr	r2, [pc, #32]	@ (80083a8 <shci_init+0x30>)
 8008388:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800838a:	4a08      	ldr	r2, [pc, #32]	@ (80083ac <shci_init+0x34>)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8008390:	4806      	ldr	r0, [pc, #24]	@ (80083ac <shci_init+0x34>)
 8008392:	f000 f915 	bl	80085c0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4618      	mov	r0, r3
 800839c:	f000 f898 	bl	80084d0 <TlInit>

  return;
 80083a0:	bf00      	nop
}
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	20000358 	.word	0x20000358
 80083ac:	20000338 	.word	0x20000338

080083b0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80083b6:	4822      	ldr	r0, [pc, #136]	@ (8008440 <shci_user_evt_proc+0x90>)
 80083b8:	f000 fb96 	bl	8008ae8 <LST_is_empty>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d12b      	bne.n	800841a <shci_user_evt_proc+0x6a>
 80083c2:	4b20      	ldr	r3, [pc, #128]	@ (8008444 <shci_user_evt_proc+0x94>)
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d027      	beq.n	800841a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80083ca:	f107 030c 	add.w	r3, r7, #12
 80083ce:	4619      	mov	r1, r3
 80083d0:	481b      	ldr	r0, [pc, #108]	@ (8008440 <shci_user_evt_proc+0x90>)
 80083d2:	f000 fc18 	bl	8008c06 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80083d6:	4b1c      	ldr	r3, [pc, #112]	@ (8008448 <shci_user_evt_proc+0x98>)
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00c      	beq.n	80083f8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80083e2:	2301      	movs	r3, #1
 80083e4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80083e6:	4b18      	ldr	r3, [pc, #96]	@ (8008448 <shci_user_evt_proc+0x98>)
 80083e8:	69db      	ldr	r3, [r3, #28]
 80083ea:	1d3a      	adds	r2, r7, #4
 80083ec:	4610      	mov	r0, r2
 80083ee:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80083f0:	793a      	ldrb	r2, [r7, #4]
 80083f2:	4b14      	ldr	r3, [pc, #80]	@ (8008444 <shci_user_evt_proc+0x94>)
 80083f4:	701a      	strb	r2, [r3, #0]
 80083f6:	e002      	b.n	80083fe <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80083f8:	4b12      	ldr	r3, [pc, #72]	@ (8008444 <shci_user_evt_proc+0x94>)
 80083fa:	2201      	movs	r2, #1
 80083fc:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80083fe:	4b11      	ldr	r3, [pc, #68]	@ (8008444 <shci_user_evt_proc+0x94>)
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d004      	beq.n	8008410 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	4618      	mov	r0, r3
 800840a:	f000 fa71 	bl	80088f0 <TL_MM_EvtDone>
 800840e:	e004      	b.n	800841a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	4619      	mov	r1, r3
 8008414:	480a      	ldr	r0, [pc, #40]	@ (8008440 <shci_user_evt_proc+0x90>)
 8008416:	f000 fb89 	bl	8008b2c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800841a:	4809      	ldr	r0, [pc, #36]	@ (8008440 <shci_user_evt_proc+0x90>)
 800841c:	f000 fb64 	bl	8008ae8 <LST_is_empty>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d107      	bne.n	8008436 <shci_user_evt_proc+0x86>
 8008426:	4b07      	ldr	r3, [pc, #28]	@ (8008444 <shci_user_evt_proc+0x94>)
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d003      	beq.n	8008436 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800842e:	4804      	ldr	r0, [pc, #16]	@ (8008440 <shci_user_evt_proc+0x90>)
 8008430:	f7f8 fa50 	bl	80008d4 <shci_notify_asynch_evt>
  }


  return;
 8008434:	bf00      	nop
 8008436:	bf00      	nop
}
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	200000b8 	.word	0x200000b8
 8008444:	200000c8 	.word	0x200000c8
 8008448:	20000338 	.word	0x20000338

0800844c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	60ba      	str	r2, [r7, #8]
 8008454:	607b      	str	r3, [r7, #4]
 8008456:	4603      	mov	r3, r0
 8008458:	81fb      	strh	r3, [r7, #14]
 800845a:	460b      	mov	r3, r1
 800845c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800845e:	2000      	movs	r0, #0
 8008460:	f000 f868 	bl	8008534 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8008464:	4b17      	ldr	r3, [pc, #92]	@ (80084c4 <shci_send+0x78>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	89fa      	ldrh	r2, [r7, #14]
 800846a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800846e:	4b15      	ldr	r3, [pc, #84]	@ (80084c4 <shci_send+0x78>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	7b7a      	ldrb	r2, [r7, #13]
 8008474:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8008476:	4b13      	ldr	r3, [pc, #76]	@ (80084c4 <shci_send+0x78>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	330c      	adds	r3, #12
 800847c:	7b7a      	ldrb	r2, [r7, #13]
 800847e:	68b9      	ldr	r1, [r7, #8]
 8008480:	4618      	mov	r0, r3
 8008482:	f002 fb41 	bl	800ab08 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8008486:	4b10      	ldr	r3, [pc, #64]	@ (80084c8 <shci_send+0x7c>)
 8008488:	2201      	movs	r2, #1
 800848a:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800848c:	4b0f      	ldr	r3, [pc, #60]	@ (80084cc <shci_send+0x80>)
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	2100      	movs	r1, #0
 8008492:	2000      	movs	r0, #0
 8008494:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8008496:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800849a:	f7f8 fa32 	bl	8000902 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f103 0008 	add.w	r0, r3, #8
 80084a4:	4b07      	ldr	r3, [pc, #28]	@ (80084c4 <shci_send+0x78>)
 80084a6:	6819      	ldr	r1, [r3, #0]
 80084a8:	4b06      	ldr	r3, [pc, #24]	@ (80084c4 <shci_send+0x78>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	789b      	ldrb	r3, [r3, #2]
 80084ae:	3303      	adds	r3, #3
 80084b0:	461a      	mov	r2, r3
 80084b2:	f002 fb29 	bl	800ab08 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80084b6:	2001      	movs	r0, #1
 80084b8:	f000 f83c 	bl	8008534 <Cmd_SetStatus>

  return;
 80084bc:	bf00      	nop
}
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	200000c4 	.word	0x200000c4
 80084c8:	2000035c 	.word	0x2000035c
 80084cc:	20000338 	.word	0x20000338

080084d0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80084d8:	4a10      	ldr	r2, [pc, #64]	@ (800851c <TlInit+0x4c>)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80084de:	4810      	ldr	r0, [pc, #64]	@ (8008520 <TlInit+0x50>)
 80084e0:	f000 faf2 	bl	8008ac8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80084e4:	2001      	movs	r0, #1
 80084e6:	f000 f825 	bl	8008534 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80084ea:	4b0e      	ldr	r3, [pc, #56]	@ (8008524 <TlInit+0x54>)
 80084ec:	2201      	movs	r2, #1
 80084ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80084f0:	4b0d      	ldr	r3, [pc, #52]	@ (8008528 <TlInit+0x58>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00c      	beq.n	8008512 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80084fc:	4b0b      	ldr	r3, [pc, #44]	@ (800852c <TlInit+0x5c>)
 80084fe:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8008500:	4b0b      	ldr	r3, [pc, #44]	@ (8008530 <TlInit+0x60>)
 8008502:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8008504:	4b08      	ldr	r3, [pc, #32]	@ (8008528 <TlInit+0x58>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f107 020c 	add.w	r2, r7, #12
 800850c:	4610      	mov	r0, r2
 800850e:	4798      	blx	r3
  }

  return;
 8008510:	bf00      	nop
 8008512:	bf00      	nop
}
 8008514:	3718      	adds	r7, #24
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	200000c4 	.word	0x200000c4
 8008520:	200000b8 	.word	0x200000b8
 8008524:	200000c8 	.word	0x200000c8
 8008528:	20000338 	.word	0x20000338
 800852c:	08008585 	.word	0x08008585
 8008530:	0800859d 	.word	0x0800859d

08008534 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	4603      	mov	r3, r0
 800853c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800853e:	79fb      	ldrb	r3, [r7, #7]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d10b      	bne.n	800855c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8008544:	4b0d      	ldr	r3, [pc, #52]	@ (800857c <Cmd_SetStatus+0x48>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d003      	beq.n	8008554 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800854c:	4b0b      	ldr	r3, [pc, #44]	@ (800857c <Cmd_SetStatus+0x48>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2000      	movs	r0, #0
 8008552:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008554:	4b0a      	ldr	r3, [pc, #40]	@ (8008580 <Cmd_SetStatus+0x4c>)
 8008556:	2200      	movs	r2, #0
 8008558:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800855a:	e00b      	b.n	8008574 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800855c:	4b08      	ldr	r3, [pc, #32]	@ (8008580 <Cmd_SetStatus+0x4c>)
 800855e:	2201      	movs	r2, #1
 8008560:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8008562:	4b06      	ldr	r3, [pc, #24]	@ (800857c <Cmd_SetStatus+0x48>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d004      	beq.n	8008574 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800856a:	4b04      	ldr	r3, [pc, #16]	@ (800857c <Cmd_SetStatus+0x48>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2001      	movs	r0, #1
 8008570:	4798      	blx	r3
  return;
 8008572:	bf00      	nop
 8008574:	bf00      	nop
}
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	20000358 	.word	0x20000358
 8008580:	200000c0 	.word	0x200000c0

08008584 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800858c:	2000      	movs	r0, #0
 800858e:	f7f8 f9ad 	bl	80008ec <shci_cmd_resp_release>

  return;
 8008592:	bf00      	nop
}
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
	...

0800859c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80085a4:	6879      	ldr	r1, [r7, #4]
 80085a6:	4805      	ldr	r0, [pc, #20]	@ (80085bc <TlUserEvtReceived+0x20>)
 80085a8:	f000 fae6 	bl	8008b78 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80085ac:	4803      	ldr	r0, [pc, #12]	@ (80085bc <TlUserEvtReceived+0x20>)
 80085ae:	f7f8 f991 	bl	80008d4 <shci_notify_asynch_evt>

  return;
 80085b2:	bf00      	nop
}
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	200000b8 	.word	0x200000b8

080085c0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a05      	ldr	r2, [pc, #20]	@ (80085e0 <shci_register_io_bus+0x20>)
 80085cc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a04      	ldr	r2, [pc, #16]	@ (80085e4 <shci_register_io_bus+0x24>)
 80085d2:	611a      	str	r2, [r3, #16]

  return;
 80085d4:	bf00      	nop
}
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	0800877d 	.word	0x0800877d
 80085e4:	080087d1 	.word	0x080087d1

080085e8 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80085ec:	f001 fdda 	bl	800a1a4 <HW_IPCC_Enable>

  return;
 80085f0:	bf00      	nop
}
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <TL_Init>:


void TL_Init( void )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80085f8:	4b10      	ldr	r3, [pc, #64]	@ (800863c <TL_Init+0x48>)
 80085fa:	4a11      	ldr	r2, [pc, #68]	@ (8008640 <TL_Init+0x4c>)
 80085fc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80085fe:	4b0f      	ldr	r3, [pc, #60]	@ (800863c <TL_Init+0x48>)
 8008600:	4a10      	ldr	r2, [pc, #64]	@ (8008644 <TL_Init+0x50>)
 8008602:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008604:	4b0d      	ldr	r3, [pc, #52]	@ (800863c <TL_Init+0x48>)
 8008606:	4a10      	ldr	r2, [pc, #64]	@ (8008648 <TL_Init+0x54>)
 8008608:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800860a:	4b0c      	ldr	r3, [pc, #48]	@ (800863c <TL_Init+0x48>)
 800860c:	4a0f      	ldr	r2, [pc, #60]	@ (800864c <TL_Init+0x58>)
 800860e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8008610:	4b0a      	ldr	r3, [pc, #40]	@ (800863c <TL_Init+0x48>)
 8008612:	4a0f      	ldr	r2, [pc, #60]	@ (8008650 <TL_Init+0x5c>)
 8008614:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8008616:	4b09      	ldr	r3, [pc, #36]	@ (800863c <TL_Init+0x48>)
 8008618:	4a0e      	ldr	r2, [pc, #56]	@ (8008654 <TL_Init+0x60>)
 800861a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800861c:	4b07      	ldr	r3, [pc, #28]	@ (800863c <TL_Init+0x48>)
 800861e:	4a0e      	ldr	r2, [pc, #56]	@ (8008658 <TL_Init+0x64>)
 8008620:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8008622:	4b06      	ldr	r3, [pc, #24]	@ (800863c <TL_Init+0x48>)
 8008624:	4a0d      	ldr	r2, [pc, #52]	@ (800865c <TL_Init+0x68>)
 8008626:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008628:	4b04      	ldr	r3, [pc, #16]	@ (800863c <TL_Init+0x48>)
 800862a:	4a0d      	ldr	r2, [pc, #52]	@ (8008660 <TL_Init+0x6c>)
 800862c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800862e:	4b03      	ldr	r3, [pc, #12]	@ (800863c <TL_Init+0x48>)
 8008630:	4a0c      	ldr	r2, [pc, #48]	@ (8008664 <TL_Init+0x70>)
 8008632:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8008634:	f001 fdca 	bl	800a1cc <HW_IPCC_Init>

  return;
 8008638:	bf00      	nop
}
 800863a:	bd80      	pop	{r7, pc}
 800863c:	20030000 	.word	0x20030000
 8008640:	20030028 	.word	0x20030028
 8008644:	20030048 	.word	0x20030048
 8008648:	20030058 	.word	0x20030058
 800864c:	20030068 	.word	0x20030068
 8008650:	20030070 	.word	0x20030070
 8008654:	20030078 	.word	0x20030078
 8008658:	20030080 	.word	0x20030080
 800865c:	2003009c 	.word	0x2003009c
 8008660:	200300a0 	.word	0x200300a0
 8008664:	200300ac 	.word	0x200300ac

08008668 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008674:	4811      	ldr	r0, [pc, #68]	@ (80086bc <TL_BLE_Init+0x54>)
 8008676:	f000 fa27 	bl	8008ac8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800867a:	4b11      	ldr	r3, [pc, #68]	@ (80086c0 <TL_BLE_Init+0x58>)
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	689a      	ldr	r2, [r3, #8]
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	68da      	ldr	r2, [r3, #12]
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	4a0c      	ldr	r2, [pc, #48]	@ (80086c4 <TL_BLE_Init+0x5c>)
 8008694:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	4a08      	ldr	r2, [pc, #32]	@ (80086bc <TL_BLE_Init+0x54>)
 800869a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800869c:	f001 fdac 	bl	800a1f8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a08      	ldr	r2, [pc, #32]	@ (80086c8 <TL_BLE_Init+0x60>)
 80086a6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	4a07      	ldr	r2, [pc, #28]	@ (80086cc <TL_BLE_Init+0x64>)
 80086ae:	6013      	str	r3, [r2, #0]

  return 0;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	200300c8 	.word	0x200300c8
 80086c0:	20030000 	.word	0x20030000
 80086c4:	20030a58 	.word	0x20030a58
 80086c8:	20000368 	.word	0x20000368
 80086cc:	2000036c 	.word	0x2000036c

080086d0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	460b      	mov	r3, r1
 80086da:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80086dc:	4b09      	ldr	r3, [pc, #36]	@ (8008704 <TL_BLE_SendCmd+0x34>)
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2201      	movs	r2, #1
 80086e4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80086e6:	4b07      	ldr	r3, [pc, #28]	@ (8008704 <TL_BLE_SendCmd+0x34>)
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4619      	mov	r1, r3
 80086ee:	2001      	movs	r0, #1
 80086f0:	f000 f96c 	bl	80089cc <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80086f4:	f001 fd9a 	bl	800a22c <HW_IPCC_BLE_SendCmd>

  return 0;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	20030000 	.word	0x20030000

08008708 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800870e:	e01c      	b.n	800874a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008710:	1d3b      	adds	r3, r7, #4
 8008712:	4619      	mov	r1, r3
 8008714:	4812      	ldr	r0, [pc, #72]	@ (8008760 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008716:	f000 fa76 	bl	8008c06 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	7a5b      	ldrb	r3, [r3, #9]
 800871e:	2b0f      	cmp	r3, #15
 8008720:	d003      	beq.n	800872a <HW_IPCC_BLE_RxEvtNot+0x22>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	7a5b      	ldrb	r3, [r3, #9]
 8008726:	2b0e      	cmp	r3, #14
 8008728:	d105      	bne.n	8008736 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4619      	mov	r1, r3
 800872e:	2002      	movs	r0, #2
 8008730:	f000 f94c 	bl	80089cc <OutputDbgTrace>
 8008734:	e004      	b.n	8008740 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4619      	mov	r1, r3
 800873a:	2003      	movs	r0, #3
 800873c:	f000 f946 	bl	80089cc <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008740:	4b08      	ldr	r3, [pc, #32]	@ (8008764 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	4610      	mov	r0, r2
 8008748:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800874a:	4805      	ldr	r0, [pc, #20]	@ (8008760 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800874c:	f000 f9cc 	bl	8008ae8 <LST_is_empty>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d0dc      	beq.n	8008710 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008756:	bf00      	nop
}
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	200300c8 	.word	0x200300c8
 8008764:	20000368 	.word	0x20000368

08008768 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800876c:	4b02      	ldr	r3, [pc, #8]	@ (8008778 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4798      	blx	r3

  return;
 8008772:	bf00      	nop
}
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	2000036c 	.word	0x2000036c

0800877c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008788:	480d      	ldr	r0, [pc, #52]	@ (80087c0 <TL_SYS_Init+0x44>)
 800878a:	f000 f99d 	bl	8008ac8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800878e:	4b0d      	ldr	r3, [pc, #52]	@ (80087c4 <TL_SYS_Init+0x48>)
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	689a      	ldr	r2, [r3, #8]
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	4a08      	ldr	r2, [pc, #32]	@ (80087c0 <TL_SYS_Init+0x44>)
 80087a0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80087a2:	f001 fd75 	bl	800a290 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a07      	ldr	r2, [pc, #28]	@ (80087c8 <TL_SYS_Init+0x4c>)
 80087ac:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	4a06      	ldr	r2, [pc, #24]	@ (80087cc <TL_SYS_Init+0x50>)
 80087b4:	6013      	str	r3, [r2, #0]

  return 0;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	200300d0 	.word	0x200300d0
 80087c4:	20030000 	.word	0x20030000
 80087c8:	20000370 	.word	0x20000370
 80087cc:	20000374 	.word	0x20000374

080087d0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	460b      	mov	r3, r1
 80087da:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80087dc:	4b09      	ldr	r3, [pc, #36]	@ (8008804 <TL_SYS_SendCmd+0x34>)
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2210      	movs	r2, #16
 80087e4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80087e6:	4b07      	ldr	r3, [pc, #28]	@ (8008804 <TL_SYS_SendCmd+0x34>)
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4619      	mov	r1, r3
 80087ee:	2004      	movs	r0, #4
 80087f0:	f000 f8ec 	bl	80089cc <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80087f4:	f001 fd66 	bl	800a2c4 <HW_IPCC_SYS_SendCmd>

  return 0;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	20030000 	.word	0x20030000

08008808 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800880c:	4b07      	ldr	r3, [pc, #28]	@ (800882c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4619      	mov	r1, r3
 8008814:	2005      	movs	r0, #5
 8008816:	f000 f8d9 	bl	80089cc <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800881a:	4b05      	ldr	r3, [pc, #20]	@ (8008830 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a03      	ldr	r2, [pc, #12]	@ (800882c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008820:	68d2      	ldr	r2, [r2, #12]
 8008822:	6812      	ldr	r2, [r2, #0]
 8008824:	4610      	mov	r0, r2
 8008826:	4798      	blx	r3

  return;
 8008828:	bf00      	nop
}
 800882a:	bd80      	pop	{r7, pc}
 800882c:	20030000 	.word	0x20030000
 8008830:	20000370 	.word	0x20000370

08008834 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800883a:	e00e      	b.n	800885a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800883c:	1d3b      	adds	r3, r7, #4
 800883e:	4619      	mov	r1, r3
 8008840:	480b      	ldr	r0, [pc, #44]	@ (8008870 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008842:	f000 f9e0 	bl	8008c06 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4619      	mov	r1, r3
 800884a:	2006      	movs	r0, #6
 800884c:	f000 f8be 	bl	80089cc <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008850:	4b08      	ldr	r3, [pc, #32]	@ (8008874 <HW_IPCC_SYS_EvtNot+0x40>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	4610      	mov	r0, r2
 8008858:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800885a:	4805      	ldr	r0, [pc, #20]	@ (8008870 <HW_IPCC_SYS_EvtNot+0x3c>)
 800885c:	f000 f944 	bl	8008ae8 <LST_is_empty>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d0ea      	beq.n	800883c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008866:	bf00      	nop
}
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	200300d0 	.word	0x200300d0
 8008874:	20000374 	.word	0x20000374

08008878 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008880:	4817      	ldr	r0, [pc, #92]	@ (80088e0 <TL_MM_Init+0x68>)
 8008882:	f000 f921 	bl	8008ac8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008886:	4817      	ldr	r0, [pc, #92]	@ (80088e4 <TL_MM_Init+0x6c>)
 8008888:	f000 f91e 	bl	8008ac8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800888c:	4b16      	ldr	r3, [pc, #88]	@ (80088e8 <TL_MM_Init+0x70>)
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	4a16      	ldr	r2, [pc, #88]	@ (80088ec <TL_MM_Init+0x74>)
 8008892:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008894:	4b15      	ldr	r3, [pc, #84]	@ (80088ec <TL_MM_Init+0x74>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	6892      	ldr	r2, [r2, #8]
 800889c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800889e:	4b13      	ldr	r3, [pc, #76]	@ (80088ec <TL_MM_Init+0x74>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	68d2      	ldr	r2, [r2, #12]
 80088a6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80088a8:	4b10      	ldr	r3, [pc, #64]	@ (80088ec <TL_MM_Init+0x74>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a0c      	ldr	r2, [pc, #48]	@ (80088e0 <TL_MM_Init+0x68>)
 80088ae:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80088b0:	4b0e      	ldr	r3, [pc, #56]	@ (80088ec <TL_MM_Init+0x74>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	6812      	ldr	r2, [r2, #0]
 80088b8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80088ba:	4b0c      	ldr	r3, [pc, #48]	@ (80088ec <TL_MM_Init+0x74>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	6852      	ldr	r2, [r2, #4]
 80088c2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80088c4:	4b09      	ldr	r3, [pc, #36]	@ (80088ec <TL_MM_Init+0x74>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	6912      	ldr	r2, [r2, #16]
 80088cc:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80088ce:	4b07      	ldr	r3, [pc, #28]	@ (80088ec <TL_MM_Init+0x74>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	6952      	ldr	r2, [r2, #20]
 80088d6:	619a      	str	r2, [r3, #24]

  return;
 80088d8:	bf00      	nop
}
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	200300b8 	.word	0x200300b8
 80088e4:	20000360 	.word	0x20000360
 80088e8:	20030000 	.word	0x20030000
 80088ec:	20000378 	.word	0x20000378

080088f0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80088f8:	6879      	ldr	r1, [r7, #4]
 80088fa:	4807      	ldr	r0, [pc, #28]	@ (8008918 <TL_MM_EvtDone+0x28>)
 80088fc:	f000 f93c 	bl	8008b78 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008900:	6879      	ldr	r1, [r7, #4]
 8008902:	2000      	movs	r0, #0
 8008904:	f000 f862 	bl	80089cc <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008908:	4804      	ldr	r0, [pc, #16]	@ (800891c <TL_MM_EvtDone+0x2c>)
 800890a:	f001 fd21 	bl	800a350 <HW_IPCC_MM_SendFreeBuf>

  return;
 800890e:	bf00      	nop
}
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	20000360 	.word	0x20000360
 800891c:	08008921 	.word	0x08008921

08008920 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008926:	e00c      	b.n	8008942 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008928:	1d3b      	adds	r3, r7, #4
 800892a:	4619      	mov	r1, r3
 800892c:	480a      	ldr	r0, [pc, #40]	@ (8008958 <SendFreeBuf+0x38>)
 800892e:	f000 f96a 	bl	8008c06 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8008932:	4b0a      	ldr	r3, [pc, #40]	@ (800895c <SendFreeBuf+0x3c>)
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	4611      	mov	r1, r2
 800893c:	4618      	mov	r0, r3
 800893e:	f000 f91b 	bl	8008b78 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008942:	4805      	ldr	r0, [pc, #20]	@ (8008958 <SendFreeBuf+0x38>)
 8008944:	f000 f8d0 	bl	8008ae8 <LST_is_empty>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d0ec      	beq.n	8008928 <SendFreeBuf+0x8>
  }

  return;
 800894e:	bf00      	nop
}
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	20000360 	.word	0x20000360
 800895c:	20030000 	.word	0x20030000

08008960 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008964:	4805      	ldr	r0, [pc, #20]	@ (800897c <TL_TRACES_Init+0x1c>)
 8008966:	f000 f8af 	bl	8008ac8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800896a:	4b05      	ldr	r3, [pc, #20]	@ (8008980 <TL_TRACES_Init+0x20>)
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	4a03      	ldr	r2, [pc, #12]	@ (800897c <TL_TRACES_Init+0x1c>)
 8008970:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008972:	f001 fd3f 	bl	800a3f4 <HW_IPCC_TRACES_Init>

  return;
 8008976:	bf00      	nop
}
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	200300c0 	.word	0x200300c0
 8008980:	20030000 	.word	0x20030000

08008984 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800898a:	e008      	b.n	800899e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800898c:	1d3b      	adds	r3, r7, #4
 800898e:	4619      	mov	r1, r3
 8008990:	4808      	ldr	r0, [pc, #32]	@ (80089b4 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008992:	f000 f938 	bl	8008c06 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4618      	mov	r0, r3
 800899a:	f000 f80d 	bl	80089b8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800899e:	4805      	ldr	r0, [pc, #20]	@ (80089b4 <HW_IPCC_TRACES_EvtNot+0x30>)
 80089a0:	f000 f8a2 	bl	8008ae8 <LST_is_empty>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d0f0      	beq.n	800898c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80089aa:	bf00      	nop
}
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	200300c0 	.word	0x200300c0

080089b8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b087      	sub	sp, #28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	4603      	mov	r3, r0
 80089d4:	6039      	str	r1, [r7, #0]
 80089d6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 80089d8:	79fb      	ldrb	r3, [r7, #7]
 80089da:	2b06      	cmp	r3, #6
 80089dc:	d845      	bhi.n	8008a6a <OutputDbgTrace+0x9e>
 80089de:	a201      	add	r2, pc, #4	@ (adr r2, 80089e4 <OutputDbgTrace+0x18>)
 80089e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e4:	08008a01 	.word	0x08008a01
 80089e8:	08008a25 	.word	0x08008a25
 80089ec:	08008a2b 	.word	0x08008a2b
 80089f0:	08008a3f 	.word	0x08008a3f
 80089f4:	08008a4b 	.word	0x08008a4b
 80089f8:	08008a51 	.word	0x08008a51
 80089fc:	08008a5f 	.word	0x08008a5f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	7a5b      	ldrb	r3, [r3, #9]
 8008a08:	2bff      	cmp	r3, #255	@ 0xff
 8008a0a:	d005      	beq.n	8008a18 <OutputDbgTrace+0x4c>
 8008a0c:	2bff      	cmp	r3, #255	@ 0xff
 8008a0e:	dc05      	bgt.n	8008a1c <OutputDbgTrace+0x50>
 8008a10:	2b0e      	cmp	r3, #14
 8008a12:	d005      	beq.n	8008a20 <OutputDbgTrace+0x54>
 8008a14:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008a16:	e001      	b.n	8008a1c <OutputDbgTrace+0x50>
          break;
 8008a18:	bf00      	nop
 8008a1a:	e027      	b.n	8008a6c <OutputDbgTrace+0xa0>
          break;
 8008a1c:	bf00      	nop
 8008a1e:	e025      	b.n	8008a6c <OutputDbgTrace+0xa0>
          break;
 8008a20:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008a22:	e023      	b.n	8008a6c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008a28:	e020      	b.n	8008a6c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	7a5b      	ldrb	r3, [r3, #9]
 8008a32:	2b0e      	cmp	r3, #14
 8008a34:	d001      	beq.n	8008a3a <OutputDbgTrace+0x6e>
 8008a36:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008a38:	e000      	b.n	8008a3c <OutputDbgTrace+0x70>
          break;
 8008a3a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008a3c:	e016      	b.n	8008a6c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	7a5b      	ldrb	r3, [r3, #9]
 8008a46:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008a48:	e010      	b.n	8008a6c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008a4e:	e00d      	b.n	8008a6c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	785b      	ldrb	r3, [r3, #1]
 8008a58:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8008a5a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008a5c:	e006      	b.n	8008a6c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	7a5b      	ldrb	r3, [r3, #9]
 8008a66:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008a68:	e000      	b.n	8008a6c <OutputDbgTrace+0xa0>

    default:
      break;
 8008a6a:	bf00      	nop
  }

  return;
 8008a6c:	bf00      	nop
}
 8008a6e:	371c      	adds	r7, #28
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	4603      	mov	r3, r0
 8008a80:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008a82:	4b0f      	ldr	r3, [pc, #60]	@ (8008ac0 <OTP_Read+0x48>)
 8008a84:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008a86:	e002      	b.n	8008a8e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	3b08      	subs	r3, #8
 8008a8c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3307      	adds	r3, #7
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	79fa      	ldrb	r2, [r7, #7]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d003      	beq.n	8008aa2 <OTP_Read+0x2a>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	4a09      	ldr	r2, [pc, #36]	@ (8008ac4 <OTP_Read+0x4c>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d1f2      	bne.n	8008a88 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	3307      	adds	r3, #7
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	79fa      	ldrb	r2, [r7, #7]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d001      	beq.n	8008ab2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3714      	adds	r7, #20
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr
 8008ac0:	1fff73f8 	.word	0x1fff73f8
 8008ac4:	1fff7000 	.word	0x1fff7000

08008ac8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	605a      	str	r2, [r3, #4]
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b087      	sub	sp, #28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008af0:	f3ef 8310 	mrs	r3, PRIMASK
 8008af4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008af6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008af8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008afa:	b672      	cpsid	i
}
 8008afc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d102      	bne.n	8008b0e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	75fb      	strb	r3, [r7, #23]
 8008b0c:	e001      	b.n	8008b12 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	75fb      	strb	r3, [r7, #23]
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	f383 8810 	msr	PRIMASK, r3
}
 8008b1c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8008b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	371c      	adds	r7, #28
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b087      	sub	sp, #28
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b36:	f3ef 8310 	mrs	r3, PRIMASK
 8008b3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008b3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b40:	b672      	cpsid	i
}
 8008b42:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	683a      	ldr	r2, [r7, #0]
 8008b56:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	683a      	ldr	r2, [r7, #0]
 8008b5e:	605a      	str	r2, [r3, #4]
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	f383 8810 	msr	PRIMASK, r3
}
 8008b6a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008b6c:	bf00      	nop
 8008b6e:	371c      	adds	r7, #28
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b087      	sub	sp, #28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b82:	f3ef 8310 	mrs	r3, PRIMASK
 8008b86:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b88:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008b8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b8c:	b672      	cpsid	i
}
 8008b8e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	685a      	ldr	r2, [r3, #4]
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	683a      	ldr	r2, [r7, #0]
 8008ba2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	683a      	ldr	r2, [r7, #0]
 8008baa:	601a      	str	r2, [r3, #0]
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	f383 8810 	msr	PRIMASK, r3
}
 8008bb6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008bb8:	bf00      	nop
 8008bba:	371c      	adds	r7, #28
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b087      	sub	sp, #28
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8008bd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008bd4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008bd6:	b672      	cpsid	i
}
 8008bd8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	6812      	ldr	r2, [r2, #0]
 8008be2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	6852      	ldr	r2, [r2, #4]
 8008bec:	605a      	str	r2, [r3, #4]
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	f383 8810 	msr	PRIMASK, r3
}
 8008bf8:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008bfa:	bf00      	nop
 8008bfc:	371c      	adds	r7, #28
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr

08008c06 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b086      	sub	sp, #24
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c10:	f3ef 8310 	mrs	r3, PRIMASK
 8008c14:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c16:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008c18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c1a:	b672      	cpsid	i
}
 8008c1c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7ff ffca 	bl	8008bc4 <LST_remove_node>
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	f383 8810 	msr	PRIMASK, r3
}
 8008c3a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008c3c:	bf00      	nop
 8008c3e:	3718      	adds	r7, #24
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8008c44:	b480      	push	{r7}
 8008c46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8008c48:	4b03      	ldr	r3, [pc, #12]	@ (8008c58 <LL_FLASH_GetUDN+0x14>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	1fff7580 	.word	0x1fff7580

08008c5c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8008c60:	4b03      	ldr	r3, [pc, #12]	@ (8008c70 <LL_FLASH_GetDeviceID+0x14>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	b2db      	uxtb	r3, r3
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	1fff7584 	.word	0x1fff7584

08008c74 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8008c74:	b480      	push	{r7}
 8008c76:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8008c78:	4b03      	ldr	r3, [pc, #12]	@ (8008c88 <LL_FLASH_GetSTCompanyID+0x14>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	0a1b      	lsrs	r3, r3, #8
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr
 8008c88:	1fff7584 	.word	0x1fff7584

08008c8c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8008c8c:	b5b0      	push	{r4, r5, r7, lr}
 8008c8e:	b090      	sub	sp, #64	@ 0x40
 8008c90:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008c92:	2392      	movs	r3, #146	@ 0x92
 8008c94:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1<<CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 8008c98:	4a29      	ldr	r2, [pc, #164]	@ (8008d40 <APP_BLE_Init+0xb4>)
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	2004      	movs	r0, #4
 8008c9e:	f001 fd0d 	bl	800a6bc <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1<<CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	2004      	movs	r0, #4
 8008ca6:	f001 fd2b 	bl	800a700 <UTIL_SEQ_SetTask>

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8008caa:	4b26      	ldr	r3, [pc, #152]	@ (8008d44 <APP_BLE_Init+0xb8>)
 8008cac:	1d3c      	adds	r4, r7, #4
 8008cae:	461d      	mov	r5, r3
 8008cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008cbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008cc0:	c403      	stmia	r4!, {r0, r1}
 8008cc2:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8008cc4:	f000 f922 	bl	8008f0c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8008cc8:	2101      	movs	r1, #1
 8008cca:	2002      	movs	r0, #2
 8008ccc:	f001 fbca 	bl	800a464 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8008cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8008d48 <APP_BLE_Init+0xbc>)
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	2002      	movs	r0, #2
 8008cd6:	f001 fcf1 	bl	800a6bc <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8008cda:	1d3b      	adds	r3, r7, #4
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7ff f8bd 	bl	8007e5c <SHCI_C2_BLE_Init>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8008ce8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d001      	beq.n	8008cf4 <APP_BLE_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8008cf0:	f7f8 fd9b 	bl	800182a <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8008cf4:	f000 f920 	bl	8008f38 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8008cf8:	f7ff f80a 	bl	8007d10 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008cfc:	4b13      	ldr	r3, [pc, #76]	@ (8008d4c <APP_BLE_Init+0xc0>)
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8008d04:	4b11      	ldr	r3, [pc, #68]	@ (8008d4c <APP_BLE_Init+0xc0>)
 8008d06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008d0a:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8008d0c:	4a10      	ldr	r2, [pc, #64]	@ (8008d50 <APP_BLE_Init+0xc4>)
 8008d0e:	2100      	movs	r1, #0
 8008d10:	2001      	movs	r0, #1
 8008d12:	f001 fcd3 	bl	800a6bc <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8008d16:	2006      	movs	r0, #6
 8008d18:	f7fe fe6e 	bl	80079f8 <aci_hal_set_radio_activity_mask>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8008d22:	f000 fbaf 	bl	8009484 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8008d26:	4b09      	ldr	r3, [pc, #36]	@ (8008d4c <APP_BLE_Init+0xc0>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8008d2c:	4b07      	ldr	r3, [pc, #28]	@ (8008d4c <APP_BLE_Init+0xc0>)
 8008d2e:	2200      	movs	r2, #0
 8008d30:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8008d32:	2001      	movs	r0, #1
 8008d34:	f000 f9b4 	bl	80090a0 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8008d38:	bf00      	nop
}
 8008d3a:	3740      	adds	r7, #64	@ 0x40
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8008d40:	080092b1 	.word	0x080092b1
 8008d44:	0800ab84 	.word	0x0800ab84
 8008d48:	08008079 	.word	0x08008079
 8008d4c:	20000384 	.word	0x20000384
 8008d50:	08009189 	.word	0x08009189

08008d54 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b08c      	sub	sp, #48	@ 0x30
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8008d5c:	2392      	movs	r3, #146	@ 0x92
 8008d5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	3301      	adds	r3, #1
 8008d66:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8008d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	2bff      	cmp	r3, #255	@ 0xff
 8008d6e:	d05c      	beq.n	8008e2a <SVCCTL_App_Notification+0xd6>
 8008d70:	2bff      	cmp	r3, #255	@ 0xff
 8008d72:	f300 80bd 	bgt.w	8008ef0 <SVCCTL_App_Notification+0x19c>
 8008d76:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d78:	d02b      	beq.n	8008dd2 <SVCCTL_App_Notification+0x7e>
 8008d7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d7c:	f300 80b8 	bgt.w	8008ef0 <SVCCTL_App_Notification+0x19c>
 8008d80:	2b05      	cmp	r3, #5
 8008d82:	d002      	beq.n	8008d8a <SVCCTL_App_Notification+0x36>
 8008d84:	2b10      	cmp	r3, #16
 8008d86:	d020      	beq.n	8008dca <SVCCTL_App_Notification+0x76>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8008d88:	e0b2      	b.n	8008ef0 <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8008d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8c:	3302      	adds	r3, #2
 8008d8e:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	4b59      	ldr	r3, [pc, #356]	@ (8008f00 <SVCCTL_App_Notification+0x1ac>)
 8008d9a:	8adb      	ldrh	r3, [r3, #22]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d106      	bne.n	8008dae <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8008da0:	4b57      	ldr	r3, [pc, #348]	@ (8008f00 <SVCCTL_App_Notification+0x1ac>)
 8008da2:	2200      	movs	r2, #0
 8008da4:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008da6:	4b56      	ldr	r3, [pc, #344]	@ (8008f00 <SVCCTL_App_Notification+0x1ac>)
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8008dae:	2001      	movs	r0, #1
 8008db0:	f000 f976 	bl	80090a0 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8008db4:	4b53      	ldr	r3, [pc, #332]	@ (8008f04 <SVCCTL_App_Notification+0x1b0>)
 8008db6:	2201      	movs	r2, #1
 8008db8:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008dba:	4b51      	ldr	r3, [pc, #324]	@ (8008f00 <SVCCTL_App_Notification+0x1ac>)
 8008dbc:	8ada      	ldrh	r2, [r3, #22]
 8008dbe:	4b51      	ldr	r3, [pc, #324]	@ (8008f04 <SVCCTL_App_Notification+0x1b0>)
 8008dc0:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8008dc2:	4850      	ldr	r0, [pc, #320]	@ (8008f04 <SVCCTL_App_Notification+0x1b0>)
 8008dc4:	f000 fb4a 	bl	800945c <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8008dc8:	e095      	b.n	8008ef6 <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 8008dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dcc:	3302      	adds	r3, #2
 8008dce:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 8008dd0:	e091      	b.n	8008ef6 <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8008dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd4:	3302      	adds	r3, #2
 8008dd6:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d001      	beq.n	8008de4 <SVCCTL_App_Notification+0x90>
 8008de0:	2b03      	cmp	r3, #3
          break;
 8008de2:	e021      	b.n	8008e28 <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	3301      	adds	r3, #1
 8008de8:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8008dea:	4b45      	ldr	r3, [pc, #276]	@ (8008f00 <SVCCTL_App_Notification+0x1ac>)
 8008dec:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008df0:	2b04      	cmp	r3, #4
 8008df2:	d104      	bne.n	8008dfe <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8008df4:	4b42      	ldr	r3, [pc, #264]	@ (8008f00 <SVCCTL_App_Notification+0x1ac>)
 8008df6:	2206      	movs	r2, #6
 8008df8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8008dfc:	e003      	b.n	8008e06 <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8008dfe:	4b40      	ldr	r3, [pc, #256]	@ (8008f00 <SVCCTL_App_Notification+0x1ac>)
 8008e00:	2205      	movs	r2, #5
 8008e02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	4b3c      	ldr	r3, [pc, #240]	@ (8008f00 <SVCCTL_App_Notification+0x1ac>)
 8008e10:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8008e12:	4b3c      	ldr	r3, [pc, #240]	@ (8008f04 <SVCCTL_App_Notification+0x1b0>)
 8008e14:	2200      	movs	r2, #0
 8008e16:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008e18:	4b39      	ldr	r3, [pc, #228]	@ (8008f00 <SVCCTL_App_Notification+0x1ac>)
 8008e1a:	8ada      	ldrh	r2, [r3, #22]
 8008e1c:	4b39      	ldr	r3, [pc, #228]	@ (8008f04 <SVCCTL_App_Notification+0x1b0>)
 8008e1e:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8008e20:	4838      	ldr	r0, [pc, #224]	@ (8008f04 <SVCCTL_App_Notification+0x1b0>)
 8008e22:	f000 fb1b 	bl	800945c <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8008e26:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8008e28:	e065      	b.n	8008ef6 <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8008e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e2c:	3302      	adds	r3, #2
 8008e2e:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 8008e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d048      	beq.n	8008ed0 <SVCCTL_App_Notification+0x17c>
 8008e3e:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8008e42:	4293      	cmp	r3, r2
 8008e44:	dc56      	bgt.n	8008ef4 <SVCCTL_App_Notification+0x1a0>
 8008e46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e4a:	d04b      	beq.n	8008ee4 <SVCCTL_App_Notification+0x190>
 8008e4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e50:	dc50      	bgt.n	8008ef4 <SVCCTL_App_Notification+0x1a0>
 8008e52:	f240 420a 	movw	r2, #1034	@ 0x40a
 8008e56:	4293      	cmp	r3, r2
 8008e58:	dc4c      	bgt.n	8008ef4 <SVCCTL_App_Notification+0x1a0>
 8008e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e5e:	dc04      	bgt.n	8008e6a <SVCCTL_App_Notification+0x116>
 8008e60:	2b04      	cmp	r3, #4
 8008e62:	d041      	beq.n	8008ee8 <SVCCTL_App_Notification+0x194>
 8008e64:	2b06      	cmp	r3, #6
 8008e66:	d039      	beq.n	8008edc <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008e68:	e044      	b.n	8008ef4 <SVCCTL_App_Notification+0x1a0>
      switch (p_blecore_evt->ecode)
 8008e6a:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8008e6e:	2b09      	cmp	r3, #9
 8008e70:	d840      	bhi.n	8008ef4 <SVCCTL_App_Notification+0x1a0>
 8008e72:	a201      	add	r2, pc, #4	@ (adr r2, 8008e78 <SVCCTL_App_Notification+0x124>)
 8008e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e78:	08008ec9 	.word	0x08008ec9
 8008e7c:	08008ea1 	.word	0x08008ea1
 8008e80:	08008ef5 	.word	0x08008ef5
 8008e84:	08008ef5 	.word	0x08008ef5
 8008e88:	08008ef5 	.word	0x08008ef5
 8008e8c:	08008ef5 	.word	0x08008ef5
 8008e90:	08008eed 	.word	0x08008eed
 8008e94:	08008ef5 	.word	0x08008ef5
 8008e98:	08008eb5 	.word	0x08008eb5
 8008e9c:	08008eed 	.word	0x08008eed
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8008ea0:	4b17      	ldr	r3, [pc, #92]	@ (8008f00 <SVCCTL_App_Notification+0x1ac>)
 8008ea2:	8adb      	ldrh	r3, [r3, #22]
 8008ea4:	4918      	ldr	r1, [pc, #96]	@ (8008f08 <SVCCTL_App_Notification+0x1b4>)
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fd ffa8 	bl	8006dfc <aci_gap_pass_key_resp>
 8008eac:	4603      	mov	r3, r0
 8008eae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8008eb2:	e01c      	b.n	8008eee <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8008eb4:	4b12      	ldr	r3, [pc, #72]	@ (8008f00 <SVCCTL_App_Notification+0x1ac>)
 8008eb6:	8adb      	ldrh	r3, [r3, #22]
 8008eb8:	2101      	movs	r1, #1
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fe f948 	bl	8007150 <aci_gap_numeric_comparison_value_confirm_yesno>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8008ec6:	e012      	b.n	8008eee <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eca:	3302      	adds	r3, #2
 8008ecc:	623b      	str	r3, [r7, #32]
          break;
 8008ece:	e00e      	b.n	8008eee <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8008ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8008f00 <SVCCTL_App_Notification+0x1ac>)
 8008ed2:	8adb      	ldrh	r3, [r3, #22]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fe fc4e 	bl	8007776 <aci_gatt_confirm_indication>
        break;
 8008eda:	e008      	b.n	8008eee <SVCCTL_App_Notification+0x19a>
	      p_warning_event = (aci_hal_warning_event_rp0 *)p_blecore_evt->data;
 8008edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ede:	3302      	adds	r3, #2
 8008ee0:	61fb      	str	r3, [r7, #28]
          break;
 8008ee2:	e004      	b.n	8008eee <SVCCTL_App_Notification+0x19a>
          break;
 8008ee4:	bf00      	nop
 8008ee6:	e005      	b.n	8008ef4 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8008ee8:	bf00      	nop
 8008eea:	e003      	b.n	8008ef4 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8008eec:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008eee:	e001      	b.n	8008ef4 <SVCCTL_App_Notification+0x1a0>
      break;
 8008ef0:	bf00      	nop
 8008ef2:	e000      	b.n	8008ef6 <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008ef4:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8008ef6:	2301      	movs	r3, #1
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3730      	adds	r7, #48	@ 0x30
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	20000384 	.word	0x20000384
 8008f04:	20000408 	.word	0x20000408
 8008f08:	0001b207 	.word	0x0001b207

08008f0c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8008f12:	4b06      	ldr	r3, [pc, #24]	@ (8008f2c <Ble_Tl_Init+0x20>)
 8008f14:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8008f16:	4b06      	ldr	r3, [pc, #24]	@ (8008f30 <Ble_Tl_Init+0x24>)
 8008f18:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8008f1a:	463b      	mov	r3, r7
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	4805      	ldr	r0, [pc, #20]	@ (8008f34 <Ble_Tl_Init+0x28>)
 8008f20:	f7ff f88e 	bl	8008040 <hci_init>

  return;
 8008f24:	bf00      	nop
}
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	200300d8 	.word	0x200300d8
 8008f30:	08009239 	.word	0x08009239
 8008f34:	08009201 	.word	0x08009201

08008f38 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8008f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f3a:	b08d      	sub	sp, #52	@ 0x34
 8008f3c:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8008f3e:	2300      	movs	r3, #0
 8008f40:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008f42:	2392      	movs	r3, #146	@ 0x92
 8008f44:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8008f46:	f7fe fdab 	bl	8007aa0 <hci_reset>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8008f4e:	f000 f8d7 	bl	8009100 <BleGetBdAddress>
 8008f52:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, CONFIG_DATA_PUBLIC_ADDRESS_LEN, (uint8_t*) p_bd_addr);
 8008f54:	693a      	ldr	r2, [r7, #16]
 8008f56:	2106      	movs	r1, #6
 8008f58:	2000      	movs	r0, #0
 8008f5a:	f7fe fc61 	bl	8007820 <aci_hal_write_config_data>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8008f62:	4a4a      	ldr	r2, [pc, #296]	@ (800908c <Ble_Hci_Gap_Gatt_Init+0x154>)
 8008f64:	2110      	movs	r1, #16
 8008f66:	2018      	movs	r0, #24
 8008f68:	f7fe fc5a 	bl	8007820 <aci_hal_write_config_data>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8008f70:	4a47      	ldr	r2, [pc, #284]	@ (8009090 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8008f72:	2110      	movs	r1, #16
 8008f74:	2008      	movs	r0, #8
 8008f76:	f7fe fc53 	bl	8007820 <aci_hal_write_config_data>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8008f7e:	2118      	movs	r1, #24
 8008f80:	2001      	movs	r0, #1
 8008f82:	f7fe fcd2 	bl	800792a <aci_hal_set_tx_power_level>
 8008f86:	4603      	mov	r3, r0
 8008f88:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8008f8a:	f7fe f948 	bl	800721e <aci_gatt_init>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8008f92:	2300      	movs	r3, #0
 8008f94:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8008f96:	7bfb      	ldrb	r3, [r7, #15]
 8008f98:	f043 0301 	orr.w	r3, r3, #1
 8008f9c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8008f9e:	7bfb      	ldrb	r3, [r7, #15]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d01f      	beq.n	8008fe4 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8008fa4:	4b3b      	ldr	r3, [pc, #236]	@ (8009094 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8008fa6:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8008fa8:	1dba      	adds	r2, r7, #6
 8008faa:	7bf8      	ldrb	r0, [r7, #15]
 8008fac:	1cbb      	adds	r3, r7, #2
 8008fae:	9301      	str	r3, [sp, #4]
 8008fb0:	1d3b      	adds	r3, r7, #4
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	2208      	movs	r2, #8
 8008fb8:	2100      	movs	r1, #0
 8008fba:	f7fd ff86 	bl	8006eca <aci_gap_init>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8008fc2:	88fc      	ldrh	r4, [r7, #6]
 8008fc4:	88bd      	ldrh	r5, [r7, #4]
 8008fc6:	68b8      	ldr	r0, [r7, #8]
 8008fc8:	f7f7 f8d8 	bl	800017c <strlen>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	b2da      	uxtb	r2, r3
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	4629      	mov	r1, r5
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f7fe fb22 	bl	8007624 <aci_gatt_update_char_value>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8008fe4:	88f8      	ldrh	r0, [r7, #6]
 8008fe6:	8879      	ldrh	r1, [r7, #2]
 8008fe8:	463b      	mov	r3, r7
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	2302      	movs	r3, #2
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f7fe fb18 	bl	8007624 <aci_gatt_update_char_value>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8008ff8:	2202      	movs	r2, #2
 8008ffa:	2102      	movs	r1, #2
 8008ffc:	2000      	movs	r0, #0
 8008ffe:	f7fe fd73 	bl	8007ae8 <hci_le_set_default_phy>
 8009002:	4603      	mov	r3, r0
 8009004:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8009006:	4b24      	ldr	r3, [pc, #144]	@ (8009098 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009008:	2201      	movs	r2, #1
 800900a:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800900c:	4b22      	ldr	r3, [pc, #136]	@ (8009098 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	4618      	mov	r0, r3
 8009012:	f7fd fddb 	bl	8006bcc <aci_gap_set_io_capability>
 8009016:	4603      	mov	r3, r0
 8009018:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800901a:	4b1f      	ldr	r3, [pc, #124]	@ (8009098 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800901c:	2201      	movs	r2, #1
 800901e:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8009020:	4b1d      	ldr	r3, [pc, #116]	@ (8009098 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009022:	2208      	movs	r2, #8
 8009024:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8009026:	4b1c      	ldr	r3, [pc, #112]	@ (8009098 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009028:	2210      	movs	r2, #16
 800902a:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800902c:	4b1a      	ldr	r3, [pc, #104]	@ (8009098 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800902e:	2200      	movs	r2, #0
 8009030:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8009032:	4b19      	ldr	r3, [pc, #100]	@ (8009098 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009034:	4a19      	ldr	r2, [pc, #100]	@ (800909c <Ble_Hci_Gap_Gatt_Init+0x164>)
 8009036:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8009038:	4b17      	ldr	r3, [pc, #92]	@ (8009098 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800903a:	2201      	movs	r2, #1
 800903c:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800903e:	4b16      	ldr	r3, [pc, #88]	@ (8009098 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009040:	789c      	ldrb	r4, [r3, #2]
 8009042:	4b15      	ldr	r3, [pc, #84]	@ (8009098 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009044:	785d      	ldrb	r5, [r3, #1]
 8009046:	4b14      	ldr	r3, [pc, #80]	@ (8009098 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009048:	791b      	ldrb	r3, [r3, #4]
 800904a:	4a13      	ldr	r2, [pc, #76]	@ (8009098 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800904c:	7952      	ldrb	r2, [r2, #5]
 800904e:	4912      	ldr	r1, [pc, #72]	@ (8009098 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009050:	78c9      	ldrb	r1, [r1, #3]
 8009052:	4811      	ldr	r0, [pc, #68]	@ (8009098 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009054:	6880      	ldr	r0, [r0, #8]
 8009056:	2600      	movs	r6, #0
 8009058:	9604      	str	r6, [sp, #16]
 800905a:	9003      	str	r0, [sp, #12]
 800905c:	9102      	str	r1, [sp, #8]
 800905e:	9201      	str	r2, [sp, #4]
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	2300      	movs	r3, #0
 8009064:	2201      	movs	r2, #1
 8009066:	4629      	mov	r1, r5
 8009068:	4620      	mov	r0, r4
 800906a:	f7fd fe03 	bl	8006c74 <aci_gap_set_authentication_requirement>
 800906e:	4603      	mov	r3, r0
 8009070:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8009072:	4b09      	ldr	r3, [pc, #36]	@ (8009098 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009074:	789b      	ldrb	r3, [r3, #2]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d003      	beq.n	8009082 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800907a:	f7fe f845 	bl	8007108 <aci_gap_configure_filter_accept_list>
 800907e:	4603      	mov	r3, r0
 8009080:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8009082:	bf00      	nop
 8009084:	371c      	adds	r7, #28
 8009086:	46bd      	mov	sp, r7
 8009088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800908a:	bf00      	nop
 800908c:	0800adcc 	.word	0x0800adcc
 8009090:	0800addc 	.word	0x0800addc
 8009094:	0800abc0 	.word	0x0800abc0
 8009098:	20000384 	.word	0x20000384
 800909c:	0001b207 	.word	0x0001b207

080090a0 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b08c      	sub	sp, #48	@ 0x30
 80090a4:	af08      	add	r7, sp, #32
 80090a6:	4603      	mov	r3, r0
 80090a8:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80090aa:	2392      	movs	r3, #146	@ 0x92
 80090ac:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80090ae:	4a12      	ldr	r2, [pc, #72]	@ (80090f8 <Adv_Request+0x58>)
 80090b0:	79fb      	ldrb	r3, [r7, #7]
 80090b2:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 80090b6:	2300      	movs	r3, #0
 80090b8:	9306      	str	r3, [sp, #24]
 80090ba:	2300      	movs	r3, #0
 80090bc:	9305      	str	r3, [sp, #20]
 80090be:	2300      	movs	r3, #0
 80090c0:	9304      	str	r3, [sp, #16]
 80090c2:	2300      	movs	r3, #0
 80090c4:	9303      	str	r3, [sp, #12]
 80090c6:	2300      	movs	r3, #0
 80090c8:	9302      	str	r3, [sp, #8]
 80090ca:	2300      	movs	r3, #0
 80090cc:	9301      	str	r3, [sp, #4]
 80090ce:	2300      	movs	r3, #0
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	2300      	movs	r3, #0
 80090d4:	22a0      	movs	r2, #160	@ 0xa0
 80090d6:	2180      	movs	r1, #128	@ 0x80
 80090d8:	2000      	movs	r0, #0
 80090da:	f7fd fc7d 	bl	80069d8 <aci_gap_set_discoverable>
 80090de:	4603      	mov	r3, r0
 80090e0:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80090e2:	4906      	ldr	r1, [pc, #24]	@ (80090fc <Adv_Request+0x5c>)
 80090e4:	200e      	movs	r0, #14
 80090e6:	f7fd ff9d 	bl	8007024 <aci_gap_update_adv_data>
 80090ea:	4603      	mov	r3, r0
 80090ec:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80090ee:	bf00      	nop
}
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	20000384 	.word	0x20000384
 80090fc:	20000014 	.word	0x20000014

08009100 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b086      	sub	sp, #24
 8009104:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8009106:	f7ff fd9d 	bl	8008c44 <LL_FLASH_GetUDN>
 800910a:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009112:	d023      	beq.n	800915c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8009114:	f7ff fdae 	bl	8008c74 <LL_FLASH_GetSTCompanyID>
 8009118:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800911a:	f7ff fd9f 	bl	8008c5c <LL_FLASH_GetDeviceID>
 800911e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	b2da      	uxtb	r2, r3
 8009124:	4b16      	ldr	r3, [pc, #88]	@ (8009180 <BleGetBdAddress+0x80>)
 8009126:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	0a1b      	lsrs	r3, r3, #8
 800912c:	b2da      	uxtb	r2, r3
 800912e:	4b14      	ldr	r3, [pc, #80]	@ (8009180 <BleGetBdAddress+0x80>)
 8009130:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	b2da      	uxtb	r2, r3
 8009136:	4b12      	ldr	r3, [pc, #72]	@ (8009180 <BleGetBdAddress+0x80>)
 8009138:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	b2da      	uxtb	r2, r3
 800913e:	4b10      	ldr	r3, [pc, #64]	@ (8009180 <BleGetBdAddress+0x80>)
 8009140:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	0a1b      	lsrs	r3, r3, #8
 8009146:	b2da      	uxtb	r2, r3
 8009148:	4b0d      	ldr	r3, [pc, #52]	@ (8009180 <BleGetBdAddress+0x80>)
 800914a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	0c1b      	lsrs	r3, r3, #16
 8009150:	b2da      	uxtb	r2, r3
 8009152:	4b0b      	ldr	r3, [pc, #44]	@ (8009180 <BleGetBdAddress+0x80>)
 8009154:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8009156:	4b0a      	ldr	r3, [pc, #40]	@ (8009180 <BleGetBdAddress+0x80>)
 8009158:	617b      	str	r3, [r7, #20]
 800915a:	e00b      	b.n	8009174 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800915c:	2000      	movs	r0, #0
 800915e:	f7ff fc8b 	bl	8008a78 <OTP_Read>
 8009162:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d002      	beq.n	8009170 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	617b      	str	r3, [r7, #20]
 800916e:	e001      	b.n	8009174 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8009170:	4b04      	ldr	r3, [pc, #16]	@ (8009184 <BleGetBdAddress+0x84>)
 8009172:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8009174:	697b      	ldr	r3, [r7, #20]
}
 8009176:	4618      	mov	r0, r3
 8009178:	3718      	adds	r7, #24
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	2000037c 	.word	0x2000037c
 8009184:	0800adc4 	.word	0x0800adc4

08009188 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800918e:	4b0a      	ldr	r3, [pc, #40]	@ (80091b8 <Adv_Cancel+0x30>)
 8009190:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009194:	2b05      	cmp	r3, #5
 8009196:	d00a      	beq.n	80091ae <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009198:	2392      	movs	r3, #146	@ 0x92
 800919a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800919c:	f7fd fbf8 	bl	8006990 <aci_gap_set_non_discoverable>
 80091a0:	4603      	mov	r3, r0
 80091a2:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80091a4:	4b04      	ldr	r3, [pc, #16]	@ (80091b8 <Adv_Cancel+0x30>)
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 80091ac:	bf00      	nop
 80091ae:	bf00      	nop
}
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	20000384 	.word	0x20000384

080091bc <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80091c4:	2100      	movs	r1, #0
 80091c6:	2002      	movs	r0, #2
 80091c8:	f001 fa9a 	bl	800a700 <UTIL_SEQ_SetTask>

  return;
 80091cc:	bf00      	nop
}
 80091ce:	3708      	adds	r7, #8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80091dc:	2001      	movs	r0, #1
 80091de:	f001 fafb 	bl	800a7d8 <UTIL_SEQ_SetEvt>

  return;
 80091e2:	bf00      	nop
}
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b082      	sub	sp, #8
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80091f2:	2001      	movs	r0, #1
 80091f4:	f001 fb10 	bl	800a818 <UTIL_SEQ_WaitEvt>

  return;
 80091f8:	bf00      	nop
}
 80091fa:	3708      	adds	r7, #8
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	3308      	adds	r3, #8
 8009212:	4618      	mov	r0, r3
 8009214:	f7fe fdce 	bl	8007db4 <SVCCTL_UserEvtRx>
 8009218:	4603      	mov	r3, r0
 800921a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800921c:	7afb      	ldrb	r3, [r7, #11]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d003      	beq.n	800922a <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2201      	movs	r2, #1
 8009226:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8009228:	e003      	b.n	8009232 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2200      	movs	r2, #0
 800922e:	701a      	strb	r2, [r3, #0]
  return;
 8009230:	bf00      	nop
}
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	4603      	mov	r3, r0
 8009240:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8009242:	79fb      	ldrb	r3, [r7, #7]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d002      	beq.n	800924e <BLE_StatusNot+0x16>
 8009248:	2b01      	cmp	r3, #1
 800924a:	d006      	beq.n	800925a <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800924c:	e00b      	b.n	8009266 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800924e:	2307      	movs	r3, #7
 8009250:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f001 fa80 	bl	800a758 <UTIL_SEQ_PauseTask>
      break;
 8009258:	e005      	b.n	8009266 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800925a:	2307      	movs	r3, #7
 800925c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800925e:	68f8      	ldr	r0, [r7, #12]
 8009260:	f001 fa9a 	bl	800a798 <UTIL_SEQ_ResumeTask>
      break;
 8009264:	bf00      	nop
  }

  return;
 8009266:	bf00      	nop
}
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <ble_calculate_chksum>:

#include "ble_custom_utils.h"



uint8_t ble_calculate_chksum(uint8_t *pck, uint8_t length){
 800926e:	b480      	push	{r7}
 8009270:	b085      	sub	sp, #20
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
 8009276:	460b      	mov	r3, r1
 8009278:	70fb      	strb	r3, [r7, #3]
	uint8_t chksum=0x00;
 800927a:	2300      	movs	r3, #0
 800927c:	73fb      	strb	r3, [r7, #15]
	uint16_t i;


	for(i=0; i<length; i++){
 800927e:	2300      	movs	r3, #0
 8009280:	81bb      	strh	r3, [r7, #12]
 8009282:	e009      	b.n	8009298 <ble_calculate_chksum+0x2a>
		chksum= (*(pck+i)) +chksum;
 8009284:	89bb      	ldrh	r3, [r7, #12]
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	4413      	add	r3, r2
 800928a:	781a      	ldrb	r2, [r3, #0]
 800928c:	7bfb      	ldrb	r3, [r7, #15]
 800928e:	4413      	add	r3, r2
 8009290:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<length; i++){
 8009292:	89bb      	ldrh	r3, [r7, #12]
 8009294:	3301      	adds	r3, #1
 8009296:	81bb      	strh	r3, [r7, #12]
 8009298:	78fb      	ldrb	r3, [r7, #3]
 800929a:	b29b      	uxth	r3, r3
 800929c:	89ba      	ldrh	r2, [r7, #12]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d3f0      	bcc.n	8009284 <ble_calculate_chksum+0x16>
	}

	return chksum;
 80092a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3714      	adds	r7, #20
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <myTask>:
/* HealthMonitoringS */
static void Custom_Charnotify_Update_Char(void);
static void Custom_Charnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
void myTask(void){
 80092b0:	b580      	push	{r7, lr}
 80092b2:	af00      	add	r7, sp, #0
	//This task Controls notifycation Char. Check Pending Notification and execute it
	if(Notify_Interface.Status==Notify_Pending){
 80092b4:	4b07      	ldr	r3, [pc, #28]	@ (80092d4 <myTask+0x24>)
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d104      	bne.n	80092c6 <myTask+0x16>
		Notify_Interface.Status=Notify_None;
 80092bc:	4b05      	ldr	r3, [pc, #20]	@ (80092d4 <myTask+0x24>)
 80092be:	2200      	movs	r2, #0
 80092c0:	701a      	strb	r2, [r3, #0]
//		UpdateCharData[0]+=0x01;


		Custom_Charnotify_Update_Char(); // This function triggers the Notificaation of the the content of NotifyCharData array
 80092c2:	f000 f8f7 	bl	80094b4 <Custom_Charnotify_Update_Char>

	}


	//Re-Schedule the task
	UTIL_SEQ_SetTask(1<<CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 80092c6:	2100      	movs	r1, #0
 80092c8:	2004      	movs	r0, #4
 80092ca:	f001 fa19 	bl	800a700 <UTIL_SEQ_SetTask>
}
 80092ce:	bf00      	nop
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	2000060c 	.word	0x2000060c

080092d8 <ble_notify_interface_get>:


Custom_BLE_Notify_interface_t* ble_notify_interface_get(){
 80092d8:	b480      	push	{r7}
 80092da:	af00      	add	r7, sp, #0
	return &Notify_Interface;
 80092dc:	4b02      	ldr	r3, [pc, #8]	@ (80092e8 <ble_notify_interface_get+0x10>)
}
 80092de:	4618      	mov	r0, r3
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	2000060c 	.word	0x2000060c

080092ec <Custom_STM_App_Notification>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b08a      	sub	sp, #40	@ 0x28
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	2b03      	cmp	r3, #3
 80092fa:	f200 80a7 	bhi.w	800944c <Custom_STM_App_Notification+0x160>
 80092fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009304 <Custom_STM_App_Notification+0x18>)
 8009300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009304:	08009315 	.word	0x08009315
 8009308:	0800944d 	.word	0x0800944d
 800930c:	0800944d 	.word	0x0800944d
 8009310:	0800944d 	.word	0x0800944d

    /* HealthMonitoringS */
    case CUSTOM_STM_CHARWRITE_WRITE_EVT:
      /* USER CODE BEGIN CUSTOM_STM_CHARWRITE_WRITE_EVT */

    	uint8_t * p_Payload = pNotification->DataTransfered.pPayload ;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	627b      	str	r3, [r7, #36]	@ 0x24
    	uint8_t req_length = pNotification->DataTransfered.Length ;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	7a1b      	ldrb	r3, [r3, #8]
 800931e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    	// Sanity check for minimal packet size (CMD + LEN + CRC)
//		if (req_length < 7)
//			break;
		uint8_t cmd = p_Payload[0];
 8009322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		uint8_t len = p_Payload[1];
 800932a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800932c:	785b      	ldrb	r3, [r3, #1]
 800932e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		uint8_t *params = &p_Payload[2];
 8009332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009334:	3302      	adds	r3, #2
 8009336:	61fb      	str	r3, [r7, #28]
		uint8_t chksum_rcv = p_Payload[req_length - 1];
 8009338:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800933c:	3b01      	subs	r3, #1
 800933e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009340:	4413      	add	r3, r2
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	76fb      	strb	r3, [r7, #27]
		uint8_t chksum_calc = ble_calculate_chksum(p_Payload, req_length - 1);
 8009346:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800934a:	3b01      	subs	r3, #1
 800934c:	b2db      	uxtb	r3, r3
 800934e:	4619      	mov	r1, r3
 8009350:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009352:	f7ff ff8c 	bl	800926e <ble_calculate_chksum>
 8009356:	4603      	mov	r3, r0
 8009358:	76bb      	strb	r3, [r7, #26]
//		}


		// Filter the CMds

		    if (cmd == 0x01) { // REQ_HR_SPO2_DATA
 800935a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800935e:	2b01      	cmp	r3, #1
 8009360:	d102      	bne.n	8009368 <Custom_STM_App_Notification+0x7c>
		    	data_handler_req_hr_spo2();
 8009362:	f000 fce5 	bl	8009d30 <data_handler_req_hr_spo2>


//    	Notify_Interface.Status=Notify_Pending; // Schedule a new Notification

      /* USER CODE END CUSTOM_STM_CHARWRITE_WRITE_EVT */
      break;
 8009366:	e073      	b.n	8009450 <Custom_STM_App_Notification+0x164>
		    } else if (cmd == 0x02) { // REQ_TEMP_DATA
 8009368:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800936c:	2b02      	cmp	r3, #2
 800936e:	d107      	bne.n	8009380 <Custom_STM_App_Notification+0x94>
		        uint8_t temp_type = params[0];  // 0x01 = Body, 0x02 = Env, 0x03 = Both
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	72fb      	strb	r3, [r7, #11]
		        data_handler_req_temp(temp_type);
 8009376:	7afb      	ldrb	r3, [r7, #11]
 8009378:	4618      	mov	r0, r3
 800937a:	f000 fcdf 	bl	8009d3c <data_handler_req_temp>
      break;
 800937e:	e067      	b.n	8009450 <Custom_STM_App_Notification+0x164>
		    } else if (cmd == 0x03) { // REQ_PRESSURE_DATA
 8009380:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009384:	2b03      	cmp	r3, #3
 8009386:	d102      	bne.n	800938e <Custom_STM_App_Notification+0xa2>
		    	data_handler_req_pressure();
 8009388:	f000 fce5 	bl	8009d56 <data_handler_req_pressure>
      break;
 800938c:	e060      	b.n	8009450 <Custom_STM_App_Notification+0x164>
		    } else if (cmd == 0x04) { // REQ_ALL_DATA
 800938e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009392:	2b04      	cmp	r3, #4
 8009394:	d102      	bne.n	800939c <Custom_STM_App_Notification+0xb0>
		    	data_handler_req_all_data();
 8009396:	f000 fce4 	bl	8009d62 <data_handler_req_all_data>
      break;
 800939a:	e059      	b.n	8009450 <Custom_STM_App_Notification+0x164>
		    } else if (cmd == 0x10) { // REQ_HISTORICAL_DATA
 800939c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80093a0:	2b10      	cmp	r3, #16
 80093a2:	d115      	bne.n	80093d0 <Custom_STM_App_Notification+0xe4>
		        uint32_t start_time = (params[0] << 24) | (params[1] << 16) | (params[2] << 8) | params[3];
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	061a      	lsls	r2, r3, #24
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	3301      	adds	r3, #1
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	041b      	lsls	r3, r3, #16
 80093b2:	431a      	orrs	r2, r3
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	3302      	adds	r3, #2
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	021b      	lsls	r3, r3, #8
 80093bc:	4313      	orrs	r3, r2
 80093be:	69fa      	ldr	r2, [r7, #28]
 80093c0:	3203      	adds	r2, #3
 80093c2:	7812      	ldrb	r2, [r2, #0]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	60fb      	str	r3, [r7, #12]
		        data_handler_req_historical_data(start_time);
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f000 fcd0 	bl	8009d6e <data_handler_req_historical_data>
      break;
 80093ce:	e03f      	b.n	8009450 <Custom_STM_App_Notification+0x164>
		    } else if (cmd == 0x20) { // SET_UNIX_TIME
 80093d0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80093d4:	2b20      	cmp	r3, #32
 80093d6:	d115      	bne.n	8009404 <Custom_STM_App_Notification+0x118>
		        uint32_t unix_time = (params[0] << 24) | (params[1] << 16) | (params[2] << 8) | params[3];
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	061a      	lsls	r2, r3, #24
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	3301      	adds	r3, #1
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	041b      	lsls	r3, r3, #16
 80093e6:	431a      	orrs	r2, r3
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	3302      	adds	r3, #2
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	021b      	lsls	r3, r3, #8
 80093f0:	4313      	orrs	r3, r2
 80093f2:	69fa      	ldr	r2, [r7, #28]
 80093f4:	3203      	adds	r2, #3
 80093f6:	7812      	ldrb	r2, [r2, #0]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	613b      	str	r3, [r7, #16]
		        data_handler_req_set_unix_time(unix_time);
 80093fc:	6938      	ldr	r0, [r7, #16]
 80093fe:	f000 fcd6 	bl	8009dae <data_handler_req_set_unix_time>
      break;
 8009402:	e025      	b.n	8009450 <Custom_STM_App_Notification+0x164>
		    } else if (cmd == 0x30) { // SET_SENSOR_CONFIG
 8009404:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009408:	2b30      	cmp	r3, #48	@ 0x30
 800940a:	d10c      	bne.n	8009426 <Custom_STM_App_Notification+0x13a>
		        uint8_t sensor_type = params[0]; // Igual al tipo de dato (HR, SpO2, Temp, etc.)
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	763b      	strb	r3, [r7, #24]
		        uint8_t config_val  = params[1]; // Valor de configuración (más detalles en el futuro)
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	785b      	ldrb	r3, [r3, #1]
 8009416:	75fb      	strb	r3, [r7, #23]
		        data_handler_req_set_sensor_config(sensor_type, config_val);
 8009418:	7dfa      	ldrb	r2, [r7, #23]
 800941a:	7e3b      	ldrb	r3, [r7, #24]
 800941c:	4611      	mov	r1, r2
 800941e:	4618      	mov	r0, r3
 8009420:	f000 fce5 	bl	8009dee <data_handler_req_set_sensor_config>
      break;
 8009424:	e014      	b.n	8009450 <Custom_STM_App_Notification+0x164>
		    } else if (cmd == 0x40) { // START_STREAM
 8009426:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800942a:	2b40      	cmp	r3, #64	@ 0x40
 800942c:	d107      	bne.n	800943e <Custom_STM_App_Notification+0x152>
		        uint8_t stream_mask = params[0];
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	767b      	strb	r3, [r7, #25]
		        data_handler_req_start_stream(stream_mask);
 8009434:	7e7b      	ldrb	r3, [r7, #25]
 8009436:	4618      	mov	r0, r3
 8009438:	f000 fcf6 	bl	8009e28 <data_handler_req_start_stream>
      break;
 800943c:	e008      	b.n	8009450 <Custom_STM_App_Notification+0x164>
		    } else if (cmd == 0x41) { // STOP_STREAM
 800943e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009442:	2b41      	cmp	r3, #65	@ 0x41
 8009444:	d104      	bne.n	8009450 <Custom_STM_App_Notification+0x164>
		    	data_handler_req_stop_stream();
 8009446:	f000 fd09 	bl	8009e5c <data_handler_req_stop_stream>
      break;
 800944a:	e001      	b.n	8009450 <Custom_STM_App_Notification+0x164>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800944c:	bf00      	nop
 800944e:	e000      	b.n	8009452 <Custom_STM_App_Notification+0x166>
      break;
 8009450:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8009452:	bf00      	nop
}
 8009454:	3728      	adds	r7, #40	@ 0x28
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop

0800945c <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d002      	beq.n	8009472 <Custom_APP_Notification+0x16>
 800946c:	2b01      	cmp	r3, #1
 800946e:	d002      	beq.n	8009476 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8009470:	e002      	b.n	8009478 <Custom_APP_Notification+0x1c>
      break;
 8009472:	bf00      	nop
 8009474:	e000      	b.n	8009478 <Custom_APP_Notification+0x1c>
      break;
 8009476:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8009478:	bf00      	nop
}
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8009484:	b480      	push	{r7}
 8009486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	Notify_Interface.Status=Notify_None;
 8009488:	4b08      	ldr	r3, [pc, #32]	@ (80094ac <Custom_APP_Init+0x28>)
 800948a:	2200      	movs	r2, #0
 800948c:	701a      	strb	r2, [r3, #0]
	Notify_Interface.checkSum=0;
 800948e:	4b07      	ldr	r3, [pc, #28]	@ (80094ac <Custom_APP_Init+0x28>)
 8009490:	2200      	movs	r2, #0
 8009492:	721a      	strb	r2, [r3, #8]
	Notify_Interface.length=0;
 8009494:	4b05      	ldr	r3, [pc, #20]	@ (80094ac <Custom_APP_Init+0x28>)
 8009496:	2200      	movs	r2, #0
 8009498:	725a      	strb	r2, [r3, #9]
	Notify_Interface.pck=UpdateCharData;
 800949a:	4b04      	ldr	r3, [pc, #16]	@ (80094ac <Custom_APP_Init+0x28>)
 800949c:	4a04      	ldr	r2, [pc, #16]	@ (80094b0 <Custom_APP_Init+0x2c>)
 800949e:	605a      	str	r2, [r3, #4]

  /* USER CODE END CUSTOM_APP_Init */
  return;
 80094a0:	bf00      	nop
}
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	2000060c 	.word	0x2000060c
 80094b0:	2000040c 	.word	0x2000040c

080094b4 <Custom_Charnotify_Update_Char>:
 *
 *************************************************************/

/* HealthMonitoringS */
__USED void Custom_Charnotify_Update_Char(void) /* Property Read */
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 80094ba:	2300      	movs	r3, #0
 80094bc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Charnotify_UC_1*/
  updateflag=1;
 80094be:	2301      	movs	r3, #1
 80094c0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE END Charnotify_UC_1*/

  if (updateflag != 0)
 80094c2:	79fb      	ldrb	r3, [r7, #7]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d004      	beq.n	80094d2 <Custom_Charnotify_Update_Char+0x1e>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_CHARNOTIFY, (uint8_t *)UpdateCharData);
 80094c8:	4904      	ldr	r1, [pc, #16]	@ (80094dc <Custom_Charnotify_Update_Char+0x28>)
 80094ca:	2001      	movs	r0, #1
 80094cc:	f000 f96c 	bl	80097a8 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Charnotify_UC_Last*/

  /* USER CODE END Charnotify_UC_Last*/
  return;
 80094d0:	bf00      	nop
 80094d2:	bf00      	nop
}
 80094d4:	3708      	adds	r7, #8
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	2000040c 	.word	0x2000040c

080094e0 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b08c      	sub	sp, #48	@ 0x30
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80094e8:	2300      	movs	r3, #0
 80094ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	3301      	adds	r3, #1
 80094f2:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 80094f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	2bff      	cmp	r3, #255	@ 0xff
 80094fa:	f040 809b 	bne.w	8009634 <Custom_STM_Event_Handler+0x154>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80094fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009500:	3302      	adds	r3, #2
 8009502:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 8009504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009506:	881b      	ldrh	r3, [r3, #0]
 8009508:	b29b      	uxth	r3, r3
 800950a:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800950e:	2b1a      	cmp	r3, #26
 8009510:	f200 808c 	bhi.w	800962c <Custom_STM_Event_Handler+0x14c>
 8009514:	a201      	add	r2, pc, #4	@ (adr r2, 800951c <Custom_STM_Event_Handler+0x3c>)
 8009516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800951a:	bf00      	nop
 800951c:	08009589 	.word	0x08009589
 8009520:	0800962d 	.word	0x0800962d
 8009524:	0800962d 	.word	0x0800962d
 8009528:	0800962d 	.word	0x0800962d
 800952c:	0800962d 	.word	0x0800962d
 8009530:	0800962d 	.word	0x0800962d
 8009534:	0800962d 	.word	0x0800962d
 8009538:	0800962d 	.word	0x0800962d
 800953c:	0800962d 	.word	0x0800962d
 8009540:	0800962d 	.word	0x0800962d
 8009544:	0800962d 	.word	0x0800962d
 8009548:	0800962d 	.word	0x0800962d
 800954c:	0800962d 	.word	0x0800962d
 8009550:	0800962d 	.word	0x0800962d
 8009554:	0800962d 	.word	0x0800962d
 8009558:	0800962d 	.word	0x0800962d
 800955c:	0800962d 	.word	0x0800962d
 8009560:	0800962d 	.word	0x0800962d
 8009564:	0800962d 	.word	0x0800962d
 8009568:	0800962d 	.word	0x0800962d
 800956c:	0800962d 	.word	0x0800962d
 8009570:	0800962d 	.word	0x0800962d
 8009574:	0800962d 	.word	0x0800962d
 8009578:	0800962d 	.word	0x0800962d
 800957c:	0800962d 	.word	0x0800962d
 8009580:	0800962d 	.word	0x0800962d
 8009584:	0800960f 	.word	0x0800960f
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8009588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800958a:	3302      	adds	r3, #2
 800958c:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomCharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	885b      	ldrh	r3, [r3, #2]
 8009592:	b29b      	uxth	r3, r3
 8009594:	461a      	mov	r2, r3
 8009596:	4b2b      	ldr	r3, [pc, #172]	@ (8009644 <Custom_STM_Event_Handler+0x164>)
 8009598:	889b      	ldrh	r3, [r3, #4]
 800959a:	3302      	adds	r3, #2
 800959c:	429a      	cmp	r2, r3
 800959e:	d119      	bne.n	80095d4 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80095a0:	2301      	movs	r3, #1
 80095a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	7a1b      	ldrb	r3, [r3, #8]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d002      	beq.n	80095b4 <Custom_STM_Event_Handler+0xd4>
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d008      	beq.n	80095c4 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 80095b2:	e02b      	b.n	800960c <Custom_STM_Event_Handler+0x12c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_CHARNOTIFY_NOTIFY_DISABLED_EVT;
 80095b4:	2302      	movs	r3, #2
 80095b6:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80095b8:	f107 0308 	add.w	r3, r7, #8
 80095bc:	4618      	mov	r0, r3
 80095be:	f7ff fe95 	bl	80092ec <Custom_STM_App_Notification>
                break;
 80095c2:	e023      	b.n	800960c <Custom_STM_Event_Handler+0x12c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_CHARNOTIFY_NOTIFY_ENABLED_EVT;
 80095c4:	2301      	movs	r3, #1
 80095c6:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80095c8:	f107 0308 	add.w	r3, r7, #8
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7ff fe8d 	bl	80092ec <Custom_STM_App_Notification>
                break;
 80095d2:	e01b      	b.n	800960c <Custom_STM_Event_Handler+0x12c>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomCharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	885b      	ldrh	r3, [r3, #2]
 80095d8:	b29b      	uxth	r3, r3
 80095da:	461a      	mov	r2, r3
 80095dc:	4b19      	ldr	r3, [pc, #100]	@ (8009644 <Custom_STM_Event_Handler+0x164>)
 80095de:	885b      	ldrh	r3, [r3, #2]
 80095e0:	3301      	adds	r3, #1
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d124      	bne.n	8009630 <Custom_STM_Event_Handler+0x150>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80095e6:	2301      	movs	r3, #1
 80095e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            Notification.Custom_Evt_Opcode = CUSTOM_STM_CHARWRITE_WRITE_EVT;
 80095ec:	2300      	movs	r3, #0
 80095ee:	723b      	strb	r3, [r7, #8]
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	88db      	ldrh	r3, [r3, #6]
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	743b      	strb	r3, [r7, #16]
            Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	3308      	adds	r3, #8
 80095fe:	60fb      	str	r3, [r7, #12]
            Custom_STM_App_Notification(&Notification);
 8009600:	f107 0308 	add.w	r3, r7, #8
 8009604:	4618      	mov	r0, r3
 8009606:	f7ff fe71 	bl	80092ec <Custom_STM_App_Notification>
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800960a:	e011      	b.n	8009630 <Custom_STM_Event_Handler+0x150>
 800960c:	e010      	b.n	8009630 <Custom_STM_Event_Handler+0x150>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800960e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009610:	3302      	adds	r3, #2
 8009612:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8009614:	2303      	movs	r3, #3
 8009616:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8009618:	6a3b      	ldr	r3, [r7, #32]
 800961a:	881b      	ldrh	r3, [r3, #0]
 800961c:	b29b      	uxth	r3, r3
 800961e:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 8009620:	f107 0308 	add.w	r3, r7, #8
 8009624:	4618      	mov	r0, r3
 8009626:	f7ff fe61 	bl	80092ec <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800962a:	e002      	b.n	8009632 <Custom_STM_Event_Handler+0x152>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800962c:	bf00      	nop
 800962e:	e002      	b.n	8009636 <Custom_STM_Event_Handler+0x156>
          break;
 8009630:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009632:	e000      	b.n	8009636 <Custom_STM_Event_Handler+0x156>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8009634:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8009636:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 800963a:	4618      	mov	r0, r3
 800963c:	3730      	adds	r7, #48	@ 0x30
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	20000618 	.word	0x20000618

08009648 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b08c      	sub	sp, #48	@ 0x30
 800964c:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800964e:	2392      	movs	r3, #146	@ 0x92
 8009650:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8009652:	484f      	ldr	r0, [pc, #316]	@ (8009790 <SVCCTL_InitCustomSvc+0x148>)
 8009654:	f7fe fb94 	bl	8007d80 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 8009658:	2306      	movs	r3, #6
 800965a:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService1 */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService1 */

  COPY_HEALTHMONITORINGS_UUID(uuid.Char_UUID_128);
 800965c:	238f      	movs	r3, #143	@ 0x8f
 800965e:	713b      	strb	r3, [r7, #4]
 8009660:	23e5      	movs	r3, #229	@ 0xe5
 8009662:	717b      	strb	r3, [r7, #5]
 8009664:	23b3      	movs	r3, #179	@ 0xb3
 8009666:	71bb      	strb	r3, [r7, #6]
 8009668:	23d5      	movs	r3, #213	@ 0xd5
 800966a:	71fb      	strb	r3, [r7, #7]
 800966c:	232e      	movs	r3, #46	@ 0x2e
 800966e:	723b      	strb	r3, [r7, #8]
 8009670:	237f      	movs	r3, #127	@ 0x7f
 8009672:	727b      	strb	r3, [r7, #9]
 8009674:	234a      	movs	r3, #74	@ 0x4a
 8009676:	72bb      	strb	r3, [r7, #10]
 8009678:	2398      	movs	r3, #152	@ 0x98
 800967a:	72fb      	strb	r3, [r7, #11]
 800967c:	232a      	movs	r3, #42	@ 0x2a
 800967e:	733b      	strb	r3, [r7, #12]
 8009680:	2348      	movs	r3, #72	@ 0x48
 8009682:	737b      	strb	r3, [r7, #13]
 8009684:	237a      	movs	r3, #122	@ 0x7a
 8009686:	73bb      	strb	r3, [r7, #14]
 8009688:	23cc      	movs	r3, #204	@ 0xcc
 800968a:	73fb      	strb	r3, [r7, #15]
 800968c:	2300      	movs	r3, #0
 800968e:	743b      	strb	r3, [r7, #16]
 8009690:	2300      	movs	r3, #0
 8009692:	747b      	strb	r3, [r7, #17]
 8009694:	2300      	movs	r3, #0
 8009696:	74bb      	strb	r3, [r7, #18]
 8009698:	2300      	movs	r3, #0
 800969a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800969c:	7dbb      	ldrb	r3, [r7, #22]
 800969e:	1d39      	adds	r1, r7, #4
 80096a0:	4a3c      	ldr	r2, [pc, #240]	@ (8009794 <SVCCTL_InitCustomSvc+0x14c>)
 80096a2:	9200      	str	r2, [sp, #0]
 80096a4:	2201      	movs	r2, #1
 80096a6:	2002      	movs	r0, #2
 80096a8:	f7fd fdde 	bl	8007268 <aci_gatt_add_service>
 80096ac:	4603      	mov	r3, r0
 80096ae:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  CharWrite
   */
  COPY_CHARWRITE_UUID(uuid.Char_UUID_128);
 80096b0:	2319      	movs	r3, #25
 80096b2:	713b      	strb	r3, [r7, #4]
 80096b4:	23ed      	movs	r3, #237	@ 0xed
 80096b6:	717b      	strb	r3, [r7, #5]
 80096b8:	2382      	movs	r3, #130	@ 0x82
 80096ba:	71bb      	strb	r3, [r7, #6]
 80096bc:	23ae      	movs	r3, #174	@ 0xae
 80096be:	71fb      	strb	r3, [r7, #7]
 80096c0:	23ed      	movs	r3, #237	@ 0xed
 80096c2:	723b      	strb	r3, [r7, #8]
 80096c4:	2321      	movs	r3, #33	@ 0x21
 80096c6:	727b      	strb	r3, [r7, #9]
 80096c8:	234c      	movs	r3, #76	@ 0x4c
 80096ca:	72bb      	strb	r3, [r7, #10]
 80096cc:	239d      	movs	r3, #157	@ 0x9d
 80096ce:	72fb      	strb	r3, [r7, #11]
 80096d0:	2341      	movs	r3, #65	@ 0x41
 80096d2:	733b      	strb	r3, [r7, #12]
 80096d4:	2345      	movs	r3, #69	@ 0x45
 80096d6:	737b      	strb	r3, [r7, #13]
 80096d8:	2322      	movs	r3, #34	@ 0x22
 80096da:	73bb      	strb	r3, [r7, #14]
 80096dc:	238e      	movs	r3, #142	@ 0x8e
 80096de:	73fb      	strb	r3, [r7, #15]
 80096e0:	2300      	movs	r3, #0
 80096e2:	743b      	strb	r3, [r7, #16]
 80096e4:	2300      	movs	r3, #0
 80096e6:	747b      	strb	r3, [r7, #17]
 80096e8:	2300      	movs	r3, #0
 80096ea:	74bb      	strb	r3, [r7, #18]
 80096ec:	2300      	movs	r3, #0
 80096ee:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomHmHdle,
 80096f0:	4b28      	ldr	r3, [pc, #160]	@ (8009794 <SVCCTL_InitCustomSvc+0x14c>)
 80096f2:	8818      	ldrh	r0, [r3, #0]
 80096f4:	4b28      	ldr	r3, [pc, #160]	@ (8009798 <SVCCTL_InitCustomSvc+0x150>)
 80096f6:	881b      	ldrh	r3, [r3, #0]
 80096f8:	1d3a      	adds	r2, r7, #4
 80096fa:	4928      	ldr	r1, [pc, #160]	@ (800979c <SVCCTL_InitCustomSvc+0x154>)
 80096fc:	9105      	str	r1, [sp, #20]
 80096fe:	2100      	movs	r1, #0
 8009700:	9104      	str	r1, [sp, #16]
 8009702:	2110      	movs	r1, #16
 8009704:	9103      	str	r1, [sp, #12]
 8009706:	2101      	movs	r1, #1
 8009708:	9102      	str	r1, [sp, #8]
 800970a:	2100      	movs	r1, #0
 800970c:	9101      	str	r1, [sp, #4]
 800970e:	2108      	movs	r1, #8
 8009710:	9100      	str	r1, [sp, #0]
 8009712:	2102      	movs	r1, #2
 8009714:	f7fd fe7e 	bl	8007414 <aci_gatt_add_char>
 8009718:	4603      	mov	r3, r0
 800971a:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  CharNotify
   */
  COPY_CHARNOTIFY_UUID(uuid.Char_UUID_128);
 800971c:	2319      	movs	r3, #25
 800971e:	713b      	strb	r3, [r7, #4]
 8009720:	23ed      	movs	r3, #237	@ 0xed
 8009722:	717b      	strb	r3, [r7, #5]
 8009724:	2382      	movs	r3, #130	@ 0x82
 8009726:	71bb      	strb	r3, [r7, #6]
 8009728:	23ae      	movs	r3, #174	@ 0xae
 800972a:	71fb      	strb	r3, [r7, #7]
 800972c:	23ed      	movs	r3, #237	@ 0xed
 800972e:	723b      	strb	r3, [r7, #8]
 8009730:	2321      	movs	r3, #33	@ 0x21
 8009732:	727b      	strb	r3, [r7, #9]
 8009734:	234c      	movs	r3, #76	@ 0x4c
 8009736:	72bb      	strb	r3, [r7, #10]
 8009738:	239d      	movs	r3, #157	@ 0x9d
 800973a:	72fb      	strb	r3, [r7, #11]
 800973c:	2341      	movs	r3, #65	@ 0x41
 800973e:	733b      	strb	r3, [r7, #12]
 8009740:	2345      	movs	r3, #69	@ 0x45
 8009742:	737b      	strb	r3, [r7, #13]
 8009744:	2322      	movs	r3, #34	@ 0x22
 8009746:	73bb      	strb	r3, [r7, #14]
 8009748:	238e      	movs	r3, #142	@ 0x8e
 800974a:	73fb      	strb	r3, [r7, #15]
 800974c:	2301      	movs	r3, #1
 800974e:	743b      	strb	r3, [r7, #16]
 8009750:	2300      	movs	r3, #0
 8009752:	747b      	strb	r3, [r7, #17]
 8009754:	2300      	movs	r3, #0
 8009756:	74bb      	strb	r3, [r7, #18]
 8009758:	2300      	movs	r3, #0
 800975a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomHmHdle,
 800975c:	4b0d      	ldr	r3, [pc, #52]	@ (8009794 <SVCCTL_InitCustomSvc+0x14c>)
 800975e:	8818      	ldrh	r0, [r3, #0]
 8009760:	4b0f      	ldr	r3, [pc, #60]	@ (80097a0 <SVCCTL_InitCustomSvc+0x158>)
 8009762:	881b      	ldrh	r3, [r3, #0]
 8009764:	1d3a      	adds	r2, r7, #4
 8009766:	490f      	ldr	r1, [pc, #60]	@ (80097a4 <SVCCTL_InitCustomSvc+0x15c>)
 8009768:	9105      	str	r1, [sp, #20]
 800976a:	2100      	movs	r1, #0
 800976c:	9104      	str	r1, [sp, #16]
 800976e:	2110      	movs	r1, #16
 8009770:	9103      	str	r1, [sp, #12]
 8009772:	2107      	movs	r1, #7
 8009774:	9102      	str	r1, [sp, #8]
 8009776:	2100      	movs	r1, #0
 8009778:	9101      	str	r1, [sp, #4]
 800977a:	2110      	movs	r1, #16
 800977c:	9100      	str	r1, [sp, #0]
 800977e:	2102      	movs	r1, #2
 8009780:	f7fd fe48 	bl	8007414 <aci_gatt_add_char>
 8009784:	4603      	mov	r3, r0
 8009786:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8009788:	bf00      	nop
}
 800978a:	3718      	adds	r7, #24
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	080094e1 	.word	0x080094e1
 8009794:	20000618 	.word	0x20000618
 8009798:	20000022 	.word	0x20000022
 800979c:	2000061a 	.word	0x2000061a
 80097a0:	20000024 	.word	0x20000024
 80097a4:	2000061c 	.word	0x2000061c

080097a8 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af02      	add	r7, sp, #8
 80097ae:	4603      	mov	r3, r0
 80097b0:	6039      	str	r1, [r7, #0]
 80097b2:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80097b4:	2392      	movs	r3, #146	@ 0x92
 80097b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 80097b8:	79fb      	ldrb	r3, [r7, #7]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d002      	beq.n	80097c4 <Custom_STM_App_Update_Char+0x1c>
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d010      	beq.n	80097e4 <Custom_STM_App_Update_Char+0x3c>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 80097c2:	e01f      	b.n	8009804 <Custom_STM_App_Update_Char+0x5c>
      ret = aci_gatt_update_char_value(CustomContext.CustomHmHdle,
 80097c4:	4b12      	ldr	r3, [pc, #72]	@ (8009810 <Custom_STM_App_Update_Char+0x68>)
 80097c6:	8818      	ldrh	r0, [r3, #0]
 80097c8:	4b11      	ldr	r3, [pc, #68]	@ (8009810 <Custom_STM_App_Update_Char+0x68>)
 80097ca:	8859      	ldrh	r1, [r3, #2]
 80097cc:	4b11      	ldr	r3, [pc, #68]	@ (8009814 <Custom_STM_App_Update_Char+0x6c>)
 80097ce:	881b      	ldrh	r3, [r3, #0]
 80097d0:	b2da      	uxtb	r2, r3
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	9300      	str	r3, [sp, #0]
 80097d6:	4613      	mov	r3, r2
 80097d8:	2200      	movs	r2, #0
 80097da:	f7fd ff23 	bl	8007624 <aci_gatt_update_char_value>
 80097de:	4603      	mov	r3, r0
 80097e0:	73fb      	strb	r3, [r7, #15]
      break;
 80097e2:	e00f      	b.n	8009804 <Custom_STM_App_Update_Char+0x5c>
      ret = aci_gatt_update_char_value(CustomContext.CustomHmHdle,
 80097e4:	4b0a      	ldr	r3, [pc, #40]	@ (8009810 <Custom_STM_App_Update_Char+0x68>)
 80097e6:	8818      	ldrh	r0, [r3, #0]
 80097e8:	4b09      	ldr	r3, [pc, #36]	@ (8009810 <Custom_STM_App_Update_Char+0x68>)
 80097ea:	8899      	ldrh	r1, [r3, #4]
 80097ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009818 <Custom_STM_App_Update_Char+0x70>)
 80097ee:	881b      	ldrh	r3, [r3, #0]
 80097f0:	b2da      	uxtb	r2, r3
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	9300      	str	r3, [sp, #0]
 80097f6:	4613      	mov	r3, r2
 80097f8:	2200      	movs	r2, #0
 80097fa:	f7fd ff13 	bl	8007624 <aci_gatt_update_char_value>
 80097fe:	4603      	mov	r3, r0
 8009800:	73fb      	strb	r3, [r7, #15]
      break;
 8009802:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8009804:	7bfb      	ldrb	r3, [r7, #15]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	20000618 	.word	0x20000618
 8009814:	20000022 	.word	0x20000022
 8009818:	20000024 	.word	0x20000024

0800981c <send_dummy_hr_spo2>:
/**
 * @brief  Generate and send a dummy HR & SpO₂ notification over BLE.
 *         Structure: [CMD][LEN][DATA(5)][TIMESTAMP(4)][CRC]
 */
static void send_dummy_hr_spo2(void)
{
 800981c:	b590      	push	{r4, r7, lr}
 800981e:	b087      	sub	sp, #28
 8009820:	af00      	add	r7, sp, #0
	Custom_BLE_Notify_interface_t* p_ble_notify =ble_notify_interface_get();
 8009822:	f7ff fd59 	bl	80092d8 <ble_notify_interface_get>
 8009826:	6178      	str	r0, [r7, #20]
    uint8_t* notif= p_ble_notify->pck ;
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	613b      	str	r3, [r7, #16]
    uint8_t idx = 0;
 800982e:	2300      	movs	r3, #0
 8009830:	73fb      	strb	r3, [r7, #15]

    // DATA_TYPE: bitmask for HR (0x01) + SpO₂ (0x02) = 0x03
	notif[idx++] = 0x01;
 8009832:	7bfb      	ldrb	r3, [r7, #15]
 8009834:	1c5a      	adds	r2, r3, #1
 8009836:	73fa      	strb	r2, [r7, #15]
 8009838:	461a      	mov	r2, r3
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	4413      	add	r3, r2
 800983e:	2201      	movs	r2, #1
 8009840:	701a      	strb	r2, [r3, #0]
	// LEN: always 0x05
	notif[idx++] = 0x05;
 8009842:	7bfb      	ldrb	r3, [r7, #15]
 8009844:	1c5a      	adds	r2, r3, #1
 8009846:	73fa      	strb	r2, [r7, #15]
 8009848:	461a      	mov	r2, r3
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	4413      	add	r3, r2
 800984e:	2205      	movs	r2, #5
 8009850:	701a      	strb	r2, [r3, #0]

	// DATA: HR (2 bytes), SpO₂ (2 bytes), padding (1 byte)
	uint16_t dummy_hr = 7000;    // e.g., 70 bpm -> 0x0046
 8009852:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8009856:	81bb      	strh	r3, [r7, #12]
	uint16_t dummy_spo2 = 9800;  // e.g., 98% -> 0x0062
 8009858:	f242 6348 	movw	r3, #9800	@ 0x2648
 800985c:	817b      	strh	r3, [r7, #10]

	notif[idx++] = 0x00;       // Padding
 800985e:	7bfb      	ldrb	r3, [r7, #15]
 8009860:	1c5a      	adds	r2, r3, #1
 8009862:	73fa      	strb	r2, [r7, #15]
 8009864:	461a      	mov	r2, r3
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	4413      	add	r3, r2
 800986a:	2200      	movs	r2, #0
 800986c:	701a      	strb	r2, [r3, #0]
	notif[idx++] = (dummy_hr >> 8) & 0xFF;
 800986e:	89bb      	ldrh	r3, [r7, #12]
 8009870:	0a1b      	lsrs	r3, r3, #8
 8009872:	b29a      	uxth	r2, r3
 8009874:	7bfb      	ldrb	r3, [r7, #15]
 8009876:	1c59      	adds	r1, r3, #1
 8009878:	73f9      	strb	r1, [r7, #15]
 800987a:	4619      	mov	r1, r3
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	440b      	add	r3, r1
 8009880:	b2d2      	uxtb	r2, r2
 8009882:	701a      	strb	r2, [r3, #0]
	notif[idx++] = (dummy_hr >> 0) & 0xFF;
 8009884:	7bfb      	ldrb	r3, [r7, #15]
 8009886:	1c5a      	adds	r2, r3, #1
 8009888:	73fa      	strb	r2, [r7, #15]
 800988a:	461a      	mov	r2, r3
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	4413      	add	r3, r2
 8009890:	89ba      	ldrh	r2, [r7, #12]
 8009892:	b2d2      	uxtb	r2, r2
 8009894:	701a      	strb	r2, [r3, #0]
	notif[idx++] = (dummy_spo2 >> 8) & 0xFF;
 8009896:	897b      	ldrh	r3, [r7, #10]
 8009898:	0a1b      	lsrs	r3, r3, #8
 800989a:	b29a      	uxth	r2, r3
 800989c:	7bfb      	ldrb	r3, [r7, #15]
 800989e:	1c59      	adds	r1, r3, #1
 80098a0:	73f9      	strb	r1, [r7, #15]
 80098a2:	4619      	mov	r1, r3
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	440b      	add	r3, r1
 80098a8:	b2d2      	uxtb	r2, r2
 80098aa:	701a      	strb	r2, [r3, #0]
	notif[idx++] = (dummy_spo2 >> 0) & 0xFF;
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
 80098ae:	1c5a      	adds	r2, r3, #1
 80098b0:	73fa      	strb	r2, [r7, #15]
 80098b2:	461a      	mov	r2, r3
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	4413      	add	r3, r2
 80098b8:	897a      	ldrh	r2, [r7, #10]
 80098ba:	b2d2      	uxtb	r2, r2
 80098bc:	701a      	strb	r2, [r3, #0]

    // TIMESTAMP: fixed dummy Unix time, e.g., 1620000000 (0x60D4A000)
    uint32_t ts = 0x60D4A000;
 80098be:	4b1c      	ldr	r3, [pc, #112]	@ (8009930 <send_dummy_hr_spo2+0x114>)
 80098c0:	607b      	str	r3, [r7, #4]
    notif[idx++] = (ts >> 24) & 0xFF;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	0e1a      	lsrs	r2, r3, #24
 80098c6:	7bfb      	ldrb	r3, [r7, #15]
 80098c8:	1c59      	adds	r1, r3, #1
 80098ca:	73f9      	strb	r1, [r7, #15]
 80098cc:	4619      	mov	r1, r3
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	440b      	add	r3, r1
 80098d2:	b2d2      	uxtb	r2, r2
 80098d4:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 16) & 0xFF;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	0c1a      	lsrs	r2, r3, #16
 80098da:	7bfb      	ldrb	r3, [r7, #15]
 80098dc:	1c59      	adds	r1, r3, #1
 80098de:	73f9      	strb	r1, [r7, #15]
 80098e0:	4619      	mov	r1, r3
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	440b      	add	r3, r1
 80098e6:	b2d2      	uxtb	r2, r2
 80098e8:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 8)  & 0xFF;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	0a1a      	lsrs	r2, r3, #8
 80098ee:	7bfb      	ldrb	r3, [r7, #15]
 80098f0:	1c59      	adds	r1, r3, #1
 80098f2:	73f9      	strb	r1, [r7, #15]
 80098f4:	4619      	mov	r1, r3
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	440b      	add	r3, r1
 80098fa:	b2d2      	uxtb	r2, r2
 80098fc:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 0)  & 0xFF;
 80098fe:	7bfb      	ldrb	r3, [r7, #15]
 8009900:	1c5a      	adds	r2, r3, #1
 8009902:	73fa      	strb	r2, [r7, #15]
 8009904:	461a      	mov	r2, r3
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	4413      	add	r3, r2
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	b2d2      	uxtb	r2, r2
 800990e:	701a      	strb	r2, [r3, #0]

    // CRC: sum of bytes [0..10] mod 256
    notif[idx] = ble_calculate_chksum(notif, 11);
 8009910:	7bfb      	ldrb	r3, [r7, #15]
 8009912:	693a      	ldr	r2, [r7, #16]
 8009914:	18d4      	adds	r4, r2, r3
 8009916:	210b      	movs	r1, #11
 8009918:	6938      	ldr	r0, [r7, #16]
 800991a:	f7ff fca8 	bl	800926e <ble_calculate_chksum>
 800991e:	4603      	mov	r3, r0
 8009920:	7023      	strb	r3, [r4, #0]


    p_ble_notify->Status=Notify_Pending;
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	2201      	movs	r2, #1
 8009926:	701a      	strb	r2, [r3, #0]
}
 8009928:	bf00      	nop
 800992a:	371c      	adds	r7, #28
 800992c:	46bd      	mov	sp, r7
 800992e:	bd90      	pop	{r4, r7, pc}
 8009930:	60d4a000 	.word	0x60d4a000

08009934 <send_dummy_temp>:
/**
 * @brief  Generate and send a dummy Temperature notification over BLE.
 * @param  temp_type: 0x01 = Body, 0x02 = Environmental, 0x03 = Both
 */
static void send_dummy_temp(uint8_t temp_type)
{
 8009934:	b590      	push	{r4, r7, lr}
 8009936:	b089      	sub	sp, #36	@ 0x24
 8009938:	af00      	add	r7, sp, #0
 800993a:	4603      	mov	r3, r0
 800993c:	71fb      	strb	r3, [r7, #7]
	Custom_BLE_Notify_interface_t* p_ble_notify = ble_notify_interface_get();
 800993e:	f7ff fccb 	bl	80092d8 <ble_notify_interface_get>
 8009942:	61b8      	str	r0, [r7, #24]
	uint8_t *notif = p_ble_notify->pck;
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	617b      	str	r3, [r7, #20]
	uint8_t idx = 0;
 800994a:	2300      	movs	r3, #0
 800994c:	77fb      	strb	r3, [r7, #31]

    // DATA_TYPE: bitmask for Temperature = 0x04
    notif[idx++] = 0x02;
 800994e:	7ffb      	ldrb	r3, [r7, #31]
 8009950:	1c5a      	adds	r2, r3, #1
 8009952:	77fa      	strb	r2, [r7, #31]
 8009954:	461a      	mov	r2, r3
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	4413      	add	r3, r2
 800995a:	2202      	movs	r2, #2
 800995c:	701a      	strb	r2, [r3, #0]
    // LEN: always 0x05
    notif[idx++] = 0x05;
 800995e:	7ffb      	ldrb	r3, [r7, #31]
 8009960:	1c5a      	adds	r2, r3, #1
 8009962:	77fa      	strb	r2, [r7, #31]
 8009964:	461a      	mov	r2, r3
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	4413      	add	r3, r2
 800996a:	2205      	movs	r2, #5
 800996c:	701a      	strb	r2, [r3, #0]

    // DATA: depends on temp_type
    // Use dummy values: Ambient = 25.0°C -> 250 (0x00FA), Body = 36.5°C -> 365 (0x016D)
    uint16_t amb = 250;
 800996e:	23fa      	movs	r3, #250	@ 0xfa
 8009970:	827b      	strh	r3, [r7, #18]
    uint16_t body = 365;
 8009972:	f240 136d 	movw	r3, #365	@ 0x16d
 8009976:	823b      	strh	r3, [r7, #16]

    if (temp_type == 0x01) {
 8009978:	79fb      	ldrb	r3, [r7, #7]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d12c      	bne.n	80099d8 <send_dummy_temp+0xa4>
        // Body only
        notif[idx++] = 0x01;
 800997e:	7ffb      	ldrb	r3, [r7, #31]
 8009980:	1c5a      	adds	r2, r3, #1
 8009982:	77fa      	strb	r2, [r7, #31]
 8009984:	461a      	mov	r2, r3
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	4413      	add	r3, r2
 800998a:	2201      	movs	r2, #1
 800998c:	701a      	strb	r2, [r3, #0]
        notif[idx++] = (body >> 8) & 0xFF;
 800998e:	8a3b      	ldrh	r3, [r7, #16]
 8009990:	0a1b      	lsrs	r3, r3, #8
 8009992:	b29a      	uxth	r2, r3
 8009994:	7ffb      	ldrb	r3, [r7, #31]
 8009996:	1c59      	adds	r1, r3, #1
 8009998:	77f9      	strb	r1, [r7, #31]
 800999a:	4619      	mov	r1, r3
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	440b      	add	r3, r1
 80099a0:	b2d2      	uxtb	r2, r2
 80099a2:	701a      	strb	r2, [r3, #0]
        notif[idx++] = (body >> 0) & 0xFF;
 80099a4:	7ffb      	ldrb	r3, [r7, #31]
 80099a6:	1c5a      	adds	r2, r3, #1
 80099a8:	77fa      	strb	r2, [r7, #31]
 80099aa:	461a      	mov	r2, r3
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	4413      	add	r3, r2
 80099b0:	8a3a      	ldrh	r2, [r7, #16]
 80099b2:	b2d2      	uxtb	r2, r2
 80099b4:	701a      	strb	r2, [r3, #0]
        notif[idx++] = 0x00;
 80099b6:	7ffb      	ldrb	r3, [r7, #31]
 80099b8:	1c5a      	adds	r2, r3, #1
 80099ba:	77fa      	strb	r2, [r7, #31]
 80099bc:	461a      	mov	r2, r3
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	4413      	add	r3, r2
 80099c2:	2200      	movs	r2, #0
 80099c4:	701a      	strb	r2, [r3, #0]
        notif[idx++] = 0x00; // Padding
 80099c6:	7ffb      	ldrb	r3, [r7, #31]
 80099c8:	1c5a      	adds	r2, r3, #1
 80099ca:	77fa      	strb	r2, [r7, #31]
 80099cc:	461a      	mov	r2, r3
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	4413      	add	r3, r2
 80099d2:	2200      	movs	r2, #0
 80099d4:	701a      	strb	r2, [r3, #0]
 80099d6:	e05f      	b.n	8009a98 <send_dummy_temp+0x164>
    } else if (temp_type == 0x02) {
 80099d8:	79fb      	ldrb	r3, [r7, #7]
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d12c      	bne.n	8009a38 <send_dummy_temp+0x104>
        // Ambient only
        notif[idx++] = 0x02;
 80099de:	7ffb      	ldrb	r3, [r7, #31]
 80099e0:	1c5a      	adds	r2, r3, #1
 80099e2:	77fa      	strb	r2, [r7, #31]
 80099e4:	461a      	mov	r2, r3
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	4413      	add	r3, r2
 80099ea:	2202      	movs	r2, #2
 80099ec:	701a      	strb	r2, [r3, #0]
        notif[idx++] = (amb >> 8) & 0xFF;
 80099ee:	8a7b      	ldrh	r3, [r7, #18]
 80099f0:	0a1b      	lsrs	r3, r3, #8
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	7ffb      	ldrb	r3, [r7, #31]
 80099f6:	1c59      	adds	r1, r3, #1
 80099f8:	77f9      	strb	r1, [r7, #31]
 80099fa:	4619      	mov	r1, r3
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	440b      	add	r3, r1
 8009a00:	b2d2      	uxtb	r2, r2
 8009a02:	701a      	strb	r2, [r3, #0]
        notif[idx++] = (amb >> 0) & 0xFF;
 8009a04:	7ffb      	ldrb	r3, [r7, #31]
 8009a06:	1c5a      	adds	r2, r3, #1
 8009a08:	77fa      	strb	r2, [r7, #31]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	4413      	add	r3, r2
 8009a10:	8a7a      	ldrh	r2, [r7, #18]
 8009a12:	b2d2      	uxtb	r2, r2
 8009a14:	701a      	strb	r2, [r3, #0]
        notif[idx++] = 0x00;
 8009a16:	7ffb      	ldrb	r3, [r7, #31]
 8009a18:	1c5a      	adds	r2, r3, #1
 8009a1a:	77fa      	strb	r2, [r7, #31]
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	4413      	add	r3, r2
 8009a22:	2200      	movs	r2, #0
 8009a24:	701a      	strb	r2, [r3, #0]
        notif[idx++] = 0x00; // Padding
 8009a26:	7ffb      	ldrb	r3, [r7, #31]
 8009a28:	1c5a      	adds	r2, r3, #1
 8009a2a:	77fa      	strb	r2, [r7, #31]
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	4413      	add	r3, r2
 8009a32:	2200      	movs	r2, #0
 8009a34:	701a      	strb	r2, [r3, #0]
 8009a36:	e02f      	b.n	8009a98 <send_dummy_temp+0x164>
    } else {
        // Both: pack ambient then body, pad 1 byte
    	notif[idx++] = 0x03; // Padding
 8009a38:	7ffb      	ldrb	r3, [r7, #31]
 8009a3a:	1c5a      	adds	r2, r3, #1
 8009a3c:	77fa      	strb	r2, [r7, #31]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	4413      	add	r3, r2
 8009a44:	2203      	movs	r2, #3
 8009a46:	701a      	strb	r2, [r3, #0]
        notif[idx++] = (amb >> 8) & 0xFF;
 8009a48:	8a7b      	ldrh	r3, [r7, #18]
 8009a4a:	0a1b      	lsrs	r3, r3, #8
 8009a4c:	b29a      	uxth	r2, r3
 8009a4e:	7ffb      	ldrb	r3, [r7, #31]
 8009a50:	1c59      	adds	r1, r3, #1
 8009a52:	77f9      	strb	r1, [r7, #31]
 8009a54:	4619      	mov	r1, r3
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	440b      	add	r3, r1
 8009a5a:	b2d2      	uxtb	r2, r2
 8009a5c:	701a      	strb	r2, [r3, #0]
        notif[idx++] = (amb >> 0) & 0xFF;
 8009a5e:	7ffb      	ldrb	r3, [r7, #31]
 8009a60:	1c5a      	adds	r2, r3, #1
 8009a62:	77fa      	strb	r2, [r7, #31]
 8009a64:	461a      	mov	r2, r3
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	4413      	add	r3, r2
 8009a6a:	8a7a      	ldrh	r2, [r7, #18]
 8009a6c:	b2d2      	uxtb	r2, r2
 8009a6e:	701a      	strb	r2, [r3, #0]
        notif[idx++] = (body >> 8) & 0xFF;
 8009a70:	8a3b      	ldrh	r3, [r7, #16]
 8009a72:	0a1b      	lsrs	r3, r3, #8
 8009a74:	b29a      	uxth	r2, r3
 8009a76:	7ffb      	ldrb	r3, [r7, #31]
 8009a78:	1c59      	adds	r1, r3, #1
 8009a7a:	77f9      	strb	r1, [r7, #31]
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	440b      	add	r3, r1
 8009a82:	b2d2      	uxtb	r2, r2
 8009a84:	701a      	strb	r2, [r3, #0]
        notif[idx++] = (body >> 0) & 0xFF;
 8009a86:	7ffb      	ldrb	r3, [r7, #31]
 8009a88:	1c5a      	adds	r2, r3, #1
 8009a8a:	77fa      	strb	r2, [r7, #31]
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	4413      	add	r3, r2
 8009a92:	8a3a      	ldrh	r2, [r7, #16]
 8009a94:	b2d2      	uxtb	r2, r2
 8009a96:	701a      	strb	r2, [r3, #0]

    }

    // TIMESTAMP: fixed dummy Unix time
    uint32_t ts = 0x60D4A000;
 8009a98:	4b1c      	ldr	r3, [pc, #112]	@ (8009b0c <send_dummy_temp+0x1d8>)
 8009a9a:	60fb      	str	r3, [r7, #12]
    notif[idx++] = (ts >> 24) & 0xFF;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	0e1a      	lsrs	r2, r3, #24
 8009aa0:	7ffb      	ldrb	r3, [r7, #31]
 8009aa2:	1c59      	adds	r1, r3, #1
 8009aa4:	77f9      	strb	r1, [r7, #31]
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	440b      	add	r3, r1
 8009aac:	b2d2      	uxtb	r2, r2
 8009aae:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 16) & 0xFF;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	0c1a      	lsrs	r2, r3, #16
 8009ab4:	7ffb      	ldrb	r3, [r7, #31]
 8009ab6:	1c59      	adds	r1, r3, #1
 8009ab8:	77f9      	strb	r1, [r7, #31]
 8009aba:	4619      	mov	r1, r3
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	440b      	add	r3, r1
 8009ac0:	b2d2      	uxtb	r2, r2
 8009ac2:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 8)  & 0xFF;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	0a1a      	lsrs	r2, r3, #8
 8009ac8:	7ffb      	ldrb	r3, [r7, #31]
 8009aca:	1c59      	adds	r1, r3, #1
 8009acc:	77f9      	strb	r1, [r7, #31]
 8009ace:	4619      	mov	r1, r3
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	440b      	add	r3, r1
 8009ad4:	b2d2      	uxtb	r2, r2
 8009ad6:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 0)  & 0xFF;
 8009ad8:	7ffb      	ldrb	r3, [r7, #31]
 8009ada:	1c5a      	adds	r2, r3, #1
 8009adc:	77fa      	strb	r2, [r7, #31]
 8009ade:	461a      	mov	r2, r3
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	b2d2      	uxtb	r2, r2
 8009ae8:	701a      	strb	r2, [r3, #0]

    // CRC: sum of bytes [0..10] mod 256
    notif[idx] = ble_calculate_chksum(notif, 11);
 8009aea:	7ffb      	ldrb	r3, [r7, #31]
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	18d4      	adds	r4, r2, r3
 8009af0:	210b      	movs	r1, #11
 8009af2:	6978      	ldr	r0, [r7, #20]
 8009af4:	f7ff fbbb 	bl	800926e <ble_calculate_chksum>
 8009af8:	4603      	mov	r3, r0
 8009afa:	7023      	strb	r3, [r4, #0]

    p_ble_notify->Status=Notify_Pending;
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	2201      	movs	r2, #1
 8009b00:	701a      	strb	r2, [r3, #0]
}
 8009b02:	bf00      	nop
 8009b04:	3724      	adds	r7, #36	@ 0x24
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd90      	pop	{r4, r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	60d4a000 	.word	0x60d4a000

08009b10 <send_dummy_pressure>:

/**
 * @brief  Generate and send a dummy Pressure notification over BLE.
 */
static void send_dummy_pressure(void)
{
 8009b10:	b590      	push	{r4, r7, lr}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
	Custom_BLE_Notify_interface_t* p_ble_notify = ble_notify_interface_get();
 8009b16:	f7ff fbdf 	bl	80092d8 <ble_notify_interface_get>
 8009b1a:	60f8      	str	r0, [r7, #12]
	uint8_t *notif = p_ble_notify->pck;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	60bb      	str	r3, [r7, #8]
    uint8_t idx = 0;
 8009b22:	2300      	movs	r3, #0
 8009b24:	71fb      	strb	r3, [r7, #7]

    // DATA_TYPE: bitmask for Pressure = 0x08
    notif[idx++] = 0x03;
 8009b26:	79fb      	ldrb	r3, [r7, #7]
 8009b28:	1c5a      	adds	r2, r3, #1
 8009b2a:	71fa      	strb	r2, [r7, #7]
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	4413      	add	r3, r2
 8009b32:	2203      	movs	r2, #3
 8009b34:	701a      	strb	r2, [r3, #0]
    // LEN: always 0x05
    notif[idx++] = 0x05;
 8009b36:	79fb      	ldrb	r3, [r7, #7]
 8009b38:	1c5a      	adds	r2, r3, #1
 8009b3a:	71fa      	strb	r2, [r7, #7]
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	4413      	add	r3, r2
 8009b42:	2205      	movs	r2, #5
 8009b44:	701a      	strb	r2, [r3, #0]

    // DATA: Pressure (e.g., 1013 hPa -> 0x03F5), pad 3 bytes
    uint16_t dummy_press = 1013;
 8009b46:	f240 33f5 	movw	r3, #1013	@ 0x3f5
 8009b4a:	80bb      	strh	r3, [r7, #4]
    notif[idx++] = 0x00;
 8009b4c:	79fb      	ldrb	r3, [r7, #7]
 8009b4e:	1c5a      	adds	r2, r3, #1
 8009b50:	71fa      	strb	r2, [r7, #7]
 8009b52:	461a      	mov	r2, r3
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	4413      	add	r3, r2
 8009b58:	2200      	movs	r2, #0
 8009b5a:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (dummy_press >> 8) & 0xFF;
 8009b5c:	88bb      	ldrh	r3, [r7, #4]
 8009b5e:	0a1b      	lsrs	r3, r3, #8
 8009b60:	b29a      	uxth	r2, r3
 8009b62:	79fb      	ldrb	r3, [r7, #7]
 8009b64:	1c59      	adds	r1, r3, #1
 8009b66:	71f9      	strb	r1, [r7, #7]
 8009b68:	4619      	mov	r1, r3
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	440b      	add	r3, r1
 8009b6e:	b2d2      	uxtb	r2, r2
 8009b70:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (dummy_press >> 0) & 0xFF;
 8009b72:	79fb      	ldrb	r3, [r7, #7]
 8009b74:	1c5a      	adds	r2, r3, #1
 8009b76:	71fa      	strb	r2, [r7, #7]
 8009b78:	461a      	mov	r2, r3
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	88ba      	ldrh	r2, [r7, #4]
 8009b80:	b2d2      	uxtb	r2, r2
 8009b82:	701a      	strb	r2, [r3, #0]
    notif[idx++] = 0x00;
 8009b84:	79fb      	ldrb	r3, [r7, #7]
 8009b86:	1c5a      	adds	r2, r3, #1
 8009b88:	71fa      	strb	r2, [r7, #7]
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	4413      	add	r3, r2
 8009b90:	2200      	movs	r2, #0
 8009b92:	701a      	strb	r2, [r3, #0]
    notif[idx++] = 0x00; // Padding
 8009b94:	79fb      	ldrb	r3, [r7, #7]
 8009b96:	1c5a      	adds	r2, r3, #1
 8009b98:	71fa      	strb	r2, [r7, #7]
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	701a      	strb	r2, [r3, #0]

    // TIMESTAMP: fixed dummy Unix time
    uint32_t ts = 0x60D4A000;
 8009ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8009c18 <send_dummy_pressure+0x108>)
 8009ba6:	603b      	str	r3, [r7, #0]
    notif[idx++] = (ts >> 24) & 0xFF;
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	0e1a      	lsrs	r2, r3, #24
 8009bac:	79fb      	ldrb	r3, [r7, #7]
 8009bae:	1c59      	adds	r1, r3, #1
 8009bb0:	71f9      	strb	r1, [r7, #7]
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	440b      	add	r3, r1
 8009bb8:	b2d2      	uxtb	r2, r2
 8009bba:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 16) & 0xFF;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	0c1a      	lsrs	r2, r3, #16
 8009bc0:	79fb      	ldrb	r3, [r7, #7]
 8009bc2:	1c59      	adds	r1, r3, #1
 8009bc4:	71f9      	strb	r1, [r7, #7]
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	440b      	add	r3, r1
 8009bcc:	b2d2      	uxtb	r2, r2
 8009bce:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 8)  & 0xFF;
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	0a1a      	lsrs	r2, r3, #8
 8009bd4:	79fb      	ldrb	r3, [r7, #7]
 8009bd6:	1c59      	adds	r1, r3, #1
 8009bd8:	71f9      	strb	r1, [r7, #7]
 8009bda:	4619      	mov	r1, r3
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	440b      	add	r3, r1
 8009be0:	b2d2      	uxtb	r2, r2
 8009be2:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 0)  & 0xFF;
 8009be4:	79fb      	ldrb	r3, [r7, #7]
 8009be6:	1c5a      	adds	r2, r3, #1
 8009be8:	71fa      	strb	r2, [r7, #7]
 8009bea:	461a      	mov	r2, r3
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	4413      	add	r3, r2
 8009bf0:	683a      	ldr	r2, [r7, #0]
 8009bf2:	b2d2      	uxtb	r2, r2
 8009bf4:	701a      	strb	r2, [r3, #0]

    // CRC: sum of bytes [0..10] mod 256
    notif[idx] = ble_calculate_chksum(notif, 11);
 8009bf6:	79fb      	ldrb	r3, [r7, #7]
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	18d4      	adds	r4, r2, r3
 8009bfc:	210b      	movs	r1, #11
 8009bfe:	68b8      	ldr	r0, [r7, #8]
 8009c00:	f7ff fb35 	bl	800926e <ble_calculate_chksum>
 8009c04:	4603      	mov	r3, r0
 8009c06:	7023      	strb	r3, [r4, #0]

    p_ble_notify->Status=Notify_Pending;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	701a      	strb	r2, [r3, #0]
}
 8009c0e:	bf00      	nop
 8009c10:	3714      	adds	r7, #20
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd90      	pop	{r4, r7, pc}
 8009c16:	bf00      	nop
 8009c18:	60d4a000 	.word	0x60d4a000

08009c1c <send_dummy_all_data>:
/**
 * @brief  Generate and send dummy “all data” notifications over BLE.
 *         Splits into two notifications: [HR+SpO₂], then [Temp+Pressure].
 */
static void send_dummy_all_data(void)
{
 8009c1c:	b590      	push	{r4, r7, lr}
 8009c1e:	b087      	sub	sp, #28
 8009c20:	af00      	add	r7, sp, #0
    // First packet: HR (0x01) + SpO₂ (0x02) = data_type 0x03
//    {
		Custom_BLE_Notify_interface_t* p_ble_notify =ble_notify_interface_get();
 8009c22:	f7ff fb59 	bl	80092d8 <ble_notify_interface_get>
 8009c26:	6178      	str	r0, [r7, #20]
		uint8_t *notif = p_ble_notify->pck;
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	613b      	str	r3, [r7, #16]
        uint8_t idx1 = 0;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	73fb      	strb	r3, [r7, #15]
        notif[idx1++] = 0x04;  // DATA_TYPE
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
 8009c34:	1c5a      	adds	r2, r3, #1
 8009c36:	73fa      	strb	r2, [r7, #15]
 8009c38:	461a      	mov	r2, r3
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	2204      	movs	r2, #4
 8009c40:	701a      	strb	r2, [r3, #0]
        notif[idx1++] = 0x05;  // LEN
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
 8009c44:	1c5a      	adds	r2, r3, #1
 8009c46:	73fa      	strb	r2, [r7, #15]
 8009c48:	461a      	mov	r2, r3
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	2205      	movs	r2, #5
 8009c50:	701a      	strb	r2, [r3, #0]

        uint16_t dummy_hr = 70;
 8009c52:	2346      	movs	r3, #70	@ 0x46
 8009c54:	81bb      	strh	r3, [r7, #12]
        uint16_t dummy_spo2 = 98;
 8009c56:	2362      	movs	r3, #98	@ 0x62
 8009c58:	817b      	strh	r3, [r7, #10]

        notif[idx1++] = 0x00;  // Padding
 8009c5a:	7bfb      	ldrb	r3, [r7, #15]
 8009c5c:	1c5a      	adds	r2, r3, #1
 8009c5e:	73fa      	strb	r2, [r7, #15]
 8009c60:	461a      	mov	r2, r3
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	4413      	add	r3, r2
 8009c66:	2200      	movs	r2, #0
 8009c68:	701a      	strb	r2, [r3, #0]
        notif[idx1++] = (dummy_hr >> 8) & 0xFF;
 8009c6a:	89bb      	ldrh	r3, [r7, #12]
 8009c6c:	0a1b      	lsrs	r3, r3, #8
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	7bfb      	ldrb	r3, [r7, #15]
 8009c72:	1c59      	adds	r1, r3, #1
 8009c74:	73f9      	strb	r1, [r7, #15]
 8009c76:	4619      	mov	r1, r3
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	440b      	add	r3, r1
 8009c7c:	b2d2      	uxtb	r2, r2
 8009c7e:	701a      	strb	r2, [r3, #0]
        notif[idx1++] = (dummy_hr >> 0) & 0xFF;
 8009c80:	7bfb      	ldrb	r3, [r7, #15]
 8009c82:	1c5a      	adds	r2, r3, #1
 8009c84:	73fa      	strb	r2, [r7, #15]
 8009c86:	461a      	mov	r2, r3
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	89ba      	ldrh	r2, [r7, #12]
 8009c8e:	b2d2      	uxtb	r2, r2
 8009c90:	701a      	strb	r2, [r3, #0]
        notif[idx1++] = (dummy_spo2 >> 8) & 0xFF;
 8009c92:	897b      	ldrh	r3, [r7, #10]
 8009c94:	0a1b      	lsrs	r3, r3, #8
 8009c96:	b29a      	uxth	r2, r3
 8009c98:	7bfb      	ldrb	r3, [r7, #15]
 8009c9a:	1c59      	adds	r1, r3, #1
 8009c9c:	73f9      	strb	r1, [r7, #15]
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	440b      	add	r3, r1
 8009ca4:	b2d2      	uxtb	r2, r2
 8009ca6:	701a      	strb	r2, [r3, #0]
        notif[idx1++] = (dummy_spo2 >> 0) & 0xFF;
 8009ca8:	7bfb      	ldrb	r3, [r7, #15]
 8009caa:	1c5a      	adds	r2, r3, #1
 8009cac:	73fa      	strb	r2, [r7, #15]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	897a      	ldrh	r2, [r7, #10]
 8009cb6:	b2d2      	uxtb	r2, r2
 8009cb8:	701a      	strb	r2, [r3, #0]


        uint32_t ts = 0x60D4A000;
 8009cba:	4b1c      	ldr	r3, [pc, #112]	@ (8009d2c <send_dummy_all_data+0x110>)
 8009cbc:	607b      	str	r3, [r7, #4]
        notif[idx1++] = (ts >> 24) & 0xFF;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	0e1a      	lsrs	r2, r3, #24
 8009cc2:	7bfb      	ldrb	r3, [r7, #15]
 8009cc4:	1c59      	adds	r1, r3, #1
 8009cc6:	73f9      	strb	r1, [r7, #15]
 8009cc8:	4619      	mov	r1, r3
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	440b      	add	r3, r1
 8009cce:	b2d2      	uxtb	r2, r2
 8009cd0:	701a      	strb	r2, [r3, #0]
        notif[idx1++] = (ts >> 16) & 0xFF;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	0c1a      	lsrs	r2, r3, #16
 8009cd6:	7bfb      	ldrb	r3, [r7, #15]
 8009cd8:	1c59      	adds	r1, r3, #1
 8009cda:	73f9      	strb	r1, [r7, #15]
 8009cdc:	4619      	mov	r1, r3
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	440b      	add	r3, r1
 8009ce2:	b2d2      	uxtb	r2, r2
 8009ce4:	701a      	strb	r2, [r3, #0]
        notif[idx1++] = (ts >> 8)  & 0xFF;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	0a1a      	lsrs	r2, r3, #8
 8009cea:	7bfb      	ldrb	r3, [r7, #15]
 8009cec:	1c59      	adds	r1, r3, #1
 8009cee:	73f9      	strb	r1, [r7, #15]
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	440b      	add	r3, r1
 8009cf6:	b2d2      	uxtb	r2, r2
 8009cf8:	701a      	strb	r2, [r3, #0]
        notif[idx1++] = (ts >> 0)  & 0xFF;
 8009cfa:	7bfb      	ldrb	r3, [r7, #15]
 8009cfc:	1c5a      	adds	r2, r3, #1
 8009cfe:	73fa      	strb	r2, [r7, #15]
 8009d00:	461a      	mov	r2, r3
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	4413      	add	r3, r2
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	b2d2      	uxtb	r2, r2
 8009d0a:	701a      	strb	r2, [r3, #0]

        notif[idx1] = ble_calculate_chksum(notif, 11);
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
 8009d0e:	693a      	ldr	r2, [r7, #16]
 8009d10:	18d4      	adds	r4, r2, r3
 8009d12:	210b      	movs	r1, #11
 8009d14:	6938      	ldr	r0, [r7, #16]
 8009d16:	f7ff faaa 	bl	800926e <ble_calculate_chksum>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	7023      	strb	r3, [r4, #0]
        p_ble_notify->Status=Notify_Pending;
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	2201      	movs	r2, #1
 8009d22:	701a      	strb	r2, [r3, #0]

}
 8009d24:	bf00      	nop
 8009d26:	371c      	adds	r7, #28
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd90      	pop	{r4, r7, pc}
 8009d2c:	60d4a000 	.word	0x60d4a000

08009d30 <data_handler_req_hr_spo2>:

/**
 * @brief  Request current Heart Rate & SpO₂ + timestamp from the other MCU.
 */
void data_handler_req_hr_spo2(void)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	af00      	add	r7, sp, #0
#ifdef BLE_DEBUG_DUMMY_DATA
    send_dummy_hr_spo2();
 8009d34:	f7ff fd72 	bl	800981c <send_dummy_hr_spo2>
#else
    uint8_t params[4] = {0x00, 0x00, 0x00, 0x00};
    uart_handler_get()->send_cmd(CMD_REQ_HR_SPO2_DATA, params, 4);
#endif
}
 8009d38:	bf00      	nop
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <data_handler_req_temp>:
/**
 * @brief  Request Temperature.
 * @param  temp_type: 0x01 = Body, 0x02 = Environmental, 0x03 = Both
 */
void data_handler_req_temp(uint8_t temp_type)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	4603      	mov	r3, r0
 8009d44:	71fb      	strb	r3, [r7, #7]
#ifdef BLE_DEBUG_DUMMY_DATA
    send_dummy_temp(temp_type);
 8009d46:	79fb      	ldrb	r3, [r7, #7]
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7ff fdf3 	bl	8009934 <send_dummy_temp>
#else
    uint8_t params[4] = {temp_type, 0x00, 0x00, 0x00};
    uart_handler_get()->send_cmd(CMD_REQ_TEMP_DATA, params, 4);
#endif
}
 8009d4e:	bf00      	nop
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <data_handler_req_pressure>:

/**
 * @brief  Request Pressure.
 */
void data_handler_req_pressure(void)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	af00      	add	r7, sp, #0
#ifdef BLE_DEBUG_DUMMY_DATA
    send_dummy_pressure();
 8009d5a:	f7ff fed9 	bl	8009b10 <send_dummy_pressure>
#else
    uint8_t params[4] = {0x00, 0x00, 0x00, 0x00};
    uart_handler_get()->send_cmd(CMD_REQ_PRESSURE_DATA, params, 4);
#endif
}
 8009d5e:	bf00      	nop
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <data_handler_req_all_data>:

/**
 * @brief  Request all sensor data (HR, SpO₂, Temp, Pressure).
 */
void data_handler_req_all_data(void)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	af00      	add	r7, sp, #0
#ifdef BLE_DEBUG_DUMMY_DATA
    send_dummy_all_data();
 8009d66:	f7ff ff59 	bl	8009c1c <send_dummy_all_data>
#else
    uint8_t params[4] = {0x00, 0x00, 0x00, 0x00};
    uart_handler_get()->send_cmd(CMD_REQ_ALL_DATA, params, 4);
#endif
}
 8009d6a:	bf00      	nop
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <data_handler_req_historical_data>:
/**
 * @brief  Request historical data starting from a Unix timestamp.
 * @param  start_time: 32-bit Unix timestamp (big-endian).
 */
void data_handler_req_historical_data(uint32_t start_time)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b084      	sub	sp, #16
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
	uint8_t params[4];
	params[0] = (start_time >> 24) & 0xFF;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	0e1b      	lsrs	r3, r3, #24
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	733b      	strb	r3, [r7, #12]
	params[1] = (start_time >> 16) & 0xFF;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	0c1b      	lsrs	r3, r3, #16
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	737b      	strb	r3, [r7, #13]
	params[2] = (start_time >> 8) & 0xFF;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	0a1b      	lsrs	r3, r3, #8
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	73bb      	strb	r3, [r7, #14]
	params[3] = (start_time >> 0) & 0xFF;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	73fb      	strb	r3, [r7, #15]

	uart_handler_get()->send_cmd(CMD_REQ_HISTORICAL_DATA, params, 4);
 8009d94:	f7f8 f880 	bl	8001e98 <uart_handler_get>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	695b      	ldr	r3, [r3, #20]
 8009d9c:	f107 010c 	add.w	r1, r7, #12
 8009da0:	2204      	movs	r2, #4
 8009da2:	2010      	movs	r0, #16
 8009da4:	4798      	blx	r3

//    uart_send_frame(0x10, params);
//    uart_receive_response();
    // Note: might require multiple responses if there are many historical records.
}
 8009da6:	bf00      	nop
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <data_handler_req_set_unix_time>:
/**
 * @brief  Send current Unix time to the other MCU.
 * @param  unix_time: 32-bit Unix time (big-endian).
 */
void data_handler_req_set_unix_time(uint32_t unix_time)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b084      	sub	sp, #16
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
	uint8_t params[4];
	params[0] = (unix_time >> 24) & 0xFF;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	0e1b      	lsrs	r3, r3, #24
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	733b      	strb	r3, [r7, #12]
	params[1] = (unix_time >> 16) & 0xFF;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	0c1b      	lsrs	r3, r3, #16
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	737b      	strb	r3, [r7, #13]
	params[2] = (unix_time >> 8) & 0xFF;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	0a1b      	lsrs	r3, r3, #8
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	73bb      	strb	r3, [r7, #14]
	params[3] = (unix_time >> 0) & 0xFF;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	73fb      	strb	r3, [r7, #15]

	uart_handler_get()->send_cmd(CMD_SET_UNIX_TIME, params, 4);
 8009dd4:	f7f8 f860 	bl	8001e98 <uart_handler_get>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	695b      	ldr	r3, [r3, #20]
 8009ddc:	f107 010c 	add.w	r1, r7, #12
 8009de0:	2204      	movs	r2, #4
 8009de2:	2020      	movs	r0, #32
 8009de4:	4798      	blx	r3
}
 8009de6:	bf00      	nop
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <data_handler_req_set_sensor_config>:
 * @brief  Configure a sensor (sampling rate or future features).
 * @param  sensor_type: 1-byte ID (same as BLE data type).
 * @param  config_val:  1-byte configuration value (TBD).
 */
void data_handler_req_set_sensor_config(uint8_t sensor_type, uint8_t config_val)
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b084      	sub	sp, #16
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	4603      	mov	r3, r0
 8009df6:	460a      	mov	r2, r1
 8009df8:	71fb      	strb	r3, [r7, #7]
 8009dfa:	4613      	mov	r3, r2
 8009dfc:	71bb      	strb	r3, [r7, #6]
	uint8_t params[4] = { sensor_type, config_val, 0x00, 0x00 };
 8009dfe:	79fb      	ldrb	r3, [r7, #7]
 8009e00:	733b      	strb	r3, [r7, #12]
 8009e02:	79bb      	ldrb	r3, [r7, #6]
 8009e04:	737b      	strb	r3, [r7, #13]
 8009e06:	2300      	movs	r3, #0
 8009e08:	73bb      	strb	r3, [r7, #14]
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	73fb      	strb	r3, [r7, #15]
	uart_handler_get()->send_cmd(CMD_SET_SENSOR_CONFIG, params, 4);
 8009e0e:	f7f8 f843 	bl	8001e98 <uart_handler_get>
 8009e12:	4603      	mov	r3, r0
 8009e14:	695b      	ldr	r3, [r3, #20]
 8009e16:	f107 010c 	add.w	r1, r7, #12
 8009e1a:	2204      	movs	r2, #4
 8009e1c:	2030      	movs	r0, #48	@ 0x30
 8009e1e:	4798      	blx	r3
//    uart_send_frame(0x30, params);
//    uart_receive_response();
}
 8009e20:	bf00      	nop
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <data_handler_req_start_stream>:
/**
 * @brief  Start live data streaming.
 * @param  stream_mask: bitmask (e.g., 0x1F = HR | SpO₂ | Temp | Pressure).
 */
void data_handler_req_start_stream(uint8_t stream_mask)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	4603      	mov	r3, r0
 8009e30:	71fb      	strb	r3, [r7, #7]
	uint8_t params[4] = { stream_mask, 0x00, 0x00, 0x00 };
 8009e32:	79fb      	ldrb	r3, [r7, #7]
 8009e34:	733b      	strb	r3, [r7, #12]
 8009e36:	2300      	movs	r3, #0
 8009e38:	737b      	strb	r3, [r7, #13]
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	73bb      	strb	r3, [r7, #14]
 8009e3e:	2300      	movs	r3, #0
 8009e40:	73fb      	strb	r3, [r7, #15]
	uart_handler_get()->send_cmd(CMD_START_STREAM, params, 4);
 8009e42:	f7f8 f829 	bl	8001e98 <uart_handler_get>
 8009e46:	4603      	mov	r3, r0
 8009e48:	695b      	ldr	r3, [r3, #20]
 8009e4a:	f107 010c 	add.w	r1, r7, #12
 8009e4e:	2204      	movs	r2, #4
 8009e50:	2040      	movs	r0, #64	@ 0x40
 8009e52:	4798      	blx	r3
//    uart_send_frame(0x40, params);
//    // The secondary MCU will begin sending periodic frames:
//    // [START][DATA_TYPE][LEN][DATA...][TIMESTAMP][CRC]
//    uart_receive_response();
}
 8009e54:	bf00      	nop
 8009e56:	3710      	adds	r7, #16
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <data_handler_req_stop_stream>:

/**
 * @brief  Stop any ongoing live streaming.
 */
void data_handler_req_stop_stream(void)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
	uint8_t params[4] = {0x00, 0x00, 0x00, 0x00};
 8009e62:	2300      	movs	r3, #0
 8009e64:	607b      	str	r3, [r7, #4]
	uart_handler_get()->send_cmd(CMD_STOP_STREAM, params, 4);
 8009e66:	f7f8 f817 	bl	8001e98 <uart_handler_get>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	695b      	ldr	r3, [r3, #20]
 8009e6e:	1d39      	adds	r1, r7, #4
 8009e70:	2204      	movs	r2, #4
 8009e72:	2041      	movs	r0, #65	@ 0x41
 8009e74:	4798      	blx	r3
//    uart_send_frame(0x41, params);
//    uart_receive_response();
}
 8009e76:	bf00      	nop
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
	...

08009e80 <data_handler_Init>:
	    p_ble_notify->Status = Notify_Pending;


}

void data_handler_Init() {
 8009e80:	b580      	push	{r7, lr}
 8009e82:	af00      	add	r7, sp, #0

    data_handler = (Data_Handler_t *)malloc(sizeof(Data_Handler_t));
 8009e84:	2008      	movs	r0, #8
 8009e86:	f000 fd45 	bl	800a914 <malloc>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	4b08      	ldr	r3, [pc, #32]	@ (8009eb0 <data_handler_Init+0x30>)
 8009e90:	601a      	str	r2, [r3, #0]
    data_handler->payload=data_handler_buffer;
 8009e92:	4b07      	ldr	r3, [pc, #28]	@ (8009eb0 <data_handler_Init+0x30>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a07      	ldr	r2, [pc, #28]	@ (8009eb4 <data_handler_Init+0x34>)
 8009e98:	605a      	str	r2, [r3, #4]

    memset(data_handler->payload, 0, DATA_HANDLER_PAYLOAD_LENGHT);
 8009e9a:	4b05      	ldr	r3, [pc, #20]	@ (8009eb0 <data_handler_Init+0x30>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	220a      	movs	r2, #10
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f000 fdeb 	bl	800aa80 <memset>

}
 8009eaa:	bf00      	nop
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	20000620 	.word	0x20000620
 8009eb4:	20000624 	.word	0x20000624

08009eb8 <LL_PWR_EnableBootC2>:
{
 8009eb8:	b480      	push	{r7}
 8009eba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8009ebc:	4b05      	ldr	r3, [pc, #20]	@ (8009ed4 <LL_PWR_EnableBootC2+0x1c>)
 8009ebe:	68db      	ldr	r3, [r3, #12]
 8009ec0:	4a04      	ldr	r2, [pc, #16]	@ (8009ed4 <LL_PWR_EnableBootC2+0x1c>)
 8009ec2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ec6:	60d3      	str	r3, [r2, #12]
}
 8009ec8:	bf00      	nop
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	58000400 	.word	0x58000400

08009ed8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8009ee0:	4b06      	ldr	r3, [pc, #24]	@ (8009efc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009ee2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8009ee6:	4905      	ldr	r1, [pc, #20]	@ (8009efc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8009ef0:	bf00      	nop
 8009ef2:	370c      	adds	r7, #12
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr
 8009efc:	58000800 	.word	0x58000800

08009f00 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b083      	sub	sp, #12
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009f08:	4b05      	ldr	r3, [pc, #20]	@ (8009f20 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009f0a:	6a1a      	ldr	r2, [r3, #32]
 8009f0c:	4904      	ldr	r1, [pc, #16]	@ (8009f20 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	620b      	str	r3, [r1, #32]
}
 8009f14:	bf00      	nop
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	58000800 	.word	0x58000800

08009f24 <LL_AHB3_GRP1_EnableClock>:
{
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8009f2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009f30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8009f3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009f40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4013      	ands	r3, r2
 8009f46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009f48:	68fb      	ldr	r3, [r7, #12]
}
 8009f4a:	bf00      	nop
 8009f4c:	3714      	adds	r7, #20
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr

08009f56 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8009f56:	b480      	push	{r7}
 8009f58:	b085      	sub	sp, #20
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8009f5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009f62:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8009f66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8009f72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009f76:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009f80:	68fb      	ldr	r3, [r7, #12]
}
 8009f82:	bf00      	nop
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr

08009f8e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8009f8e:	b480      	push	{r7}
 8009f90:	b083      	sub	sp, #12
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	601a      	str	r2, [r3, #0]
}
 8009fa2:	bf00      	nop
 8009fa4:	370c      	adds	r7, #12
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr

08009fae <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8009fae:	b480      	push	{r7}
 8009fb0:	b083      	sub	sp, #12
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f043 0201 	orr.w	r2, r3, #1
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	601a      	str	r2, [r3, #0]
}
 8009fc2:	bf00      	nop
 8009fc4:	370c      	adds	r7, #12
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr

08009fce <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009fce:	b480      	push	{r7}
 8009fd0:	b083      	sub	sp, #12
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
 8009fd6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	685a      	ldr	r2, [r3, #4]
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	041b      	lsls	r3, r3, #16
 8009fe0:	43db      	mvns	r3, r3
 8009fe2:	401a      	ands	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	605a      	str	r2, [r3, #4]
}
 8009fe8:	bf00      	nop
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	685a      	ldr	r2, [r3, #4]
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	041b      	lsls	r3, r3, #16
 800a006:	431a      	orrs	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	605a      	str	r2, [r3, #4]
}
 800a00c:	bf00      	nop
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	685a      	ldr	r2, [r3, #4]
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	43db      	mvns	r3, r3
 800a02a:	401a      	ands	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	605a      	str	r2, [r3, #4]
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	683a      	ldr	r2, [r7, #0]
 800a04a:	609a      	str	r2, [r3, #8]
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	041a      	lsls	r2, r3, #16
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	609a      	str	r2, [r3, #8]
}
 800a06a:	bf00      	nop
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800a076:	b480      	push	{r7}
 800a078:	b083      	sub	sp, #12
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	68da      	ldr	r2, [r3, #12]
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	4013      	ands	r3, r2
 800a088:	683a      	ldr	r2, [r7, #0]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d101      	bne.n	800a092 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800a08e:	2301      	movs	r3, #1
 800a090:	e000      	b.n	800a094 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	69da      	ldr	r2, [r3, #28]
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	4013      	ands	r3, r2
 800a0b2:	683a      	ldr	r2, [r7, #0]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d101      	bne.n	800a0bc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e000      	b.n	800a0be <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800a0bc:	2300      	movs	r3, #0
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	370c      	adds	r7, #12
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
	...

0800a0cc <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800a0d0:	2102      	movs	r1, #2
 800a0d2:	4818      	ldr	r0, [pc, #96]	@ (800a134 <HW_IPCC_Rx_Handler+0x68>)
 800a0d4:	f7ff ffe4 	bl	800a0a0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d008      	beq.n	800a0f0 <HW_IPCC_Rx_Handler+0x24>
 800a0de:	4b15      	ldr	r3, [pc, #84]	@ (800a134 <HW_IPCC_Rx_Handler+0x68>)
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	f003 0302 	and.w	r3, r3, #2
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d102      	bne.n	800a0f0 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800a0ea:	f000 f925 	bl	800a338 <HW_IPCC_SYS_EvtHandler>
 800a0ee:	e01e      	b.n	800a12e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800a0f0:	2101      	movs	r1, #1
 800a0f2:	4810      	ldr	r0, [pc, #64]	@ (800a134 <HW_IPCC_Rx_Handler+0x68>)
 800a0f4:	f7ff ffd4 	bl	800a0a0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d008      	beq.n	800a110 <HW_IPCC_Rx_Handler+0x44>
 800a0fe:	4b0d      	ldr	r3, [pc, #52]	@ (800a134 <HW_IPCC_Rx_Handler+0x68>)
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	f003 0301 	and.w	r3, r3, #1
 800a106:	2b00      	cmp	r3, #0
 800a108:	d102      	bne.n	800a110 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800a10a:	f000 f899 	bl	800a240 <HW_IPCC_BLE_EvtHandler>
 800a10e:	e00e      	b.n	800a12e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800a110:	2108      	movs	r1, #8
 800a112:	4808      	ldr	r0, [pc, #32]	@ (800a134 <HW_IPCC_Rx_Handler+0x68>)
 800a114:	f7ff ffc4 	bl	800a0a0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d008      	beq.n	800a130 <HW_IPCC_Rx_Handler+0x64>
 800a11e:	4b05      	ldr	r3, [pc, #20]	@ (800a134 <HW_IPCC_Rx_Handler+0x68>)
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	f003 0308 	and.w	r3, r3, #8
 800a126:	2b00      	cmp	r3, #0
 800a128:	d102      	bne.n	800a130 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800a12a:	f000 f97d 	bl	800a428 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800a12e:	bf00      	nop
 800a130:	bf00      	nop
}
 800a132:	bd80      	pop	{r7, pc}
 800a134:	58000c00 	.word	0x58000c00

0800a138 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800a13c:	2102      	movs	r1, #2
 800a13e:	4818      	ldr	r0, [pc, #96]	@ (800a1a0 <HW_IPCC_Tx_Handler+0x68>)
 800a140:	f7ff ff99 	bl	800a076 <LL_C1_IPCC_IsActiveFlag_CHx>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d108      	bne.n	800a15c <HW_IPCC_Tx_Handler+0x24>
 800a14a:	4b15      	ldr	r3, [pc, #84]	@ (800a1a0 <HW_IPCC_Tx_Handler+0x68>)
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a152:	2b00      	cmp	r3, #0
 800a154:	d102      	bne.n	800a15c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800a156:	f000 f8d3 	bl	800a300 <HW_IPCC_SYS_CmdEvtHandler>
 800a15a:	e01e      	b.n	800a19a <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800a15c:	2108      	movs	r1, #8
 800a15e:	4810      	ldr	r0, [pc, #64]	@ (800a1a0 <HW_IPCC_Tx_Handler+0x68>)
 800a160:	f7ff ff89 	bl	800a076 <LL_C1_IPCC_IsActiveFlag_CHx>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d108      	bne.n	800a17c <HW_IPCC_Tx_Handler+0x44>
 800a16a:	4b0d      	ldr	r3, [pc, #52]	@ (800a1a0 <HW_IPCC_Tx_Handler+0x68>)
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a172:	2b00      	cmp	r3, #0
 800a174:	d102      	bne.n	800a17c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800a176:	f000 f919 	bl	800a3ac <HW_IPCC_MM_FreeBufHandler>
 800a17a:	e00e      	b.n	800a19a <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800a17c:	2120      	movs	r1, #32
 800a17e:	4808      	ldr	r0, [pc, #32]	@ (800a1a0 <HW_IPCC_Tx_Handler+0x68>)
 800a180:	f7ff ff79 	bl	800a076 <LL_C1_IPCC_IsActiveFlag_CHx>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d108      	bne.n	800a19c <HW_IPCC_Tx_Handler+0x64>
 800a18a:	4b05      	ldr	r3, [pc, #20]	@ (800a1a0 <HW_IPCC_Tx_Handler+0x68>)
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a192:	2b00      	cmp	r3, #0
 800a194:	d102      	bne.n	800a19c <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800a196:	f000 f85f 	bl	800a258 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800a19a:	bf00      	nop
 800a19c:	bf00      	nop
}
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	58000c00 	.word	0x58000c00

0800a1a4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800a1a8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a1ac:	f7ff fed3 	bl	8009f56 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800a1b0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a1b4:	f7ff fea4 	bl	8009f00 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800a1b8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a1bc:	f7ff fe8c 	bl	8009ed8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800a1c0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800a1c2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800a1c4:	f7ff fe78 	bl	8009eb8 <LL_PWR_EnableBootC2>

  return;
 800a1c8:	bf00      	nop
}
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800a1d0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a1d4:	f7ff fea6 	bl	8009f24 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800a1d8:	4806      	ldr	r0, [pc, #24]	@ (800a1f4 <HW_IPCC_Init+0x28>)
 800a1da:	f7ff fee8 	bl	8009fae <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800a1de:	4805      	ldr	r0, [pc, #20]	@ (800a1f4 <HW_IPCC_Init+0x28>)
 800a1e0:	f7ff fed5 	bl	8009f8e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800a1e4:	202c      	movs	r0, #44	@ 0x2c
 800a1e6:	f7f8 f878 	bl	80022da <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800a1ea:	202d      	movs	r0, #45	@ 0x2d
 800a1ec:	f7f8 f875 	bl	80022da <HAL_NVIC_EnableIRQ>

  return;
 800a1f0:	bf00      	nop
}
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	58000c00 	.word	0x58000c00

0800a1f8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1fe:	f3ef 8310 	mrs	r3, PRIMASK
 800a202:	607b      	str	r3, [r7, #4]
  return(result);
 800a204:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a206:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a208:	b672      	cpsid	i
}
 800a20a:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a20c:	2101      	movs	r1, #1
 800a20e:	4806      	ldr	r0, [pc, #24]	@ (800a228 <HW_IPCC_BLE_Init+0x30>)
 800a210:	f7ff ff02 	bl	800a018 <LL_C1_IPCC_EnableReceiveChannel>
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	f383 8810 	msr	PRIMASK, r3
}
 800a21e:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800a220:	bf00      	nop
}
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	58000c00 	.word	0x58000c00

0800a22c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800a230:	2101      	movs	r1, #1
 800a232:	4802      	ldr	r0, [pc, #8]	@ (800a23c <HW_IPCC_BLE_SendCmd+0x10>)
 800a234:	f7ff ff10 	bl	800a058 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a238:	bf00      	nop
}
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	58000c00 	.word	0x58000c00

0800a240 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800a240:	b580      	push	{r7, lr}
 800a242:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800a244:	f7fe fa60 	bl	8008708 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a248:	2101      	movs	r1, #1
 800a24a:	4802      	ldr	r0, [pc, #8]	@ (800a254 <HW_IPCC_BLE_EvtHandler+0x14>)
 800a24c:	f7ff fef6 	bl	800a03c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a250:	bf00      	nop
}
 800a252:	bd80      	pop	{r7, pc}
 800a254:	58000c00 	.word	0x58000c00

0800a258 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a25e:	f3ef 8310 	mrs	r3, PRIMASK
 800a262:	607b      	str	r3, [r7, #4]
  return(result);
 800a264:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a266:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a268:	b672      	cpsid	i
}
 800a26a:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800a26c:	2120      	movs	r1, #32
 800a26e:	4807      	ldr	r0, [pc, #28]	@ (800a28c <HW_IPCC_BLE_AclDataEvtHandler+0x34>)
 800a270:	f7ff fec0 	bl	8009ff4 <LL_C1_IPCC_DisableTransmitChannel>
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	f383 8810 	msr	PRIMASK, r3
}
 800a27e:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_BLE_AclDataAckNot();
 800a280:	f7fe fa72 	bl	8008768 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800a284:	bf00      	nop
}
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	58000c00 	.word	0x58000c00

0800a290 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a296:	f3ef 8310 	mrs	r3, PRIMASK
 800a29a:	607b      	str	r3, [r7, #4]
  return(result);
 800a29c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a29e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2a0:	b672      	cpsid	i
}
 800a2a2:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a2a4:	2102      	movs	r1, #2
 800a2a6:	4806      	ldr	r0, [pc, #24]	@ (800a2c0 <HW_IPCC_SYS_Init+0x30>)
 800a2a8:	f7ff feb6 	bl	800a018 <LL_C1_IPCC_EnableReceiveChannel>
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	f383 8810 	msr	PRIMASK, r3
}
 800a2b6:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800a2b8:	bf00      	nop
}
 800a2ba:	3710      	adds	r7, #16
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	58000c00 	.word	0x58000c00

0800a2c4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a2ca:	2102      	movs	r1, #2
 800a2cc:	480b      	ldr	r0, [pc, #44]	@ (800a2fc <HW_IPCC_SYS_SendCmd+0x38>)
 800a2ce:	f7ff fec3 	bl	800a058 <LL_C1_IPCC_SetFlag_CHx>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2d2:	f3ef 8310 	mrs	r3, PRIMASK
 800a2d6:	607b      	str	r3, [r7, #4]
  return(result);
 800a2d8:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a2da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2dc:	b672      	cpsid	i
}
 800a2de:	bf00      	nop
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a2e0:	2102      	movs	r1, #2
 800a2e2:	4806      	ldr	r0, [pc, #24]	@ (800a2fc <HW_IPCC_SYS_SendCmd+0x38>)
 800a2e4:	f7ff fe73 	bl	8009fce <LL_C1_IPCC_EnableTransmitChannel>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	f383 8810 	msr	PRIMASK, r3
}
 800a2f2:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800a2f4:	bf00      	nop
}
 800a2f6:	3710      	adds	r7, #16
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	58000c00 	.word	0x58000c00

0800a300 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a306:	f3ef 8310 	mrs	r3, PRIMASK
 800a30a:	607b      	str	r3, [r7, #4]
  return(result);
 800a30c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a30e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a310:	b672      	cpsid	i
}
 800a312:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a314:	2102      	movs	r1, #2
 800a316:	4807      	ldr	r0, [pc, #28]	@ (800a334 <HW_IPCC_SYS_CmdEvtHandler+0x34>)
 800a318:	f7ff fe6c 	bl	8009ff4 <LL_C1_IPCC_DisableTransmitChannel>
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	f383 8810 	msr	PRIMASK, r3
}
 800a326:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_SYS_CmdEvtNot();
 800a328:	f7fe fa6e 	bl	8008808 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800a32c:	bf00      	nop
}
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	58000c00 	.word	0x58000c00

0800a338 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800a33c:	f7fe fa7a 	bl	8008834 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a340:	2102      	movs	r1, #2
 800a342:	4802      	ldr	r0, [pc, #8]	@ (800a34c <HW_IPCC_SYS_EvtHandler+0x14>)
 800a344:	f7ff fe7a 	bl	800a03c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a348:	bf00      	nop
}
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	58000c00 	.word	0x58000c00

0800a350 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800a358:	2108      	movs	r1, #8
 800a35a:	4812      	ldr	r0, [pc, #72]	@ (800a3a4 <HW_IPCC_MM_SendFreeBuf+0x54>)
 800a35c:	f7ff fe8b 	bl	800a076 <LL_C1_IPCC_IsActiveFlag_CHx>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	d013      	beq.n	800a38e <HW_IPCC_MM_SendFreeBuf+0x3e>
  {
    FreeBufCb = cb;
 800a366:	4a10      	ldr	r2, [pc, #64]	@ (800a3a8 <HW_IPCC_MM_SendFreeBuf+0x58>)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a36c:	f3ef 8310 	mrs	r3, PRIMASK
 800a370:	60fb      	str	r3, [r7, #12]
  return(result);
 800a372:	68fb      	ldr	r3, [r7, #12]
    UTILS_ENTER_CRITICAL_SECTION();
 800a374:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a376:	b672      	cpsid	i
}
 800a378:	bf00      	nop
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a37a:	2108      	movs	r1, #8
 800a37c:	4809      	ldr	r0, [pc, #36]	@ (800a3a4 <HW_IPCC_MM_SendFreeBuf+0x54>)
 800a37e:	f7ff fe26 	bl	8009fce <LL_C1_IPCC_EnableTransmitChannel>
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	f383 8810 	msr	PRIMASK, r3
}
 800a38c:	e005      	b.n	800a39a <HW_IPCC_MM_SendFreeBuf+0x4a>
    UTILS_EXIT_CRITICAL_SECTION();
  }
  else
  {
    cb();
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4798      	blx	r3

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a392:	2108      	movs	r1, #8
 800a394:	4803      	ldr	r0, [pc, #12]	@ (800a3a4 <HW_IPCC_MM_SendFreeBuf+0x54>)
 800a396:	f7ff fe5f 	bl	800a058 <LL_C1_IPCC_SetFlag_CHx>
  }

  return;
 800a39a:	bf00      	nop
}
 800a39c:	3718      	adds	r7, #24
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	58000c00 	.word	0x58000c00
 800a3a8:	20000630 	.word	0x20000630

0800a3ac <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3b2:	f3ef 8310 	mrs	r3, PRIMASK
 800a3b6:	607b      	str	r3, [r7, #4]
  return(result);
 800a3b8:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a3ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a3bc:	b672      	cpsid	i
}
 800a3be:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a3c0:	2108      	movs	r1, #8
 800a3c2:	480a      	ldr	r0, [pc, #40]	@ (800a3ec <HW_IPCC_MM_FreeBufHandler+0x40>)
 800a3c4:	f7ff fe16 	bl	8009ff4 <LL_C1_IPCC_DisableTransmitChannel>
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	f383 8810 	msr	PRIMASK, r3
}
 800a3d2:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  FreeBufCb();
 800a3d4:	4b06      	ldr	r3, [pc, #24]	@ (800a3f0 <HW_IPCC_MM_FreeBufHandler+0x44>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a3da:	2108      	movs	r1, #8
 800a3dc:	4803      	ldr	r0, [pc, #12]	@ (800a3ec <HW_IPCC_MM_FreeBufHandler+0x40>)
 800a3de:	f7ff fe3b 	bl	800a058 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a3e2:	bf00      	nop
}
 800a3e4:	3710      	adds	r7, #16
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	58000c00 	.word	0x58000c00
 800a3f0:	20000630 	.word	0x20000630

0800a3f4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3fa:	f3ef 8310 	mrs	r3, PRIMASK
 800a3fe:	607b      	str	r3, [r7, #4]
  return(result);
 800a400:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a402:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a404:	b672      	cpsid	i
}
 800a406:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a408:	2108      	movs	r1, #8
 800a40a:	4806      	ldr	r0, [pc, #24]	@ (800a424 <HW_IPCC_TRACES_Init+0x30>)
 800a40c:	f7ff fe04 	bl	800a018 <LL_C1_IPCC_EnableReceiveChannel>
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	f383 8810 	msr	PRIMASK, r3
}
 800a41a:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800a41c:	bf00      	nop
}
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	58000c00 	.word	0x58000c00

0800a428 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800a42c:	f7fe faaa 	bl	8008984 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a430:	2108      	movs	r1, #8
 800a432:	4802      	ldr	r0, [pc, #8]	@ (800a43c <HW_IPCC_TRACES_EvtHandler+0x14>)
 800a434:	f7ff fe02 	bl	800a03c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a438:	bf00      	nop
}
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	58000c00 	.word	0x58000c00

0800a440 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a440:	b480      	push	{r7}
 800a442:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a444:	4b05      	ldr	r3, [pc, #20]	@ (800a45c <UTIL_LPM_Init+0x1c>)
 800a446:	2200      	movs	r2, #0
 800a448:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a44a:	4b05      	ldr	r3, [pc, #20]	@ (800a460 <UTIL_LPM_Init+0x20>)
 800a44c:	2200      	movs	r2, #0
 800a44e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a450:	bf00      	nop
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop
 800a45c:	20000634 	.word	0x20000634
 800a460:	20000638 	.word	0x20000638

0800a464 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a464:	b480      	push	{r7}
 800a466:	b087      	sub	sp, #28
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	460b      	mov	r3, r1
 800a46e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a470:	f3ef 8310 	mrs	r3, PRIMASK
 800a474:	613b      	str	r3, [r7, #16]
  return(result);
 800a476:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a478:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a47a:	b672      	cpsid	i
}
 800a47c:	bf00      	nop
  
  switch(state)
 800a47e:	78fb      	ldrb	r3, [r7, #3]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d008      	beq.n	800a496 <UTIL_LPM_SetOffMode+0x32>
 800a484:	2b01      	cmp	r3, #1
 800a486:	d10e      	bne.n	800a4a6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a488:	4b0d      	ldr	r3, [pc, #52]	@ (800a4c0 <UTIL_LPM_SetOffMode+0x5c>)
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4313      	orrs	r3, r2
 800a490:	4a0b      	ldr	r2, [pc, #44]	@ (800a4c0 <UTIL_LPM_SetOffMode+0x5c>)
 800a492:	6013      	str	r3, [r2, #0]
      break;
 800a494:	e008      	b.n	800a4a8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	43da      	mvns	r2, r3
 800a49a:	4b09      	ldr	r3, [pc, #36]	@ (800a4c0 <UTIL_LPM_SetOffMode+0x5c>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4013      	ands	r3, r2
 800a4a0:	4a07      	ldr	r2, [pc, #28]	@ (800a4c0 <UTIL_LPM_SetOffMode+0x5c>)
 800a4a2:	6013      	str	r3, [r2, #0]
      break;
 800a4a4:	e000      	b.n	800a4a8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a4a6:	bf00      	nop
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f383 8810 	msr	PRIMASK, r3
}
 800a4b2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a4b4:	bf00      	nop
 800a4b6:	371c      	adds	r7, #28
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr
 800a4c0:	20000638 	.word	0x20000638

0800a4c4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b090      	sub	sp, #64	@ 0x40
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800a4cc:	4b73      	ldr	r3, [pc, #460]	@ (800a69c <UTIL_SEQ_Run+0x1d8>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800a4d2:	4b72      	ldr	r3, [pc, #456]	@ (800a69c <UTIL_SEQ_Run+0x1d8>)
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4013      	ands	r3, r2
 800a4da:	4a70      	ldr	r2, [pc, #448]	@ (800a69c <UTIL_SEQ_Run+0x1d8>)
 800a4dc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800a4de:	4b70      	ldr	r3, [pc, #448]	@ (800a6a0 <UTIL_SEQ_Run+0x1dc>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800a4e4:	4b6f      	ldr	r3, [pc, #444]	@ (800a6a4 <UTIL_SEQ_Run+0x1e0>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800a4ea:	4b6f      	ldr	r3, [pc, #444]	@ (800a6a8 <UTIL_SEQ_Run+0x1e4>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800a4f0:	4b6e      	ldr	r3, [pc, #440]	@ (800a6ac <UTIL_SEQ_Run+0x1e8>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a4f6:	e08d      	b.n	800a614 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a4fc:	e002      	b.n	800a504 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800a4fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a500:	3301      	adds	r3, #1
 800a502:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a504:	4a6a      	ldr	r2, [pc, #424]	@ (800a6b0 <UTIL_SEQ_Run+0x1ec>)
 800a506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a508:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a50c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a50e:	401a      	ands	r2, r3
 800a510:	4b62      	ldr	r3, [pc, #392]	@ (800a69c <UTIL_SEQ_Run+0x1d8>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4013      	ands	r3, r2
 800a516:	2b00      	cmp	r3, #0
 800a518:	d0f1      	beq.n	800a4fe <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800a51a:	4a65      	ldr	r2, [pc, #404]	@ (800a6b0 <UTIL_SEQ_Run+0x1ec>)
 800a51c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a51e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a524:	401a      	ands	r2, r3
 800a526:	4b5d      	ldr	r3, [pc, #372]	@ (800a69c <UTIL_SEQ_Run+0x1d8>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4013      	ands	r3, r2
 800a52c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a52e:	4a60      	ldr	r2, [pc, #384]	@ (800a6b0 <UTIL_SEQ_Run+0x1ec>)
 800a530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a532:	00db      	lsls	r3, r3, #3
 800a534:	4413      	add	r3, r2
 800a536:	685a      	ldr	r2, [r3, #4]
 800a538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a53a:	4013      	ands	r3, r2
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d106      	bne.n	800a54e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a540:	4a5b      	ldr	r2, [pc, #364]	@ (800a6b0 <UTIL_SEQ_Run+0x1ec>)
 800a542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a544:	00db      	lsls	r3, r3, #3
 800a546:	4413      	add	r3, r2
 800a548:	f04f 32ff 	mov.w	r2, #4294967295
 800a54c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a54e:	4a58      	ldr	r2, [pc, #352]	@ (800a6b0 <UTIL_SEQ_Run+0x1ec>)
 800a550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a552:	00db      	lsls	r3, r3, #3
 800a554:	4413      	add	r3, r2
 800a556:	685a      	ldr	r2, [r3, #4]
 800a558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a55a:	4013      	ands	r3, r2
 800a55c:	4618      	mov	r0, r3
 800a55e:	f000 f9c1 	bl	800a8e4 <SEQ_BitPosition>
 800a562:	4603      	mov	r3, r0
 800a564:	461a      	mov	r2, r3
 800a566:	4b53      	ldr	r3, [pc, #332]	@ (800a6b4 <UTIL_SEQ_Run+0x1f0>)
 800a568:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a56a:	4a51      	ldr	r2, [pc, #324]	@ (800a6b0 <UTIL_SEQ_Run+0x1ec>)
 800a56c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a56e:	00db      	lsls	r3, r3, #3
 800a570:	4413      	add	r3, r2
 800a572:	685a      	ldr	r2, [r3, #4]
 800a574:	4b4f      	ldr	r3, [pc, #316]	@ (800a6b4 <UTIL_SEQ_Run+0x1f0>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2101      	movs	r1, #1
 800a57a:	fa01 f303 	lsl.w	r3, r1, r3
 800a57e:	43db      	mvns	r3, r3
 800a580:	401a      	ands	r2, r3
 800a582:	494b      	ldr	r1, [pc, #300]	@ (800a6b0 <UTIL_SEQ_Run+0x1ec>)
 800a584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a586:	00db      	lsls	r3, r3, #3
 800a588:	440b      	add	r3, r1
 800a58a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a58c:	f3ef 8310 	mrs	r3, PRIMASK
 800a590:	61bb      	str	r3, [r7, #24]
  return(result);
 800a592:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a594:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a596:	b672      	cpsid	i
}
 800a598:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a59a:	4b46      	ldr	r3, [pc, #280]	@ (800a6b4 <UTIL_SEQ_Run+0x1f0>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5a4:	43da      	mvns	r2, r3
 800a5a6:	4b3e      	ldr	r3, [pc, #248]	@ (800a6a0 <UTIL_SEQ_Run+0x1dc>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	4a3c      	ldr	r2, [pc, #240]	@ (800a6a0 <UTIL_SEQ_Run+0x1dc>)
 800a5ae:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5b4:	e013      	b.n	800a5de <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a5b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	4a3d      	ldr	r2, [pc, #244]	@ (800a6b0 <UTIL_SEQ_Run+0x1ec>)
 800a5bc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a5c0:	4b3c      	ldr	r3, [pc, #240]	@ (800a6b4 <UTIL_SEQ_Run+0x1f0>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ca:	43da      	mvns	r2, r3
 800a5cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	400a      	ands	r2, r1
 800a5d2:	4937      	ldr	r1, [pc, #220]	@ (800a6b0 <UTIL_SEQ_Run+0x1ec>)
 800a5d4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a5d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d1e8      	bne.n	800a5b6 <UTIL_SEQ_Run+0xf2>
 800a5e4:	6a3b      	ldr	r3, [r7, #32]
 800a5e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	f383 8810 	msr	PRIMASK, r3
}
 800a5ee:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a5f0:	4b30      	ldr	r3, [pc, #192]	@ (800a6b4 <UTIL_SEQ_Run+0x1f0>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a30      	ldr	r2, [pc, #192]	@ (800a6b8 <UTIL_SEQ_Run+0x1f4>)
 800a5f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5fa:	4798      	blx	r3

    local_taskset = TaskSet;
 800a5fc:	4b28      	ldr	r3, [pc, #160]	@ (800a6a0 <UTIL_SEQ_Run+0x1dc>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800a602:	4b28      	ldr	r3, [pc, #160]	@ (800a6a4 <UTIL_SEQ_Run+0x1e0>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800a608:	4b27      	ldr	r3, [pc, #156]	@ (800a6a8 <UTIL_SEQ_Run+0x1e4>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800a60e:	4b27      	ldr	r3, [pc, #156]	@ (800a6ac <UTIL_SEQ_Run+0x1e8>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a614:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a618:	401a      	ands	r2, r3
 800a61a:	4b20      	ldr	r3, [pc, #128]	@ (800a69c <UTIL_SEQ_Run+0x1d8>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4013      	ands	r3, r2
 800a620:	2b00      	cmp	r3, #0
 800a622:	d005      	beq.n	800a630 <UTIL_SEQ_Run+0x16c>
 800a624:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a628:	4013      	ands	r3, r2
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	f43f af64 	beq.w	800a4f8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a630:	4b20      	ldr	r3, [pc, #128]	@ (800a6b4 <UTIL_SEQ_Run+0x1f0>)
 800a632:	f04f 32ff 	mov.w	r2, #4294967295
 800a636:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a638:	f000 f946 	bl	800a8c8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a63c:	f3ef 8310 	mrs	r3, PRIMASK
 800a640:	613b      	str	r3, [r7, #16]
  return(result);
 800a642:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a644:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a646:	b672      	cpsid	i
}
 800a648:	bf00      	nop
  local_taskset = TaskSet;
 800a64a:	4b15      	ldr	r3, [pc, #84]	@ (800a6a0 <UTIL_SEQ_Run+0x1dc>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800a650:	4b14      	ldr	r3, [pc, #80]	@ (800a6a4 <UTIL_SEQ_Run+0x1e0>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800a656:	4b14      	ldr	r3, [pc, #80]	@ (800a6a8 <UTIL_SEQ_Run+0x1e4>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800a65c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a660:	401a      	ands	r2, r3
 800a662:	4b0e      	ldr	r3, [pc, #56]	@ (800a69c <UTIL_SEQ_Run+0x1d8>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4013      	ands	r3, r2
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d107      	bne.n	800a67c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800a66c:	4b0f      	ldr	r3, [pc, #60]	@ (800a6ac <UTIL_SEQ_Run+0x1e8>)
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a672:	4013      	ands	r3, r2
 800a674:	2b00      	cmp	r3, #0
 800a676:	d101      	bne.n	800a67c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800a678:	f7f6 f925 	bl	80008c6 <UTIL_SEQ_Idle>
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f383 8810 	msr	PRIMASK, r3
}
 800a686:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800a688:	f000 f925 	bl	800a8d6 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a68c:	4a03      	ldr	r2, [pc, #12]	@ (800a69c <UTIL_SEQ_Run+0x1d8>)
 800a68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a690:	6013      	str	r3, [r2, #0]

  return;
 800a692:	bf00      	nop
}
 800a694:	3740      	adds	r7, #64	@ 0x40
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	2000002c 	.word	0x2000002c
 800a6a0:	2000063c 	.word	0x2000063c
 800a6a4:	20000640 	.word	0x20000640
 800a6a8:	20000028 	.word	0x20000028
 800a6ac:	20000644 	.word	0x20000644
 800a6b0:	200006cc 	.word	0x200006cc
 800a6b4:	20000648 	.word	0x20000648
 800a6b8:	2000064c 	.word	0x2000064c

0800a6bc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b088      	sub	sp, #32
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6c8:	f3ef 8310 	mrs	r3, PRIMASK
 800a6cc:	617b      	str	r3, [r7, #20]
  return(result);
 800a6ce:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a6d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6d2:	b672      	cpsid	i
}
 800a6d4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f000 f904 	bl	800a8e4 <SEQ_BitPosition>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	4619      	mov	r1, r3
 800a6e0:	4a06      	ldr	r2, [pc, #24]	@ (800a6fc <UTIL_SEQ_RegTask+0x40>)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	f383 8810 	msr	PRIMASK, r3
}
 800a6f2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a6f4:	bf00      	nop
}
 800a6f6:	3720      	adds	r7, #32
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	2000064c 	.word	0x2000064c

0800a700 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a700:	b480      	push	{r7}
 800a702:	b087      	sub	sp, #28
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a70a:	f3ef 8310 	mrs	r3, PRIMASK
 800a70e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a710:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a712:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a714:	b672      	cpsid	i
}
 800a716:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a718:	4b0d      	ldr	r3, [pc, #52]	@ (800a750 <UTIL_SEQ_SetTask+0x50>)
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4313      	orrs	r3, r2
 800a720:	4a0b      	ldr	r2, [pc, #44]	@ (800a750 <UTIL_SEQ_SetTask+0x50>)
 800a722:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a724:	4a0b      	ldr	r2, [pc, #44]	@ (800a754 <UTIL_SEQ_SetTask+0x54>)
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	431a      	orrs	r2, r3
 800a730:	4908      	ldr	r1, [pc, #32]	@ (800a754 <UTIL_SEQ_SetTask+0x54>)
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	f383 8810 	msr	PRIMASK, r3
}
 800a742:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a744:	bf00      	nop
}
 800a746:	371c      	adds	r7, #28
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr
 800a750:	2000063c 	.word	0x2000063c
 800a754:	200006cc 	.word	0x200006cc

0800a758 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a758:	b480      	push	{r7}
 800a75a:	b087      	sub	sp, #28
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a760:	f3ef 8310 	mrs	r3, PRIMASK
 800a764:	60fb      	str	r3, [r7, #12]
  return(result);
 800a766:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a768:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a76a:	b672      	cpsid	i
}
 800a76c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	43da      	mvns	r2, r3
 800a772:	4b08      	ldr	r3, [pc, #32]	@ (800a794 <UTIL_SEQ_PauseTask+0x3c>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4013      	ands	r3, r2
 800a778:	4a06      	ldr	r2, [pc, #24]	@ (800a794 <UTIL_SEQ_PauseTask+0x3c>)
 800a77a:	6013      	str	r3, [r2, #0]
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	f383 8810 	msr	PRIMASK, r3
}
 800a786:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a788:	bf00      	nop
}
 800a78a:	371c      	adds	r7, #28
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr
 800a794:	20000028 	.word	0x20000028

0800a798 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a798:	b480      	push	{r7}
 800a79a:	b087      	sub	sp, #28
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7a0:	f3ef 8310 	mrs	r3, PRIMASK
 800a7a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a7a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7aa:	b672      	cpsid	i
}
 800a7ac:	bf00      	nop

  TaskMask |= TaskId_bm;
 800a7ae:	4b09      	ldr	r3, [pc, #36]	@ (800a7d4 <UTIL_SEQ_ResumeTask+0x3c>)
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	4a07      	ldr	r2, [pc, #28]	@ (800a7d4 <UTIL_SEQ_ResumeTask+0x3c>)
 800a7b8:	6013      	str	r3, [r2, #0]
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	f383 8810 	msr	PRIMASK, r3
}
 800a7c4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a7c6:	bf00      	nop
}
 800a7c8:	371c      	adds	r7, #28
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	20000028 	.word	0x20000028

0800a7d8 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b087      	sub	sp, #28
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7e0:	f3ef 8310 	mrs	r3, PRIMASK
 800a7e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a7e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7ea:	b672      	cpsid	i
}
 800a7ec:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a7ee:	4b09      	ldr	r3, [pc, #36]	@ (800a814 <UTIL_SEQ_SetEvt+0x3c>)
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	4a07      	ldr	r2, [pc, #28]	@ (800a814 <UTIL_SEQ_SetEvt+0x3c>)
 800a7f8:	6013      	str	r3, [r2, #0]
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	f383 8810 	msr	PRIMASK, r3
}
 800a804:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a806:	bf00      	nop
}
 800a808:	371c      	adds	r7, #28
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	20000640 	.word	0x20000640

0800a818 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b088      	sub	sp, #32
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a820:	4b1f      	ldr	r3, [pc, #124]	@ (800a8a0 <UTIL_SEQ_WaitEvt+0x88>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a826:	4b1e      	ldr	r3, [pc, #120]	@ (800a8a0 <UTIL_SEQ_WaitEvt+0x88>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a82e:	d102      	bne.n	800a836 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800a830:	2300      	movs	r3, #0
 800a832:	61fb      	str	r3, [r7, #28]
 800a834:	e005      	b.n	800a842 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800a836:	4b1a      	ldr	r3, [pc, #104]	@ (800a8a0 <UTIL_SEQ_WaitEvt+0x88>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2201      	movs	r2, #1
 800a83c:	fa02 f303 	lsl.w	r3, r2, r3
 800a840:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a842:	4b18      	ldr	r3, [pc, #96]	@ (800a8a4 <UTIL_SEQ_WaitEvt+0x8c>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800a848:	4a16      	ldr	r2, [pc, #88]	@ (800a8a4 <UTIL_SEQ_WaitEvt+0x8c>)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800a84e:	e003      	b.n	800a858 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800a850:	6879      	ldr	r1, [r7, #4]
 800a852:	69f8      	ldr	r0, [r7, #28]
 800a854:	f000 f82a 	bl	800a8ac <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800a858:	4b13      	ldr	r3, [pc, #76]	@ (800a8a8 <UTIL_SEQ_WaitEvt+0x90>)
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4013      	ands	r3, r2
 800a860:	2b00      	cmp	r3, #0
 800a862:	d0f5      	beq.n	800a850 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a864:	4a0e      	ldr	r2, [pc, #56]	@ (800a8a0 <UTIL_SEQ_WaitEvt+0x88>)
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a86a:	f3ef 8310 	mrs	r3, PRIMASK
 800a86e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a870:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a872:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a874:	b672      	cpsid	i
}
 800a876:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	43da      	mvns	r2, r3
 800a87c:	4b0a      	ldr	r3, [pc, #40]	@ (800a8a8 <UTIL_SEQ_WaitEvt+0x90>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4013      	ands	r3, r2
 800a882:	4a09      	ldr	r2, [pc, #36]	@ (800a8a8 <UTIL_SEQ_WaitEvt+0x90>)
 800a884:	6013      	str	r3, [r2, #0]
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f383 8810 	msr	PRIMASK, r3
}
 800a890:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800a892:	4a04      	ldr	r2, [pc, #16]	@ (800a8a4 <UTIL_SEQ_WaitEvt+0x8c>)
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	6013      	str	r3, [r2, #0]
  return;
 800a898:	bf00      	nop
}
 800a89a:	3720      	adds	r7, #32
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	20000648 	.word	0x20000648
 800a8a4:	20000644 	.word	0x20000644
 800a8a8:	20000640 	.word	0x20000640

0800a8ac <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	43db      	mvns	r3, r3
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7ff fe02 	bl	800a4c4 <UTIL_SEQ_Run>
  return;
 800a8c0:	bf00      	nop
}
 800a8c2:	3708      	adds	r7, #8
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a8cc:	bf00      	nop
}
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr

0800a8d6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a8d6:	b480      	push	{r7}
 800a8d8:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a8da:	bf00      	nop
}
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b085      	sub	sp, #20
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d101      	bne.n	800a8fa <SEQ_BitPosition+0x16>
    return 32U;
 800a8f6:	2320      	movs	r3, #32
 800a8f8:	e003      	b.n	800a902 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	fab3 f383 	clz	r3, r3
 800a900:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 800a902:	f1c3 031f 	rsb	r3, r3, #31
 800a906:	b2db      	uxtb	r3, r3
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3714      	adds	r7, #20
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <malloc>:
 800a914:	4b02      	ldr	r3, [pc, #8]	@ (800a920 <malloc+0xc>)
 800a916:	4601      	mov	r1, r0
 800a918:	6818      	ldr	r0, [r3, #0]
 800a91a:	f000 b825 	b.w	800a968 <_malloc_r>
 800a91e:	bf00      	nop
 800a920:	20000030 	.word	0x20000030

0800a924 <sbrk_aligned>:
 800a924:	b570      	push	{r4, r5, r6, lr}
 800a926:	4e0f      	ldr	r6, [pc, #60]	@ (800a964 <sbrk_aligned+0x40>)
 800a928:	460c      	mov	r4, r1
 800a92a:	6831      	ldr	r1, [r6, #0]
 800a92c:	4605      	mov	r5, r0
 800a92e:	b911      	cbnz	r1, 800a936 <sbrk_aligned+0x12>
 800a930:	f000 f8ae 	bl	800aa90 <_sbrk_r>
 800a934:	6030      	str	r0, [r6, #0]
 800a936:	4621      	mov	r1, r4
 800a938:	4628      	mov	r0, r5
 800a93a:	f000 f8a9 	bl	800aa90 <_sbrk_r>
 800a93e:	1c43      	adds	r3, r0, #1
 800a940:	d103      	bne.n	800a94a <sbrk_aligned+0x26>
 800a942:	f04f 34ff 	mov.w	r4, #4294967295
 800a946:	4620      	mov	r0, r4
 800a948:	bd70      	pop	{r4, r5, r6, pc}
 800a94a:	1cc4      	adds	r4, r0, #3
 800a94c:	f024 0403 	bic.w	r4, r4, #3
 800a950:	42a0      	cmp	r0, r4
 800a952:	d0f8      	beq.n	800a946 <sbrk_aligned+0x22>
 800a954:	1a21      	subs	r1, r4, r0
 800a956:	4628      	mov	r0, r5
 800a958:	f000 f89a 	bl	800aa90 <_sbrk_r>
 800a95c:	3001      	adds	r0, #1
 800a95e:	d1f2      	bne.n	800a946 <sbrk_aligned+0x22>
 800a960:	e7ef      	b.n	800a942 <sbrk_aligned+0x1e>
 800a962:	bf00      	nop
 800a964:	200006d4 	.word	0x200006d4

0800a968 <_malloc_r>:
 800a968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a96c:	1ccd      	adds	r5, r1, #3
 800a96e:	f025 0503 	bic.w	r5, r5, #3
 800a972:	3508      	adds	r5, #8
 800a974:	2d0c      	cmp	r5, #12
 800a976:	bf38      	it	cc
 800a978:	250c      	movcc	r5, #12
 800a97a:	2d00      	cmp	r5, #0
 800a97c:	4606      	mov	r6, r0
 800a97e:	db01      	blt.n	800a984 <_malloc_r+0x1c>
 800a980:	42a9      	cmp	r1, r5
 800a982:	d904      	bls.n	800a98e <_malloc_r+0x26>
 800a984:	230c      	movs	r3, #12
 800a986:	6033      	str	r3, [r6, #0]
 800a988:	2000      	movs	r0, #0
 800a98a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a98e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa64 <_malloc_r+0xfc>
 800a992:	f000 f869 	bl	800aa68 <__malloc_lock>
 800a996:	f8d8 3000 	ldr.w	r3, [r8]
 800a99a:	461c      	mov	r4, r3
 800a99c:	bb44      	cbnz	r4, 800a9f0 <_malloc_r+0x88>
 800a99e:	4629      	mov	r1, r5
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	f7ff ffbf 	bl	800a924 <sbrk_aligned>
 800a9a6:	1c43      	adds	r3, r0, #1
 800a9a8:	4604      	mov	r4, r0
 800a9aa:	d158      	bne.n	800aa5e <_malloc_r+0xf6>
 800a9ac:	f8d8 4000 	ldr.w	r4, [r8]
 800a9b0:	4627      	mov	r7, r4
 800a9b2:	2f00      	cmp	r7, #0
 800a9b4:	d143      	bne.n	800aa3e <_malloc_r+0xd6>
 800a9b6:	2c00      	cmp	r4, #0
 800a9b8:	d04b      	beq.n	800aa52 <_malloc_r+0xea>
 800a9ba:	6823      	ldr	r3, [r4, #0]
 800a9bc:	4639      	mov	r1, r7
 800a9be:	4630      	mov	r0, r6
 800a9c0:	eb04 0903 	add.w	r9, r4, r3
 800a9c4:	f000 f864 	bl	800aa90 <_sbrk_r>
 800a9c8:	4581      	cmp	r9, r0
 800a9ca:	d142      	bne.n	800aa52 <_malloc_r+0xea>
 800a9cc:	6821      	ldr	r1, [r4, #0]
 800a9ce:	1a6d      	subs	r5, r5, r1
 800a9d0:	4629      	mov	r1, r5
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	f7ff ffa6 	bl	800a924 <sbrk_aligned>
 800a9d8:	3001      	adds	r0, #1
 800a9da:	d03a      	beq.n	800aa52 <_malloc_r+0xea>
 800a9dc:	6823      	ldr	r3, [r4, #0]
 800a9de:	442b      	add	r3, r5
 800a9e0:	6023      	str	r3, [r4, #0]
 800a9e2:	f8d8 3000 	ldr.w	r3, [r8]
 800a9e6:	685a      	ldr	r2, [r3, #4]
 800a9e8:	bb62      	cbnz	r2, 800aa44 <_malloc_r+0xdc>
 800a9ea:	f8c8 7000 	str.w	r7, [r8]
 800a9ee:	e00f      	b.n	800aa10 <_malloc_r+0xa8>
 800a9f0:	6822      	ldr	r2, [r4, #0]
 800a9f2:	1b52      	subs	r2, r2, r5
 800a9f4:	d420      	bmi.n	800aa38 <_malloc_r+0xd0>
 800a9f6:	2a0b      	cmp	r2, #11
 800a9f8:	d917      	bls.n	800aa2a <_malloc_r+0xc2>
 800a9fa:	1961      	adds	r1, r4, r5
 800a9fc:	42a3      	cmp	r3, r4
 800a9fe:	6025      	str	r5, [r4, #0]
 800aa00:	bf18      	it	ne
 800aa02:	6059      	strne	r1, [r3, #4]
 800aa04:	6863      	ldr	r3, [r4, #4]
 800aa06:	bf08      	it	eq
 800aa08:	f8c8 1000 	streq.w	r1, [r8]
 800aa0c:	5162      	str	r2, [r4, r5]
 800aa0e:	604b      	str	r3, [r1, #4]
 800aa10:	4630      	mov	r0, r6
 800aa12:	f000 f82f 	bl	800aa74 <__malloc_unlock>
 800aa16:	f104 000b 	add.w	r0, r4, #11
 800aa1a:	1d23      	adds	r3, r4, #4
 800aa1c:	f020 0007 	bic.w	r0, r0, #7
 800aa20:	1ac2      	subs	r2, r0, r3
 800aa22:	bf1c      	itt	ne
 800aa24:	1a1b      	subne	r3, r3, r0
 800aa26:	50a3      	strne	r3, [r4, r2]
 800aa28:	e7af      	b.n	800a98a <_malloc_r+0x22>
 800aa2a:	6862      	ldr	r2, [r4, #4]
 800aa2c:	42a3      	cmp	r3, r4
 800aa2e:	bf0c      	ite	eq
 800aa30:	f8c8 2000 	streq.w	r2, [r8]
 800aa34:	605a      	strne	r2, [r3, #4]
 800aa36:	e7eb      	b.n	800aa10 <_malloc_r+0xa8>
 800aa38:	4623      	mov	r3, r4
 800aa3a:	6864      	ldr	r4, [r4, #4]
 800aa3c:	e7ae      	b.n	800a99c <_malloc_r+0x34>
 800aa3e:	463c      	mov	r4, r7
 800aa40:	687f      	ldr	r7, [r7, #4]
 800aa42:	e7b6      	b.n	800a9b2 <_malloc_r+0x4a>
 800aa44:	461a      	mov	r2, r3
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	42a3      	cmp	r3, r4
 800aa4a:	d1fb      	bne.n	800aa44 <_malloc_r+0xdc>
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	6053      	str	r3, [r2, #4]
 800aa50:	e7de      	b.n	800aa10 <_malloc_r+0xa8>
 800aa52:	230c      	movs	r3, #12
 800aa54:	6033      	str	r3, [r6, #0]
 800aa56:	4630      	mov	r0, r6
 800aa58:	f000 f80c 	bl	800aa74 <__malloc_unlock>
 800aa5c:	e794      	b.n	800a988 <_malloc_r+0x20>
 800aa5e:	6005      	str	r5, [r0, #0]
 800aa60:	e7d6      	b.n	800aa10 <_malloc_r+0xa8>
 800aa62:	bf00      	nop
 800aa64:	200006d8 	.word	0x200006d8

0800aa68 <__malloc_lock>:
 800aa68:	4801      	ldr	r0, [pc, #4]	@ (800aa70 <__malloc_lock+0x8>)
 800aa6a:	f000 b84b 	b.w	800ab04 <__retarget_lock_acquire_recursive>
 800aa6e:	bf00      	nop
 800aa70:	20000818 	.word	0x20000818

0800aa74 <__malloc_unlock>:
 800aa74:	4801      	ldr	r0, [pc, #4]	@ (800aa7c <__malloc_unlock+0x8>)
 800aa76:	f000 b846 	b.w	800ab06 <__retarget_lock_release_recursive>
 800aa7a:	bf00      	nop
 800aa7c:	20000818 	.word	0x20000818

0800aa80 <memset>:
 800aa80:	4402      	add	r2, r0
 800aa82:	4603      	mov	r3, r0
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d100      	bne.n	800aa8a <memset+0xa>
 800aa88:	4770      	bx	lr
 800aa8a:	f803 1b01 	strb.w	r1, [r3], #1
 800aa8e:	e7f9      	b.n	800aa84 <memset+0x4>

0800aa90 <_sbrk_r>:
 800aa90:	b538      	push	{r3, r4, r5, lr}
 800aa92:	4d06      	ldr	r5, [pc, #24]	@ (800aaac <_sbrk_r+0x1c>)
 800aa94:	2300      	movs	r3, #0
 800aa96:	4604      	mov	r4, r0
 800aa98:	4608      	mov	r0, r1
 800aa9a:	602b      	str	r3, [r5, #0]
 800aa9c:	f7f7 f854 	bl	8001b48 <_sbrk>
 800aaa0:	1c43      	adds	r3, r0, #1
 800aaa2:	d102      	bne.n	800aaaa <_sbrk_r+0x1a>
 800aaa4:	682b      	ldr	r3, [r5, #0]
 800aaa6:	b103      	cbz	r3, 800aaaa <_sbrk_r+0x1a>
 800aaa8:	6023      	str	r3, [r4, #0]
 800aaaa:	bd38      	pop	{r3, r4, r5, pc}
 800aaac:	20000814 	.word	0x20000814

0800aab0 <__errno>:
 800aab0:	4b01      	ldr	r3, [pc, #4]	@ (800aab8 <__errno+0x8>)
 800aab2:	6818      	ldr	r0, [r3, #0]
 800aab4:	4770      	bx	lr
 800aab6:	bf00      	nop
 800aab8:	20000030 	.word	0x20000030

0800aabc <__libc_init_array>:
 800aabc:	b570      	push	{r4, r5, r6, lr}
 800aabe:	4d0d      	ldr	r5, [pc, #52]	@ (800aaf4 <__libc_init_array+0x38>)
 800aac0:	4c0d      	ldr	r4, [pc, #52]	@ (800aaf8 <__libc_init_array+0x3c>)
 800aac2:	1b64      	subs	r4, r4, r5
 800aac4:	10a4      	asrs	r4, r4, #2
 800aac6:	2600      	movs	r6, #0
 800aac8:	42a6      	cmp	r6, r4
 800aaca:	d109      	bne.n	800aae0 <__libc_init_array+0x24>
 800aacc:	4d0b      	ldr	r5, [pc, #44]	@ (800aafc <__libc_init_array+0x40>)
 800aace:	4c0c      	ldr	r4, [pc, #48]	@ (800ab00 <__libc_init_array+0x44>)
 800aad0:	f000 f828 	bl	800ab24 <_init>
 800aad4:	1b64      	subs	r4, r4, r5
 800aad6:	10a4      	asrs	r4, r4, #2
 800aad8:	2600      	movs	r6, #0
 800aada:	42a6      	cmp	r6, r4
 800aadc:	d105      	bne.n	800aaea <__libc_init_array+0x2e>
 800aade:	bd70      	pop	{r4, r5, r6, pc}
 800aae0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aae4:	4798      	blx	r3
 800aae6:	3601      	adds	r6, #1
 800aae8:	e7ee      	b.n	800aac8 <__libc_init_array+0xc>
 800aaea:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaee:	4798      	blx	r3
 800aaf0:	3601      	adds	r6, #1
 800aaf2:	e7f2      	b.n	800aada <__libc_init_array+0x1e>
 800aaf4:	0800adf4 	.word	0x0800adf4
 800aaf8:	0800adf4 	.word	0x0800adf4
 800aafc:	0800adf4 	.word	0x0800adf4
 800ab00:	0800adf8 	.word	0x0800adf8

0800ab04 <__retarget_lock_acquire_recursive>:
 800ab04:	4770      	bx	lr

0800ab06 <__retarget_lock_release_recursive>:
 800ab06:	4770      	bx	lr

0800ab08 <memcpy>:
 800ab08:	440a      	add	r2, r1
 800ab0a:	4291      	cmp	r1, r2
 800ab0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab10:	d100      	bne.n	800ab14 <memcpy+0xc>
 800ab12:	4770      	bx	lr
 800ab14:	b510      	push	{r4, lr}
 800ab16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab1e:	4291      	cmp	r1, r2
 800ab20:	d1f9      	bne.n	800ab16 <memcpy+0xe>
 800ab22:	bd10      	pop	{r4, pc}

0800ab24 <_init>:
 800ab24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab26:	bf00      	nop
 800ab28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab2a:	bc08      	pop	{r3}
 800ab2c:	469e      	mov	lr, r3
 800ab2e:	4770      	bx	lr

0800ab30 <_fini>:
 800ab30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab32:	bf00      	nop
 800ab34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab36:	bc08      	pop	{r3}
 800ab38:	469e      	mov	lr, r3
 800ab3a:	4770      	bx	lr
