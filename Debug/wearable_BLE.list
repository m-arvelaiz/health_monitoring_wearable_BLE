
wearable_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9a4  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  0800aae0  0800aae0  0000bae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ad90  0800ad90  0000bd90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ad98  0800ad98  0000bd98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ad9c  0800ad9c  0000bd9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  20000008  0800ada0  0000c008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000080  0800ae18  0000c080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000b8  0800ae4d  0000c0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000750  200000cc  0800ae5e  0000c0cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000081c  0800ae5e  0000c81c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ca67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000d000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000d000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800ae5e  0000c1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0002ca76  00000000  00000000  0000ca97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000062ce  00000000  00000000  0003950d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000027e8  00000000  00000000  0003f7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001e7b  00000000  00000000  00041fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002bd34  00000000  00000000  00043e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002cdf4  00000000  00000000  0006fb77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f6fd3  00000000  00000000  0009c96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0019393e  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000a904  00000000  00000000  00193984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000078  00000000  00000000  0019e288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000cc 	.word	0x200000cc
 8000158:	00000000 	.word	0x00000000
 800015c:	0800aac8 	.word	0x0800aac8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000d0 	.word	0x200000d0
 8000178:	0800aac8 	.word	0x0800aac8

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b988 	b.w	80004b4 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9d08      	ldr	r5, [sp, #32]
 80001c2:	468e      	mov	lr, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14a      	bne.n	8000262 <__udivmoddi4+0xa6>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4617      	mov	r7, r2
 80001d0:	d962      	bls.n	8000298 <__udivmoddi4+0xdc>
 80001d2:	fab2 f682 	clz	r6, r2
 80001d6:	b14e      	cbz	r6, 80001ec <__udivmoddi4+0x30>
 80001d8:	f1c6 0320 	rsb	r3, r6, #32
 80001dc:	fa01 f806 	lsl.w	r8, r1, r6
 80001e0:	fa20 f303 	lsr.w	r3, r0, r3
 80001e4:	40b7      	lsls	r7, r6
 80001e6:	ea43 0808 	orr.w	r8, r3, r8
 80001ea:	40b4      	lsls	r4, r6
 80001ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001f0:	fa1f fc87 	uxth.w	ip, r7
 80001f4:	fbb8 f1fe 	udiv	r1, r8, lr
 80001f8:	0c23      	lsrs	r3, r4, #16
 80001fa:	fb0e 8811 	mls	r8, lr, r1, r8
 80001fe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000202:	fb01 f20c 	mul.w	r2, r1, ip
 8000206:	429a      	cmp	r2, r3
 8000208:	d909      	bls.n	800021e <__udivmoddi4+0x62>
 800020a:	18fb      	adds	r3, r7, r3
 800020c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000210:	f080 80ea 	bcs.w	80003e8 <__udivmoddi4+0x22c>
 8000214:	429a      	cmp	r2, r3
 8000216:	f240 80e7 	bls.w	80003e8 <__udivmoddi4+0x22c>
 800021a:	3902      	subs	r1, #2
 800021c:	443b      	add	r3, r7
 800021e:	1a9a      	subs	r2, r3, r2
 8000220:	b2a3      	uxth	r3, r4
 8000222:	fbb2 f0fe 	udiv	r0, r2, lr
 8000226:	fb0e 2210 	mls	r2, lr, r0, r2
 800022a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800022e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000232:	459c      	cmp	ip, r3
 8000234:	d909      	bls.n	800024a <__udivmoddi4+0x8e>
 8000236:	18fb      	adds	r3, r7, r3
 8000238:	f100 32ff 	add.w	r2, r0, #4294967295
 800023c:	f080 80d6 	bcs.w	80003ec <__udivmoddi4+0x230>
 8000240:	459c      	cmp	ip, r3
 8000242:	f240 80d3 	bls.w	80003ec <__udivmoddi4+0x230>
 8000246:	443b      	add	r3, r7
 8000248:	3802      	subs	r0, #2
 800024a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800024e:	eba3 030c 	sub.w	r3, r3, ip
 8000252:	2100      	movs	r1, #0
 8000254:	b11d      	cbz	r5, 800025e <__udivmoddi4+0xa2>
 8000256:	40f3      	lsrs	r3, r6
 8000258:	2200      	movs	r2, #0
 800025a:	e9c5 3200 	strd	r3, r2, [r5]
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d905      	bls.n	8000272 <__udivmoddi4+0xb6>
 8000266:	b10d      	cbz	r5, 800026c <__udivmoddi4+0xb0>
 8000268:	e9c5 0100 	strd	r0, r1, [r5]
 800026c:	2100      	movs	r1, #0
 800026e:	4608      	mov	r0, r1
 8000270:	e7f5      	b.n	800025e <__udivmoddi4+0xa2>
 8000272:	fab3 f183 	clz	r1, r3
 8000276:	2900      	cmp	r1, #0
 8000278:	d146      	bne.n	8000308 <__udivmoddi4+0x14c>
 800027a:	4573      	cmp	r3, lr
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xc8>
 800027e:	4282      	cmp	r2, r0
 8000280:	f200 8105 	bhi.w	800048e <__udivmoddi4+0x2d2>
 8000284:	1a84      	subs	r4, r0, r2
 8000286:	eb6e 0203 	sbc.w	r2, lr, r3
 800028a:	2001      	movs	r0, #1
 800028c:	4690      	mov	r8, r2
 800028e:	2d00      	cmp	r5, #0
 8000290:	d0e5      	beq.n	800025e <__udivmoddi4+0xa2>
 8000292:	e9c5 4800 	strd	r4, r8, [r5]
 8000296:	e7e2      	b.n	800025e <__udivmoddi4+0xa2>
 8000298:	2a00      	cmp	r2, #0
 800029a:	f000 8090 	beq.w	80003be <__udivmoddi4+0x202>
 800029e:	fab2 f682 	clz	r6, r2
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f040 80a4 	bne.w	80003f0 <__udivmoddi4+0x234>
 80002a8:	1a8a      	subs	r2, r1, r2
 80002aa:	0c03      	lsrs	r3, r0, #16
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	b280      	uxth	r0, r0
 80002b2:	b2bc      	uxth	r4, r7
 80002b4:	2101      	movs	r1, #1
 80002b6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002ba:	fb0e 221c 	mls	r2, lr, ip, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb04 f20c 	mul.w	r2, r4, ip
 80002c6:	429a      	cmp	r2, r3
 80002c8:	d907      	bls.n	80002da <__udivmoddi4+0x11e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80002d0:	d202      	bcs.n	80002d8 <__udivmoddi4+0x11c>
 80002d2:	429a      	cmp	r2, r3
 80002d4:	f200 80e0 	bhi.w	8000498 <__udivmoddi4+0x2dc>
 80002d8:	46c4      	mov	ip, r8
 80002da:	1a9b      	subs	r3, r3, r2
 80002dc:	fbb3 f2fe 	udiv	r2, r3, lr
 80002e0:	fb0e 3312 	mls	r3, lr, r2, r3
 80002e4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002e8:	fb02 f404 	mul.w	r4, r2, r4
 80002ec:	429c      	cmp	r4, r3
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0x144>
 80002f0:	18fb      	adds	r3, r7, r3
 80002f2:	f102 30ff 	add.w	r0, r2, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x142>
 80002f8:	429c      	cmp	r4, r3
 80002fa:	f200 80ca 	bhi.w	8000492 <__udivmoddi4+0x2d6>
 80002fe:	4602      	mov	r2, r0
 8000300:	1b1b      	subs	r3, r3, r4
 8000302:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000306:	e7a5      	b.n	8000254 <__udivmoddi4+0x98>
 8000308:	f1c1 0620 	rsb	r6, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 f706 	lsr.w	r7, r2, r6
 8000312:	431f      	orrs	r7, r3
 8000314:	fa0e f401 	lsl.w	r4, lr, r1
 8000318:	fa20 f306 	lsr.w	r3, r0, r6
 800031c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000320:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000324:	4323      	orrs	r3, r4
 8000326:	fa00 f801 	lsl.w	r8, r0, r1
 800032a:	fa1f fc87 	uxth.w	ip, r7
 800032e:	fbbe f0f9 	udiv	r0, lr, r9
 8000332:	0c1c      	lsrs	r4, r3, #16
 8000334:	fb09 ee10 	mls	lr, r9, r0, lr
 8000338:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800033c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000340:	45a6      	cmp	lr, r4
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x1a0>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 3aff 	add.w	sl, r0, #4294967295
 800034e:	f080 809c 	bcs.w	800048a <__udivmoddi4+0x2ce>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8099 	bls.w	800048a <__udivmoddi4+0x2ce>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	eba4 040e 	sub.w	r4, r4, lr
 8000360:	fa1f fe83 	uxth.w	lr, r3
 8000364:	fbb4 f3f9 	udiv	r3, r4, r9
 8000368:	fb09 4413 	mls	r4, r9, r3, r4
 800036c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000370:	fb03 fc0c 	mul.w	ip, r3, ip
 8000374:	45a4      	cmp	ip, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1ce>
 8000378:	193c      	adds	r4, r7, r4
 800037a:	f103 3eff 	add.w	lr, r3, #4294967295
 800037e:	f080 8082 	bcs.w	8000486 <__udivmoddi4+0x2ca>
 8000382:	45a4      	cmp	ip, r4
 8000384:	d97f      	bls.n	8000486 <__udivmoddi4+0x2ca>
 8000386:	3b02      	subs	r3, #2
 8000388:	443c      	add	r4, r7
 800038a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800038e:	eba4 040c 	sub.w	r4, r4, ip
 8000392:	fba0 ec02 	umull	lr, ip, r0, r2
 8000396:	4564      	cmp	r4, ip
 8000398:	4673      	mov	r3, lr
 800039a:	46e1      	mov	r9, ip
 800039c:	d362      	bcc.n	8000464 <__udivmoddi4+0x2a8>
 800039e:	d05f      	beq.n	8000460 <__udivmoddi4+0x2a4>
 80003a0:	b15d      	cbz	r5, 80003ba <__udivmoddi4+0x1fe>
 80003a2:	ebb8 0203 	subs.w	r2, r8, r3
 80003a6:	eb64 0409 	sbc.w	r4, r4, r9
 80003aa:	fa04 f606 	lsl.w	r6, r4, r6
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	431e      	orrs	r6, r3
 80003b4:	40cc      	lsrs	r4, r1
 80003b6:	e9c5 6400 	strd	r6, r4, [r5]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e74f      	b.n	800025e <__udivmoddi4+0xa2>
 80003be:	fbb1 fcf2 	udiv	ip, r1, r2
 80003c2:	0c01      	lsrs	r1, r0, #16
 80003c4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003c8:	b280      	uxth	r0, r0
 80003ca:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003ce:	463b      	mov	r3, r7
 80003d0:	4638      	mov	r0, r7
 80003d2:	463c      	mov	r4, r7
 80003d4:	46b8      	mov	r8, r7
 80003d6:	46be      	mov	lr, r7
 80003d8:	2620      	movs	r6, #32
 80003da:	fbb1 f1f7 	udiv	r1, r1, r7
 80003de:	eba2 0208 	sub.w	r2, r2, r8
 80003e2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003e6:	e766      	b.n	80002b6 <__udivmoddi4+0xfa>
 80003e8:	4601      	mov	r1, r0
 80003ea:	e718      	b.n	800021e <__udivmoddi4+0x62>
 80003ec:	4610      	mov	r0, r2
 80003ee:	e72c      	b.n	800024a <__udivmoddi4+0x8e>
 80003f0:	f1c6 0220 	rsb	r2, r6, #32
 80003f4:	fa2e f302 	lsr.w	r3, lr, r2
 80003f8:	40b7      	lsls	r7, r6
 80003fa:	40b1      	lsls	r1, r6
 80003fc:	fa20 f202 	lsr.w	r2, r0, r2
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	430a      	orrs	r2, r1
 8000406:	fbb3 f8fe 	udiv	r8, r3, lr
 800040a:	b2bc      	uxth	r4, r7
 800040c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000410:	0c11      	lsrs	r1, r2, #16
 8000412:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000416:	fb08 f904 	mul.w	r9, r8, r4
 800041a:	40b0      	lsls	r0, r6
 800041c:	4589      	cmp	r9, r1
 800041e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000422:	b280      	uxth	r0, r0
 8000424:	d93e      	bls.n	80004a4 <__udivmoddi4+0x2e8>
 8000426:	1879      	adds	r1, r7, r1
 8000428:	f108 3cff 	add.w	ip, r8, #4294967295
 800042c:	d201      	bcs.n	8000432 <__udivmoddi4+0x276>
 800042e:	4589      	cmp	r9, r1
 8000430:	d81f      	bhi.n	8000472 <__udivmoddi4+0x2b6>
 8000432:	eba1 0109 	sub.w	r1, r1, r9
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fb09 f804 	mul.w	r8, r9, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	b292      	uxth	r2, r2
 8000444:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000448:	4542      	cmp	r2, r8
 800044a:	d229      	bcs.n	80004a0 <__udivmoddi4+0x2e4>
 800044c:	18ba      	adds	r2, r7, r2
 800044e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000452:	d2c4      	bcs.n	80003de <__udivmoddi4+0x222>
 8000454:	4542      	cmp	r2, r8
 8000456:	d2c2      	bcs.n	80003de <__udivmoddi4+0x222>
 8000458:	f1a9 0102 	sub.w	r1, r9, #2
 800045c:	443a      	add	r2, r7
 800045e:	e7be      	b.n	80003de <__udivmoddi4+0x222>
 8000460:	45f0      	cmp	r8, lr
 8000462:	d29d      	bcs.n	80003a0 <__udivmoddi4+0x1e4>
 8000464:	ebbe 0302 	subs.w	r3, lr, r2
 8000468:	eb6c 0c07 	sbc.w	ip, ip, r7
 800046c:	3801      	subs	r0, #1
 800046e:	46e1      	mov	r9, ip
 8000470:	e796      	b.n	80003a0 <__udivmoddi4+0x1e4>
 8000472:	eba7 0909 	sub.w	r9, r7, r9
 8000476:	4449      	add	r1, r9
 8000478:	f1a8 0c02 	sub.w	ip, r8, #2
 800047c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000480:	fb09 f804 	mul.w	r8, r9, r4
 8000484:	e7db      	b.n	800043e <__udivmoddi4+0x282>
 8000486:	4673      	mov	r3, lr
 8000488:	e77f      	b.n	800038a <__udivmoddi4+0x1ce>
 800048a:	4650      	mov	r0, sl
 800048c:	e766      	b.n	800035c <__udivmoddi4+0x1a0>
 800048e:	4608      	mov	r0, r1
 8000490:	e6fd      	b.n	800028e <__udivmoddi4+0xd2>
 8000492:	443b      	add	r3, r7
 8000494:	3a02      	subs	r2, #2
 8000496:	e733      	b.n	8000300 <__udivmoddi4+0x144>
 8000498:	f1ac 0c02 	sub.w	ip, ip, #2
 800049c:	443b      	add	r3, r7
 800049e:	e71c      	b.n	80002da <__udivmoddi4+0x11e>
 80004a0:	4649      	mov	r1, r9
 80004a2:	e79c      	b.n	80003de <__udivmoddi4+0x222>
 80004a4:	eba1 0109 	sub.w	r1, r1, r9
 80004a8:	46c4      	mov	ip, r8
 80004aa:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ae:	fb09 f804 	mul.w	r8, r9, r4
 80004b2:	e7c4      	b.n	800043e <__udivmoddi4+0x282>

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80004be:	4b0b      	ldr	r3, [pc, #44]	@ (80004ec <APPD_EnableCPU2+0x34>)
 80004c0:	1d3c      	adds	r4, r7, #4
 80004c2:	461d      	mov	r5, r3
 80004c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004cc:	c403      	stmia	r4!, {r0, r1}
 80004ce:	8022      	strh	r2, [r4, #0]
 80004d0:	3402      	adds	r4, #2
 80004d2:	0c13      	lsrs	r3, r2, #16
 80004d4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80004d6:	f008 fa37 	bl	8008948 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	4618      	mov	r0, r3
 80004de:	f007 fcc8 	bl	8007e72 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80004e2:	bf00      	nop
}
 80004e4:	3720      	adds	r7, #32
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bdb0      	pop	{r4, r5, r7, pc}
 80004ea:	bf00      	nop
 80004ec:	0800aae0 	.word	0x0800aae0

080004f0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80004f8:	4b07      	ldr	r3, [pc, #28]	@ (8000518 <LL_C2_PWR_SetPowerMode+0x28>)
 80004fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80004fe:	f023 0207 	bic.w	r2, r3, #7
 8000502:	4905      	ldr	r1, [pc, #20]	@ (8000518 <LL_C2_PWR_SetPowerMode+0x28>)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4313      	orrs	r3, r2
 8000508:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	58000400 	.word	0x58000400

0800051c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <LL_EXTI_EnableIT_32_63+0x24>)
 8000526:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800052a:	4905      	ldr	r1, [pc, #20]	@ (8000540 <LL_EXTI_EnableIT_32_63+0x24>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4313      	orrs	r3, r2
 8000530:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	58000800 	.word	0x58000800

08000544 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800054c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000550:	4a0a      	ldr	r2, [pc, #40]	@ (800057c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000552:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000556:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800055a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800055e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	021b      	lsls	r3, r3, #8
 8000566:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800056a:	4313      	orrs	r3, r2
 800056c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	cafecafe 	.word	0xcafecafe

08000580 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000588:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000592:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4313      	orrs	r3, r2
 800059a:	608b      	str	r3, [r1, #8]
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80005ac:	4b04      	ldr	r3, [pc, #16]	@ (80005c0 <LL_DBGMCU_GetDeviceID+0x18>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	e0042000 	.word	0xe0042000

080005c4 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80005c8:	4b04      	ldr	r3, [pc, #16]	@ (80005dc <LL_DBGMCU_GetRevisionID+0x18>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	0c1b      	lsrs	r3, r3, #16
 80005ce:	b29b      	uxth	r3, r3
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e0042000 	.word	0xe0042000

080005e0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	22ff      	movs	r2, #255	@ 0xff
 80005ec:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b083      	sub	sp, #12
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	22ca      	movs	r2, #202	@ 0xca
 8000606:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2253      	movs	r2, #83	@ 0x53
 800060c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800061a:	b480      	push	{r7}
 800061c:	b083      	sub	sp, #12
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
 8000622:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	f023 0207 	bic.w	r2, r3, #7
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	431a      	orrs	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	609a      	str	r2, [r3, #8]
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000644:	4b04      	ldr	r3, [pc, #16]	@ (8000658 <MX_APPE_Config+0x18>)
 8000646:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800064a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800064c:	f000 f824 	bl	8000698 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000650:	f000 f829 	bl	80006a6 <Config_HSE>

  return;
 8000654:	bf00      	nop
}
 8000656:	bd80      	pop	{r7, pc}
 8000658:	58004000 	.word	0x58004000

0800065c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000660:	f000 f835 	bl	80006ce <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000664:	f000 f84e 	bl	8000704 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000668:	4903      	ldr	r1, [pc, #12]	@ (8000678 <MX_APPE_Init+0x1c>)
 800066a:	2000      	movs	r0, #0
 800066c:	f000 fd68 	bl	8001140 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000670:	f000 f856 	bl	8000720 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000674:	bf00      	nop
}
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000258 	.word	0x20000258

0800067c <Init_Smps>:

void Init_Smps(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000680:	bf00      	nop
}
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <Init_Exti>:

void Init_Exti(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800068e:	2050      	movs	r0, #80	@ 0x50
 8000690:	f7ff ff44 	bl	800051c <LL_EXTI_EnableIT_32_63>

  return;
 8000694:	bf00      	nop
}
 8000696:	bd80      	pop	{r7, pc}

08000698 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800069c:	bf00      	nop
}
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f008 f9d7 	bl	8008a60 <OTP_Read>
 80006b2:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d005      	beq.n	80006c6 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	799b      	ldrb	r3, [r3, #6]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff40 	bl	8000544 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80006c4:	bf00      	nop
 80006c6:	bf00      	nop
}
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <System_Init>:

static void System_Init(void)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	af00      	add	r7, sp, #0
  Init_Smps();
 80006d2:	f7ff ffd3 	bl	800067c <Init_Smps>

  Init_Exti();
 80006d6:	f7ff ffd8 	bl	800068a <Init_Exti>

  Init_Rtc();
 80006da:	f000 f803 	bl	80006e4 <Init_Rtc>

  return;
 80006de:	bf00      	nop
}
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <Init_Rtc>:

static void Init_Rtc(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80006e8:	4805      	ldr	r0, [pc, #20]	@ (8000700 <Init_Rtc+0x1c>)
 80006ea:	f7ff ff86 	bl	80005fa <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80006ee:	2100      	movs	r1, #0
 80006f0:	4803      	ldr	r0, [pc, #12]	@ (8000700 <Init_Rtc+0x1c>)
 80006f2:	f7ff ff92 	bl	800061a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80006f6:	4802      	ldr	r0, [pc, #8]	@ (8000700 <Init_Rtc+0x1c>)
 80006f8:	f7ff ff72 	bl	80005e0 <LL_RTC_EnableWriteProtection>

  return;
 80006fc:	bf00      	nop
}
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40002800 	.word	0x40002800

08000704 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000708:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800070c:	f7ff ff38 	bl	8000580 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000710:	f009 fe68 	bl	800a3e4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000714:	2004      	movs	r0, #4
 8000716:	f7ff feeb 	bl	80004f0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800071a:	bf00      	nop
}
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000726:	f007 ff59 	bl	80085dc <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800072a:	4a11      	ldr	r2, [pc, #68]	@ (8000770 <appe_Tl_Init+0x50>)
 800072c:	2100      	movs	r1, #0
 800072e:	2008      	movs	r0, #8
 8000730:	f009 ff96 	bl	800a660 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <appe_Tl_Init+0x54>)
 8000736:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <appe_Tl_Init+0x58>)
 800073a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800073c:	463b      	mov	r3, r7
 800073e:	4619      	mov	r1, r3
 8000740:	480e      	ldr	r0, [pc, #56]	@ (800077c <appe_Tl_Init+0x5c>)
 8000742:	f007 fe0d 	bl	8008360 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <appe_Tl_Init+0x60>)
 8000748:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800074a:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <appe_Tl_Init+0x64>)
 800074c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <appe_Tl_Init+0x68>)
 8000750:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000752:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000756:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	4618      	mov	r0, r3
 800075e:	f008 f87f 	bl	8008860 <TL_MM_Init>

  TL_Enable();
 8000762:	f007 ff35 	bl	80085d0 <TL_Enable>

  return;
 8000766:	bf00      	nop
}
 8000768:	3720      	adds	r7, #32
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	08008399 	.word	0x08008399
 8000774:	20030734 	.word	0x20030734
 8000778:	0800078d 	.word	0x0800078d
 800077c:	080007a5 	.word	0x080007a5
 8000780:	2003094c 	.word	0x2003094c
 8000784:	20030840 	.word	0x20030840
 8000788:	200301f8 	.word	0x200301f8

0800078c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000796:	bf00      	nop
}
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
	...

080007a4 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	330b      	adds	r3, #11
 80007b2:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80007be:	2b07      	cmp	r3, #7
 80007c0:	d81f      	bhi.n	8000802 <APPE_SysUserEvtRx+0x5e>
 80007c2:	a201      	add	r2, pc, #4	@ (adr r2, 80007c8 <APPE_SysUserEvtRx+0x24>)
 80007c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c8:	080007e9 	.word	0x080007e9
 80007cc:	080007fb 	.word	0x080007fb
 80007d0:	08000803 	.word	0x08000803
 80007d4:	08000803 	.word	0x08000803
 80007d8:	08000803 	.word	0x08000803
 80007dc:	08000803 	.word	0x08000803
 80007e0:	08000803 	.word	0x08000803
 80007e4:	08000803 	.word	0x08000803
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4618      	mov	r0, r3
 80007ee:	f007 fb6d 	bl	8007ecc <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f000 f81b 	bl	800082e <APPE_SysEvtReadyProcessing>
    break;
 80007f8:	e004      	b.n	8000804 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f000 f806 	bl	800080c <APPE_SysEvtError>
    break;
 8000800:	e000      	b.n	8000804 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000802:	bf00      	nop
  }

  return;
 8000804:	bf00      	nop
}
 8000806:	3720      	adds	r7, #32
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	330b      	adds	r3, #11
 800081a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	3302      	adds	r3, #2
 8000820:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000822:	bf00      	nop
}
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b08a      	sub	sp, #40	@ 0x28
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	330b      	adds	r3, #11
 8000852:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	3302      	adds	r3, #2
 8000858:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800085a:	69bb      	ldr	r3, [r7, #24]
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d11d      	bne.n	800089e <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000862:	f7ff fe29 	bl	80004b8 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000866:	230f      	movs	r3, #15
 8000868:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800086a:	237f      	movs	r3, #127	@ 0x7f
 800086c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800086e:	f7ff fea9 	bl	80005c4 <LL_DBGMCU_GetRevisionID>
 8000872:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000876:	b29b      	uxth	r3, r3
 8000878:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800087a:	f7ff fe95 	bl	80005a8 <LL_DBGMCU_GetDeviceID>
 800087e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000880:	6a3b      	ldr	r3, [r7, #32]
 8000882:	b29b      	uxth	r3, r3
 8000884:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	4618      	mov	r0, r3
 800088c:	f007 fb08 	bl	8007ea0 <SHCI_C2_Config>

    APP_BLE_Init();
 8000890:	f008 f9f0 	bl	8008c74 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000894:	2100      	movs	r1, #0
 8000896:	2001      	movs	r0, #1
 8000898:	f009 fdb6 	bl	800a408 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 800089c:	e007      	b.n	80008ae <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d103      	bne.n	80008ae <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
  return;
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
}
 80008b0:	3728      	adds	r7, #40	@ 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80008ba:	f04f 30ff 	mov.w	r0, #4294967295
 80008be:	f009 fdd3 	bl	800a468 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80008ca:	bf00      	nop
}
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80008dc:	2100      	movs	r1, #0
 80008de:	2008      	movs	r0, #8
 80008e0:	f009 fee0 	bl	800a6a4 <UTIL_SEQ_SetTask>
  return;
 80008e4:	bf00      	nop
}
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008f4:	2002      	movs	r0, #2
 80008f6:	f009 ff41 	bl	800a77c <UTIL_SEQ_SetEvt>
  return;
 80008fa:	bf00      	nop
}
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800090a:	2002      	movs	r0, #2
 800090c:	f009 ff56 	bl	800a7bc <UTIL_SEQ_WaitEvt>
  return;
 8000910:	bf00      	nop
}
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <LL_EXTI_EnableIT_0_31>:
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <LL_EXTI_EnableIT_0_31+0x24>)
 8000922:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8000926:	4905      	ldr	r1, [pc, #20]	@ (800093c <LL_EXTI_EnableIT_0_31+0x24>)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4313      	orrs	r3, r2
 800092c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	58000800 	.word	0x58000800

08000940 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4904      	ldr	r1, [pc, #16]	@ (8000960 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4313      	orrs	r3, r2
 8000952:	600b      	str	r3, [r1, #0]

}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	58000800 	.word	0x58000800

08000964 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <ReadRtcSsrValue+0x3c>)
 800096c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800096e:	b29b      	uxth	r3, r3
 8000970:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <ReadRtcSsrValue+0x3c>)
 8000974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000976:	b29b      	uxth	r3, r3
 8000978:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800097a:	e005      	b.n	8000988 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000980:	4b07      	ldr	r3, [pc, #28]	@ (80009a0 <ReadRtcSsrValue+0x3c>)
 8000982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000984:	b29b      	uxth	r3, r3
 8000986:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	429a      	cmp	r2, r3
 800098e:	d1f5      	bne.n	800097c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000990:	683b      	ldr	r3, [r7, #0]
}
 8000992:	4618      	mov	r0, r3
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40002800 	.word	0x40002800

080009a4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	460a      	mov	r2, r1
 80009ae:	71fb      	strb	r3, [r7, #7]
 80009b0:	4613      	mov	r3, r2
 80009b2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80009b4:	79ba      	ldrb	r2, [r7, #6]
 80009b6:	491d      	ldr	r1, [pc, #116]	@ (8000a2c <LinkTimerAfter+0x88>)
 80009b8:	4613      	mov	r3, r2
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	4413      	add	r3, r2
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	440b      	add	r3, r1
 80009c2:	3315      	adds	r3, #21
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	2b06      	cmp	r3, #6
 80009cc:	d009      	beq.n	80009e2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80009ce:	7bfa      	ldrb	r2, [r7, #15]
 80009d0:	4916      	ldr	r1, [pc, #88]	@ (8000a2c <LinkTimerAfter+0x88>)
 80009d2:	4613      	mov	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	440b      	add	r3, r1
 80009dc:	3314      	adds	r3, #20
 80009de:	79fa      	ldrb	r2, [r7, #7]
 80009e0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	4911      	ldr	r1, [pc, #68]	@ (8000a2c <LinkTimerAfter+0x88>)
 80009e6:	4613      	mov	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	440b      	add	r3, r1
 80009f0:	3315      	adds	r3, #21
 80009f2:	7bfa      	ldrb	r2, [r7, #15]
 80009f4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80009f6:	79fa      	ldrb	r2, [r7, #7]
 80009f8:	490c      	ldr	r1, [pc, #48]	@ (8000a2c <LinkTimerAfter+0x88>)
 80009fa:	4613      	mov	r3, r2
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	4413      	add	r3, r2
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	440b      	add	r3, r1
 8000a04:	3314      	adds	r3, #20
 8000a06:	79ba      	ldrb	r2, [r7, #6]
 8000a08:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000a0a:	79ba      	ldrb	r2, [r7, #6]
 8000a0c:	4907      	ldr	r1, [pc, #28]	@ (8000a2c <LinkTimerAfter+0x88>)
 8000a0e:	4613      	mov	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4413      	add	r3, r2
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	440b      	add	r3, r1
 8000a18:	3315      	adds	r3, #21
 8000a1a:	79fa      	ldrb	r2, [r7, #7]
 8000a1c:	701a      	strb	r2, [r3, #0]

  return;
 8000a1e:	bf00      	nop
}
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	200000e8 	.word	0x200000e8

08000a30 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	460a      	mov	r2, r1
 8000a3a:	71fb      	strb	r3, [r7, #7]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000a40:	4b29      	ldr	r3, [pc, #164]	@ (8000ae8 <LinkTimerBefore+0xb8>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	79ba      	ldrb	r2, [r7, #6]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d032      	beq.n	8000ab2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000a4c:	79ba      	ldrb	r2, [r7, #6]
 8000a4e:	4927      	ldr	r1, [pc, #156]	@ (8000aec <LinkTimerBefore+0xbc>)
 8000a50:	4613      	mov	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4413      	add	r3, r2
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	440b      	add	r3, r1
 8000a5a:	3314      	adds	r3, #20
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000a60:	7bfa      	ldrb	r2, [r7, #15]
 8000a62:	4922      	ldr	r1, [pc, #136]	@ (8000aec <LinkTimerBefore+0xbc>)
 8000a64:	4613      	mov	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	4413      	add	r3, r2
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	440b      	add	r3, r1
 8000a6e:	3315      	adds	r3, #21
 8000a70:	79fa      	ldrb	r2, [r7, #7]
 8000a72:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a74:	79fa      	ldrb	r2, [r7, #7]
 8000a76:	491d      	ldr	r1, [pc, #116]	@ (8000aec <LinkTimerBefore+0xbc>)
 8000a78:	4613      	mov	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	4413      	add	r3, r2
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	440b      	add	r3, r1
 8000a82:	3315      	adds	r3, #21
 8000a84:	79ba      	ldrb	r2, [r7, #6]
 8000a86:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000a88:	79fa      	ldrb	r2, [r7, #7]
 8000a8a:	4918      	ldr	r1, [pc, #96]	@ (8000aec <LinkTimerBefore+0xbc>)
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	4413      	add	r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	440b      	add	r3, r1
 8000a96:	3314      	adds	r3, #20
 8000a98:	7bfa      	ldrb	r2, [r7, #15]
 8000a9a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000a9c:	79ba      	ldrb	r2, [r7, #6]
 8000a9e:	4913      	ldr	r1, [pc, #76]	@ (8000aec <LinkTimerBefore+0xbc>)
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	4413      	add	r3, r2
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	440b      	add	r3, r1
 8000aaa:	3314      	adds	r3, #20
 8000aac:	79fa      	ldrb	r2, [r7, #7]
 8000aae:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000ab0:	e014      	b.n	8000adc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000ab2:	79fa      	ldrb	r2, [r7, #7]
 8000ab4:	490d      	ldr	r1, [pc, #52]	@ (8000aec <LinkTimerBefore+0xbc>)
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	440b      	add	r3, r1
 8000ac0:	3315      	adds	r3, #21
 8000ac2:	79ba      	ldrb	r2, [r7, #6]
 8000ac4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000ac6:	79ba      	ldrb	r2, [r7, #6]
 8000ac8:	4908      	ldr	r1, [pc, #32]	@ (8000aec <LinkTimerBefore+0xbc>)
 8000aca:	4613      	mov	r3, r2
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	4413      	add	r3, r2
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	440b      	add	r3, r1
 8000ad4:	3314      	adds	r3, #20
 8000ad6:	79fa      	ldrb	r2, [r7, #7]
 8000ad8:	701a      	strb	r2, [r3, #0]
  return;
 8000ada:	bf00      	nop
}
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000178 	.word	0x20000178
 8000aec:	200000e8 	.word	0x200000e8

08000af0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000afa:	4b4e      	ldr	r3, [pc, #312]	@ (8000c34 <linkTimer+0x144>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	2b06      	cmp	r3, #6
 8000b02:	d118      	bne.n	8000b36 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000b04:	4b4b      	ldr	r3, [pc, #300]	@ (8000c34 <linkTimer+0x144>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4b4b      	ldr	r3, [pc, #300]	@ (8000c38 <linkTimer+0x148>)
 8000b0c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000b0e:	4a49      	ldr	r2, [pc, #292]	@ (8000c34 <linkTimer+0x144>)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000b14:	79fa      	ldrb	r2, [r7, #7]
 8000b16:	4949      	ldr	r1, [pc, #292]	@ (8000c3c <linkTimer+0x14c>)
 8000b18:	4613      	mov	r3, r2
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	4413      	add	r3, r2
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	440b      	add	r3, r1
 8000b22:	3315      	adds	r3, #21
 8000b24:	2206      	movs	r2, #6
 8000b26:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000b28:	4b45      	ldr	r3, [pc, #276]	@ (8000c40 <linkTimer+0x150>)
 8000b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b2e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	81fb      	strh	r3, [r7, #14]
 8000b34:	e078      	b.n	8000c28 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000b36:	f000 f909 	bl	8000d4c <ReturnTimeElapsed>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	493e      	ldr	r1, [pc, #248]	@ (8000c3c <linkTimer+0x14c>)
 8000b42:	4613      	mov	r3, r2
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	4413      	add	r3, r2
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	440b      	add	r3, r1
 8000b4c:	3308      	adds	r3, #8
 8000b4e:	6819      	ldr	r1, [r3, #0]
 8000b50:	89fb      	ldrh	r3, [r7, #14]
 8000b52:	79fa      	ldrb	r2, [r7, #7]
 8000b54:	4419      	add	r1, r3
 8000b56:	4839      	ldr	r0, [pc, #228]	@ (8000c3c <linkTimer+0x14c>)
 8000b58:	4613      	mov	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	4413      	add	r3, r2
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	4403      	add	r3, r0
 8000b62:	3308      	adds	r3, #8
 8000b64:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000b66:	79fa      	ldrb	r2, [r7, #7]
 8000b68:	4934      	ldr	r1, [pc, #208]	@ (8000c3c <linkTimer+0x14c>)
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	4413      	add	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	440b      	add	r3, r1
 8000b74:	3308      	adds	r3, #8
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000b7a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c34 <linkTimer+0x144>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	4619      	mov	r1, r3
 8000b82:	4a2e      	ldr	r2, [pc, #184]	@ (8000c3c <linkTimer+0x14c>)
 8000b84:	460b      	mov	r3, r1
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	440b      	add	r3, r1
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	4413      	add	r3, r2
 8000b8e:	3308      	adds	r3, #8
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d337      	bcc.n	8000c08 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000b98:	4b26      	ldr	r3, [pc, #152]	@ (8000c34 <linkTimer+0x144>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000b9e:	7b7a      	ldrb	r2, [r7, #13]
 8000ba0:	4926      	ldr	r1, [pc, #152]	@ (8000c3c <linkTimer+0x14c>)
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	4413      	add	r3, r2
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	440b      	add	r3, r1
 8000bac:	3315      	adds	r3, #21
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000bb2:	e013      	b.n	8000bdc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000bb4:	7b7a      	ldrb	r2, [r7, #13]
 8000bb6:	4921      	ldr	r1, [pc, #132]	@ (8000c3c <linkTimer+0x14c>)
 8000bb8:	4613      	mov	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3315      	adds	r3, #21
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000bc8:	7b7a      	ldrb	r2, [r7, #13]
 8000bca:	491c      	ldr	r1, [pc, #112]	@ (8000c3c <linkTimer+0x14c>)
 8000bcc:	4613      	mov	r3, r2
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	4413      	add	r3, r2
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	440b      	add	r3, r1
 8000bd6:	3315      	adds	r3, #21
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000bdc:	7b3b      	ldrb	r3, [r7, #12]
 8000bde:	2b06      	cmp	r3, #6
 8000be0:	d00b      	beq.n	8000bfa <linkTimer+0x10a>
 8000be2:	7b3a      	ldrb	r2, [r7, #12]
 8000be4:	4915      	ldr	r1, [pc, #84]	@ (8000c3c <linkTimer+0x14c>)
 8000be6:	4613      	mov	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4413      	add	r3, r2
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	440b      	add	r3, r1
 8000bf0:	3308      	adds	r3, #8
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	68ba      	ldr	r2, [r7, #8]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d2dc      	bcs.n	8000bb4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000bfa:	7b7a      	ldrb	r2, [r7, #13]
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fecf 	bl	80009a4 <LinkTimerAfter>
 8000c06:	e00f      	b.n	8000c28 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000c08:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <linkTimer+0x144>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4611      	mov	r1, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff0c 	bl	8000a30 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <linkTimer+0x144>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <linkTimer+0x148>)
 8000c20:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000c22:	4a04      	ldr	r2, [pc, #16]	@ (8000c34 <linkTimer+0x144>)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000c28:	89fb      	ldrh	r3, [r7, #14]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000178 	.word	0x20000178
 8000c38:	20000179 	.word	0x20000179
 8000c3c:	200000e8 	.word	0x200000e8
 8000c40:	2000017c 	.word	0x2000017c

08000c44 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	460a      	mov	r2, r1
 8000c4e:	71fb      	strb	r3, [r7, #7]
 8000c50:	4613      	mov	r3, r2
 8000c52:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000c54:	4b39      	ldr	r3, [pc, #228]	@ (8000d3c <UnlinkTimer+0xf8>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	79fa      	ldrb	r2, [r7, #7]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d111      	bne.n	8000c84 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c60:	4b36      	ldr	r3, [pc, #216]	@ (8000d3c <UnlinkTimer+0xf8>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b36      	ldr	r3, [pc, #216]	@ (8000d40 <UnlinkTimer+0xfc>)
 8000c68:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000c6a:	79fa      	ldrb	r2, [r7, #7]
 8000c6c:	4935      	ldr	r1, [pc, #212]	@ (8000d44 <UnlinkTimer+0x100>)
 8000c6e:	4613      	mov	r3, r2
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	4413      	add	r3, r2
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	440b      	add	r3, r1
 8000c78:	3315      	adds	r3, #21
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d3c <UnlinkTimer+0xf8>)
 8000c80:	701a      	strb	r2, [r3, #0]
 8000c82:	e03e      	b.n	8000d02 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000c84:	79fa      	ldrb	r2, [r7, #7]
 8000c86:	492f      	ldr	r1, [pc, #188]	@ (8000d44 <UnlinkTimer+0x100>)
 8000c88:	4613      	mov	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	4413      	add	r3, r2
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	440b      	add	r3, r1
 8000c92:	3314      	adds	r3, #20
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000c98:	79fa      	ldrb	r2, [r7, #7]
 8000c9a:	492a      	ldr	r1, [pc, #168]	@ (8000d44 <UnlinkTimer+0x100>)
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4413      	add	r3, r2
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	440b      	add	r3, r1
 8000ca6:	3315      	adds	r3, #21
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000cac:	79f9      	ldrb	r1, [r7, #7]
 8000cae:	7bfa      	ldrb	r2, [r7, #15]
 8000cb0:	4824      	ldr	r0, [pc, #144]	@ (8000d44 <UnlinkTimer+0x100>)
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	440b      	add	r3, r1
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	4403      	add	r3, r0
 8000cbc:	3315      	adds	r3, #21
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2d8      	uxtb	r0, r3
 8000cc2:	4920      	ldr	r1, [pc, #128]	@ (8000d44 <UnlinkTimer+0x100>)
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4413      	add	r3, r2
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	440b      	add	r3, r1
 8000cce:	3315      	adds	r3, #21
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cd4:	7bbb      	ldrb	r3, [r7, #14]
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d013      	beq.n	8000d02 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000cda:	79f9      	ldrb	r1, [r7, #7]
 8000cdc:	7bba      	ldrb	r2, [r7, #14]
 8000cde:	4819      	ldr	r0, [pc, #100]	@ (8000d44 <UnlinkTimer+0x100>)
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	440b      	add	r3, r1
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	4403      	add	r3, r0
 8000cea:	3314      	adds	r3, #20
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b2d8      	uxtb	r0, r3
 8000cf0:	4914      	ldr	r1, [pc, #80]	@ (8000d44 <UnlinkTimer+0x100>)
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	4413      	add	r3, r2
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	440b      	add	r3, r1
 8000cfc:	3314      	adds	r3, #20
 8000cfe:	4602      	mov	r2, r0
 8000d00:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000d02:	79fa      	ldrb	r2, [r7, #7]
 8000d04:	490f      	ldr	r1, [pc, #60]	@ (8000d44 <UnlinkTimer+0x100>)
 8000d06:	4613      	mov	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	440b      	add	r3, r1
 8000d10:	330c      	adds	r3, #12
 8000d12:	2201      	movs	r2, #1
 8000d14:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <UnlinkTimer+0xf8>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b06      	cmp	r3, #6
 8000d1e:	d107      	bne.n	8000d30 <UnlinkTimer+0xec>
 8000d20:	79bb      	ldrb	r3, [r7, #6]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d104      	bne.n	8000d30 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <UnlinkTimer+0x104>)
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000d2e:	bf00      	nop
 8000d30:	bf00      	nop
}
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	20000178 	.word	0x20000178
 8000d40:	20000179 	.word	0x20000179
 8000d44:	200000e8 	.word	0x200000e8
 8000d48:	2000017c 	.word	0x2000017c

08000d4c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000d52:	4b1a      	ldr	r3, [pc, #104]	@ (8000dbc <ReturnTimeElapsed+0x70>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d5a:	d026      	beq.n	8000daa <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000d5c:	f7ff fe02 	bl	8000964 <ReadRtcSsrValue>
 8000d60:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000d62:	4b16      	ldr	r3, [pc, #88]	@ (8000dbc <ReturnTimeElapsed+0x70>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d805      	bhi.n	8000d78 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000d6c:	4b13      	ldr	r3, [pc, #76]	@ (8000dbc <ReturnTimeElapsed+0x70>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	e00a      	b.n	8000d8e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000d78:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <ReturnTimeElapsed+0x74>)
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000d84:	4b0d      	ldr	r3, [pc, #52]	@ (8000dbc <ReturnTimeElapsed+0x70>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc4 <ReturnTimeElapsed+0x78>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	fb02 f303 	mul.w	r3, r2, r3
 8000d9a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <ReturnTimeElapsed+0x7c>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	40d3      	lsrs	r3, r2
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	e001      	b.n	8000dae <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	b29b      	uxth	r3, r3
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	2000017c 	.word	0x2000017c
 8000dc0:	20000184 	.word	0x20000184
 8000dc4:	20000182 	.word	0x20000182
 8000dc8:	20000181 	.word	0x20000181

08000dcc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d108      	bne.n	8000dee <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ddc:	f7ff fdc2 	bl	8000964 <ReadRtcSsrValue>
 8000de0:	4603      	mov	r3, r0
 8000de2:	4a21      	ldr	r2, [pc, #132]	@ (8000e68 <RestartWakeupCounter+0x9c>)
 8000de4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000de6:	2003      	movs	r0, #3
 8000de8:	f001 fa93 	bl	8002312 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000dec:	e039      	b.n	8000e62 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d803      	bhi.n	8000dfc <RestartWakeupCounter+0x30>
 8000df4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e6c <RestartWakeupCounter+0xa0>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d002      	beq.n	8000e02 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000e02:	bf00      	nop
 8000e04:	4b1a      	ldr	r3, [pc, #104]	@ (8000e70 <RestartWakeupCounter+0xa4>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0f8      	beq.n	8000e04 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000e12:	4b17      	ldr	r3, [pc, #92]	@ (8000e70 <RestartWakeupCounter+0xa4>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <RestartWakeupCounter+0xa4>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000e22:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e24:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <RestartWakeupCounter+0xa8>)
 8000e26:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e2a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	f001 fa7e 	bl	800232e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000e32:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <RestartWakeupCounter+0xac>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	0c1b      	lsrs	r3, r3, #16
 8000e38:	041b      	lsls	r3, r3, #16
 8000e3a:	88fa      	ldrh	r2, [r7, #6]
 8000e3c:	490e      	ldr	r1, [pc, #56]	@ (8000e78 <RestartWakeupCounter+0xac>)
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e42:	f7ff fd8f 	bl	8000964 <ReadRtcSsrValue>
 8000e46:	4603      	mov	r3, r0
 8000e48:	4a07      	ldr	r2, [pc, #28]	@ (8000e68 <RestartWakeupCounter+0x9c>)
 8000e4a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000e4c:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <RestartWakeupCounter+0xa4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	4b07      	ldr	r3, [pc, #28]	@ (8000e70 <RestartWakeupCounter+0xa4>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e5a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000e5c:	f3af 8000 	nop.w
  return ;
 8000e60:	bf00      	nop
}
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	2000017c 	.word	0x2000017c
 8000e6c:	20000181 	.word	0x20000181
 8000e70:	20000258 	.word	0x20000258
 8000e74:	58000800 	.word	0x58000800
 8000e78:	40002800 	.word	0x40002800

08000e7c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000e82:	4b45      	ldr	r3, [pc, #276]	@ (8000f98 <RescheduleTimerList+0x11c>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e8e:	d107      	bne.n	8000ea0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000e90:	bf00      	nop
 8000e92:	4b42      	ldr	r3, [pc, #264]	@ (8000f9c <RescheduleTimerList+0x120>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1f8      	bne.n	8000e92 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000ea0:	4b3e      	ldr	r3, [pc, #248]	@ (8000f9c <RescheduleTimerList+0x120>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	4b3d      	ldr	r3, [pc, #244]	@ (8000f9c <RescheduleTimerList+0x120>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000eae:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000eb0:	4b3b      	ldr	r3, [pc, #236]	@ (8000fa0 <RescheduleTimerList+0x124>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000eb6:	7bfa      	ldrb	r2, [r7, #15]
 8000eb8:	493a      	ldr	r1, [pc, #232]	@ (8000fa4 <RescheduleTimerList+0x128>)
 8000eba:	4613      	mov	r3, r2
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	4413      	add	r3, r2
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	440b      	add	r3, r1
 8000ec4:	3308      	adds	r3, #8
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000eca:	f7ff ff3f 	bl	8000d4c <ReturnTimeElapsed>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d205      	bcs.n	8000ee6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ede:	4b32      	ldr	r3, [pc, #200]	@ (8000fa8 <RescheduleTimerList+0x12c>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	e04d      	b.n	8000f82 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	4a30      	ldr	r2, [pc, #192]	@ (8000fac <RescheduleTimerList+0x130>)
 8000eea:	8812      	ldrh	r2, [r2, #0]
 8000eec:	b292      	uxth	r2, r2
 8000eee:	4413      	add	r3, r2
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d906      	bls.n	8000f06 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8000fac <RescheduleTimerList+0x130>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000efe:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa8 <RescheduleTimerList+0x12c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
 8000f04:	e03d      	b.n	8000f82 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f10:	4b25      	ldr	r3, [pc, #148]	@ (8000fa8 <RescheduleTimerList+0x12c>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f16:	e034      	b.n	8000f82 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000f18:	7bfa      	ldrb	r2, [r7, #15]
 8000f1a:	4922      	ldr	r1, [pc, #136]	@ (8000fa4 <RescheduleTimerList+0x128>)
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4413      	add	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	440b      	add	r3, r1
 8000f26:	3308      	adds	r3, #8
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d20a      	bcs.n	8000f46 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000f30:	7bfa      	ldrb	r2, [r7, #15]
 8000f32:	491c      	ldr	r1, [pc, #112]	@ (8000fa4 <RescheduleTimerList+0x128>)
 8000f34:	4613      	mov	r3, r2
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4413      	add	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	440b      	add	r3, r1
 8000f3e:	3308      	adds	r3, #8
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	e013      	b.n	8000f6e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000f46:	7bfa      	ldrb	r2, [r7, #15]
 8000f48:	4916      	ldr	r1, [pc, #88]	@ (8000fa4 <RescheduleTimerList+0x128>)
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4413      	add	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	440b      	add	r3, r1
 8000f54:	3308      	adds	r3, #8
 8000f56:	6819      	ldr	r1, [r3, #0]
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	1ac9      	subs	r1, r1, r3
 8000f5e:	4811      	ldr	r0, [pc, #68]	@ (8000fa4 <RescheduleTimerList+0x128>)
 8000f60:	4613      	mov	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	4403      	add	r3, r0
 8000f6a:	3308      	adds	r3, #8
 8000f6c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000f6e:	7bfa      	ldrb	r2, [r7, #15]
 8000f70:	490c      	ldr	r1, [pc, #48]	@ (8000fa4 <RescheduleTimerList+0x128>)
 8000f72:	4613      	mov	r3, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4413      	add	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	440b      	add	r3, r1
 8000f7c:	3315      	adds	r3, #21
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	2b06      	cmp	r3, #6
 8000f86:	d1c7      	bne.n	8000f18 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000f88:	89bb      	ldrh	r3, [r7, #12]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff1e 	bl	8000dcc <RestartWakeupCounter>

  return ;
 8000f90:	bf00      	nop
}
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40002800 	.word	0x40002800
 8000f9c:	20000258 	.word	0x20000258
 8000fa0:	20000178 	.word	0x20000178
 8000fa4:	200000e8 	.word	0x200000e8
 8000fa8:	20000180 	.word	0x20000180
 8000fac:	20000186 	.word	0x20000186

08000fb0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	@ 0x28
 8000fb4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8000fba:	617b      	str	r3, [r7, #20]
  return(result);
 8000fbc:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc0:	b672      	cpsid	i
}
 8000fc2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000fc4:	4b59      	ldr	r3, [pc, #356]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	22ca      	movs	r2, #202	@ 0xca
 8000fca:	625a      	str	r2, [r3, #36]	@ 0x24
 8000fcc:	4b57      	ldr	r3, [pc, #348]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2253      	movs	r2, #83	@ 0x53
 8000fd2:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000fd4:	4b55      	ldr	r3, [pc, #340]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	689a      	ldr	r2, [r3, #8]
 8000fda:	4b54      	ldr	r3, [pc, #336]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000fe2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000fe4:	4b52      	ldr	r3, [pc, #328]	@ (8001130 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000fec:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000ff0:	4950      	ldr	r1, [pc, #320]	@ (8001134 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	440b      	add	r3, r1
 8000ffc:	330c      	adds	r3, #12
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d16e      	bne.n	80010e4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001006:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800100a:	494a      	ldr	r1, [pc, #296]	@ (8001134 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800101a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800101e:	4945      	ldr	r1, [pc, #276]	@ (8001134 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001020:	4613      	mov	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	440b      	add	r3, r1
 800102a:	3310      	adds	r3, #16
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001030:	4b41      	ldr	r3, [pc, #260]	@ (8001138 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d04c      	beq.n	80010d4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800103a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800103e:	493d      	ldr	r1, [pc, #244]	@ (8001134 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	440b      	add	r3, r1
 800104a:	330d      	adds	r3, #13
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b01      	cmp	r3, #1
 8001052:	d124      	bne.n	800109e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001054:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001058:	2101      	movs	r1, #1
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fdf2 	bl	8000c44 <UnlinkTimer>
 8001060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001062:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	f383 8810 	msr	PRIMASK, r3
}
 800106a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800106c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001070:	4930      	ldr	r1, [pc, #192]	@ (8001134 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001072:	4613      	mov	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4413      	add	r3, r2
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	440b      	add	r3, r1
 800107c:	3304      	adds	r3, #4
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f9b8 	bl	80013fc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800108c:	4b27      	ldr	r3, [pc, #156]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	22ca      	movs	r2, #202	@ 0xca
 8001092:	625a      	str	r2, [r3, #36]	@ 0x24
 8001094:	4b25      	ldr	r3, [pc, #148]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2253      	movs	r2, #83	@ 0x53
 800109a:	625a      	str	r2, [r3, #36]	@ 0x24
 800109c:	e012      	b.n	80010c4 <HW_TS_RTC_Wakeup_Handler+0x114>
 800109e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f383 8810 	msr	PRIMASK, r3
}
 80010a8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80010aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f920 	bl	80012f4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80010b4:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	22ca      	movs	r2, #202	@ 0xca
 80010ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80010bc:	4b1b      	ldr	r3, [pc, #108]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2253      	movs	r2, #83	@ 0x53
 80010c2:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80010c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80010c8:	69fa      	ldr	r2, [r7, #28]
 80010ca:	4619      	mov	r1, r3
 80010cc:	69b8      	ldr	r0, [r7, #24]
 80010ce:	f000 fa1b 	bl	8001508 <HW_TS_RTC_Int_AppNot>
 80010d2:	e022      	b.n	800111a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80010d4:	f7ff fed2 	bl	8000e7c <RescheduleTimerList>
 80010d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010da:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	f383 8810 	msr	PRIMASK, r3
}
 80010e2:	e01a      	b.n	800111a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80010e4:	bf00      	nop
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0f8      	beq.n	80010e6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80010f4:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001104:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001106:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001108:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001110:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f383 8810 	msr	PRIMASK, r3
}
 8001118:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800111a:	4b04      	ldr	r3, [pc, #16]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	22ff      	movs	r2, #255	@ 0xff
 8001120:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001122:	bf00      	nop
}
 8001124:	3728      	adds	r7, #40	@ 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000258 	.word	0x20000258
 8001130:	20000178 	.word	0x20000178
 8001134:	200000e8 	.word	0x200000e8
 8001138:	20000180 	.word	0x20000180
 800113c:	58000800 	.word	0x58000800

08001140 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800114c:	4b5e      	ldr	r3, [pc, #376]	@ (80012c8 <HW_TS_Init+0x188>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	22ca      	movs	r2, #202	@ 0xca
 8001152:	625a      	str	r2, [r3, #36]	@ 0x24
 8001154:	4b5c      	ldr	r3, [pc, #368]	@ (80012c8 <HW_TS_Init+0x188>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2253      	movs	r2, #83	@ 0x53
 800115a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800115c:	4b5b      	ldr	r3, [pc, #364]	@ (80012cc <HW_TS_Init+0x18c>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	4a5a      	ldr	r2, [pc, #360]	@ (80012cc <HW_TS_Init+0x18c>)
 8001162:	f043 0320 	orr.w	r3, r3, #32
 8001166:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001168:	4b58      	ldr	r3, [pc, #352]	@ (80012cc <HW_TS_Init+0x18c>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	b2db      	uxtb	r3, r3
 8001174:	f1c3 0304 	rsb	r3, r3, #4
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b55      	ldr	r3, [pc, #340]	@ (80012d0 <HW_TS_Init+0x190>)
 800117c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800117e:	4b53      	ldr	r3, [pc, #332]	@ (80012cc <HW_TS_Init+0x18c>)
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001186:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800118a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	fa92 f2a2 	rbit	r2, r2
 8001192:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	2a00      	cmp	r2, #0
 800119c:	d101      	bne.n	80011a2 <HW_TS_Init+0x62>
  {
    return 32U;
 800119e:	2220      	movs	r2, #32
 80011a0:	e003      	b.n	80011aa <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	fab2 f282 	clz	r2, r2
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	40d3      	lsrs	r3, r2
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	3301      	adds	r3, #1
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b48      	ldr	r3, [pc, #288]	@ (80012d4 <HW_TS_Init+0x194>)
 80011b4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80011b6:	4b45      	ldr	r3, [pc, #276]	@ (80012cc <HW_TS_Init+0x18c>)
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	3301      	adds	r3, #1
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b44      	ldr	r3, [pc, #272]	@ (80012d8 <HW_TS_Init+0x198>)
 80011c8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80011ca:	4b43      	ldr	r3, [pc, #268]	@ (80012d8 <HW_TS_Init+0x198>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	4a40      	ldr	r2, [pc, #256]	@ (80012d4 <HW_TS_Init+0x194>)
 80011d2:	7812      	ldrb	r2, [r2, #0]
 80011d4:	fb02 f303 	mul.w	r3, r2, r3
 80011d8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80011dc:	4a3c      	ldr	r2, [pc, #240]	@ (80012d0 <HW_TS_Init+0x190>)
 80011de:	7812      	ldrb	r2, [r2, #0]
 80011e0:	40d3      	lsrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d904      	bls.n	80011f8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80011ee:	4b3b      	ldr	r3, [pc, #236]	@ (80012dc <HW_TS_Init+0x19c>)
 80011f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011f4:	801a      	strh	r2, [r3, #0]
 80011f6:	e003      	b.n	8001200 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b37      	ldr	r3, [pc, #220]	@ (80012dc <HW_TS_Init+0x19c>)
 80011fe:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001200:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001204:	f7ff fb9c 	bl	8000940 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001208:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800120c:	f7ff fb84 	bl	8000918 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d13d      	bne.n	8001292 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001216:	4b32      	ldr	r3, [pc, #200]	@ (80012e0 <HW_TS_Init+0x1a0>)
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800121c:	4b31      	ldr	r3, [pc, #196]	@ (80012e4 <HW_TS_Init+0x1a4>)
 800121e:	f04f 32ff 	mov.w	r2, #4294967295
 8001222:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001224:	2300      	movs	r3, #0
 8001226:	77fb      	strb	r3, [r7, #31]
 8001228:	e00c      	b.n	8001244 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800122a:	7ffa      	ldrb	r2, [r7, #31]
 800122c:	492e      	ldr	r1, [pc, #184]	@ (80012e8 <HW_TS_Init+0x1a8>)
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	440b      	add	r3, r1
 8001238:	330c      	adds	r3, #12
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800123e:	7ffb      	ldrb	r3, [r7, #31]
 8001240:	3301      	adds	r3, #1
 8001242:	77fb      	strb	r3, [r7, #31]
 8001244:	7ffb      	ldrb	r3, [r7, #31]
 8001246:	2b05      	cmp	r3, #5
 8001248:	d9ef      	bls.n	800122a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800124a:	4b28      	ldr	r3, [pc, #160]	@ (80012ec <HW_TS_Init+0x1ac>)
 800124c:	2206      	movs	r2, #6
 800124e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001250:	4b1d      	ldr	r3, [pc, #116]	@ (80012c8 <HW_TS_Init+0x188>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	4b1c      	ldr	r3, [pc, #112]	@ (80012c8 <HW_TS_Init+0x188>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800125e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001260:	4b19      	ldr	r3, [pc, #100]	@ (80012c8 <HW_TS_Init+0x188>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b17      	ldr	r3, [pc, #92]	@ (80012c8 <HW_TS_Init+0x188>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001270:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001272:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <HW_TS_Init+0x1b0>)
 8001274:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001278:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800127a:	2003      	movs	r0, #3
 800127c:	f001 f857 	bl	800232e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <HW_TS_Init+0x188>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <HW_TS_Init+0x188>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	e009      	b.n	80012a6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001292:	4b0d      	ldr	r3, [pc, #52]	@ (80012c8 <HW_TS_Init+0x188>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800129c:	2b00      	cmp	r3, #0
 800129e:	d002      	beq.n	80012a6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80012a0:	2003      	movs	r0, #3
 80012a2:	f001 f836 	bl	8002312 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80012a6:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <HW_TS_Init+0x188>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	22ff      	movs	r2, #255	@ 0xff
 80012ac:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80012ae:	2200      	movs	r2, #0
 80012b0:	2103      	movs	r1, #3
 80012b2:	2003      	movs	r0, #3
 80012b4:	f000 ffeb 	bl	800228e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012b8:	2003      	movs	r0, #3
 80012ba:	f001 f802 	bl	80022c2 <HAL_NVIC_EnableIRQ>

  return;
 80012be:	bf00      	nop
}
 80012c0:	3720      	adds	r7, #32
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000258 	.word	0x20000258
 80012cc:	40002800 	.word	0x40002800
 80012d0:	20000181 	.word	0x20000181
 80012d4:	20000182 	.word	0x20000182
 80012d8:	20000184 	.word	0x20000184
 80012dc:	20000186 	.word	0x20000186
 80012e0:	20000180 	.word	0x20000180
 80012e4:	2000017c 	.word	0x2000017c
 80012e8:	200000e8 	.word	0x200000e8
 80012ec:	20000178 	.word	0x20000178
 80012f0:	58000800 	.word	0x58000800

080012f4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012fe:	f3ef 8310 	mrs	r3, PRIMASK
 8001302:	60fb      	str	r3, [r7, #12]
  return(result);
 8001304:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001306:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800130c:	2003      	movs	r0, #3
 800130e:	f000 ffe6 	bl	80022de <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001312:	4b34      	ldr	r3, [pc, #208]	@ (80013e4 <HW_TS_Stop+0xf0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	22ca      	movs	r2, #202	@ 0xca
 8001318:	625a      	str	r2, [r3, #36]	@ 0x24
 800131a:	4b32      	ldr	r3, [pc, #200]	@ (80013e4 <HW_TS_Stop+0xf0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2253      	movs	r2, #83	@ 0x53
 8001320:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001322:	79fa      	ldrb	r2, [r7, #7]
 8001324:	4930      	ldr	r1, [pc, #192]	@ (80013e8 <HW_TS_Stop+0xf4>)
 8001326:	4613      	mov	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	440b      	add	r3, r1
 8001330:	330c      	adds	r3, #12
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d142      	bne.n	80013c0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fc80 	bl	8000c44 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001344:	4b29      	ldr	r3, [pc, #164]	@ (80013ec <HW_TS_Stop+0xf8>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800134a:	7cfb      	ldrb	r3, [r7, #19]
 800134c:	2b06      	cmp	r3, #6
 800134e:	d12f      	bne.n	80013b0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001350:	4b27      	ldr	r3, [pc, #156]	@ (80013f0 <HW_TS_Stop+0xfc>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800135c:	d107      	bne.n	800136e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800135e:	bf00      	nop
 8001360:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <HW_TS_Stop+0xf0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f8      	bne.n	8001360 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800136e:	4b1d      	ldr	r3, [pc, #116]	@ (80013e4 <HW_TS_Stop+0xf0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <HW_TS_Stop+0xf0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800137c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800137e:	bf00      	nop
 8001380:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <HW_TS_Stop+0xf0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f8      	beq.n	8001380 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <HW_TS_Stop+0xf0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b13      	ldr	r3, [pc, #76]	@ (80013e4 <HW_TS_Stop+0xf0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800139e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80013a0:	4b14      	ldr	r3, [pc, #80]	@ (80013f4 <HW_TS_Stop+0x100>)
 80013a2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80013a6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 ffc0 	bl	800232e <HAL_NVIC_ClearPendingIRQ>
 80013ae:	e007      	b.n	80013c0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80013b0:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <HW_TS_Stop+0x104>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	7cfa      	ldrb	r2, [r7, #19]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d001      	beq.n	80013c0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80013bc:	f7ff fd5e 	bl	8000e7c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80013c0:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <HW_TS_Stop+0xf0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	22ff      	movs	r2, #255	@ 0xff
 80013c6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013c8:	2003      	movs	r0, #3
 80013ca:	f000 ff7a 	bl	80022c2 <HAL_NVIC_EnableIRQ>
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	f383 8810 	msr	PRIMASK, r3
}
 80013d8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80013da:	bf00      	nop
}
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000258 	.word	0x20000258
 80013e8:	200000e8 	.word	0x200000e8
 80013ec:	20000178 	.word	0x20000178
 80013f0:	40002800 	.word	0x40002800
 80013f4:	58000800 	.word	0x58000800
 80013f8:	20000179 	.word	0x20000179

080013fc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	6039      	str	r1, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001408:	79fa      	ldrb	r2, [r7, #7]
 800140a:	493b      	ldr	r1, [pc, #236]	@ (80014f8 <HW_TS_Start+0xfc>)
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	440b      	add	r3, r1
 8001416:	330c      	adds	r3, #12
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d103      	bne.n	8001428 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff66 	bl	80012f4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001428:	f3ef 8310 	mrs	r3, PRIMASK
 800142c:	60fb      	str	r3, [r7, #12]
  return(result);
 800142e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001430:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001432:	b672      	cpsid	i
}
 8001434:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001436:	2003      	movs	r0, #3
 8001438:	f000 ff51 	bl	80022de <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800143c:	4b2f      	ldr	r3, [pc, #188]	@ (80014fc <HW_TS_Start+0x100>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	22ca      	movs	r2, #202	@ 0xca
 8001442:	625a      	str	r2, [r3, #36]	@ 0x24
 8001444:	4b2d      	ldr	r3, [pc, #180]	@ (80014fc <HW_TS_Start+0x100>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2253      	movs	r2, #83	@ 0x53
 800144a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800144c:	79fa      	ldrb	r2, [r7, #7]
 800144e:	492a      	ldr	r1, [pc, #168]	@ (80014f8 <HW_TS_Start+0xfc>)
 8001450:	4613      	mov	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4413      	add	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	440b      	add	r3, r1
 800145a:	330c      	adds	r3, #12
 800145c:	2202      	movs	r2, #2
 800145e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001460:	79fa      	ldrb	r2, [r7, #7]
 8001462:	4925      	ldr	r1, [pc, #148]	@ (80014f8 <HW_TS_Start+0xfc>)
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	3308      	adds	r3, #8
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001474:	79fa      	ldrb	r2, [r7, #7]
 8001476:	4920      	ldr	r1, [pc, #128]	@ (80014f8 <HW_TS_Start+0xfc>)
 8001478:	4613      	mov	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	440b      	add	r3, r1
 8001482:	3304      	adds	r3, #4
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fb30 	bl	8000af0 <linkTimer>
 8001490:	4603      	mov	r3, r0
 8001492:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001494:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <HW_TS_Start+0x104>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800149a:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <HW_TS_Start+0x108>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	7c7a      	ldrb	r2, [r7, #17]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d002      	beq.n	80014ac <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80014a6:	f7ff fce9 	bl	8000e7c <RescheduleTimerList>
 80014aa:	e013      	b.n	80014d4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80014ac:	79fa      	ldrb	r2, [r7, #7]
 80014ae:	4912      	ldr	r1, [pc, #72]	@ (80014f8 <HW_TS_Start+0xfc>)
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	440b      	add	r3, r1
 80014ba:	3308      	adds	r3, #8
 80014bc:	6819      	ldr	r1, [r3, #0]
 80014be:	8a7b      	ldrh	r3, [r7, #18]
 80014c0:	79fa      	ldrb	r2, [r7, #7]
 80014c2:	1ac9      	subs	r1, r1, r3
 80014c4:	480c      	ldr	r0, [pc, #48]	@ (80014f8 <HW_TS_Start+0xfc>)
 80014c6:	4613      	mov	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	4413      	add	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	4403      	add	r3, r0
 80014d0:	3308      	adds	r3, #8
 80014d2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80014d4:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <HW_TS_Start+0x100>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	22ff      	movs	r2, #255	@ 0xff
 80014da:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80014dc:	2003      	movs	r0, #3
 80014de:	f000 fef0 	bl	80022c2 <HAL_NVIC_EnableIRQ>
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	f383 8810 	msr	PRIMASK, r3
}
 80014ec:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80014ee:	bf00      	nop
}
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200000e8 	.word	0x200000e8
 80014fc:	20000258 	.word	0x20000258
 8001500:	20000178 	.word	0x20000178
 8001504:	20000179 	.word	0x20000179

08001508 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	460b      	mov	r3, r1
 8001512:	607a      	str	r2, [r7, #4]
 8001514:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4798      	blx	r3

  return;
 800151a:	bf00      	nop
}
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <LL_RCC_LSE_SetDriveCapability>:
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800152a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800152e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001532:	f023 0218 	bic.w	r2, r3, #24
 8001536:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4313      	orrs	r3, r2
 800153e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800154e:	b480      	push	{r7}
 8001550:	b085      	sub	sp, #20
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001556:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800155a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800155c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4313      	orrs	r3, r2
 8001564:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800156a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4013      	ands	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001572:	68fb      	ldr	r3, [r7, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001584:	f000 fcc2 	bl	8001f0c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001588:	f7ff f85a 	bl	8000640 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800158c:	f000 f818 	bl	80015c0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001590:	f000 f888 	bl	80016a4 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001594:	f000 f8a6 	bl	80016e4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001598:	f000 f940 	bl	800181c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800159c:	f000 f8b6 	bl	800170c <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80015a0:	f000 f908 	bl	80017b4 <MX_RTC_Init>
  MX_RF_Init();
 80015a4:	f000 f8fe 	bl	80017a4 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  data_handler_Init();
 80015a8:	f008 fc3c 	bl	8009e24 <data_handler_Init>
  uart_handler_Init(&hlpuart1);
 80015ac:	4803      	ldr	r0, [pc, #12]	@ (80015bc <main+0x3c>)
 80015ae:	f000 fc15 	bl	8001ddc <uart_handler_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80015b2:	f7ff f853 	bl	800065c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80015b6:	f7ff f97e 	bl	80008b6 <MX_APPE_Process>
 80015ba:	e7fc      	b.n	80015b6 <main+0x36>
 80015bc:	200001c4 	.word	0x200001c4

080015c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b09a      	sub	sp, #104	@ 0x68
 80015c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c6:	f107 0320 	add.w	r3, r7, #32
 80015ca:	2248      	movs	r2, #72	@ 0x48
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f009 fa28 	bl	800aa24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	611a      	str	r2, [r3, #16]
 80015e2:	615a      	str	r2, [r3, #20]
 80015e4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015e6:	f001 f989 	bl	80028fc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80015ea:	2010      	movs	r0, #16
 80015ec:	f7ff ff99 	bl	8001522 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f0:	4b2b      	ldr	r3, [pc, #172]	@ (80016a0 <SystemClock_Config+0xe0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015f8:	4a29      	ldr	r2, [pc, #164]	@ (80016a0 <SystemClock_Config+0xe0>)
 80015fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <SystemClock_Config+0xe0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800160c:	2327      	movs	r3, #39	@ 0x27
 800160e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001610:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001616:	2301      	movs	r3, #1
 8001618:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800161a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800161e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001620:	2301      	movs	r3, #1
 8001622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001624:	2340      	movs	r3, #64	@ 0x40
 8001626:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001628:	2300      	movs	r3, #0
 800162a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800162c:	2360      	movs	r3, #96	@ 0x60
 800162e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001630:	2302      	movs	r3, #2
 8001632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001634:	2301      	movs	r3, #1
 8001636:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001638:	2300      	movs	r3, #0
 800163a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 48;
 800163c:	2330      	movs	r3, #48	@ 0x30
 800163e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001640:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001644:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8001646:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800164a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800164c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001650:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001652:	f107 0320 	add.w	r3, r7, #32
 8001656:	4618      	mov	r0, r3
 8001658:	f001 fce4 	bl	8003024 <HAL_RCC_OscConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001662:	f000 f8e2 	bl	800182a <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001666:	236f      	movs	r3, #111	@ 0x6f
 8001668:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800166a:	2303      	movs	r3, #3
 800166c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800167a:	2380      	movs	r3, #128	@ 0x80
 800167c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	2103      	movs	r1, #3
 8001686:	4618      	mov	r0, r3
 8001688:	f002 f840 	bl	800370c <HAL_RCC_ClockConfig>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001692:	f000 f8ca 	bl	800182a <Error_Handler>
  }
}
 8001696:	bf00      	nop
 8001698:	3768      	adds	r7, #104	@ 0x68
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	58000400 	.word	0x58000400

080016a4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b094      	sub	sp, #80	@ 0x50
 80016a8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016aa:	463b      	mov	r3, r7
 80016ac:	2250      	movs	r2, #80	@ 0x50
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f009 f9b7 	bl	800aa24 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80016b6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80016ba:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80016bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016c0:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80016c2:	2300      	movs	r3, #0
 80016c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80016c6:	2310      	movs	r3, #16
 80016c8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ca:	463b      	mov	r3, r7
 80016cc:	4618      	mov	r0, r3
 80016ce:	f002 fc5a 	bl	8003f86 <HAL_RCCEx_PeriphCLKConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80016d8:	f000 f8a7 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80016dc:	bf00      	nop
 80016de:	3750      	adds	r7, #80	@ 0x50
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <MX_IPCC_Init+0x20>)
 80016ea:	4a07      	ldr	r2, [pc, #28]	@ (8001708 <MX_IPCC_Init+0x24>)
 80016ec:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	@ (8001704 <MX_IPCC_Init+0x20>)
 80016f0:	f001 f87e 	bl	80027f0 <HAL_IPCC_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80016fa:	f000 f896 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000188 	.word	0x20000188
 8001708:	58000c00 	.word	0x58000c00

0800170c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001710:	4b22      	ldr	r3, [pc, #136]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 8001712:	4a23      	ldr	r2, [pc, #140]	@ (80017a0 <MX_LPUART1_UART_Init+0x94>)
 8001714:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001716:	4b21      	ldr	r3, [pc, #132]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 8001718:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800171c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b1f      	ldr	r3, [pc, #124]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800172a:	4b1c      	ldr	r3, [pc, #112]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b1a      	ldr	r3, [pc, #104]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b19      	ldr	r3, [pc, #100]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800173c:	4b17      	ldr	r3, [pc, #92]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 800173e:	2200      	movs	r2, #0
 8001740:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001742:	4b16      	ldr	r3, [pc, #88]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001748:	4b14      	ldr	r3, [pc, #80]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 800174a:	2200      	movs	r2, #0
 800174c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800174e:	4b13      	ldr	r3, [pc, #76]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001754:	4811      	ldr	r0, [pc, #68]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 8001756:	f003 f897 	bl	8004888 <HAL_UART_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001760:	f000 f863 	bl	800182a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001764:	2100      	movs	r1, #0
 8001766:	480d      	ldr	r0, [pc, #52]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 8001768:	f004 ffeb 	bl	8006742 <HAL_UARTEx_SetTxFifoThreshold>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001772:	f000 f85a 	bl	800182a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001776:	2100      	movs	r1, #0
 8001778:	4808      	ldr	r0, [pc, #32]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 800177a:	f005 f820 	bl	80067be <HAL_UARTEx_SetRxFifoThreshold>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001784:	f000 f851 	bl	800182a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001788:	4804      	ldr	r0, [pc, #16]	@ (800179c <MX_LPUART1_UART_Init+0x90>)
 800178a:	f004 ffa1 	bl	80066d0 <HAL_UARTEx_DisableFifoMode>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001794:	f000 f849 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200001c4 	.word	0x200001c4
 80017a0:	40008000 	.word	0x40008000

080017a4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017b8:	4b16      	ldr	r3, [pc, #88]	@ (8001814 <MX_RTC_Init+0x60>)
 80017ba:	4a17      	ldr	r2, [pc, #92]	@ (8001818 <MX_RTC_Init+0x64>)
 80017bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017be:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <MX_RTC_Init+0x60>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80017c4:	4b13      	ldr	r3, [pc, #76]	@ (8001814 <MX_RTC_Init+0x60>)
 80017c6:	220f      	movs	r2, #15
 80017c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80017ca:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <MX_RTC_Init+0x60>)
 80017cc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80017d0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017d2:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <MX_RTC_Init+0x60>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <MX_RTC_Init+0x60>)
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017de:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <MX_RTC_Init+0x60>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <MX_RTC_Init+0x60>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017ea:	480a      	ldr	r0, [pc, #40]	@ (8001814 <MX_RTC_Init+0x60>)
 80017ec:	f002 fe52 	bl	8004494 <HAL_RTC_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80017f6:	f000 f818 	bl	800182a <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80017fa:	2200      	movs	r2, #0
 80017fc:	2100      	movs	r1, #0
 80017fe:	4805      	ldr	r0, [pc, #20]	@ (8001814 <MX_RTC_Init+0x60>)
 8001800:	f002 ff56 	bl	80046b0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800180a:	f000 f80e 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000258 	.word	0x20000258
 8001818:	40002800 	.word	0x40002800

0800181c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	2001      	movs	r0, #1
 8001822:	f7ff fe94 	bl	800154e <LL_AHB2_GRP1_EnableClock>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}

0800182a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800182e:	b672      	cpsid	i
}
 8001830:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001832:	bf00      	nop
 8001834:	e7fd      	b.n	8001832 <Error_Handler+0x8>

08001836 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800183a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800183e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001842:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001846:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800184a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_AHB2_GRP1_EnableClock>:
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001864:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001866:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4313      	orrs	r3, r2
 800186e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001874:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4013      	ands	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800187c:	68fb      	ldr	r3, [r7, #12]
}
 800187e:	bf00      	nop
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800188a:	b480      	push	{r7}
 800188c:	b085      	sub	sp, #20
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001896:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001898:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4313      	orrs	r3, r2
 80018a0:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80018a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4013      	ands	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80018c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80018ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80018d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4013      	ands	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018e0:	68fb      	ldr	r3, [r7, #12]
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b085      	sub	sp, #20
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80018f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4313      	orrs	r3, r2
 8001904:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800190a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4013      	ands	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001912:	68fb      	ldr	r3, [r7, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001924:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001928:	f7ff ffaf 	bl	800188a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	2100      	movs	r1, #0
 8001930:	2005      	movs	r0, #5
 8001932:	f000 fcac 	bl	800228e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001936:	2005      	movs	r0, #5
 8001938:	f000 fcc3 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800193c:	2200      	movs	r2, #0
 800193e:	2100      	movs	r1, #0
 8001940:	202e      	movs	r0, #46	@ 0x2e
 8001942:	f000 fca4 	bl	800228e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001946:	202e      	movs	r0, #46	@ 0x2e
 8001948:	f000 fcbb 	bl	80022c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_IPCC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hipcc: IPCC handle pointer
  * @retval None
  */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0d      	ldr	r2, [pc, #52]	@ (8001994 <HAL_IPCC_MspInit+0x44>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d113      	bne.n	800198a <HAL_IPCC_MspInit+0x3a>
  {
    /* USER CODE BEGIN IPCC_MspInit 0 */

    /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001962:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001966:	f7ff ff90 	bl	800188a <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	202c      	movs	r0, #44	@ 0x2c
 8001970:	f000 fc8d 	bl	800228e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001974:	202c      	movs	r0, #44	@ 0x2c
 8001976:	f000 fca4 	bl	80022c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	202d      	movs	r0, #45	@ 0x2d
 8001980:	f000 fc85 	bl	800228e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001984:	202d      	movs	r0, #45	@ 0x2d
 8001986:	f000 fc9c 	bl	80022c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END IPCC_MspInit 1 */

  }

}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	58000c00 	.word	0x58000c00

08001998 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b09c      	sub	sp, #112	@ 0x70
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019b0:	f107 030c 	add.w	r3, r7, #12
 80019b4:	2250      	movs	r2, #80	@ 0x50
 80019b6:	2100      	movs	r1, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f009 f833 	bl	800aa24 <memset>
  if(huart->Instance==LPUART1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a1a      	ldr	r2, [pc, #104]	@ (8001a2c <HAL_UART_MspInit+0x94>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d12c      	bne.n	8001a22 <HAL_UART_MspInit+0x8a>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80019c8:	2302      	movs	r3, #2
 80019ca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	4618      	mov	r0, r3
 80019d6:	f002 fad6 	bl	8003f86 <HAL_RCCEx_PeriphCLKConfig>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019e0:	f7ff ff23 	bl	800182a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80019e4:	2001      	movs	r0, #1
 80019e6:	f7ff ff82 	bl	80018ee <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	2001      	movs	r0, #1
 80019ec:	f7ff ff34 	bl	8001858 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = TX_pin_Pin|RX_pin_Pin;
 80019f0:	230c      	movs	r3, #12
 80019f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a00:	2308      	movs	r3, #8
 8001a02:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a04:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a0e:	f000 fd5b 	bl	80024c8 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	2025      	movs	r0, #37	@ 0x25
 8001a18:	f000 fc39 	bl	800228e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001a1c:	2025      	movs	r0, #37	@ 0x25
 8001a1e:	f000 fc50 	bl	80022c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001a22:	bf00      	nop
 8001a24:	3770      	adds	r7, #112	@ 0x70
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40008000 	.word	0x40008000

08001a30 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b096      	sub	sp, #88	@ 0x58
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a38:	f107 0308 	add.w	r3, r7, #8
 8001a3c:	2250      	movs	r2, #80	@ 0x50
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f008 ffef 	bl	800aa24 <memset>
  if(hrtc->Instance==RTC)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a12      	ldr	r2, [pc, #72]	@ (8001a94 <HAL_RTC_MspInit+0x64>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d11d      	bne.n	8001a8c <HAL_RTC_MspInit+0x5c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a50:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a54:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a5c:	f107 0308 	add.w	r3, r7, #8
 8001a60:	4618      	mov	r0, r3
 8001a62:	f002 fa90 	bl	8003f86 <HAL_RCCEx_PeriphCLKConfig>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001a6c:	f7ff fedd 	bl	800182a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a70:	f7ff fee1 	bl	8001836 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001a74:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001a78:	f7ff ff20 	bl	80018bc <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2003      	movs	r0, #3
 8001a82:	f000 fc04 	bl	800228e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001a86:	2003      	movs	r0, #3
 8001a88:	f000 fc1b 	bl	80022c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001a8c:	bf00      	nop
 8001a8e:	3758      	adds	r7, #88	@ 0x58
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40002800 	.word	0x40002800

08001a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <NMI_Handler+0x4>

08001aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <HardFault_Handler+0x4>

08001aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <MemManage_Handler+0x4>

08001ab0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <BusFault_Handler+0x4>

08001ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <UsageFault_Handler+0x4>

08001ac0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aee:	f000 fa67 	bl	8001fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001afa:	f7ff fa59 	bl	8000fb0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001b14:	4802      	ldr	r0, [pc, #8]	@ (8001b20 <LPUART1_IRQHandler+0x10>)
 8001b16:	f002 ff95 	bl	8004a44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200001c4 	.word	0x200001c4

08001b24 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001b28:	f008 faa2 	bl	800a070 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001b34:	f008 fad2 	bl	800a0dc <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001b40:	f000 fe32 	bl	80027a8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b50:	4a14      	ldr	r2, [pc, #80]	@ (8001ba4 <_sbrk+0x5c>)
 8001b52:	4b15      	ldr	r3, [pc, #84]	@ (8001ba8 <_sbrk+0x60>)
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b5c:	4b13      	ldr	r3, [pc, #76]	@ (8001bac <_sbrk+0x64>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b64:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <_sbrk+0x64>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	@ (8001bb0 <_sbrk+0x68>)
 8001b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6a:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d207      	bcs.n	8001b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b78:	f008 ff6c 	bl	800aa54 <__errno>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	220c      	movs	r2, #12
 8001b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
 8001b86:	e009      	b.n	8001b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b88:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	@ (8001bac <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	4a05      	ldr	r2, [pc, #20]	@ (8001bac <_sbrk+0x64>)
 8001b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20030000 	.word	0x20030000
 8001ba8:	00000400 	.word	0x00000400
 8001bac:	2000027c 	.word	0x2000027c
 8001bb0:	20000820 	.word	0x20000820

08001bb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001bb8:	4b24      	ldr	r3, [pc, #144]	@ (8001c4c <SystemInit+0x98>)
 8001bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bbe:	4a23      	ldr	r2, [pc, #140]	@ (8001c4c <SystemInit+0x98>)
 8001bc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001bd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bdc:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001be0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bec:	4b18      	ldr	r3, [pc, #96]	@ (8001c50 <SystemInit+0x9c>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bfe:	f023 0305 	bic.w	r3, r3, #5
 8001c02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001c06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c12:	f023 0301 	bic.w	r3, r3, #1
 8001c16:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001c1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c1e:	4a0d      	ldr	r2, [pc, #52]	@ (8001c54 <SystemInit+0xa0>)
 8001c20:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001c22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c26:	4a0b      	ldr	r2, [pc, #44]	@ (8001c54 <SystemInit+0xa0>)
 8001c28:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c38:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c3e:	2200      	movs	r2, #0
 8001c40:	619a      	str	r2, [r3, #24]
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00
 8001c50:	faf6fefb 	.word	0xfaf6fefb
 8001c54:	22041000 	.word	0x22041000

08001c58 <HAL_UARTEx_RxEventCallback>:

static void uart_handler_Process_Received_pck(uint8_t* pck, uint16_t size);
static void uart_handler_Send_Cmd(UART_CommandType_t cmd, uint8_t* payload, uint8_t payload_len);


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	807b      	strh	r3, [r7, #2]

	//Check size and the first byte
	if (Size >=7) {
 8001c64:	887b      	ldrh	r3, [r7, #2]
 8001c66:	2b06      	cmp	r3, #6
 8001c68:	d90d      	bls.n	8001c86 <HAL_UARTEx_RxEventCallback+0x2e>

		if (uart_handler->rx_buffer==0xAA){
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	2baa      	cmp	r3, #170	@ 0xaa
 8001c72:	d108      	bne.n	8001c86 <HAL_UARTEx_RxEventCallback+0x2e>

			uart_handler->process_recived_pck(uart_handler->rx_buffer, Size);
 8001c74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca4 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	69d2      	ldr	r2, [r2, #28]
 8001c80:	8879      	ldrh	r1, [r7, #2]
 8001c82:	4610      	mov	r0, r2
 8001c84:	4798      	blx	r3
		}

	 }


	HAL_UARTEx_ReceiveToIdle_IT(uart_handler->huart, uart_handler->rx_buffer, 32);
 8001c86:	4b07      	ldr	r3, [pc, #28]	@ (8001ca4 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68d8      	ldr	r0, [r3, #12]
 8001c8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ca4 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	2220      	movs	r2, #32
 8001c94:	4619      	mov	r1, r3
 8001c96:	f004 fdd0 	bl	800683a <HAL_UARTEx_ReceiveToIdle_IT>

}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000280 	.word	0x20000280

08001ca8 <Calculate_CRC>:

static uint8_t Calculate_CRC(const uint8_t *data, uint8_t length) {
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; ++i) {
 8001cb8:	2300      	movs	r3, #0
 8001cba:	73bb      	strb	r3, [r7, #14]
 8001cbc:	e009      	b.n	8001cd2 <Calculate_CRC+0x2a>
        crc ^= data[i];
 8001cbe:	7bbb      	ldrb	r3, [r7, #14]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	781a      	ldrb	r2, [r3, #0]
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	4053      	eors	r3, r2
 8001cca:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; ++i) {
 8001ccc:	7bbb      	ldrb	r3, [r7, #14]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	73bb      	strb	r3, [r7, #14]
 8001cd2:	7bba      	ldrb	r2, [r7, #14]
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d3f1      	bcc.n	8001cbe <Calculate_CRC+0x16>
    }
    return crc;
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <uart_handler_Process_Received_pck>:

// Local functions (assigned as function pointers)
static void uart_handler_Process_Received_pck(uint8_t* pck, uint16_t size) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	807b      	strh	r3, [r7, #2]
	//Check CRC
	uint8_t actual_crc= *(uart_handler->rx_buffer+size);
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <uart_handler_Process_Received_pck+0x38>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69da      	ldr	r2, [r3, #28]
 8001cfa:	887b      	ldrh	r3, [r7, #2]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	73fb      	strb	r3, [r7, #15]
	uint8_t calculated_crc=Calculate_CRC(uart_handler->rx_buffer, size);
 8001d02:	4b07      	ldr	r3, [pc, #28]	@ (8001d20 <uart_handler_Process_Received_pck+0x38>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	887a      	ldrh	r2, [r7, #2]
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff ffca 	bl	8001ca8 <Calculate_CRC>
 8001d14:	4603      	mov	r3, r0
 8001d16:	73bb      	strb	r3, [r7, #14]
    if (actual_crc == calculated_crc) {

    }


}
 8001d18:	bf00      	nop
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000280 	.word	0x20000280

08001d24 <uart_handler_Send_Cmd>:

static void uart_handler_Send_Cmd(UART_CommandType_t cmd, uint8_t* payload, uint8_t payload_len) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	6039      	str	r1, [r7, #0]
 8001d2e:	71fb      	strb	r3, [r7, #7]
 8001d30:	4613      	mov	r3, r2
 8001d32:	71bb      	strb	r3, [r7, #6]

    uint8_t index = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]

    uart_handler->tx_buffer[index++] = 0xAA;
 8001d38:	4b27      	ldr	r3, [pc, #156]	@ (8001dd8 <uart_handler_Send_Cmd+0xb4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	699a      	ldr	r2, [r3, #24]
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	1c59      	adds	r1, r3, #1
 8001d42:	73f9      	strb	r1, [r7, #15]
 8001d44:	4413      	add	r3, r2
 8001d46:	22aa      	movs	r2, #170	@ 0xaa
 8001d48:	701a      	strb	r2, [r3, #0]
    uart_handler->tx_buffer[index++] = cmd;
 8001d4a:	4b23      	ldr	r3, [pc, #140]	@ (8001dd8 <uart_handler_Send_Cmd+0xb4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	699a      	ldr	r2, [r3, #24]
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	1c59      	adds	r1, r3, #1
 8001d54:	73f9      	strb	r1, [r7, #15]
 8001d56:	4413      	add	r3, r2
 8001d58:	79fa      	ldrb	r2, [r7, #7]
 8001d5a:	701a      	strb	r2, [r3, #0]
    uart_handler->tx_buffer[index++] = payload_len;
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd8 <uart_handler_Send_Cmd+0xb4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699a      	ldr	r2, [r3, #24]
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	1c59      	adds	r1, r3, #1
 8001d66:	73f9      	strb	r1, [r7, #15]
 8001d68:	4413      	add	r3, r2
 8001d6a:	79ba      	ldrb	r2, [r7, #6]
 8001d6c:	701a      	strb	r2, [r3, #0]

    memcpy(&uart_handler->tx_buffer[index], payload, payload_len);
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd8 <uart_handler_Send_Cmd+0xb4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	699a      	ldr	r2, [r3, #24]
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	4413      	add	r3, r2
 8001d78:	79ba      	ldrb	r2, [r7, #6]
 8001d7a:	6839      	ldr	r1, [r7, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f008 fe95 	bl	800aaac <memcpy>
    index += payload_len;
 8001d82:	7bfa      	ldrb	r2, [r7, #15]
 8001d84:	79bb      	ldrb	r3, [r7, #6]
 8001d86:	4413      	add	r3, r2
 8001d88:	73fb      	strb	r3, [r7, #15]



    uint8_t crc = Calculate_CRC(uart_handler->tx_buffer, index);
 8001d8a:	4b13      	ldr	r3, [pc, #76]	@ (8001dd8 <uart_handler_Send_Cmd+0xb4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff87 	bl	8001ca8 <Calculate_CRC>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	73bb      	strb	r3, [r7, #14]
    uart_handler->tx_buffer[index++] = crc;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <uart_handler_Send_Cmd+0xb4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	699a      	ldr	r2, [r3, #24]
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	1c59      	adds	r1, r3, #1
 8001da8:	73f9      	strb	r1, [r7, #15]
 8001daa:	4413      	add	r3, r2
 8001dac:	7bba      	ldrb	r2, [r7, #14]
 8001dae:	701a      	strb	r2, [r3, #0]

    HAL_UART_Transmit(uart_handler->huart, uart_handler->tx_buffer, index, HAL_MAX_DELAY); /// NOTE: Check if this  is cerrectly send here or i shoudl check this in a timer
 8001db0:	4b09      	ldr	r3, [pc, #36]	@ (8001dd8 <uart_handler_Send_Cmd+0xb4>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68d8      	ldr	r0, [r3, #12]
 8001db6:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <uart_handler_Send_Cmd+0xb4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6999      	ldr	r1, [r3, #24]
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc4:	f002 fdb0 	bl	8004928 <HAL_UART_Transmit>
    uart_handler->state = UART_STATE_IDLE;
 8001dc8:	4b03      	ldr	r3, [pc, #12]	@ (8001dd8 <uart_handler_Send_Cmd+0xb4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000280 	.word	0x20000280

08001ddc <uart_handler_Init>:

void uart_handler_Init(UART_HandleTypeDef *huart) {
 8001ddc:	b590      	push	{r4, r7, lr}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]




    uart_handler = (UART_Handler_t *)malloc(sizeof(UART_Handler_t));
 8001de4:	2020      	movs	r0, #32
 8001de6:	f008 fd67 	bl	800a8b8 <malloc>
 8001dea:	4603      	mov	r3, r0
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b25      	ldr	r3, [pc, #148]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001df0:	601a      	str	r2, [r3, #0]

    uart_handler->huart = huart;
 8001df2:	4b24      	ldr	r3, [pc, #144]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	60da      	str	r2, [r3, #12]
    uart_handler->cmd_packet = (UART_CommandPacket_t *)malloc(sizeof(UART_CommandPacket_t));
 8001dfa:	4b22      	ldr	r3, [pc, #136]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001dfc:	681c      	ldr	r4, [r3, #0]
 8001dfe:	203e      	movs	r0, #62	@ 0x3e
 8001e00:	f008 fd5a 	bl	800a8b8 <malloc>
 8001e04:	4603      	mov	r3, r0
 8001e06:	6063      	str	r3, [r4, #4]
    uart_handler->resp_packet = (UART_ResponsePacket_t *)malloc(sizeof(UART_ResponsePacket_t));
 8001e08:	4b1e      	ldr	r3, [pc, #120]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001e0a:	681c      	ldr	r4, [r3, #0]
 8001e0c:	203e      	movs	r0, #62	@ 0x3e
 8001e0e:	f008 fd53 	bl	800a8b8 <malloc>
 8001e12:	4603      	mov	r3, r0
 8001e14:	60a3      	str	r3, [r4, #8]

    uart_handler->state = UART_STATE_IDLE;
 8001e16:	4b1b      	ldr	r3, [pc, #108]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
    uart_handler->max_payload_len = UART_RX_BUFFER_SIZE - 6;
 8001e1e:	4b19      	ldr	r3, [pc, #100]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	223a      	movs	r2, #58	@ 0x3a
 8001e24:	705a      	strb	r2, [r3, #1]

    uart_handler->process_recived_pck = uart_handler_Process_Received_pck;
 8001e26:	4b17      	ldr	r3, [pc, #92]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a17      	ldr	r2, [pc, #92]	@ (8001e88 <uart_handler_Init+0xac>)
 8001e2c:	611a      	str	r2, [r3, #16]
    uart_handler->send_cmd = uart_handler_Send_Cmd;
 8001e2e:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a16      	ldr	r2, [pc, #88]	@ (8001e8c <uart_handler_Init+0xb0>)
 8001e34:	615a      	str	r2, [r3, #20]
    uart_handler->tx_buffer=tx_buffer;
 8001e36:	4b13      	ldr	r3, [pc, #76]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a15      	ldr	r2, [pc, #84]	@ (8001e90 <uart_handler_Init+0xb4>)
 8001e3c:	619a      	str	r2, [r3, #24]
    uart_handler->rx_buffer=rx_buffer;
 8001e3e:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a14      	ldr	r2, [pc, #80]	@ (8001e94 <uart_handler_Init+0xb8>)
 8001e44:	61da      	str	r2, [r3, #28]

    HAL_UARTEx_ReceiveToIdle_IT(uart_handler->huart, uart_handler->rx_buffer, 32);
 8001e46:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68d8      	ldr	r0, [r3, #12]
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	2220      	movs	r2, #32
 8001e54:	4619      	mov	r1, r3
 8001e56:	f004 fcf0 	bl	800683a <HAL_UARTEx_ReceiveToIdle_IT>

    memset(uart_handler->cmd_packet, 0, sizeof(UART_CommandPacket_t));
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	223e      	movs	r2, #62	@ 0x3e
 8001e62:	2100      	movs	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f008 fddd 	bl	800aa24 <memset>
    memset(uart_handler->resp_packet, 0, sizeof(UART_ResponsePacket_t));
 8001e6a:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <uart_handler_Init+0xa8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	223e      	movs	r2, #62	@ 0x3e
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f008 fdd5 	bl	800aa24 <memset>
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd90      	pop	{r4, r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000280 	.word	0x20000280
 8001e88:	08001ce9 	.word	0x08001ce9
 8001e8c:	08001d25 	.word	0x08001d25
 8001e90:	20000284 	.word	0x20000284
 8001e94:	200002c4 	.word	0x200002c4

08001e98 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001e98:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e9a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9c:	3304      	adds	r3, #4

08001e9e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e9e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001ea2:	d3f9      	bcc.n	8001e98 <CopyDataInit>
  bx lr
 8001ea4:	4770      	bx	lr

08001ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001ea6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001ea8:	3004      	adds	r0, #4

08001eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001eaa:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001eac:	d3fb      	bcc.n	8001ea6 <FillZerobss>
  bx lr
 8001eae:	4770      	bx	lr

08001eb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001eb0:	480c      	ldr	r0, [pc, #48]	@ (8001ee4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001eb2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001eb4:	f7ff fe7e 	bl	8001bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001eb8:	480b      	ldr	r0, [pc, #44]	@ (8001ee8 <LoopForever+0x6>)
 8001eba:	490c      	ldr	r1, [pc, #48]	@ (8001eec <LoopForever+0xa>)
 8001ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8001ef0 <LoopForever+0xe>)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f7ff ffed 	bl	8001e9e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001ec4:	480b      	ldr	r0, [pc, #44]	@ (8001ef4 <LoopForever+0x12>)
 8001ec6:	490c      	ldr	r1, [pc, #48]	@ (8001ef8 <LoopForever+0x16>)
 8001ec8:	4a0c      	ldr	r2, [pc, #48]	@ (8001efc <LoopForever+0x1a>)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f7ff ffe7 	bl	8001e9e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001ed0:	480b      	ldr	r0, [pc, #44]	@ (8001f00 <LoopForever+0x1e>)
 8001ed2:	490c      	ldr	r1, [pc, #48]	@ (8001f04 <LoopForever+0x22>)
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f7ff ffe8 	bl	8001eaa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001eda:	f008 fdc1 	bl	800aa60 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001ede:	f7ff fb4f 	bl	8001580 <main>

08001ee2 <LoopForever>:

LoopForever:
  b LoopForever
 8001ee2:	e7fe      	b.n	8001ee2 <LoopForever>
  ldr   r0, =_estack
 8001ee4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001ee8:	20000008 	.word	0x20000008
 8001eec:	20000080 	.word	0x20000080
 8001ef0:	0800ada0 	.word	0x0800ada0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001ef4:	200301e4 	.word	0x200301e4
 8001ef8:	20030a67 	.word	0x20030a67
 8001efc:	0800ae5e 	.word	0x0800ae5e
  INIT_BSS _sbss, _ebss
 8001f00:	200000cc 	.word	0x200000cc
 8001f04:	2000081c 	.word	0x2000081c

08001f08 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f08:	e7fe      	b.n	8001f08 <ADC1_IRQHandler>
	...

08001f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f16:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <HAL_Init+0x3c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a0b      	ldr	r2, [pc, #44]	@ (8001f48 <HAL_Init+0x3c>)
 8001f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f22:	2003      	movs	r0, #3
 8001f24:	f000 f9a8 	bl	8002278 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f28:	200f      	movs	r0, #15
 8001f2a:	f000 f80f 	bl	8001f4c <HAL_InitTick>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	71fb      	strb	r3, [r7, #7]
 8001f38:	e001      	b.n	8001f3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f3a:	f7ff fcf1 	bl	8001920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	58004000 	.word	0x58004000

08001f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001f58:	4b17      	ldr	r3, [pc, #92]	@ (8001fb8 <HAL_InitTick+0x6c>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d024      	beq.n	8001faa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f60:	f001 fd80 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8001f64:	4602      	mov	r2, r0
 8001f66:	4b14      	ldr	r3, [pc, #80]	@ (8001fb8 <HAL_InitTick+0x6c>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f70:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 f9be 	bl	80022fa <HAL_SYSTICK_Config>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10f      	bne.n	8001fa4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b0f      	cmp	r3, #15
 8001f88:	d809      	bhi.n	8001f9e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f92:	f000 f97c 	bl	800228e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f96:	4a09      	ldr	r2, [pc, #36]	@ (8001fbc <HAL_InitTick+0x70>)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	e007      	b.n	8001fae <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	73fb      	strb	r3, [r7, #15]
 8001fa2:	e004      	b.n	8001fae <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
 8001fa8:	e001      	b.n	8001fae <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000010 	.word	0x20000010
 8001fbc:	2000000c 	.word	0x2000000c

08001fc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_IncTick+0x20>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_IncTick+0x24>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a04      	ldr	r2, [pc, #16]	@ (8001fe4 <HAL_IncTick+0x24>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000010 	.word	0x20000010
 8001fe4:	20000304 	.word	0x20000304

08001fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return uwTick;
 8001fec:	4b03      	ldr	r3, [pc, #12]	@ (8001ffc <HAL_GetTick+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000304 	.word	0x20000304

08002000 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002004:	4b03      	ldr	r3, [pc, #12]	@ (8002014 <HAL_GetTickPrio+0x14>)
 8002006:	681b      	ldr	r3, [r3, #0]
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	2000000c 	.word	0x2000000c

08002018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002028:	4b0c      	ldr	r3, [pc, #48]	@ (800205c <__NVIC_SetPriorityGrouping+0x44>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002034:	4013      	ands	r3, r2
 8002036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002040:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800204a:	4a04      	ldr	r2, [pc, #16]	@ (800205c <__NVIC_SetPriorityGrouping+0x44>)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	60d3      	str	r3, [r2, #12]
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002064:	4b04      	ldr	r3, [pc, #16]	@ (8002078 <__NVIC_GetPriorityGrouping+0x18>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	f003 0307 	and.w	r3, r3, #7
}
 800206e:	4618      	mov	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	2b00      	cmp	r3, #0
 800208c:	db0b      	blt.n	80020a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	f003 021f 	and.w	r2, r3, #31
 8002094:	4907      	ldr	r1, [pc, #28]	@ (80020b4 <__NVIC_EnableIRQ+0x38>)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	2001      	movs	r0, #1
 800209e:	fa00 f202 	lsl.w	r2, r0, r2
 80020a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000e100 	.word	0xe000e100

080020b8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	db12      	blt.n	80020f0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	f003 021f 	and.w	r2, r3, #31
 80020d0:	490a      	ldr	r1, [pc, #40]	@ (80020fc <__NVIC_DisableIRQ+0x44>)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	095b      	lsrs	r3, r3, #5
 80020d8:	2001      	movs	r0, #1
 80020da:	fa00 f202 	lsl.w	r2, r0, r2
 80020de:	3320      	adds	r3, #32
 80020e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80020e4:	f3bf 8f4f 	dsb	sy
}
 80020e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80020ea:	f3bf 8f6f 	isb	sy
}
 80020ee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000e100 	.word	0xe000e100

08002100 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	2b00      	cmp	r3, #0
 8002110:	db0c      	blt.n	800212c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	f003 021f 	and.w	r2, r3, #31
 8002118:	4907      	ldr	r1, [pc, #28]	@ (8002138 <__NVIC_SetPendingIRQ+0x38>)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	2001      	movs	r0, #1
 8002122:	fa00 f202 	lsl.w	r2, r0, r2
 8002126:	3340      	adds	r3, #64	@ 0x40
 8002128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000e100 	.word	0xe000e100

0800213c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	2b00      	cmp	r3, #0
 800214c:	db0c      	blt.n	8002168 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	f003 021f 	and.w	r2, r3, #31
 8002154:	4907      	ldr	r1, [pc, #28]	@ (8002174 <__NVIC_ClearPendingIRQ+0x38>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	2001      	movs	r0, #1
 800215e:	fa00 f202 	lsl.w	r2, r0, r2
 8002162:	3360      	adds	r3, #96	@ 0x60
 8002164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000e100 	.word	0xe000e100

08002178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	2b00      	cmp	r3, #0
 800218a:	db0a      	blt.n	80021a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	490c      	ldr	r1, [pc, #48]	@ (80021c4 <__NVIC_SetPriority+0x4c>)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	0112      	lsls	r2, r2, #4
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	440b      	add	r3, r1
 800219c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a0:	e00a      	b.n	80021b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4908      	ldr	r1, [pc, #32]	@ (80021c8 <__NVIC_SetPriority+0x50>)
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	3b04      	subs	r3, #4
 80021b0:	0112      	lsls	r2, r2, #4
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	440b      	add	r3, r1
 80021b6:	761a      	strb	r2, [r3, #24]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000e100 	.word	0xe000e100
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	@ 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f1c3 0307 	rsb	r3, r3, #7
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	bf28      	it	cs
 80021ea:	2304      	movcs	r3, #4
 80021ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3304      	adds	r3, #4
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d902      	bls.n	80021fc <NVIC_EncodePriority+0x30>
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3b03      	subs	r3, #3
 80021fa:	e000      	b.n	80021fe <NVIC_EncodePriority+0x32>
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	f04f 32ff 	mov.w	r2, #4294967295
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	401a      	ands	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002214:	f04f 31ff 	mov.w	r1, #4294967295
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	43d9      	mvns	r1, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	4313      	orrs	r3, r2
         );
}
 8002226:	4618      	mov	r0, r3
 8002228:	3724      	adds	r7, #36	@ 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002244:	d301      	bcc.n	800224a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002246:	2301      	movs	r3, #1
 8002248:	e00f      	b.n	800226a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800224a:	4a0a      	ldr	r2, [pc, #40]	@ (8002274 <SysTick_Config+0x40>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3b01      	subs	r3, #1
 8002250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002252:	210f      	movs	r1, #15
 8002254:	f04f 30ff 	mov.w	r0, #4294967295
 8002258:	f7ff ff8e 	bl	8002178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800225c:	4b05      	ldr	r3, [pc, #20]	@ (8002274 <SysTick_Config+0x40>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002262:	4b04      	ldr	r3, [pc, #16]	@ (8002274 <SysTick_Config+0x40>)
 8002264:	2207      	movs	r2, #7
 8002266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	e000e010 	.word	0xe000e010

08002278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff fec9 	bl	8002018 <__NVIC_SetPriorityGrouping>
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b086      	sub	sp, #24
 8002292:	af00      	add	r7, sp, #0
 8002294:	4603      	mov	r3, r0
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800229c:	f7ff fee0 	bl	8002060 <__NVIC_GetPriorityGrouping>
 80022a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	6978      	ldr	r0, [r7, #20]
 80022a8:	f7ff ff90 	bl	80021cc <NVIC_EncodePriority>
 80022ac:	4602      	mov	r2, r0
 80022ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff5f 	bl	8002178 <__NVIC_SetPriority>
}
 80022ba:	bf00      	nop
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	4603      	mov	r3, r0
 80022ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fed3 	bl	800207c <__NVIC_EnableIRQ>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	4603      	mov	r3, r0
 80022e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fee3 	bl	80020b8 <__NVIC_DisableIRQ>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff ff96 	bl	8002234 <SysTick_Config>
 8002308:	4603      	mov	r3, r0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800231c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff feed 	bl	8002100 <__NVIC_SetPendingIRQ>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fefd 	bl	800213c <__NVIC_ClearPendingIRQ>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e04f      	b.n	80023fc <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d008      	beq.n	800237a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2204      	movs	r2, #4
 800236c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e040      	b.n	80023fc <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 020e 	bic.w	r2, r2, #14
 8002388:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002394:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002398:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0201 	bic.w	r2, r2, #1
 80023a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ae:	f003 021c 	and.w	r2, r3, #28
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	2101      	movs	r1, #1
 80023b8:	fa01 f202 	lsl.w	r2, r1, r2
 80023bc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023c6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00c      	beq.n	80023ea <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80023e8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d005      	beq.n	800242c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2204      	movs	r2, #4
 8002424:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	73fb      	strb	r3, [r7, #15]
 800242a:	e047      	b.n	80024bc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 020e 	bic.w	r2, r2, #14
 800243a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0201 	bic.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002456:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800245a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002460:	f003 021c 	and.w	r2, r3, #28
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002468:	2101      	movs	r1, #1
 800246a:	fa01 f202 	lsl.w	r2, r1, r2
 800246e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002478:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00c      	beq.n	800249c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002490:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800249a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	4798      	blx	r3
    }
  }
  return status;
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d6:	e14c      	b.n	8002772 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	2101      	movs	r1, #1
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	fa01 f303 	lsl.w	r3, r1, r3
 80024e4:	4013      	ands	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 813e 	beq.w	800276c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d005      	beq.n	8002508 <HAL_GPIO_Init+0x40>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d130      	bne.n	800256a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800253e:	2201      	movs	r2, #1
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4013      	ands	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	091b      	lsrs	r3, r3, #4
 8002554:	f003 0201 	and.w	r2, r3, #1
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b03      	cmp	r3, #3
 8002574:	d017      	beq.n	80025a6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	2203      	movs	r2, #3
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4013      	ands	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d123      	bne.n	80025fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	08da      	lsrs	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3208      	adds	r2, #8
 80025ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	220f      	movs	r2, #15
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	08da      	lsrs	r2, r3, #3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3208      	adds	r2, #8
 80025f4:	6939      	ldr	r1, [r7, #16]
 80025f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	2203      	movs	r2, #3
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4013      	ands	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 0203 	and.w	r2, r3, #3
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 8098 	beq.w	800276c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800263c:	4a54      	ldr	r2, [pc, #336]	@ (8002790 <HAL_GPIO_Init+0x2c8>)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	089b      	lsrs	r3, r3, #2
 8002642:	3302      	adds	r3, #2
 8002644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002648:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	220f      	movs	r2, #15
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	4013      	ands	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002666:	d019      	beq.n	800269c <HAL_GPIO_Init+0x1d4>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a4a      	ldr	r2, [pc, #296]	@ (8002794 <HAL_GPIO_Init+0x2cc>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d013      	beq.n	8002698 <HAL_GPIO_Init+0x1d0>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a49      	ldr	r2, [pc, #292]	@ (8002798 <HAL_GPIO_Init+0x2d0>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00d      	beq.n	8002694 <HAL_GPIO_Init+0x1cc>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a48      	ldr	r2, [pc, #288]	@ (800279c <HAL_GPIO_Init+0x2d4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d007      	beq.n	8002690 <HAL_GPIO_Init+0x1c8>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a47      	ldr	r2, [pc, #284]	@ (80027a0 <HAL_GPIO_Init+0x2d8>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d101      	bne.n	800268c <HAL_GPIO_Init+0x1c4>
 8002688:	2304      	movs	r3, #4
 800268a:	e008      	b.n	800269e <HAL_GPIO_Init+0x1d6>
 800268c:	2307      	movs	r3, #7
 800268e:	e006      	b.n	800269e <HAL_GPIO_Init+0x1d6>
 8002690:	2303      	movs	r3, #3
 8002692:	e004      	b.n	800269e <HAL_GPIO_Init+0x1d6>
 8002694:	2302      	movs	r3, #2
 8002696:	e002      	b.n	800269e <HAL_GPIO_Init+0x1d6>
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <HAL_GPIO_Init+0x1d6>
 800269c:	2300      	movs	r3, #0
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	f002 0203 	and.w	r2, r2, #3
 80026a4:	0092      	lsls	r2, r2, #2
 80026a6:	4093      	lsls	r3, r2
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026ae:	4938      	ldr	r1, [pc, #224]	@ (8002790 <HAL_GPIO_Init+0x2c8>)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	089b      	lsrs	r3, r3, #2
 80026b4:	3302      	adds	r3, #2
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026bc:	4b39      	ldr	r3, [pc, #228]	@ (80027a4 <HAL_GPIO_Init+0x2dc>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026e0:	4a30      	ldr	r2, [pc, #192]	@ (80027a4 <HAL_GPIO_Init+0x2dc>)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80026e6:	4b2f      	ldr	r3, [pc, #188]	@ (80027a4 <HAL_GPIO_Init+0x2dc>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800270a:	4a26      	ldr	r2, [pc, #152]	@ (80027a4 <HAL_GPIO_Init+0x2dc>)
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002710:	4b24      	ldr	r3, [pc, #144]	@ (80027a4 <HAL_GPIO_Init+0x2dc>)
 8002712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	43db      	mvns	r3, r3
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4013      	ands	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002736:	4a1b      	ldr	r2, [pc, #108]	@ (80027a4 <HAL_GPIO_Init+0x2dc>)
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800273e:	4b19      	ldr	r3, [pc, #100]	@ (80027a4 <HAL_GPIO_Init+0x2dc>)
 8002740:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	43db      	mvns	r3, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002764:	4a0f      	ldr	r2, [pc, #60]	@ (80027a4 <HAL_GPIO_Init+0x2dc>)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	3301      	adds	r3, #1
 8002770:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	f47f aeab 	bne.w	80024d8 <HAL_GPIO_Init+0x10>
  }
}
 8002782:	bf00      	nop
 8002784:	bf00      	nop
 8002786:	371c      	adds	r7, #28
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	40010000 	.word	0x40010000
 8002794:	48000400 	.word	0x48000400
 8002798:	48000800 	.word	0x48000800
 800279c:	48000c00 	.word	0x48000c00
 80027a0:	48001000 	.word	0x48001000
 80027a4:	58000800 	.word	0x58000800

080027a8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80027ae:	4b0a      	ldr	r3, [pc, #40]	@ (80027d8 <HAL_HSEM_IRQHandler+0x30>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80027b4:	4b08      	ldr	r3, [pc, #32]	@ (80027d8 <HAL_HSEM_IRQHandler+0x30>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	4906      	ldr	r1, [pc, #24]	@ (80027d8 <HAL_HSEM_IRQHandler+0x30>)
 80027be:	4013      	ands	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80027c2:	4a05      	ldr	r2, [pc, #20]	@ (80027d8 <HAL_HSEM_IRQHandler+0x30>)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f807 	bl	80027dc <HAL_HSEM_FreeCallback>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	58001500 	.word	0x58001500

080027dc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d01e      	beq.n	8002840 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002802:	4b13      	ldr	r3, [pc, #76]	@ (8002850 <HAL_IPCC_Init+0x60>)
 8002804:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d102      	bne.n	8002818 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff f89c 	bl	8001950 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002818:	68b8      	ldr	r0, [r7, #8]
 800281a:	f000 f85b 	bl	80028d4 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f82c 	bl	8002888 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800283e:	e001      	b.n	8002844 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	58000c00 	.word	0x58000c00

08002854 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	4613      	mov	r3, r2
 8002860:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002862:	bf00      	nop
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800286e:	b480      	push	{r7}
 8002870:	b085      	sub	sp, #20
 8002872:	af00      	add	r7, sp, #0
 8002874:	60f8      	str	r0, [r7, #12]
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	4613      	mov	r3, r2
 800287a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	e00f      	b.n	80028b6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	4a0b      	ldr	r2, [pc, #44]	@ (80028cc <IPCC_SetDefaultCallbacks+0x44>)
 80028a0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	3306      	adds	r3, #6
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	4a08      	ldr	r2, [pc, #32]	@ (80028d0 <IPCC_SetDefaultCallbacks+0x48>)
 80028ae:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	3301      	adds	r3, #1
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d9ec      	bls.n	8002896 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	08002855 	.word	0x08002855
 80028d0:	0800286f 	.word	0x0800286f

080028d4 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 80028e8:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	223f      	movs	r2, #63	@ 0x3f
 80028ee:	609a      	str	r2, [r3, #8]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002900:	4b05      	ldr	r3, [pc, #20]	@ (8002918 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a04      	ldr	r2, [pc, #16]	@ (8002918 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002906:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800290a:	6013      	str	r3, [r2, #0]
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	58000400 	.word	0x58000400

0800291c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002920:	4b04      	ldr	r3, [pc, #16]	@ (8002934 <HAL_PWREx_GetVoltageRange+0x18>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	58000400 	.word	0x58000400

08002938 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800293c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002946:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800294a:	d101      	bne.n	8002950 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <LL_RCC_HSE_Enable>:
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002960:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800296a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800296e:	6013      	str	r3, [r2, #0]
}
 8002970:	bf00      	nop
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_RCC_HSE_Disable>:
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800297e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002988:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800298c:	6013      	str	r3, [r2, #0]
}
 800298e:	bf00      	nop
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_RCC_HSE_IsReady>:
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800299c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029aa:	d101      	bne.n	80029b0 <LL_RCC_HSE_IsReady+0x18>
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <LL_RCC_HSE_IsReady+0x1a>
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_RCC_HSI_Enable>:
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80029c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ce:	6013      	str	r3, [r2, #0]
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <LL_RCC_HSI_Disable>:
{
 80029da:	b480      	push	{r7}
 80029dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80029de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029ec:	6013      	str	r3, [r2, #0]
}
 80029ee:	bf00      	nop
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <LL_RCC_HSI_IsReady>:
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80029fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a0a:	d101      	bne.n	8002a10 <LL_RCC_HSI_IsReady+0x18>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <LL_RCC_HSI_IsReady+0x1a>
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_RCC_HSI_SetCalibTrimming>:
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002a24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	061b      	lsls	r3, r3, #24
 8002a32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a36:	4313      	orrs	r3, r2
 8002a38:	604b      	str	r3, [r1, #4]
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <LL_RCC_HSI48_Enable>:
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002a5e:	bf00      	nop
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <LL_RCC_HSI48_Disable>:
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002a6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a78:	f023 0301 	bic.w	r3, r3, #1
 8002a7c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <LL_RCC_HSI48_IsReady>:
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002a8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d101      	bne.n	8002aa2 <LL_RCC_HSI48_IsReady+0x18>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <LL_RCC_HSI48_IsReady+0x1a>
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <LL_RCC_LSE_Enable>:
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ab2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002ac6:	bf00      	nop
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <LL_RCC_LSE_Disable>:
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ad4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002adc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002ae8:	bf00      	nop
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <LL_RCC_LSE_EnableBypass>:
{
 8002af2:	b480      	push	{r7}
 8002af4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002afe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b02:	f043 0304 	orr.w	r3, r3, #4
 8002b06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002b0a:	bf00      	nop
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <LL_RCC_LSE_DisableBypass>:
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b24:	f023 0304 	bic.w	r3, r3, #4
 8002b28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <LL_RCC_LSE_IsReady>:
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002b3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d101      	bne.n	8002b4e <LL_RCC_LSE_IsReady+0x18>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <LL_RCC_LSE_IsReady+0x1a>
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <LL_RCC_LSI1_Enable>:
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002b72:	bf00      	nop
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_RCC_LSI1_Disable>:
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002b80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <LL_RCC_LSI1_IsReady>:
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002ba2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d101      	bne.n	8002bb6 <LL_RCC_LSI1_IsReady+0x18>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <LL_RCC_LSI1_IsReady+0x1a>
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <LL_RCC_LSI2_Enable>:
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bd2:	f043 0304 	orr.w	r3, r3, #4
 8002bd6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002bda:	bf00      	nop
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <LL_RCC_LSI2_Disable>:
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002be8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bf0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bf4:	f023 0304 	bic.w	r3, r3, #4
 8002bf8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <LL_RCC_LSI2_IsReady>:
{
 8002c06:	b480      	push	{r7}
 8002c08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002c0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d101      	bne.n	8002c1e <LL_RCC_LSI2_IsReady+0x18>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <LL_RCC_LSI2_IsReady+0x1a>
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <LL_RCC_LSI2_SetTrimming>:
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002c32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c3a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	021b      	lsls	r3, r3, #8
 8002c42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <LL_RCC_MSI_Enable>:
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002c5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	6013      	str	r3, [r2, #0]
}
 8002c6c:	bf00      	nop
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <LL_RCC_MSI_Disable>:
{
 8002c76:	b480      	push	{r7}
 8002c78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c84:	f023 0301 	bic.w	r3, r3, #1
 8002c88:	6013      	str	r3, [r2, #0]
}
 8002c8a:	bf00      	nop
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <LL_RCC_MSI_IsReady>:
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002c98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d101      	bne.n	8002caa <LL_RCC_MSI_IsReady+0x16>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <LL_RCC_MSI_IsReady+0x18>
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <LL_RCC_MSI_SetRange>:
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002cbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cc8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	600b      	str	r3, [r1, #0]
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <LL_RCC_MSI_GetRange>:
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002ce4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cee:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2bb0      	cmp	r3, #176	@ 0xb0
 8002cf4:	d901      	bls.n	8002cfa <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002cf6:	23b0      	movs	r3, #176	@ 0xb0
 8002cf8:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002cfa:	687b      	ldr	r3, [r7, #4]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d22:	4313      	orrs	r3, r2
 8002d24:	604b      	str	r3, [r1, #4]
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <LL_RCC_SetSysClkSource>:
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002d3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f023 0203 	bic.w	r2, r3, #3
 8002d44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	608b      	str	r3, [r1, #8]
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <LL_RCC_GetSysClkSource>:
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 030c 	and.w	r3, r3, #12
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_RCC_SetAHBPrescaler>:
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002d7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <LL_C2_RCC_SetAHBPrescaler>:
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002da2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002da6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002daa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <LL_RCC_SetAHB4Prescaler>:
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002dce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002dd6:	f023 020f 	bic.w	r2, r3, #15
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <LL_RCC_SetAPB1Prescaler>:
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002dfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	608b      	str	r3, [r1, #8]
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_RCC_SetAPB2Prescaler>:
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002e24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	608b      	str	r3, [r1, #8]
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <LL_RCC_GetAHBPrescaler>:
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002e48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <LL_RCC_GetAHB4Prescaler>:
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e64:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <LL_RCC_GetAPB1Prescaler>:
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002e7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <LL_RCC_GetAPB2Prescaler>:
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002eac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002eb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eba:	6013      	str	r3, [r2, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002eca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ed4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ed8:	6013      	str	r3, [r2, #0]
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002ee8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ef6:	d101      	bne.n	8002efc <LL_RCC_PLL_IsReady+0x18>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <LL_RCC_PLL_IsReady+0x1a>
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	0a1b      	lsrs	r3, r3, #8
 8002f14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002f22:	b480      	push	{r7}
 8002f24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002f52:	b480      	push	{r7}
 8002f54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002f56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0303 	and.w	r3, r3, #3
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f7c:	d101      	bne.n	8002f82 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002f92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f96:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fa2:	d101      	bne.n	8002fa8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002fb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fbc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fc8:	d101      	bne.n	8002fce <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fec:	d101      	bne.n	8002ff2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002ffe:	b480      	push	{r7}
 8003000:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800300c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003010:	d101      	bne.n	8003016 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b08d      	sub	sp, #52	@ 0x34
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e363      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 808d 	beq.w	800315e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003044:	f7ff fe89 	bl	8002d5a <LL_RCC_GetSysClkSource>
 8003048:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800304a:	f7ff ff82 	bl	8002f52 <LL_RCC_PLL_GetMainSource>
 800304e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <HAL_RCC_OscConfig+0x3e>
 8003056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003058:	2b0c      	cmp	r3, #12
 800305a:	d147      	bne.n	80030ec <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800305c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800305e:	2b01      	cmp	r3, #1
 8003060:	d144      	bne.n	80030ec <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e347      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8003072:	f7ff fe34 	bl	8002cde <LL_RCC_MSI_GetRange>
 8003076:	4603      	mov	r3, r0
 8003078:	429c      	cmp	r4, r3
 800307a:	d914      	bls.n	80030a6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fd2f 	bl	8003ae4 <RCC_SetFlashLatencyFromMSIRange>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e336      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff fe0e 	bl	8002cb6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fe32 	bl	8002d08 <LL_RCC_MSI_SetCalibTrimming>
 80030a4:	e013      	b.n	80030ce <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff fe03 	bl	8002cb6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff fe27 	bl	8002d08 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fd10 	bl	8003ae4 <RCC_SetFlashLatencyFromMSIRange>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e317      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80030ce:	f000 fcc9 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 80030d2:	4603      	mov	r3, r0
 80030d4:	4aa4      	ldr	r2, [pc, #656]	@ (8003368 <HAL_RCC_OscConfig+0x344>)
 80030d6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030d8:	4ba4      	ldr	r3, [pc, #656]	@ (800336c <HAL_RCC_OscConfig+0x348>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fe ff35 	bl	8001f4c <HAL_InitTick>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d039      	beq.n	800315c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e308      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d01e      	beq.n	8003132 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030f4:	f7ff fdb0 	bl	8002c58 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030f8:	f7fe ff76 	bl	8001fe8 <HAL_GetTick>
 80030fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003100:	f7fe ff72 	bl	8001fe8 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e2f5      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003112:	f7ff fdbf 	bl	8002c94 <LL_RCC_MSI_IsReady>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f1      	beq.n	8003100 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fdc8 	bl	8002cb6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fdec 	bl	8002d08 <LL_RCC_MSI_SetCalibTrimming>
 8003130:	e015      	b.n	800315e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003132:	f7ff fda0 	bl	8002c76 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003136:	f7fe ff57 	bl	8001fe8 <HAL_GetTick>
 800313a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800313e:	f7fe ff53 	bl	8001fe8 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e2d6      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003150:	f7ff fda0 	bl	8002c94 <LL_RCC_MSI_IsReady>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f1      	bne.n	800313e <HAL_RCC_OscConfig+0x11a>
 800315a:	e000      	b.n	800315e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800315c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d047      	beq.n	80031fa <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800316a:	f7ff fdf6 	bl	8002d5a <LL_RCC_GetSysClkSource>
 800316e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003170:	f7ff feef 	bl	8002f52 <LL_RCC_PLL_GetMainSource>
 8003174:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	2b08      	cmp	r3, #8
 800317a:	d005      	beq.n	8003188 <HAL_RCC_OscConfig+0x164>
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	2b0c      	cmp	r3, #12
 8003180:	d108      	bne.n	8003194 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	2b03      	cmp	r3, #3
 8003186:	d105      	bne.n	8003194 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d134      	bne.n	80031fa <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e2b4      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800319c:	d102      	bne.n	80031a4 <HAL_RCC_OscConfig+0x180>
 800319e:	f7ff fbdd 	bl	800295c <LL_RCC_HSE_Enable>
 80031a2:	e001      	b.n	80031a8 <HAL_RCC_OscConfig+0x184>
 80031a4:	f7ff fbe9 	bl	800297a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d012      	beq.n	80031d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7fe ff1a 	bl	8001fe8 <HAL_GetTick>
 80031b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b8:	f7fe ff16 	bl	8001fe8 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	@ 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e299      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80031ca:	f7ff fbe5 	bl	8002998 <LL_RCC_HSE_IsReady>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f1      	beq.n	80031b8 <HAL_RCC_OscConfig+0x194>
 80031d4:	e011      	b.n	80031fa <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d6:	f7fe ff07 	bl	8001fe8 <HAL_GetTick>
 80031da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031de:	f7fe ff03 	bl	8001fe8 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b64      	cmp	r3, #100	@ 0x64
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e286      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80031f0:	f7ff fbd2 	bl	8002998 <LL_RCC_HSE_IsReady>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f1      	bne.n	80031de <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d04c      	beq.n	80032a0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003206:	f7ff fda8 	bl	8002d5a <LL_RCC_GetSysClkSource>
 800320a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800320c:	f7ff fea1 	bl	8002f52 <LL_RCC_PLL_GetMainSource>
 8003210:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	2b04      	cmp	r3, #4
 8003216:	d005      	beq.n	8003224 <HAL_RCC_OscConfig+0x200>
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	2b0c      	cmp	r3, #12
 800321c:	d10e      	bne.n	800323c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d10b      	bne.n	800323c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e266      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fbf1 	bl	8002a1c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800323a:	e031      	b.n	80032a0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d019      	beq.n	8003278 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003244:	f7ff fbba 	bl	80029bc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003248:	f7fe fece 	bl	8001fe8 <HAL_GetTick>
 800324c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003250:	f7fe feca 	bl	8001fe8 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e24d      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003262:	f7ff fbc9 	bl	80029f8 <LL_RCC_HSI_IsReady>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f1      	beq.n	8003250 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fbd3 	bl	8002a1c <LL_RCC_HSI_SetCalibTrimming>
 8003276:	e013      	b.n	80032a0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003278:	f7ff fbaf 	bl	80029da <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327c:	f7fe feb4 	bl	8001fe8 <HAL_GetTick>
 8003280:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003284:	f7fe feb0 	bl	8001fe8 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e233      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003296:	f7ff fbaf 	bl	80029f8 <LL_RCC_HSI_IsReady>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f1      	bne.n	8003284 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d106      	bne.n	80032ba <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 80a3 	beq.w	8003400 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d076      	beq.n	80033b0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d046      	beq.n	800335c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80032ce:	f7ff fc66 	bl	8002b9e <LL_RCC_LSI1_IsReady>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d113      	bne.n	8003300 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80032d8:	f7ff fc3f 	bl	8002b5a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032dc:	f7fe fe84 	bl	8001fe8 <HAL_GetTick>
 80032e0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80032e4:	f7fe fe80 	bl	8001fe8 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e203      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80032f6:	f7ff fc52 	bl	8002b9e <LL_RCC_LSI1_IsReady>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f1      	beq.n	80032e4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003300:	f7ff fc5f 	bl	8002bc2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fe fe70 	bl	8001fe8 <HAL_GetTick>
 8003308:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800330c:	f7fe fe6c 	bl	8001fe8 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b03      	cmp	r3, #3
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e1ef      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800331e:	f7ff fc72 	bl	8002c06 <LL_RCC_LSI2_IsReady>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f1      	beq.n	800330c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff fc7c 	bl	8002c2a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003332:	f7ff fc23 	bl	8002b7c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003336:	f7fe fe57 	bl	8001fe8 <HAL_GetTick>
 800333a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800333e:	f7fe fe53 	bl	8001fe8 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e1d6      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003350:	f7ff fc25 	bl	8002b9e <LL_RCC_LSI1_IsReady>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f1      	bne.n	800333e <HAL_RCC_OscConfig+0x31a>
 800335a:	e051      	b.n	8003400 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800335c:	f7ff fbfd 	bl	8002b5a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fe fe42 	bl	8001fe8 <HAL_GetTick>
 8003364:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003366:	e00c      	b.n	8003382 <HAL_RCC_OscConfig+0x35e>
 8003368:	20000008 	.word	0x20000008
 800336c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003370:	f7fe fe3a 	bl	8001fe8 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e1bd      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003382:	f7ff fc0c 	bl	8002b9e <LL_RCC_LSI1_IsReady>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f1      	beq.n	8003370 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800338c:	f7ff fc2a 	bl	8002be4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003392:	f7fe fe29 	bl	8001fe8 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b03      	cmp	r3, #3
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e1ac      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80033a4:	f7ff fc2f 	bl	8002c06 <LL_RCC_LSI2_IsReady>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f1      	bne.n	8003392 <HAL_RCC_OscConfig+0x36e>
 80033ae:	e027      	b.n	8003400 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80033b0:	f7ff fc18 	bl	8002be4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fe fe18 	bl	8001fe8 <HAL_GetTick>
 80033b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80033bc:	f7fe fe14 	bl	8001fe8 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e197      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80033ce:	f7ff fc1a 	bl	8002c06 <LL_RCC_LSI2_IsReady>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1f1      	bne.n	80033bc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80033d8:	f7ff fbd0 	bl	8002b7c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033dc:	f7fe fe04 	bl	8001fe8 <HAL_GetTick>
 80033e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80033e4:	f7fe fe00 	bl	8001fe8 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e183      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80033f6:	f7ff fbd2 	bl	8002b9e <LL_RCC_LSI1_IsReady>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f1      	bne.n	80033e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d05b      	beq.n	80034c4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800340c:	4ba7      	ldr	r3, [pc, #668]	@ (80036ac <HAL_RCC_OscConfig+0x688>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d114      	bne.n	8003442 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003418:	f7ff fa70 	bl	80028fc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800341c:	f7fe fde4 	bl	8001fe8 <HAL_GetTick>
 8003420:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003424:	f7fe fde0 	bl	8001fe8 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e163      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003436:	4b9d      	ldr	r3, [pc, #628]	@ (80036ac <HAL_RCC_OscConfig+0x688>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d102      	bne.n	8003450 <HAL_RCC_OscConfig+0x42c>
 800344a:	f7ff fb30 	bl	8002aae <LL_RCC_LSE_Enable>
 800344e:	e00c      	b.n	800346a <HAL_RCC_OscConfig+0x446>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b05      	cmp	r3, #5
 8003456:	d104      	bne.n	8003462 <HAL_RCC_OscConfig+0x43e>
 8003458:	f7ff fb4b 	bl	8002af2 <LL_RCC_LSE_EnableBypass>
 800345c:	f7ff fb27 	bl	8002aae <LL_RCC_LSE_Enable>
 8003460:	e003      	b.n	800346a <HAL_RCC_OscConfig+0x446>
 8003462:	f7ff fb35 	bl	8002ad0 <LL_RCC_LSE_Disable>
 8003466:	f7ff fb55 	bl	8002b14 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d014      	beq.n	800349c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003472:	f7fe fdb9 	bl	8001fe8 <HAL_GetTick>
 8003476:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003478:	e00a      	b.n	8003490 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347a:	f7fe fdb5 	bl	8001fe8 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003488:	4293      	cmp	r3, r2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e136      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003490:	f7ff fb51 	bl	8002b36 <LL_RCC_LSE_IsReady>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0ef      	beq.n	800347a <HAL_RCC_OscConfig+0x456>
 800349a:	e013      	b.n	80034c4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349c:	f7fe fda4 	bl	8001fe8 <HAL_GetTick>
 80034a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80034a2:	e00a      	b.n	80034ba <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a4:	f7fe fda0 	bl	8001fe8 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e121      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80034ba:	f7ff fb3c 	bl	8002b36 <LL_RCC_LSE_IsReady>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1ef      	bne.n	80034a4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d02c      	beq.n	800352a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d014      	beq.n	8003502 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034d8:	f7ff fab5 	bl	8002a46 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034dc:	f7fe fd84 	bl	8001fe8 <HAL_GetTick>
 80034e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034e4:	f7fe fd80 	bl	8001fe8 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e103      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80034f6:	f7ff fac8 	bl	8002a8a <LL_RCC_HSI48_IsReady>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f1      	beq.n	80034e4 <HAL_RCC_OscConfig+0x4c0>
 8003500:	e013      	b.n	800352a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003502:	f7ff fab1 	bl	8002a68 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003506:	f7fe fd6f 	bl	8001fe8 <HAL_GetTick>
 800350a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800350e:	f7fe fd6b 	bl	8001fe8 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e0ee      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003520:	f7ff fab3 	bl	8002a8a <LL_RCC_HSI48_IsReady>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f1      	bne.n	800350e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 80e4 	beq.w	80036fc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003534:	f7ff fc11 	bl	8002d5a <LL_RCC_GetSysClkSource>
 8003538:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800353a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003546:	2b02      	cmp	r3, #2
 8003548:	f040 80b4 	bne.w	80036b4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 0203 	and.w	r2, r3, #3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003556:	429a      	cmp	r2, r3
 8003558:	d123      	bne.n	80035a2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003564:	429a      	cmp	r2, r3
 8003566:	d11c      	bne.n	80035a2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	0a1b      	lsrs	r3, r3, #8
 800356c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003574:	429a      	cmp	r2, r3
 8003576:	d114      	bne.n	80035a2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003582:	429a      	cmp	r2, r3
 8003584:	d10d      	bne.n	80035a2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003590:	429a      	cmp	r2, r3
 8003592:	d106      	bne.n	80035a2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800359e:	429a      	cmp	r2, r3
 80035a0:	d05d      	beq.n	800365e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	2b0c      	cmp	r3, #12
 80035a6:	d058      	beq.n	800365a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e0a1      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035ba:	f7ff fc84 	bl	8002ec6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035be:	f7fe fd13 	bl	8001fe8 <HAL_GetTick>
 80035c2:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c6:	f7fe fd0f 	bl	8001fe8 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e092      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1ef      	bne.n	80035c6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	4b30      	ldr	r3, [pc, #192]	@ (80036b0 <HAL_RCC_OscConfig+0x68c>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035f8:	4311      	orrs	r1, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035fe:	0212      	lsls	r2, r2, #8
 8003600:	4311      	orrs	r1, r2
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003606:	4311      	orrs	r1, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800360c:	4311      	orrs	r1, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003612:	430a      	orrs	r2, r1
 8003614:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003618:	4313      	orrs	r3, r2
 800361a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800361c:	f7ff fc44 	bl	8002ea8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003620:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800362a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800362e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003630:	f7fe fcda 	bl	8001fe8 <HAL_GetTick>
 8003634:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003638:	f7fe fcd6 	bl	8001fe8 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e059      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800364a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0ef      	beq.n	8003638 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003658:	e050      	b.n	80036fc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e04f      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800365e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d147      	bne.n	80036fc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800366c:	f7ff fc1c 	bl	8002ea8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003670:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800367a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800367e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003680:	f7fe fcb2 	bl	8001fe8 <HAL_GetTick>
 8003684:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003688:	f7fe fcae 	bl	8001fe8 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e031      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800369a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0ef      	beq.n	8003688 <HAL_RCC_OscConfig+0x664>
 80036a8:	e028      	b.n	80036fc <HAL_RCC_OscConfig+0x6d8>
 80036aa:	bf00      	nop
 80036ac:	58000400 	.word	0x58000400
 80036b0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	2b0c      	cmp	r3, #12
 80036b8:	d01e      	beq.n	80036f8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ba:	f7ff fc04 	bl	8002ec6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036be:	f7fe fc93 	bl	8001fe8 <HAL_GetTick>
 80036c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c6:	f7fe fc8f 	bl	8001fe8 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e012      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1ef      	bne.n	80036c6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80036e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036f0:	4b05      	ldr	r3, [pc, #20]	@ (8003708 <HAL_RCC_OscConfig+0x6e4>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	60cb      	str	r3, [r1, #12]
 80036f6:	e001      	b.n	80036fc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3734      	adds	r7, #52	@ 0x34
 8003702:	46bd      	mov	sp, r7
 8003704:	bd90      	pop	{r4, r7, pc}
 8003706:	bf00      	nop
 8003708:	eefefffc 	.word	0xeefefffc

0800370c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e12d      	b.n	800397c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003720:	4b98      	ldr	r3, [pc, #608]	@ (8003984 <HAL_RCC_ClockConfig+0x278>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d91b      	bls.n	8003766 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372e:	4b95      	ldr	r3, [pc, #596]	@ (8003984 <HAL_RCC_ClockConfig+0x278>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f023 0207 	bic.w	r2, r3, #7
 8003736:	4993      	ldr	r1, [pc, #588]	@ (8003984 <HAL_RCC_ClockConfig+0x278>)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	4313      	orrs	r3, r2
 800373c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800373e:	f7fe fc53 	bl	8001fe8 <HAL_GetTick>
 8003742:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003744:	e008      	b.n	8003758 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003746:	f7fe fc4f 	bl	8001fe8 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e111      	b.n	800397c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003758:	4b8a      	ldr	r3, [pc, #552]	@ (8003984 <HAL_RCC_ClockConfig+0x278>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d1ef      	bne.n	8003746 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d016      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff fafb 	bl	8002d72 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800377c:	f7fe fc34 	bl	8001fe8 <HAL_GetTick>
 8003780:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003782:	e008      	b.n	8003796 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003784:	f7fe fc30 	bl	8001fe8 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e0f2      	b.n	800397c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003796:	f7ff fbe8 	bl	8002f6a <LL_RCC_IsActiveFlag_HPRE>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f1      	beq.n	8003784 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d016      	beq.n	80037da <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff faf2 	bl	8002d9a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037b6:	f7fe fc17 	bl	8001fe8 <HAL_GetTick>
 80037ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037be:	f7fe fc13 	bl	8001fe8 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e0d5      	b.n	800397c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80037d0:	f7ff fbdd 	bl	8002f8e <LL_RCC_IsActiveFlag_C2HPRE>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f1      	beq.n	80037be <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d016      	beq.n	8003814 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff faeb 	bl	8002dc6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037f0:	f7fe fbfa 	bl	8001fe8 <HAL_GetTick>
 80037f4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80037f6:	e008      	b.n	800380a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037f8:	f7fe fbf6 	bl	8001fe8 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e0b8      	b.n	800397c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800380a:	f7ff fbd3 	bl	8002fb4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f1      	beq.n	80037f8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d016      	beq.n	800384e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff fae5 	bl	8002df4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800382a:	f7fe fbdd 	bl	8001fe8 <HAL_GetTick>
 800382e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003830:	e008      	b.n	8003844 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003832:	f7fe fbd9 	bl	8001fe8 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e09b      	b.n	800397c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003844:	f7ff fbc9 	bl	8002fda <LL_RCC_IsActiveFlag_PPRE1>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f1      	beq.n	8003832 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d017      	beq.n	800388a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff fadb 	bl	8002e1c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003866:	f7fe fbbf 	bl	8001fe8 <HAL_GetTick>
 800386a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800386c:	e008      	b.n	8003880 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800386e:	f7fe fbbb 	bl	8001fe8 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e07d      	b.n	800397c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003880:	f7ff fbbd 	bl	8002ffe <LL_RCC_IsActiveFlag_PPRE2>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0f1      	beq.n	800386e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d043      	beq.n	800391e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d106      	bne.n	80038ac <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800389e:	f7ff f87b 	bl	8002998 <LL_RCC_HSE_IsReady>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d11e      	bne.n	80038e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e067      	b.n	800397c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d106      	bne.n	80038c2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80038b4:	f7ff fb16 	bl	8002ee4 <LL_RCC_PLL_IsReady>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d113      	bne.n	80038e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e05c      	b.n	800397c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80038ca:	f7ff f9e3 	bl	8002c94 <LL_RCC_MSI_IsReady>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d108      	bne.n	80038e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e051      	b.n	800397c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80038d8:	f7ff f88e 	bl	80029f8 <LL_RCC_HSI_IsReady>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e04a      	b.n	800397c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff fa21 	bl	8002d32 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f0:	f7fe fb7a 	bl	8001fe8 <HAL_GetTick>
 80038f4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f6:	e00a      	b.n	800390e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f8:	f7fe fb76 	bl	8001fe8 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003906:	4293      	cmp	r3, r2
 8003908:	d901      	bls.n	800390e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e036      	b.n	800397c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390e:	f7ff fa24 	bl	8002d5a <LL_RCC_GetSysClkSource>
 8003912:	4602      	mov	r2, r0
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	429a      	cmp	r2, r3
 800391c:	d1ec      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800391e:	4b19      	ldr	r3, [pc, #100]	@ (8003984 <HAL_RCC_ClockConfig+0x278>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d21b      	bcs.n	8003964 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392c:	4b15      	ldr	r3, [pc, #84]	@ (8003984 <HAL_RCC_ClockConfig+0x278>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f023 0207 	bic.w	r2, r3, #7
 8003934:	4913      	ldr	r1, [pc, #76]	@ (8003984 <HAL_RCC_ClockConfig+0x278>)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	4313      	orrs	r3, r2
 800393a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800393c:	f7fe fb54 	bl	8001fe8 <HAL_GetTick>
 8003940:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003942:	e008      	b.n	8003956 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003944:	f7fe fb50 	bl	8001fe8 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e012      	b.n	800397c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003956:	4b0b      	ldr	r3, [pc, #44]	@ (8003984 <HAL_RCC_ClockConfig+0x278>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d1ef      	bne.n	8003944 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003964:	f000 f87e 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003968:	4603      	mov	r3, r0
 800396a:	4a07      	ldr	r2, [pc, #28]	@ (8003988 <HAL_RCC_ClockConfig+0x27c>)
 800396c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800396e:	f7fe fb47 	bl	8002000 <HAL_GetTickPrio>
 8003972:	4603      	mov	r3, r0
 8003974:	4618      	mov	r0, r3
 8003976:	f7fe fae9 	bl	8001f4c <HAL_InitTick>
 800397a:	4603      	mov	r3, r0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	58004000 	.word	0x58004000
 8003988:	20000008 	.word	0x20000008

0800398c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800398c:	b590      	push	{r4, r7, lr}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003992:	f7ff f9e2 	bl	8002d5a <LL_RCC_GetSysClkSource>
 8003996:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10a      	bne.n	80039b4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800399e:	f7ff f99e 	bl	8002cde <LL_RCC_MSI_GetRange>
 80039a2:	4603      	mov	r3, r0
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	4a2b      	ldr	r2, [pc, #172]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0xcc>)
 80039ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	e04b      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d102      	bne.n	80039c0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039ba:	4b28      	ldr	r3, [pc, #160]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0xd0>)
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	e045      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d10a      	bne.n	80039dc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80039c6:	f7fe ffb7 	bl	8002938 <LL_RCC_HSE_IsEnabledDiv2>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d102      	bne.n	80039d6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80039d0:	4b22      	ldr	r3, [pc, #136]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0xd0>)
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	e03a      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80039d6:	4b22      	ldr	r3, [pc, #136]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0xd4>)
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	e037      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80039dc:	f7ff fab9 	bl	8002f52 <LL_RCC_PLL_GetMainSource>
 80039e0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d003      	beq.n	80039f0 <HAL_RCC_GetSysClockFreq+0x64>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	2b03      	cmp	r3, #3
 80039ec:	d003      	beq.n	80039f6 <HAL_RCC_GetSysClockFreq+0x6a>
 80039ee:	e00d      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80039f0:	4b1a      	ldr	r3, [pc, #104]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0xd0>)
 80039f2:	60bb      	str	r3, [r7, #8]
        break;
 80039f4:	e015      	b.n	8003a22 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80039f6:	f7fe ff9f 	bl	8002938 <LL_RCC_HSE_IsEnabledDiv2>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d102      	bne.n	8003a06 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003a00:	4b16      	ldr	r3, [pc, #88]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a02:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003a04:	e00d      	b.n	8003a22 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003a06:	4b16      	ldr	r3, [pc, #88]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a08:	60bb      	str	r3, [r7, #8]
        break;
 8003a0a:	e00a      	b.n	8003a22 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003a0c:	f7ff f967 	bl	8002cde <LL_RCC_MSI_GetRange>
 8003a10:	4603      	mov	r3, r0
 8003a12:	091b      	lsrs	r3, r3, #4
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	4a0f      	ldr	r2, [pc, #60]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1e:	60bb      	str	r3, [r7, #8]
        break;
 8003a20:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003a22:	f7ff fa71 	bl	8002f08 <LL_RCC_PLL_GetN>
 8003a26:	4602      	mov	r2, r0
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	fb03 f402 	mul.w	r4, r3, r2
 8003a2e:	f7ff fa84 	bl	8002f3a <LL_RCC_PLL_GetDivider>
 8003a32:	4603      	mov	r3, r0
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	3301      	adds	r3, #1
 8003a38:	fbb4 f4f3 	udiv	r4, r4, r3
 8003a3c:	f7ff fa71 	bl	8002f22 <LL_RCC_PLL_GetR>
 8003a40:	4603      	mov	r3, r0
 8003a42:	0f5b      	lsrs	r3, r3, #29
 8003a44:	3301      	adds	r3, #1
 8003a46:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a4a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd90      	pop	{r4, r7, pc}
 8003a56:	bf00      	nop
 8003a58:	0800ad00 	.word	0x0800ad00
 8003a5c:	00f42400 	.word	0x00f42400
 8003a60:	01e84800 	.word	0x01e84800

08003a64 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a64:	b598      	push	{r3, r4, r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003a68:	f7ff ff90 	bl	800398c <HAL_RCC_GetSysClockFreq>
 8003a6c:	4604      	mov	r4, r0
 8003a6e:	f7ff f9e9 	bl	8002e44 <LL_RCC_GetAHBPrescaler>
 8003a72:	4603      	mov	r3, r0
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	4a03      	ldr	r2, [pc, #12]	@ (8003a88 <HAL_RCC_GetHCLKFreq+0x24>)
 8003a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a80:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	bd98      	pop	{r3, r4, r7, pc}
 8003a88:	0800aca0 	.word	0x0800aca0

08003a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a8c:	b598      	push	{r3, r4, r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003a90:	f7ff ffe8 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003a94:	4604      	mov	r4, r0
 8003a96:	f7ff f9ef 	bl	8002e78 <LL_RCC_GetAPB1Prescaler>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	0a1b      	lsrs	r3, r3, #8
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	4a04      	ldr	r2, [pc, #16]	@ (8003ab4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa8:	f003 031f 	and.w	r3, r3, #31
 8003aac:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	bd98      	pop	{r3, r4, r7, pc}
 8003ab4:	0800ace0 	.word	0x0800ace0

08003ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab8:	b598      	push	{r3, r4, r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003abc:	f7ff ffd2 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003ac0:	4604      	mov	r4, r0
 8003ac2:	f7ff f9e5 	bl	8002e90 <LL_RCC_GetAPB2Prescaler>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	0adb      	lsrs	r3, r3, #11
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	4a04      	ldr	r2, [pc, #16]	@ (8003ae0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad4:	f003 031f 	and.w	r3, r3, #31
 8003ad8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	bd98      	pop	{r3, r4, r7, pc}
 8003ae0:	0800ace0 	.word	0x0800ace0

08003ae4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003ae4:	b590      	push	{r4, r7, lr}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2bb0      	cmp	r3, #176	@ 0xb0
 8003af0:	d903      	bls.n	8003afa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003af2:	4b15      	ldr	r3, [pc, #84]	@ (8003b48 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	e007      	b.n	8003b0a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	091b      	lsrs	r3, r3, #4
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	4a11      	ldr	r2, [pc, #68]	@ (8003b48 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b08:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003b0a:	f7ff f9a7 	bl	8002e5c <LL_RCC_GetAHB4Prescaler>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	091b      	lsrs	r3, r3, #4
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	4a0d      	ldr	r2, [pc, #52]	@ (8003b4c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b22:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	4a0a      	ldr	r2, [pc, #40]	@ (8003b50 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	0c9c      	lsrs	r4, r3, #18
 8003b2e:	f7fe fef5 	bl	800291c <HAL_PWREx_GetVoltageRange>
 8003b32:	4603      	mov	r3, r0
 8003b34:	4619      	mov	r1, r3
 8003b36:	4620      	mov	r0, r4
 8003b38:	f000 f80c 	bl	8003b54 <RCC_SetFlashLatency>
 8003b3c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd90      	pop	{r4, r7, pc}
 8003b46:	bf00      	nop
 8003b48:	0800ad00 	.word	0x0800ad00
 8003b4c:	0800aca0 	.word	0x0800aca0
 8003b50:	431bde83 	.word	0x431bde83

08003b54 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003b54:	b590      	push	{r4, r7, lr}
 8003b56:	b093      	sub	sp, #76	@ 0x4c
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003b5e:	4b37      	ldr	r3, [pc, #220]	@ (8003c3c <RCC_SetFlashLatency+0xe8>)
 8003b60:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003b64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003b6a:	4a35      	ldr	r2, [pc, #212]	@ (8003c40 <RCC_SetFlashLatency+0xec>)
 8003b6c:	f107 031c 	add.w	r3, r7, #28
 8003b70:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003b76:	4b33      	ldr	r3, [pc, #204]	@ (8003c44 <RCC_SetFlashLatency+0xf0>)
 8003b78:	f107 040c 	add.w	r4, r7, #12
 8003b7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003b82:	2300      	movs	r3, #0
 8003b84:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b8c:	d11a      	bne.n	8003bc4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003b8e:	2300      	movs	r3, #0
 8003b90:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b92:	e013      	b.n	8003bbc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003b94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	3348      	adds	r3, #72	@ 0x48
 8003b9a:	443b      	add	r3, r7
 8003b9c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d807      	bhi.n	8003bb6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003ba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	3348      	adds	r3, #72	@ 0x48
 8003bac:	443b      	add	r3, r7
 8003bae:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003bb2:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003bb4:	e020      	b.n	8003bf8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003bb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bb8:	3301      	adds	r3, #1
 8003bba:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	d9e8      	bls.n	8003b94 <RCC_SetFlashLatency+0x40>
 8003bc2:	e019      	b.n	8003bf8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bc8:	e013      	b.n	8003bf2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	3348      	adds	r3, #72	@ 0x48
 8003bd0:	443b      	add	r3, r7
 8003bd2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d807      	bhi.n	8003bec <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	3348      	adds	r3, #72	@ 0x48
 8003be2:	443b      	add	r3, r7
 8003be4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003be8:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003bea:	e005      	b.n	8003bf8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003bec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bee:	3301      	adds	r3, #1
 8003bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d9e8      	bls.n	8003bca <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003bf8:	4b13      	ldr	r3, [pc, #76]	@ (8003c48 <RCC_SetFlashLatency+0xf4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f023 0207 	bic.w	r2, r3, #7
 8003c00:	4911      	ldr	r1, [pc, #68]	@ (8003c48 <RCC_SetFlashLatency+0xf4>)
 8003c02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c04:	4313      	orrs	r3, r2
 8003c06:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c08:	f7fe f9ee 	bl	8001fe8 <HAL_GetTick>
 8003c0c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c0e:	e008      	b.n	8003c22 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c10:	f7fe f9ea 	bl	8001fe8 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e007      	b.n	8003c32 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c22:	4b09      	ldr	r3, [pc, #36]	@ (8003c48 <RCC_SetFlashLatency+0xf4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d1ef      	bne.n	8003c10 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	374c      	adds	r7, #76	@ 0x4c
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd90      	pop	{r4, r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	0800aafc 	.word	0x0800aafc
 8003c40:	0800ab0c 	.word	0x0800ab0c
 8003c44:	0800ab18 	.word	0x0800ab18
 8003c48:	58004000 	.word	0x58004000

08003c4c <LL_RCC_LSE_IsEnabled>:
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003c50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <LL_RCC_LSE_IsEnabled+0x18>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <LL_RCC_LSE_IsEnabled+0x1a>
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <LL_RCC_LSE_IsReady>:
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d101      	bne.n	8003c88 <LL_RCC_LSE_IsReady+0x18>
 8003c84:	2301      	movs	r3, #1
 8003c86:	e000      	b.n	8003c8a <LL_RCC_LSE_IsReady+0x1a>
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <LL_RCC_SetRFWKPClockSource>:
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003c9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ca4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ca8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <LL_RCC_SetSMPSClockSource>:
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cce:	f023 0203 	bic.w	r2, r3, #3
 8003cd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <LL_RCC_SetSMPSPrescaler>:
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003cf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003cfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <LL_RCC_SetUSARTClockSource>:
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003d18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d20:	f023 0203 	bic.w	r2, r3, #3
 8003d24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <LL_RCC_SetLPUARTClockSource>:
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003d44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d4c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <LL_RCC_SetI2CClockSource>:
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003d70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d74:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	091b      	lsrs	r3, r3, #4
 8003d7c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003d80:	43db      	mvns	r3, r3
 8003d82:	401a      	ands	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003d8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <LL_RCC_SetLPTIMClockSource>:
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003daa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dae:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	0c1b      	lsrs	r3, r3, #16
 8003db6:	041b      	lsls	r3, r3, #16
 8003db8:	43db      	mvns	r3, r3
 8003dba:	401a      	ands	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	041b      	lsls	r3, r3, #16
 8003dc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <LL_RCC_SetSAIClockSource>:
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003dde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003dea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <LL_RCC_SetRNGClockSource>:
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003e0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e12:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003e16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <LL_RCC_SetCLK48ClockSource>:
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003e36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <LL_RCC_SetUSBClockSource>:
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b082      	sub	sp, #8
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff ffe3 	bl	8003e2e <LL_RCC_SetCLK48ClockSource>
}
 8003e68:	bf00      	nop
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <LL_RCC_SetADCClockSource>:
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003e78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e80:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <LL_RCC_SetRTCClockSource>:
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003eb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <LL_RCC_GetRTCClockSource>:
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003ecc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <LL_RCC_ForceBackupDomainReset>:
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ef2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ef6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003efa:	bf00      	nop
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003f08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003f1c:	bf00      	nop
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <LL_RCC_PLLSAI1_Enable>:
{
 8003f26:	b480      	push	{r7}
 8003f28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003f2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f38:	6013      	str	r3, [r2, #0]
}
 8003f3a:	bf00      	nop
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <LL_RCC_PLLSAI1_Disable>:
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f56:	6013      	str	r3, [r2, #0]
}
 8003f58:	bf00      	nop
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <LL_RCC_PLLSAI1_IsReady>:
{
 8003f62:	b480      	push	{r7}
 8003f64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003f66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f74:	d101      	bne.n	8003f7a <LL_RCC_PLLSAI1_IsReady+0x18>
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b088      	sub	sp, #32
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003f8e:	2300      	movs	r3, #0
 8003f90:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003f92:	2300      	movs	r3, #0
 8003f94:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d034      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003faa:	d021      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003fac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003fb0:	d81b      	bhi.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fb2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fb6:	d01d      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003fb8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fbc:	d815      	bhi.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003fc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fc6:	d110      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003fc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fd6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003fd8:	e00d      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3304      	adds	r3, #4
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 f947 	bl	8004272 <RCCEx_PLLSAI1_ConfigNP>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003fe8:	e005      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	77fb      	strb	r3, [r7, #31]
        break;
 8003fee:	e002      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003ff0:	bf00      	nop
 8003ff2:	e000      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ff6:	7ffb      	ldrb	r3, [r7, #31]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d105      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff fee8 	bl	8003dd6 <LL_RCC_SetSAIClockSource>
 8004006:	e001      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004008:	7ffb      	ldrb	r3, [r7, #31]
 800400a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004014:	2b00      	cmp	r3, #0
 8004016:	d046      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004018:	f7ff ff56 	bl	8003ec8 <LL_RCC_GetRTCClockSource>
 800401c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	429a      	cmp	r2, r3
 8004026:	d03c      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004028:	f7fe fc68 	bl	80028fc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d105      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff ff30 	bl	8003e9c <LL_RCC_SetRTCClockSource>
 800403c:	e02e      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800403e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004046:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004048:	f7ff ff4b 	bl	8003ee2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800404c:	f7ff ff5a 	bl	8003f04 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800405e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004068:	f7ff fdf0 	bl	8003c4c <LL_RCC_LSE_IsEnabled>
 800406c:	4603      	mov	r3, r0
 800406e:	2b01      	cmp	r3, #1
 8004070:	d114      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004072:	f7fd ffb9 	bl	8001fe8 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004078:	e00b      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800407a:	f7fd ffb5 	bl	8001fe8 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004088:	4293      	cmp	r3, r2
 800408a:	d902      	bls.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	77fb      	strb	r3, [r7, #31]
              break;
 8004090:	e004      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004092:	f7ff fded 	bl	8003c70 <LL_RCC_LSE_IsReady>
 8004096:	4603      	mov	r3, r0
 8004098:	2b01      	cmp	r3, #1
 800409a:	d1ee      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800409c:	7ffb      	ldrb	r3, [r7, #31]
 800409e:	77bb      	strb	r3, [r7, #30]
 80040a0:	e001      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a2:	7ffb      	ldrb	r3, [r7, #31]
 80040a4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d004      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff fe2a 	bl	8003d10 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d004      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff fe35 	bl	8003d3c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0310 	and.w	r3, r3, #16
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d004      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff fe5d 	bl	8003da2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d004      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff fe52 	bl	8003da2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b00      	cmp	r3, #0
 8004108:	d004      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff fe2a 	bl	8003d68 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b00      	cmp	r3, #0
 800411e:	d004      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff fe1f 	bl	8003d68 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d022      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff fe8d 	bl	8003e5a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004144:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004148:	d107      	bne.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800414a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004154:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004158:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800415e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004162:	d10b      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3304      	adds	r3, #4
 8004168:	4618      	mov	r0, r3
 800416a:	f000 f8dd 	bl	8004328 <RCCEx_PLLSAI1_ConfigNQ>
 800416e:	4603      	mov	r3, r0
 8004170:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004172:	7ffb      	ldrb	r3, [r7, #31]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004178:	7ffb      	ldrb	r3, [r7, #31]
 800417a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004184:	2b00      	cmp	r3, #0
 8004186:	d02b      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004190:	d008      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004196:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800419a:	d003      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d105      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff fe2a 	bl	8003e02 <LL_RCC_SetRNGClockSource>
 80041ae:	e00a      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	2000      	movs	r0, #0
 80041bc:	f7ff fe21 	bl	8003e02 <LL_RCC_SetRNGClockSource>
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f7ff fe34 	bl	8003e2e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ca:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80041ce:	d107      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80041d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d022      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff fe3d 	bl	8003e70 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041fe:	d107      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004200:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800420a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800420e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004214:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004218:	d10b      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3304      	adds	r3, #4
 800421e:	4618      	mov	r0, r3
 8004220:	f000 f8dd 	bl	80043de <RCCEx_PLLSAI1_ConfigNR>
 8004224:	4603      	mov	r3, r0
 8004226:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004228:	7ffb      	ldrb	r3, [r7, #31]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800422e:	7ffb      	ldrb	r3, [r7, #31]
 8004230:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d004      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fd26 	bl	8003c94 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d009      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fd45 	bl	8003ce8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff fd2c 	bl	8003cc0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004268:	7fbb      	ldrb	r3, [r7, #30]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3720      	adds	r7, #32
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800427e:	f7ff fe61 	bl	8003f44 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004282:	f7fd feb1 	bl	8001fe8 <HAL_GetTick>
 8004286:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004288:	e009      	b.n	800429e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800428a:	f7fd fead 	bl	8001fe8 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d902      	bls.n	800429e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	73fb      	strb	r3, [r7, #15]
      break;
 800429c:	e004      	b.n	80042a8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800429e:	f7ff fe60 	bl	8003f62 <LL_RCC_PLLSAI1_IsReady>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1f0      	bne.n	800428a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d137      	bne.n	800431e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80042ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	021b      	lsls	r3, r3, #8
 80042be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042c2:	4313      	orrs	r3, r2
 80042c4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80042c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042d8:	4313      	orrs	r3, r2
 80042da:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80042dc:	f7ff fe23 	bl	8003f26 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e0:	f7fd fe82 	bl	8001fe8 <HAL_GetTick>
 80042e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80042e6:	e009      	b.n	80042fc <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042e8:	f7fd fe7e 	bl	8001fe8 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d902      	bls.n	80042fc <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	73fb      	strb	r3, [r7, #15]
        break;
 80042fa:	e004      	b.n	8004306 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80042fc:	f7ff fe31 	bl	8003f62 <LL_RCC_PLLSAI1_IsReady>
 8004300:	4603      	mov	r3, r0
 8004302:	2b01      	cmp	r3, #1
 8004304:	d1f0      	bne.n	80042e8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004306:	7bfb      	ldrb	r3, [r7, #15]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d108      	bne.n	800431e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800430c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004310:	691a      	ldr	r2, [r3, #16]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800431a:	4313      	orrs	r3, r2
 800431c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800431e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004330:	2300      	movs	r3, #0
 8004332:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004334:	f7ff fe06 	bl	8003f44 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004338:	f7fd fe56 	bl	8001fe8 <HAL_GetTick>
 800433c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800433e:	e009      	b.n	8004354 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004340:	f7fd fe52 	bl	8001fe8 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d902      	bls.n	8004354 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	73fb      	strb	r3, [r7, #15]
      break;
 8004352:	e004      	b.n	800435e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004354:	f7ff fe05 	bl	8003f62 <LL_RCC_PLLSAI1_IsReady>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f0      	bne.n	8004340 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d137      	bne.n	80043d4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004364:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004378:	4313      	orrs	r3, r2
 800437a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800437c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800438e:	4313      	orrs	r3, r2
 8004390:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004392:	f7ff fdc8 	bl	8003f26 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004396:	f7fd fe27 	bl	8001fe8 <HAL_GetTick>
 800439a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800439c:	e009      	b.n	80043b2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800439e:	f7fd fe23 	bl	8001fe8 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d902      	bls.n	80043b2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	73fb      	strb	r3, [r7, #15]
        break;
 80043b0:	e004      	b.n	80043bc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80043b2:	f7ff fdd6 	bl	8003f62 <LL_RCC_PLLSAI1_IsReady>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d1f0      	bne.n	800439e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d108      	bne.n	80043d4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80043c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043d0:	4313      	orrs	r3, r2
 80043d2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b084      	sub	sp, #16
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80043ea:	f7ff fdab 	bl	8003f44 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80043ee:	f7fd fdfb 	bl	8001fe8 <HAL_GetTick>
 80043f2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80043f4:	e009      	b.n	800440a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043f6:	f7fd fdf7 	bl	8001fe8 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d902      	bls.n	800440a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	73fb      	strb	r3, [r7, #15]
      break;
 8004408:	e004      	b.n	8004414 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800440a:	f7ff fdaa 	bl	8003f62 <LL_RCC_PLLSAI1_IsReady>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1f0      	bne.n	80043f6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d137      	bne.n	800448a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800441a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	021b      	lsls	r3, r3, #8
 800442a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800442e:	4313      	orrs	r3, r2
 8004430:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004444:	4313      	orrs	r3, r2
 8004446:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004448:	f7ff fd6d 	bl	8003f26 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800444c:	f7fd fdcc 	bl	8001fe8 <HAL_GetTick>
 8004450:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004452:	e009      	b.n	8004468 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004454:	f7fd fdc8 	bl	8001fe8 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d902      	bls.n	8004468 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	73fb      	strb	r3, [r7, #15]
        break;
 8004466:	e004      	b.n	8004472 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004468:	f7ff fd7b 	bl	8003f62 <LL_RCC_PLLSAI1_IsReady>
 800446c:	4603      	mov	r3, r0
 800446e:	2b01      	cmp	r3, #1
 8004470:	d1f0      	bne.n	8004454 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004472:	7bfb      	ldrb	r3, [r7, #15]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d108      	bne.n	800448a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004478:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004486:	4313      	orrs	r3, r2
 8004488:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800448a:	7bfb      	ldrb	r3, [r7, #15]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e07a      	b.n	80045a0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d106      	bne.n	80044c4 <HAL_RTC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fd fab6 	bl	8001a30 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f003 0310 	and.w	r3, r3, #16
 80044d6:	2b10      	cmp	r3, #16
 80044d8:	d058      	beq.n	800458c <HAL_RTC_Init+0xf8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	22ca      	movs	r2, #202	@ 0xca
 80044e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2253      	movs	r2, #83	@ 0x53
 80044e8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f882 	bl	80045f4 <RTC_EnterInitMode>
 80044f0:	4603      	mov	r3, r0
 80044f2:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d12c      	bne.n	8004554 <HAL_RTC_Init+0xc0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004508:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800450c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6899      	ldr	r1, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	431a      	orrs	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	68d2      	ldr	r2, [r2, #12]
 8004534:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6919      	ldr	r1, [r3, #16]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	041a      	lsls	r2, r3, #16
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f88a 	bl	8004664 <RTC_ExitInitMode>
 8004550:	4603      	mov	r3, r0
 8004552:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d113      	bne.n	8004582 <HAL_RTC_Init+0xee>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0203 	bic.w	r2, r2, #3
 8004568:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69da      	ldr	r2, [r3, #28]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	22ff      	movs	r2, #255	@ 0xff
 8004588:	625a      	str	r2, [r3, #36]	@ 0x24
 800458a:	e001      	b.n	8004590 <HAL_RTC_Init+0xfc>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800458c:	2300      	movs	r3, #0
 800458e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d103      	bne.n	800459e <HAL_RTC_Init+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800459e:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a0d      	ldr	r2, [pc, #52]	@ (80045f0 <HAL_RTC_WaitForSynchro+0x48>)
 80045ba:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045bc:	f7fd fd14 	bl	8001fe8 <HAL_GetTick>
 80045c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045c2:	e009      	b.n	80045d8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045c4:	f7fd fd10 	bl	8001fe8 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045d2:	d901      	bls.n	80045d8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e007      	b.n	80045e8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0ee      	beq.n	80045c4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	0001ff5f 	.word	0x0001ff5f

080045f4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d123      	bne.n	800465a <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004620:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004622:	f7fd fce1 	bl	8001fe8 <HAL_GetTick>
 8004626:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004628:	e00d      	b.n	8004646 <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800462a:	f7fd fcdd 	bl	8001fe8 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004638:	d905      	bls.n	8004646 <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2204      	movs	r2, #4
 800463e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004650:	2b00      	cmp	r3, #0
 8004652:	d102      	bne.n	800465a <RTC_EnterInitMode+0x66>
 8004654:	7bfb      	ldrb	r3, [r7, #15]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d1e7      	bne.n	800462a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800465a:	7bfb      	ldrb	r3, [r7, #15]
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800467e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 0320 	and.w	r3, r3, #32
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10b      	bne.n	80046a6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7ff ff8a 	bl	80045a8 <HAL_RTC_WaitForSynchro>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2204      	movs	r2, #4
 800469e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80046a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80046bc:	4b5f      	ldr	r3, [pc, #380]	@ (800483c <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a5f      	ldr	r2, [pc, #380]	@ (8004840 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 80046c2:	fba2 2303 	umull	r2, r3, r2, r3
 80046c6:	0adb      	lsrs	r3, r3, #11
 80046c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80046cc:	fb02 f303 	mul.w	r3, r2, r3
 80046d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d101      	bne.n	80046e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
 80046dc:	2302      	movs	r3, #2
 80046de:	e0a7      	b.n	8004830 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	22ca      	movs	r2, #202	@ 0xca
 80046f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2253      	movs	r2, #83	@ 0x53
 80046fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800470a:	2b00      	cmp	r3, #0
 800470c:	d01a      	beq.n	8004744 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	3b01      	subs	r3, #1
 8004712:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10d      	bne.n	8004736 <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	22ff      	movs	r2, #255	@ 0xff
 8004720:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2203      	movs	r2, #3
 8004726:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e07c      	b.n	8004830 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1e4      	bne.n	800470e <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004752:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	b2da      	uxtb	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8004764:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004766:	4b35      	ldr	r3, [pc, #212]	@ (800483c <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a35      	ldr	r2, [pc, #212]	@ (8004840 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 800476c:	fba2 2303 	umull	r2, r3, r2, r3
 8004770:	0adb      	lsrs	r3, r3, #11
 8004772:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004776:	fb02 f303 	mul.w	r3, r2, r3
 800477a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	3b01      	subs	r3, #1
 8004780:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10d      	bne.n	80047a4 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	22ff      	movs	r2, #255	@ 0xff
 800478e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2203      	movs	r2, #3
 8004794:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e045      	b.n	8004830 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0e4      	beq.n	800477c <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0207 	bic.w	r2, r2, #7
 80047c0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6899      	ldr	r1, [r3, #8]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80047da:	4b1a      	ldr	r3, [pc, #104]	@ (8004844 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 80047dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047e0:	4a18      	ldr	r2, [pc, #96]	@ (8004844 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 80047e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80047e6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80047ea:	4b16      	ldr	r3, [pc, #88]	@ (8004844 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a15      	ldr	r2, [pc, #84]	@ (8004844 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 80047f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80047f4:	6013      	str	r3, [r2, #0]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004804:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004814:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	22ff      	movs	r2, #255	@ 0xff
 800481c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	371c      	adds	r7, #28
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	20000008 	.word	0x20000008
 8004840:	10624dd3 	.word	0x10624dd3
 8004844:	58000800 	.word	0x58000800

08004848 <LL_RCC_GetUSARTClockSource>:
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004854:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4013      	ands	r3, r2
}
 800485c:	4618      	mov	r0, r3
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <LL_RCC_GetLPUARTClockSource>:
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004874:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4013      	ands	r3, r2
}
 800487c:	4618      	mov	r0, r3
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e042      	b.n	8004920 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d106      	bne.n	80048b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7fd f873 	bl	8001998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2224      	movs	r2, #36	@ 0x24
 80048b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0201 	bic.w	r2, r2, #1
 80048c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fe3e 	bl	8005554 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 fc13 	bl	8005104 <UART_SetConfig>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e01b      	b.n	8004920 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004906:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 febd 	bl	8005698 <UART_CheckIdleState>
 800491e:	4603      	mov	r3, r0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08a      	sub	sp, #40	@ 0x28
 800492c:	af02      	add	r7, sp, #8
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	4613      	mov	r3, r2
 8004936:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800493e:	2b20      	cmp	r3, #32
 8004940:	d17b      	bne.n	8004a3a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <HAL_UART_Transmit+0x26>
 8004948:	88fb      	ldrh	r3, [r7, #6]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e074      	b.n	8004a3c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2221      	movs	r2, #33	@ 0x21
 800495e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004962:	f7fd fb41 	bl	8001fe8 <HAL_GetTick>
 8004966:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	88fa      	ldrh	r2, [r7, #6]
 800496c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	88fa      	ldrh	r2, [r7, #6]
 8004974:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004980:	d108      	bne.n	8004994 <HAL_UART_Transmit+0x6c>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d104      	bne.n	8004994 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800498a:	2300      	movs	r3, #0
 800498c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	e003      	b.n	800499c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004998:	2300      	movs	r3, #0
 800499a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800499c:	e030      	b.n	8004a00 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2200      	movs	r2, #0
 80049a6:	2180      	movs	r1, #128	@ 0x80
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 ff1f 	bl	80057ec <UART_WaitOnFlagUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d005      	beq.n	80049c0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e03d      	b.n	8004a3c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10b      	bne.n	80049de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	3302      	adds	r3, #2
 80049da:	61bb      	str	r3, [r7, #24]
 80049dc:	e007      	b.n	80049ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	781a      	ldrb	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	3301      	adds	r3, #1
 80049ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1c8      	bne.n	800499e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2200      	movs	r2, #0
 8004a14:	2140      	movs	r1, #64	@ 0x40
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 fee8 	bl	80057ec <UART_WaitOnFlagUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d005      	beq.n	8004a2e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e006      	b.n	8004a3c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	e000      	b.n	8004a3c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004a3a:	2302      	movs	r3, #2
  }
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3720      	adds	r7, #32
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b0ba      	sub	sp, #232	@ 0xe8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004a6e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004a72:	4013      	ands	r3, r2
 8004a74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004a78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d11b      	bne.n	8004ab8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d015      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d105      	bne.n	8004aa4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d009      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 8300 	beq.w	80050ae <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	4798      	blx	r3
      }
      return;
 8004ab6:	e2fa      	b.n	80050ae <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ab8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8123 	beq.w	8004d08 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004ac2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004ac6:	4b8d      	ldr	r3, [pc, #564]	@ (8004cfc <HAL_UART_IRQHandler+0x2b8>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004ace:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004ad2:	4b8b      	ldr	r3, [pc, #556]	@ (8004d00 <HAL_UART_IRQHandler+0x2bc>)
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 8116 	beq.w	8004d08 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d011      	beq.n	8004b0c <HAL_UART_IRQHandler+0xc8>
 8004ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00b      	beq.n	8004b0c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2201      	movs	r2, #1
 8004afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b02:	f043 0201 	orr.w	r2, r3, #1
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d011      	beq.n	8004b3c <HAL_UART_IRQHandler+0xf8>
 8004b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00b      	beq.n	8004b3c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b32:	f043 0204 	orr.w	r2, r3, #4
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d011      	beq.n	8004b6c <HAL_UART_IRQHandler+0x128>
 8004b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00b      	beq.n	8004b6c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2204      	movs	r2, #4
 8004b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b62:	f043 0202 	orr.w	r2, r3, #2
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d017      	beq.n	8004ba8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d105      	bne.n	8004b90 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004b84:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004b88:	4b5c      	ldr	r3, [pc, #368]	@ (8004cfc <HAL_UART_IRQHandler+0x2b8>)
 8004b8a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00b      	beq.n	8004ba8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2208      	movs	r2, #8
 8004b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b9e:	f043 0208 	orr.w	r2, r3, #8
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d012      	beq.n	8004bda <HAL_UART_IRQHandler+0x196>
 8004bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bb8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00c      	beq.n	8004bda <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bd0:	f043 0220 	orr.w	r2, r3, #32
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 8266 	beq.w	80050b2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d013      	beq.n	8004c1a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d105      	bne.n	8004c0a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d007      	beq.n	8004c1a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c20:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2e:	2b40      	cmp	r3, #64	@ 0x40
 8004c30:	d005      	beq.n	8004c3e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c36:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d054      	beq.n	8004ce8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 ff64 	bl	8005b0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c4e:	2b40      	cmp	r3, #64	@ 0x40
 8004c50:	d146      	bne.n	8004ce0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3308      	adds	r3, #8
 8004c58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c60:	e853 3f00 	ldrex	r3, [r3]
 8004c64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3308      	adds	r3, #8
 8004c7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1d9      	bne.n	8004c52 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d017      	beq.n	8004cd8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cae:	4a15      	ldr	r2, [pc, #84]	@ (8004d04 <HAL_UART_IRQHandler+0x2c0>)
 8004cb0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fd fba5 	bl	8002408 <HAL_DMA_Abort_IT>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d019      	beq.n	8004cf8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd6:	e00f      	b.n	8004cf8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 fa09 	bl	80050f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cde:	e00b      	b.n	8004cf8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 fa05 	bl	80050f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce6:	e007      	b.n	8004cf8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fa01 	bl	80050f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004cf6:	e1dc      	b.n	80050b2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf8:	bf00      	nop
    return;
 8004cfa:	e1da      	b.n	80050b2 <HAL_UART_IRQHandler+0x66e>
 8004cfc:	10000001 	.word	0x10000001
 8004d00:	04000120 	.word	0x04000120
 8004d04:	08005bd9 	.word	0x08005bd9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	f040 8170 	bne.w	8004ff2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d16:	f003 0310 	and.w	r3, r3, #16
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 8169 	beq.w	8004ff2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 8162 	beq.w	8004ff2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2210      	movs	r2, #16
 8004d34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d40:	2b40      	cmp	r3, #64	@ 0x40
 8004d42:	f040 80d8 	bne.w	8004ef6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 80af 	beq.w	8004ebc <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004d64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	f080 80a7 	bcs.w	8004ebc <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0320 	and.w	r3, r3, #32
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f040 8087 	bne.w	8004e9a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d98:	e853 3f00 	ldrex	r3, [r3]
 8004d9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004da0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004da4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004da8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	461a      	mov	r2, r3
 8004db2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004db6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004dba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004dc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004dc6:	e841 2300 	strex	r3, r2, [r1]
 8004dca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004dce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1da      	bne.n	8004d8c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	3308      	adds	r3, #8
 8004ddc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004de0:	e853 3f00 	ldrex	r3, [r3]
 8004de4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004de6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004de8:	f023 0301 	bic.w	r3, r3, #1
 8004dec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3308      	adds	r3, #8
 8004df6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004dfa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004dfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004e02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004e0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e1      	bne.n	8004dd6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3308      	adds	r3, #8
 8004e18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004e22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3308      	adds	r3, #8
 8004e32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004e36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004e3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004e44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e3      	bne.n	8004e12 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e60:	e853 3f00 	ldrex	r3, [r3]
 8004e64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e68:	f023 0310 	bic.w	r3, r3, #16
 8004e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	461a      	mov	r2, r3
 8004e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e7c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e82:	e841 2300 	strex	r3, r2, [r1]
 8004e86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1e4      	bne.n	8004e58 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fd fa58 	bl	800234a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7fc fecf 	bl	8001c58 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004eba:	e0fc      	b.n	80050b6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ec2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	f040 80f5 	bne.w	80050b6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0320 	and.w	r3, r3, #32
 8004eda:	2b20      	cmp	r3, #32
 8004edc:	f040 80eb 	bne.w	80050b6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004eec:	4619      	mov	r1, r3
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7fc feb2 	bl	8001c58 <HAL_UARTEx_RxEventCallback>
      return;
 8004ef4:	e0df      	b.n	80050b6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 80d1 	beq.w	80050ba <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004f18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 80cc 	beq.w	80050ba <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f2a:	e853 3f00 	ldrex	r3, [r3]
 8004f2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004f44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f4c:	e841 2300 	strex	r3, r2, [r1]
 8004f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e4      	bne.n	8004f22 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f62:	e853 3f00 	ldrex	r3, [r3]
 8004f66:	623b      	str	r3, [r7, #32]
   return(result);
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f6e:	f023 0301 	bic.w	r3, r3, #1
 8004f72:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3308      	adds	r3, #8
 8004f7c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004f80:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f88:	e841 2300 	strex	r3, r2, [r1]
 8004f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e1      	bne.n	8004f58 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	e853 3f00 	ldrex	r3, [r3]
 8004fb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f023 0310 	bic.w	r3, r3, #16
 8004fbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	69b9      	ldr	r1, [r7, #24]
 8004fd0:	69fa      	ldr	r2, [r7, #28]
 8004fd2:	e841 2300 	strex	r3, r2, [r1]
 8004fd6:	617b      	str	r3, [r7, #20]
   return(result);
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e4      	bne.n	8004fa8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fe4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004fe8:	4619      	mov	r1, r3
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fc fe34 	bl	8001c58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ff0:	e063      	b.n	80050ba <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ff6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00e      	beq.n	800501c <HAL_UART_IRQHandler+0x5d8>
 8004ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d008      	beq.n	800501c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005012:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f001 fb3d 	bl	8006694 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800501a:	e051      	b.n	80050c0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800501c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005024:	2b00      	cmp	r3, #0
 8005026:	d014      	beq.n	8005052 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800502c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005030:	2b00      	cmp	r3, #0
 8005032:	d105      	bne.n	8005040 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005038:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d008      	beq.n	8005052 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005044:	2b00      	cmp	r3, #0
 8005046:	d03a      	beq.n	80050be <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	4798      	blx	r3
    }
    return;
 8005050:	e035      	b.n	80050be <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800505a:	2b00      	cmp	r3, #0
 800505c:	d009      	beq.n	8005072 <HAL_UART_IRQHandler+0x62e>
 800505e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fdc6 	bl	8005bfc <UART_EndTransmit_IT>
    return;
 8005070:	e026      	b.n	80050c0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005076:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d009      	beq.n	8005092 <HAL_UART_IRQHandler+0x64e>
 800507e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005082:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f001 fb16 	bl	80066bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005090:	e016      	b.n	80050c0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005096:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d010      	beq.n	80050c0 <HAL_UART_IRQHandler+0x67c>
 800509e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	da0c      	bge.n	80050c0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f001 fafe 	bl	80066a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050ac:	e008      	b.n	80050c0 <HAL_UART_IRQHandler+0x67c>
      return;
 80050ae:	bf00      	nop
 80050b0:	e006      	b.n	80050c0 <HAL_UART_IRQHandler+0x67c>
    return;
 80050b2:	bf00      	nop
 80050b4:	e004      	b.n	80050c0 <HAL_UART_IRQHandler+0x67c>
      return;
 80050b6:	bf00      	nop
 80050b8:	e002      	b.n	80050c0 <HAL_UART_IRQHandler+0x67c>
      return;
 80050ba:	bf00      	nop
 80050bc:	e000      	b.n	80050c0 <HAL_UART_IRQHandler+0x67c>
    return;
 80050be:	bf00      	nop
  }
}
 80050c0:	37e8      	adds	r7, #232	@ 0xe8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop

080050c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005108:	b08c      	sub	sp, #48	@ 0x30
 800510a:	af00      	add	r7, sp, #0
 800510c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	431a      	orrs	r2, r3
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	431a      	orrs	r2, r3
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	4313      	orrs	r3, r2
 800512a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	4baf      	ldr	r3, [pc, #700]	@ (80053f0 <UART_SetConfig+0x2ec>)
 8005134:	4013      	ands	r3, r2
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	6812      	ldr	r2, [r2, #0]
 800513a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800513c:	430b      	orrs	r3, r1
 800513e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4aa4      	ldr	r2, [pc, #656]	@ (80053f4 <UART_SetConfig+0x2f0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d004      	beq.n	8005170 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800516c:	4313      	orrs	r3, r2
 800516e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800517a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	6812      	ldr	r2, [r2, #0]
 8005182:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005184:	430b      	orrs	r3, r1
 8005186:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518e:	f023 010f 	bic.w	r1, r3, #15
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a95      	ldr	r2, [pc, #596]	@ (80053f8 <UART_SetConfig+0x2f4>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d125      	bne.n	80051f4 <UART_SetConfig+0xf0>
 80051a8:	2003      	movs	r0, #3
 80051aa:	f7ff fb4d 	bl	8004848 <LL_RCC_GetUSARTClockSource>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b03      	cmp	r3, #3
 80051b2:	d81b      	bhi.n	80051ec <UART_SetConfig+0xe8>
 80051b4:	a201      	add	r2, pc, #4	@ (adr r2, 80051bc <UART_SetConfig+0xb8>)
 80051b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ba:	bf00      	nop
 80051bc:	080051cd 	.word	0x080051cd
 80051c0:	080051dd 	.word	0x080051dd
 80051c4:	080051d5 	.word	0x080051d5
 80051c8:	080051e5 	.word	0x080051e5
 80051cc:	2301      	movs	r3, #1
 80051ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051d2:	e042      	b.n	800525a <UART_SetConfig+0x156>
 80051d4:	2302      	movs	r3, #2
 80051d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051da:	e03e      	b.n	800525a <UART_SetConfig+0x156>
 80051dc:	2304      	movs	r3, #4
 80051de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051e2:	e03a      	b.n	800525a <UART_SetConfig+0x156>
 80051e4:	2308      	movs	r3, #8
 80051e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ea:	e036      	b.n	800525a <UART_SetConfig+0x156>
 80051ec:	2310      	movs	r3, #16
 80051ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051f2:	e032      	b.n	800525a <UART_SetConfig+0x156>
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a7e      	ldr	r2, [pc, #504]	@ (80053f4 <UART_SetConfig+0x2f0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d12a      	bne.n	8005254 <UART_SetConfig+0x150>
 80051fe:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8005202:	f7ff fb31 	bl	8004868 <LL_RCC_GetLPUARTClockSource>
 8005206:	4603      	mov	r3, r0
 8005208:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800520c:	d01a      	beq.n	8005244 <UART_SetConfig+0x140>
 800520e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005212:	d81b      	bhi.n	800524c <UART_SetConfig+0x148>
 8005214:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005218:	d00c      	beq.n	8005234 <UART_SetConfig+0x130>
 800521a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800521e:	d815      	bhi.n	800524c <UART_SetConfig+0x148>
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <UART_SetConfig+0x128>
 8005224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005228:	d008      	beq.n	800523c <UART_SetConfig+0x138>
 800522a:	e00f      	b.n	800524c <UART_SetConfig+0x148>
 800522c:	2300      	movs	r3, #0
 800522e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005232:	e012      	b.n	800525a <UART_SetConfig+0x156>
 8005234:	2302      	movs	r3, #2
 8005236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800523a:	e00e      	b.n	800525a <UART_SetConfig+0x156>
 800523c:	2304      	movs	r3, #4
 800523e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005242:	e00a      	b.n	800525a <UART_SetConfig+0x156>
 8005244:	2308      	movs	r3, #8
 8005246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800524a:	e006      	b.n	800525a <UART_SetConfig+0x156>
 800524c:	2310      	movs	r3, #16
 800524e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005252:	e002      	b.n	800525a <UART_SetConfig+0x156>
 8005254:	2310      	movs	r3, #16
 8005256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a65      	ldr	r2, [pc, #404]	@ (80053f4 <UART_SetConfig+0x2f0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	f040 8097 	bne.w	8005394 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005266:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800526a:	2b08      	cmp	r3, #8
 800526c:	d823      	bhi.n	80052b6 <UART_SetConfig+0x1b2>
 800526e:	a201      	add	r2, pc, #4	@ (adr r2, 8005274 <UART_SetConfig+0x170>)
 8005270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005274:	08005299 	.word	0x08005299
 8005278:	080052b7 	.word	0x080052b7
 800527c:	080052a1 	.word	0x080052a1
 8005280:	080052b7 	.word	0x080052b7
 8005284:	080052a7 	.word	0x080052a7
 8005288:	080052b7 	.word	0x080052b7
 800528c:	080052b7 	.word	0x080052b7
 8005290:	080052b7 	.word	0x080052b7
 8005294:	080052af 	.word	0x080052af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005298:	f7fe fbf8 	bl	8003a8c <HAL_RCC_GetPCLK1Freq>
 800529c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800529e:	e010      	b.n	80052c2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052a0:	4b56      	ldr	r3, [pc, #344]	@ (80053fc <UART_SetConfig+0x2f8>)
 80052a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052a4:	e00d      	b.n	80052c2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052a6:	f7fe fb71 	bl	800398c <HAL_RCC_GetSysClockFreq>
 80052aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052ac:	e009      	b.n	80052c2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ae:	f248 0306 	movw	r3, #32774	@ 0x8006
 80052b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052b4:	e005      	b.n	80052c2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80052c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 812b 	beq.w	8005520 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ce:	4a4c      	ldr	r2, [pc, #304]	@ (8005400 <UART_SetConfig+0x2fc>)
 80052d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052d4:	461a      	mov	r2, r3
 80052d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80052dc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	4613      	mov	r3, r2
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	4413      	add	r3, r2
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d305      	bcc.n	80052fa <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d903      	bls.n	8005302 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005300:	e10e      	b.n	8005520 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	2200      	movs	r2, #0
 8005306:	60bb      	str	r3, [r7, #8]
 8005308:	60fa      	str	r2, [r7, #12]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530e:	4a3c      	ldr	r2, [pc, #240]	@ (8005400 <UART_SetConfig+0x2fc>)
 8005310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005314:	b29b      	uxth	r3, r3
 8005316:	2200      	movs	r2, #0
 8005318:	603b      	str	r3, [r7, #0]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005320:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005324:	f7fa ff32 	bl	800018c <__aeabi_uldivmod>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	4610      	mov	r0, r2
 800532e:	4619      	mov	r1, r3
 8005330:	f04f 0200 	mov.w	r2, #0
 8005334:	f04f 0300 	mov.w	r3, #0
 8005338:	020b      	lsls	r3, r1, #8
 800533a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800533e:	0202      	lsls	r2, r0, #8
 8005340:	6979      	ldr	r1, [r7, #20]
 8005342:	6849      	ldr	r1, [r1, #4]
 8005344:	0849      	lsrs	r1, r1, #1
 8005346:	2000      	movs	r0, #0
 8005348:	460c      	mov	r4, r1
 800534a:	4605      	mov	r5, r0
 800534c:	eb12 0804 	adds.w	r8, r2, r4
 8005350:	eb43 0905 	adc.w	r9, r3, r5
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	469a      	mov	sl, r3
 800535c:	4693      	mov	fp, r2
 800535e:	4652      	mov	r2, sl
 8005360:	465b      	mov	r3, fp
 8005362:	4640      	mov	r0, r8
 8005364:	4649      	mov	r1, r9
 8005366:	f7fa ff11 	bl	800018c <__aeabi_uldivmod>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4613      	mov	r3, r2
 8005370:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005378:	d308      	bcc.n	800538c <UART_SetConfig+0x288>
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005380:	d204      	bcs.n	800538c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6a3a      	ldr	r2, [r7, #32]
 8005388:	60da      	str	r2, [r3, #12]
 800538a:	e0c9      	b.n	8005520 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005392:	e0c5      	b.n	8005520 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800539c:	d16d      	bne.n	800547a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800539e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80053a2:	3b01      	subs	r3, #1
 80053a4:	2b07      	cmp	r3, #7
 80053a6:	d82d      	bhi.n	8005404 <UART_SetConfig+0x300>
 80053a8:	a201      	add	r2, pc, #4	@ (adr r2, 80053b0 <UART_SetConfig+0x2ac>)
 80053aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ae:	bf00      	nop
 80053b0:	080053d1 	.word	0x080053d1
 80053b4:	080053d9 	.word	0x080053d9
 80053b8:	08005405 	.word	0x08005405
 80053bc:	080053df 	.word	0x080053df
 80053c0:	08005405 	.word	0x08005405
 80053c4:	08005405 	.word	0x08005405
 80053c8:	08005405 	.word	0x08005405
 80053cc:	080053e7 	.word	0x080053e7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053d0:	f7fe fb72 	bl	8003ab8 <HAL_RCC_GetPCLK2Freq>
 80053d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053d6:	e01b      	b.n	8005410 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053d8:	4b08      	ldr	r3, [pc, #32]	@ (80053fc <UART_SetConfig+0x2f8>)
 80053da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053dc:	e018      	b.n	8005410 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053de:	f7fe fad5 	bl	800398c <HAL_RCC_GetSysClockFreq>
 80053e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053e4:	e014      	b.n	8005410 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053e6:	f248 0306 	movw	r3, #32774	@ 0x8006
 80053ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053ec:	e010      	b.n	8005410 <UART_SetConfig+0x30c>
 80053ee:	bf00      	nop
 80053f0:	cfff69f3 	.word	0xcfff69f3
 80053f4:	40008000 	.word	0x40008000
 80053f8:	40013800 	.word	0x40013800
 80053fc:	00f42400 	.word	0x00f42400
 8005400:	0800ad40 	.word	0x0800ad40
      default:
        pclk = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800540e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 8084 	beq.w	8005520 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541c:	4a4b      	ldr	r2, [pc, #300]	@ (800554c <UART_SetConfig+0x448>)
 800541e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005422:	461a      	mov	r2, r3
 8005424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005426:	fbb3 f3f2 	udiv	r3, r3, r2
 800542a:	005a      	lsls	r2, r3, #1
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	085b      	lsrs	r3, r3, #1
 8005432:	441a      	add	r2, r3
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	fbb2 f3f3 	udiv	r3, r2, r3
 800543c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	2b0f      	cmp	r3, #15
 8005442:	d916      	bls.n	8005472 <UART_SetConfig+0x36e>
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800544a:	d212      	bcs.n	8005472 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	b29b      	uxth	r3, r3
 8005450:	f023 030f 	bic.w	r3, r3, #15
 8005454:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	085b      	lsrs	r3, r3, #1
 800545a:	b29b      	uxth	r3, r3
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	b29a      	uxth	r2, r3
 8005462:	8bfb      	ldrh	r3, [r7, #30]
 8005464:	4313      	orrs	r3, r2
 8005466:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	8bfa      	ldrh	r2, [r7, #30]
 800546e:	60da      	str	r2, [r3, #12]
 8005470:	e056      	b.n	8005520 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005478:	e052      	b.n	8005520 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800547a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800547e:	3b01      	subs	r3, #1
 8005480:	2b07      	cmp	r3, #7
 8005482:	d822      	bhi.n	80054ca <UART_SetConfig+0x3c6>
 8005484:	a201      	add	r2, pc, #4	@ (adr r2, 800548c <UART_SetConfig+0x388>)
 8005486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548a:	bf00      	nop
 800548c:	080054ad 	.word	0x080054ad
 8005490:	080054b5 	.word	0x080054b5
 8005494:	080054cb 	.word	0x080054cb
 8005498:	080054bb 	.word	0x080054bb
 800549c:	080054cb 	.word	0x080054cb
 80054a0:	080054cb 	.word	0x080054cb
 80054a4:	080054cb 	.word	0x080054cb
 80054a8:	080054c3 	.word	0x080054c3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054ac:	f7fe fb04 	bl	8003ab8 <HAL_RCC_GetPCLK2Freq>
 80054b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054b2:	e010      	b.n	80054d6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054b4:	4b26      	ldr	r3, [pc, #152]	@ (8005550 <UART_SetConfig+0x44c>)
 80054b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054b8:	e00d      	b.n	80054d6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ba:	f7fe fa67 	bl	800398c <HAL_RCC_GetSysClockFreq>
 80054be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054c0:	e009      	b.n	80054d6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054c2:	f248 0306 	movw	r3, #32774	@ 0x8006
 80054c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054c8:	e005      	b.n	80054d6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80054d4:	bf00      	nop
    }

    if (pclk != 0U)
 80054d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d021      	beq.n	8005520 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e0:	4a1a      	ldr	r2, [pc, #104]	@ (800554c <UART_SetConfig+0x448>)
 80054e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054e6:	461a      	mov	r2, r3
 80054e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	085b      	lsrs	r3, r3, #1
 80054f4:	441a      	add	r2, r3
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	2b0f      	cmp	r3, #15
 8005504:	d909      	bls.n	800551a <UART_SetConfig+0x416>
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800550c:	d205      	bcs.n	800551a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	b29a      	uxth	r2, r3
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	60da      	str	r2, [r3, #12]
 8005518:	e002      	b.n	8005520 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2201      	movs	r2, #1
 8005524:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	2201      	movs	r2, #1
 800552c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2200      	movs	r2, #0
 8005534:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2200      	movs	r2, #0
 800553a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800553c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005540:	4618      	mov	r0, r3
 8005542:	3730      	adds	r7, #48	@ 0x30
 8005544:	46bd      	mov	sp, r7
 8005546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800554a:	bf00      	nop
 800554c:	0800ad40 	.word	0x0800ad40
 8005550:	00f42400 	.word	0x00f42400

08005554 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00a      	beq.n	800557e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00a      	beq.n	80055c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c6:	f003 0304 	and.w	r3, r3, #4
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e8:	f003 0310 	and.w	r3, r3, #16
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560a:	f003 0320 	and.w	r3, r3, #32
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	d01a      	beq.n	800566a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800564e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005652:	d10a      	bne.n	800566a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	605a      	str	r2, [r3, #4]
  }
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b098      	sub	sp, #96	@ 0x60
 800569c:	af02      	add	r7, sp, #8
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056a8:	f7fc fc9e 	bl	8001fe8 <HAL_GetTick>
 80056ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0308 	and.w	r3, r3, #8
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d12f      	bne.n	800571c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056c4:	2200      	movs	r2, #0
 80056c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f88e 	bl	80057ec <UART_WaitOnFlagUntilTimeout>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d022      	beq.n	800571c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056de:	e853 3f00 	ldrex	r3, [r3]
 80056e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	461a      	mov	r2, r3
 80056f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80056f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056fc:	e841 2300 	strex	r3, r2, [r1]
 8005700:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e6      	bne.n	80056d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2220      	movs	r2, #32
 800570c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e063      	b.n	80057e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b04      	cmp	r3, #4
 8005728:	d149      	bne.n	80057be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800572a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005732:	2200      	movs	r2, #0
 8005734:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f857 	bl	80057ec <UART_WaitOnFlagUntilTimeout>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d03c      	beq.n	80057be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574c:	e853 3f00 	ldrex	r3, [r3]
 8005750:	623b      	str	r3, [r7, #32]
   return(result);
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005758:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005762:	633b      	str	r3, [r7, #48]	@ 0x30
 8005764:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005766:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800576a:	e841 2300 	strex	r3, r2, [r1]
 800576e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1e6      	bne.n	8005744 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3308      	adds	r3, #8
 800577c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	e853 3f00 	ldrex	r3, [r3]
 8005784:	60fb      	str	r3, [r7, #12]
   return(result);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f023 0301 	bic.w	r3, r3, #1
 800578c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3308      	adds	r3, #8
 8005794:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005796:	61fa      	str	r2, [r7, #28]
 8005798:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579a:	69b9      	ldr	r1, [r7, #24]
 800579c:	69fa      	ldr	r2, [r7, #28]
 800579e:	e841 2300 	strex	r3, r2, [r1]
 80057a2:	617b      	str	r3, [r7, #20]
   return(result);
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1e5      	bne.n	8005776 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e012      	b.n	80057e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3758      	adds	r7, #88	@ 0x58
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	603b      	str	r3, [r7, #0]
 80057f8:	4613      	mov	r3, r2
 80057fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057fc:	e04f      	b.n	800589e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005804:	d04b      	beq.n	800589e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005806:	f7fc fbef 	bl	8001fe8 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	429a      	cmp	r2, r3
 8005814:	d302      	bcc.n	800581c <UART_WaitOnFlagUntilTimeout+0x30>
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e04e      	b.n	80058be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0304 	and.w	r3, r3, #4
 800582a:	2b00      	cmp	r3, #0
 800582c:	d037      	beq.n	800589e <UART_WaitOnFlagUntilTimeout+0xb2>
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b80      	cmp	r3, #128	@ 0x80
 8005832:	d034      	beq.n	800589e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	2b40      	cmp	r3, #64	@ 0x40
 8005838:	d031      	beq.n	800589e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	2b08      	cmp	r3, #8
 8005846:	d110      	bne.n	800586a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2208      	movs	r2, #8
 800584e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 f95b 	bl	8005b0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2208      	movs	r2, #8
 800585a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e029      	b.n	80058be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005874:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005878:	d111      	bne.n	800589e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005882:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 f941 	bl	8005b0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2220      	movs	r2, #32
 800588e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e00f      	b.n	80058be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69da      	ldr	r2, [r3, #28]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	4013      	ands	r3, r2
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	bf0c      	ite	eq
 80058ae:	2301      	moveq	r3, #1
 80058b0:	2300      	movne	r3, #0
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	461a      	mov	r2, r3
 80058b6:	79fb      	ldrb	r3, [r7, #7]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d0a0      	beq.n	80057fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
	...

080058c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b0a3      	sub	sp, #140	@ 0x8c
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	4613      	mov	r3, r2
 80058d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	88fa      	ldrh	r2, [r7, #6]
 80058e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	88fa      	ldrh	r2, [r7, #6]
 80058e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058fa:	d10e      	bne.n	800591a <UART_Start_Receive_IT+0x52>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d105      	bne.n	8005910 <UART_Start_Receive_IT+0x48>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800590a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800590e:	e02d      	b.n	800596c <UART_Start_Receive_IT+0xa4>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	22ff      	movs	r2, #255	@ 0xff
 8005914:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005918:	e028      	b.n	800596c <UART_Start_Receive_IT+0xa4>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10d      	bne.n	800593e <UART_Start_Receive_IT+0x76>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d104      	bne.n	8005934 <UART_Start_Receive_IT+0x6c>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	22ff      	movs	r2, #255	@ 0xff
 800592e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005932:	e01b      	b.n	800596c <UART_Start_Receive_IT+0xa4>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	227f      	movs	r2, #127	@ 0x7f
 8005938:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800593c:	e016      	b.n	800596c <UART_Start_Receive_IT+0xa4>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005946:	d10d      	bne.n	8005964 <UART_Start_Receive_IT+0x9c>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d104      	bne.n	800595a <UART_Start_Receive_IT+0x92>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	227f      	movs	r2, #127	@ 0x7f
 8005954:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005958:	e008      	b.n	800596c <UART_Start_Receive_IT+0xa4>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	223f      	movs	r2, #63	@ 0x3f
 800595e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005962:	e003      	b.n	800596c <UART_Start_Receive_IT+0xa4>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2222      	movs	r2, #34	@ 0x22
 8005978:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3308      	adds	r3, #8
 8005982:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005984:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005986:	e853 3f00 	ldrex	r3, [r3]
 800598a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800598c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800598e:	f043 0301 	orr.w	r3, r3, #1
 8005992:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3308      	adds	r3, #8
 800599c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80059a0:	673a      	str	r2, [r7, #112]	@ 0x70
 80059a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80059a6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80059a8:	e841 2300 	strex	r3, r2, [r1]
 80059ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80059ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1e3      	bne.n	800597c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059bc:	d14f      	bne.n	8005a5e <UART_Start_Receive_IT+0x196>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80059c4:	88fa      	ldrh	r2, [r7, #6]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d349      	bcc.n	8005a5e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059d2:	d107      	bne.n	80059e4 <UART_Start_Receive_IT+0x11c>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d103      	bne.n	80059e4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4a47      	ldr	r2, [pc, #284]	@ (8005afc <UART_Start_Receive_IT+0x234>)
 80059e0:	675a      	str	r2, [r3, #116]	@ 0x74
 80059e2:	e002      	b.n	80059ea <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4a46      	ldr	r2, [pc, #280]	@ (8005b00 <UART_Start_Receive_IT+0x238>)
 80059e8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d01a      	beq.n	8005a28 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059fa:	e853 3f00 	ldrex	r3, [r3]
 80059fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a16:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a18:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005a1a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005a1c:	e841 2300 	strex	r3, r2, [r1]
 8005a20:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1e4      	bne.n	80059f2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3308      	adds	r3, #8
 8005a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a32:	e853 3f00 	ldrex	r3, [r3]
 8005a36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3308      	adds	r3, #8
 8005a46:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005a48:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005a4a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005a4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a50:	e841 2300 	strex	r3, r2, [r1]
 8005a54:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005a56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1e5      	bne.n	8005a28 <UART_Start_Receive_IT+0x160>
 8005a5c:	e046      	b.n	8005aec <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a66:	d107      	bne.n	8005a78 <UART_Start_Receive_IT+0x1b0>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d103      	bne.n	8005a78 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4a24      	ldr	r2, [pc, #144]	@ (8005b04 <UART_Start_Receive_IT+0x23c>)
 8005a74:	675a      	str	r2, [r3, #116]	@ 0x74
 8005a76:	e002      	b.n	8005a7e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4a23      	ldr	r2, [pc, #140]	@ (8005b08 <UART_Start_Receive_IT+0x240>)
 8005a7c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d019      	beq.n	8005aba <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8e:	e853 3f00 	ldrex	r3, [r3]
 8005a92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a96:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005a9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005aa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aa6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005aaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005aac:	e841 2300 	strex	r3, r2, [r1]
 8005ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1e6      	bne.n	8005a86 <UART_Start_Receive_IT+0x1be>
 8005ab8:	e018      	b.n	8005aec <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	e853 3f00 	ldrex	r3, [r3]
 8005ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	f043 0320 	orr.w	r3, r3, #32
 8005ace:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ad8:	623b      	str	r3, [r7, #32]
 8005ada:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005adc:	69f9      	ldr	r1, [r7, #28]
 8005ade:	6a3a      	ldr	r2, [r7, #32]
 8005ae0:	e841 2300 	strex	r3, r2, [r1]
 8005ae4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1e6      	bne.n	8005aba <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	378c      	adds	r7, #140	@ 0x8c
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	08006329 	.word	0x08006329
 8005b00:	08005fc5 	.word	0x08005fc5
 8005b04:	08005e0d 	.word	0x08005e0d
 8005b08:	08005c55 	.word	0x08005c55

08005b0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b095      	sub	sp, #84	@ 0x54
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b1c:	e853 3f00 	ldrex	r3, [r3]
 8005b20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b32:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b34:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b3a:	e841 2300 	strex	r3, r2, [r1]
 8005b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1e6      	bne.n	8005b14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3308      	adds	r3, #8
 8005b4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	e853 3f00 	ldrex	r3, [r3]
 8005b54:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b5c:	f023 0301 	bic.w	r3, r3, #1
 8005b60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3308      	adds	r3, #8
 8005b68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b72:	e841 2300 	strex	r3, r2, [r1]
 8005b76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1e3      	bne.n	8005b46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d118      	bne.n	8005bb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	e853 3f00 	ldrex	r3, [r3]
 8005b92:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f023 0310 	bic.w	r3, r3, #16
 8005b9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ba4:	61bb      	str	r3, [r7, #24]
 8005ba6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba8:	6979      	ldr	r1, [r7, #20]
 8005baa:	69ba      	ldr	r2, [r7, #24]
 8005bac:	e841 2300 	strex	r3, r2, [r1]
 8005bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1e6      	bne.n	8005b86 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005bcc:	bf00      	nop
 8005bce:	3754      	adds	r7, #84	@ 0x54
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f7ff fa7e 	bl	80050f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bf4:	bf00      	nop
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b088      	sub	sp, #32
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	e853 3f00 	ldrex	r3, [r3]
 8005c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c18:	61fb      	str	r3, [r7, #28]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	61bb      	str	r3, [r7, #24]
 8005c24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c26:	6979      	ldr	r1, [r7, #20]
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	e841 2300 	strex	r3, r2, [r1]
 8005c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1e6      	bne.n	8005c04 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f7ff fa3f 	bl	80050c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c4a:	bf00      	nop
 8005c4c:	3720      	adds	r7, #32
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b09c      	sub	sp, #112	@ 0x70
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005c62:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c6c:	2b22      	cmp	r3, #34	@ 0x22
 8005c6e:	f040 80be 	bne.w	8005dee <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c78:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c7c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005c80:	b2d9      	uxtb	r1, r3
 8005c82:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c8c:	400a      	ands	r2, r1
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c96:	1c5a      	adds	r2, r3, #1
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f040 80a1 	bne.w	8005dfe <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005cca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ccc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cda:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cdc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ce0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ce8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e6      	bne.n	8005cbc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	3308      	adds	r3, #8
 8005cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf8:	e853 3f00 	ldrex	r3, [r3]
 8005cfc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d00:	f023 0301 	bic.w	r3, r3, #1
 8005d04:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3308      	adds	r3, #8
 8005d0c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005d0e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d16:	e841 2300 	strex	r3, r2, [r1]
 8005d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1e5      	bne.n	8005cee <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a33      	ldr	r2, [pc, #204]	@ (8005e08 <UART_RxISR_8BIT+0x1b4>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d01f      	beq.n	8005d80 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d018      	beq.n	8005d80 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d56:	e853 3f00 	ldrex	r3, [r3]
 8005d5a:	623b      	str	r3, [r7, #32]
   return(result);
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d62:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d74:	e841 2300 	strex	r3, r2, [r1]
 8005d78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1e6      	bne.n	8005d4e <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d12e      	bne.n	8005de6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	e853 3f00 	ldrex	r3, [r3]
 8005d9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 0310 	bic.w	r3, r3, #16
 8005da2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	461a      	mov	r2, r3
 8005daa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005dac:	61fb      	str	r3, [r7, #28]
 8005dae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	69b9      	ldr	r1, [r7, #24]
 8005db2:	69fa      	ldr	r2, [r7, #28]
 8005db4:	e841 2300 	strex	r3, r2, [r1]
 8005db8:	617b      	str	r3, [r7, #20]
   return(result);
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e6      	bne.n	8005d8e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	f003 0310 	and.w	r3, r3, #16
 8005dca:	2b10      	cmp	r3, #16
 8005dcc:	d103      	bne.n	8005dd6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2210      	movs	r2, #16
 8005dd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7fb ff3a 	bl	8001c58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005de4:	e00b      	b.n	8005dfe <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7ff f978 	bl	80050dc <HAL_UART_RxCpltCallback>
}
 8005dec:	e007      	b.n	8005dfe <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	699a      	ldr	r2, [r3, #24]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f042 0208 	orr.w	r2, r2, #8
 8005dfc:	619a      	str	r2, [r3, #24]
}
 8005dfe:	bf00      	nop
 8005e00:	3770      	adds	r7, #112	@ 0x70
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	40008000 	.word	0x40008000

08005e0c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b09c      	sub	sp, #112	@ 0x70
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005e1a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e24:	2b22      	cmp	r3, #34	@ 0x22
 8005e26:	f040 80be 	bne.w	8005fa6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e30:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e38:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005e3a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005e3e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005e42:	4013      	ands	r3, r2
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e4e:	1c9a      	adds	r2, r3, #2
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f040 80a1 	bne.w	8005fb6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e7c:	e853 3f00 	ldrex	r3, [r3]
 8005e80:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005e82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e88:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e92:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e94:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e96:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005e9a:	e841 2300 	strex	r3, r2, [r1]
 8005e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005ea0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1e6      	bne.n	8005e74 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3308      	adds	r3, #8
 8005eac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb0:	e853 3f00 	ldrex	r3, [r3]
 8005eb4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb8:	f023 0301 	bic.w	r3, r3, #1
 8005ebc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3308      	adds	r3, #8
 8005ec4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005ec6:	643a      	str	r2, [r7, #64]	@ 0x40
 8005ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ecc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ece:	e841 2300 	strex	r3, r2, [r1]
 8005ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1e5      	bne.n	8005ea6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2220      	movs	r2, #32
 8005ede:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a33      	ldr	r2, [pc, #204]	@ (8005fc0 <UART_RxISR_16BIT+0x1b4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d01f      	beq.n	8005f38 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d018      	beq.n	8005f38 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	e853 3f00 	ldrex	r3, [r3]
 8005f12:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	461a      	mov	r2, r3
 8005f22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f26:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f2c:	e841 2300 	strex	r3, r2, [r1]
 8005f30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1e6      	bne.n	8005f06 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d12e      	bne.n	8005f9e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	e853 3f00 	ldrex	r3, [r3]
 8005f52:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f023 0310 	bic.w	r3, r3, #16
 8005f5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	461a      	mov	r2, r3
 8005f62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f64:	61bb      	str	r3, [r7, #24]
 8005f66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f68:	6979      	ldr	r1, [r7, #20]
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	e841 2300 	strex	r3, r2, [r1]
 8005f70:	613b      	str	r3, [r7, #16]
   return(result);
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1e6      	bne.n	8005f46 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	f003 0310 	and.w	r3, r3, #16
 8005f82:	2b10      	cmp	r3, #16
 8005f84:	d103      	bne.n	8005f8e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2210      	movs	r2, #16
 8005f8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f94:	4619      	mov	r1, r3
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7fb fe5e 	bl	8001c58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f9c:	e00b      	b.n	8005fb6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7ff f89c 	bl	80050dc <HAL_UART_RxCpltCallback>
}
 8005fa4:	e007      	b.n	8005fb6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	699a      	ldr	r2, [r3, #24]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f042 0208 	orr.w	r2, r2, #8
 8005fb4:	619a      	str	r2, [r3, #24]
}
 8005fb6:	bf00      	nop
 8005fb8:	3770      	adds	r7, #112	@ 0x70
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	40008000 	.word	0x40008000

08005fc4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b0ac      	sub	sp, #176	@ 0xb0
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005fd2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ffa:	2b22      	cmp	r3, #34	@ 0x22
 8005ffc:	f040 8183 	bne.w	8006306 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006006:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800600a:	e126      	b.n	800625a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006012:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006016:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800601a:	b2d9      	uxtb	r1, r3
 800601c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006020:	b2da      	uxtb	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006026:	400a      	ands	r2, r1
 8006028:	b2d2      	uxtb	r2, r2
 800602a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006030:	1c5a      	adds	r2, r3, #1
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800603c:	b29b      	uxth	r3, r3
 800603e:	3b01      	subs	r3, #1
 8006040:	b29a      	uxth	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006056:	f003 0307 	and.w	r3, r3, #7
 800605a:	2b00      	cmp	r3, #0
 800605c:	d053      	beq.n	8006106 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800605e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d011      	beq.n	800608e <UART_RxISR_8BIT_FIFOEN+0xca>
 800606a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800606e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00b      	beq.n	800608e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2201      	movs	r2, #1
 800607c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006084:	f043 0201 	orr.w	r2, r3, #1
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800608e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d011      	beq.n	80060be <UART_RxISR_8BIT_FIFOEN+0xfa>
 800609a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00b      	beq.n	80060be <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2202      	movs	r2, #2
 80060ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060b4:	f043 0204 	orr.w	r2, r3, #4
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d011      	beq.n	80060ee <UART_RxISR_8BIT_FIFOEN+0x12a>
 80060ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00b      	beq.n	80060ee <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2204      	movs	r2, #4
 80060dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e4:	f043 0202 	orr.w	r2, r3, #2
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d006      	beq.n	8006106 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7fe fff9 	bl	80050f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	f040 80a3 	bne.w	800625a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800611c:	e853 3f00 	ldrex	r3, [r3]
 8006120:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006122:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006128:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006136:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006138:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800613c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006144:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1e4      	bne.n	8006114 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3308      	adds	r3, #8
 8006150:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006152:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006154:	e853 3f00 	ldrex	r3, [r3]
 8006158:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800615a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800615c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006160:	f023 0301 	bic.w	r3, r3, #1
 8006164:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3308      	adds	r3, #8
 800616e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006172:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006174:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006178:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006180:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e1      	bne.n	800614a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2220      	movs	r2, #32
 800618a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a60      	ldr	r2, [pc, #384]	@ (8006320 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d021      	beq.n	80061e8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d01a      	beq.n	80061e8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061ba:	e853 3f00 	ldrex	r3, [r3]
 80061be:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80061c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80061c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	461a      	mov	r2, r3
 80061d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80061d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80061d6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80061da:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80061dc:	e841 2300 	strex	r3, r2, [r1]
 80061e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80061e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1e4      	bne.n	80061b2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d130      	bne.n	8006252 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061fe:	e853 3f00 	ldrex	r3, [r3]
 8006202:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006206:	f023 0310 	bic.w	r3, r3, #16
 800620a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006218:	643b      	str	r3, [r7, #64]	@ 0x40
 800621a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800621e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006220:	e841 2300 	strex	r3, r2, [r1]
 8006224:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1e4      	bne.n	80061f6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	f003 0310 	and.w	r3, r3, #16
 8006236:	2b10      	cmp	r3, #16
 8006238:	d103      	bne.n	8006242 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2210      	movs	r2, #16
 8006240:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006248:	4619      	mov	r1, r3
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7fb fd04 	bl	8001c58 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006250:	e00e      	b.n	8006270 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7fe ff42 	bl	80050dc <HAL_UART_RxCpltCallback>
        break;
 8006258:	e00a      	b.n	8006270 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800625a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800625e:	2b00      	cmp	r3, #0
 8006260:	d006      	beq.n	8006270 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8006262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006266:	f003 0320 	and.w	r3, r3, #32
 800626a:	2b00      	cmp	r3, #0
 800626c:	f47f aece 	bne.w	800600c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006276:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800627a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800627e:	2b00      	cmp	r3, #0
 8006280:	d049      	beq.n	8006316 <UART_RxISR_8BIT_FIFOEN+0x352>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006288:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800628c:	429a      	cmp	r2, r3
 800628e:	d242      	bcs.n	8006316 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3308      	adds	r3, #8
 8006296:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	e853 3f00 	ldrex	r3, [r3]
 800629e:	61fb      	str	r3, [r7, #28]
   return(result);
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3308      	adds	r3, #8
 80062b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80062b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062bc:	e841 2300 	strex	r3, r2, [r1]
 80062c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1e3      	bne.n	8006290 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a16      	ldr	r2, [pc, #88]	@ (8006324 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80062cc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	e853 3f00 	ldrex	r3, [r3]
 80062da:	60bb      	str	r3, [r7, #8]
   return(result);
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f043 0320 	orr.w	r3, r3, #32
 80062e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	461a      	mov	r2, r3
 80062ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80062f0:	61bb      	str	r3, [r7, #24]
 80062f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f4:	6979      	ldr	r1, [r7, #20]
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	e841 2300 	strex	r3, r2, [r1]
 80062fc:	613b      	str	r3, [r7, #16]
   return(result);
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1e4      	bne.n	80062ce <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006304:	e007      	b.n	8006316 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	699a      	ldr	r2, [r3, #24]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f042 0208 	orr.w	r2, r2, #8
 8006314:	619a      	str	r2, [r3, #24]
}
 8006316:	bf00      	nop
 8006318:	37b0      	adds	r7, #176	@ 0xb0
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	40008000 	.word	0x40008000
 8006324:	08005c55 	.word	0x08005c55

08006328 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b0ae      	sub	sp, #184	@ 0xb8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006336:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800635e:	2b22      	cmp	r3, #34	@ 0x22
 8006360:	f040 8187 	bne.w	8006672 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800636a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800636e:	e12a      	b.n	80065c6 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006376:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800637e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006382:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8006386:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800638a:	4013      	ands	r3, r2
 800638c:	b29a      	uxth	r2, r3
 800638e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006392:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006398:	1c9a      	adds	r2, r3, #2
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	3b01      	subs	r3, #1
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80063ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80063be:	f003 0307 	and.w	r3, r3, #7
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d053      	beq.n	800646e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d011      	beq.n	80063f6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80063d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00b      	beq.n	80063f6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2201      	movs	r2, #1
 80063e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ec:	f043 0201 	orr.w	r2, r3, #1
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d011      	beq.n	8006426 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006402:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00b      	beq.n	8006426 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2202      	movs	r2, #2
 8006414:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800641c:	f043 0204 	orr.w	r2, r3, #4
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006426:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800642a:	f003 0304 	and.w	r3, r3, #4
 800642e:	2b00      	cmp	r3, #0
 8006430:	d011      	beq.n	8006456 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006432:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00b      	beq.n	8006456 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2204      	movs	r2, #4
 8006444:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800644c:	f043 0202 	orr.w	r2, r3, #2
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800645c:	2b00      	cmp	r3, #0
 800645e:	d006      	beq.n	800646e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7fe fe45 	bl	80050f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	f040 80a5 	bne.w	80065c6 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006482:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006484:	e853 3f00 	ldrex	r3, [r3]
 8006488:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800648a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800648c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006490:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	461a      	mov	r2, r3
 800649a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800649e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80064a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80064aa:	e841 2300 	strex	r3, r2, [r1]
 80064ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80064b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1e2      	bne.n	800647c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3308      	adds	r3, #8
 80064bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064c0:	e853 3f00 	ldrex	r3, [r3]
 80064c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80064c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064cc:	f023 0301 	bic.w	r3, r3, #1
 80064d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3308      	adds	r3, #8
 80064da:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80064de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80064e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80064e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80064e6:	e841 2300 	strex	r3, r2, [r1]
 80064ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80064ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1e1      	bne.n	80064b6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2220      	movs	r2, #32
 80064f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a60      	ldr	r2, [pc, #384]	@ (800668c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d021      	beq.n	8006554 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d01a      	beq.n	8006554 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006524:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006526:	e853 3f00 	ldrex	r3, [r3]
 800652a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800652c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800652e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006532:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006540:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006542:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006544:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006546:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006548:	e841 2300 	strex	r3, r2, [r1]
 800654c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800654e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1e4      	bne.n	800651e <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006558:	2b01      	cmp	r3, #1
 800655a:	d130      	bne.n	80065be <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800656a:	e853 3f00 	ldrex	r3, [r3]
 800656e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006572:	f023 0310 	bic.w	r3, r3, #16
 8006576:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006584:	647b      	str	r3, [r7, #68]	@ 0x44
 8006586:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006588:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800658a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800658c:	e841 2300 	strex	r3, r2, [r1]
 8006590:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1e4      	bne.n	8006562 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	f003 0310 	and.w	r3, r3, #16
 80065a2:	2b10      	cmp	r3, #16
 80065a4:	d103      	bne.n	80065ae <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2210      	movs	r2, #16
 80065ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7fb fb4e 	bl	8001c58 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80065bc:	e00e      	b.n	80065dc <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7fe fd8c 	bl	80050dc <HAL_UART_RxCpltCallback>
        break;
 80065c4:	e00a      	b.n	80065dc <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80065c6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d006      	beq.n	80065dc <UART_RxISR_16BIT_FIFOEN+0x2b4>
 80065ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f47f aeca 	bne.w	8006370 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80065e2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80065e6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d049      	beq.n	8006682 <UART_RxISR_16BIT_FIFOEN+0x35a>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80065f4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d242      	bcs.n	8006682 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3308      	adds	r3, #8
 8006602:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006606:	e853 3f00 	ldrex	r3, [r3]
 800660a:	623b      	str	r3, [r7, #32]
   return(result);
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006612:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3308      	adds	r3, #8
 800661c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006620:	633a      	str	r2, [r7, #48]	@ 0x30
 8006622:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006624:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006626:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006628:	e841 2300 	strex	r3, r2, [r1]
 800662c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800662e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1e3      	bne.n	80065fc <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a16      	ldr	r2, [pc, #88]	@ (8006690 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8006638:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	e853 3f00 	ldrex	r3, [r3]
 8006646:	60fb      	str	r3, [r7, #12]
   return(result);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f043 0320 	orr.w	r3, r3, #32
 800664e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	461a      	mov	r2, r3
 8006658:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800665c:	61fb      	str	r3, [r7, #28]
 800665e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006660:	69b9      	ldr	r1, [r7, #24]
 8006662:	69fa      	ldr	r2, [r7, #28]
 8006664:	e841 2300 	strex	r3, r2, [r1]
 8006668:	617b      	str	r3, [r7, #20]
   return(result);
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e4      	bne.n	800663a <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006670:	e007      	b.n	8006682 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	699a      	ldr	r2, [r3, #24]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f042 0208 	orr.w	r2, r2, #8
 8006680:	619a      	str	r2, [r3, #24]
}
 8006682:	bf00      	nop
 8006684:	37b8      	adds	r7, #184	@ 0xb8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	40008000 	.word	0x40008000
 8006690:	08005e0d 	.word	0x08005e0d

08006694 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d101      	bne.n	80066e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80066e2:	2302      	movs	r3, #2
 80066e4:	e027      	b.n	8006736 <HAL_UARTEx_DisableFifoMode+0x66>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2224      	movs	r2, #36	@ 0x24
 80066f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 0201 	bic.w	r2, r2, #1
 800670c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006714:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2220      	movs	r2, #32
 8006728:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b084      	sub	sp, #16
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006752:	2b01      	cmp	r3, #1
 8006754:	d101      	bne.n	800675a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006756:	2302      	movs	r3, #2
 8006758:	e02d      	b.n	80067b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2224      	movs	r2, #36	@ 0x24
 8006766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f022 0201 	bic.w	r2, r2, #1
 8006780:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f8a0 	bl	80068dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b084      	sub	sp, #16
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d101      	bne.n	80067d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067d2:	2302      	movs	r3, #2
 80067d4:	e02d      	b.n	8006832 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2224      	movs	r2, #36	@ 0x24
 80067e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0201 	bic.w	r2, r2, #1
 80067fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	430a      	orrs	r2, r1
 8006810:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f862 	bl	80068dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2220      	movs	r2, #32
 8006824:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b08c      	sub	sp, #48	@ 0x30
 800683e:	af00      	add	r7, sp, #0
 8006840:	60f8      	str	r0, [r7, #12]
 8006842:	60b9      	str	r1, [r7, #8]
 8006844:	4613      	mov	r3, r2
 8006846:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006848:	2300      	movs	r3, #0
 800684a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006854:	2b20      	cmp	r3, #32
 8006856:	d13b      	bne.n	80068d0 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d002      	beq.n	8006864 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 800685e:	88fb      	ldrh	r3, [r7, #6]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e034      	b.n	80068d2 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2201      	movs	r2, #1
 800686c:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8006874:	88fb      	ldrh	r3, [r7, #6]
 8006876:	461a      	mov	r2, r3
 8006878:	68b9      	ldr	r1, [r7, #8]
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f7ff f824 	bl	80058c8 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006884:	2b01      	cmp	r3, #1
 8006886:	d11d      	bne.n	80068c4 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2210      	movs	r2, #16
 800688e:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	e853 3f00 	ldrex	r3, [r3]
 800689c:	617b      	str	r3, [r7, #20]
   return(result);
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f043 0310 	orr.w	r3, r3, #16
 80068a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	461a      	mov	r2, r3
 80068ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80068b0:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b2:	6a39      	ldr	r1, [r7, #32]
 80068b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068b6:	e841 2300 	strex	r3, r2, [r1]
 80068ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1e6      	bne.n	8006890 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 80068c2:	e002      	b.n	80068ca <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 80068ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80068ce:	e000      	b.n	80068d2 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 80068d0:	2302      	movs	r3, #2
  }
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3730      	adds	r7, #48	@ 0x30
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d108      	bne.n	80068fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80068fc:	e031      	b.n	8006962 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80068fe:	2308      	movs	r3, #8
 8006900:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006902:	2308      	movs	r3, #8
 8006904:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	0e5b      	lsrs	r3, r3, #25
 800690e:	b2db      	uxtb	r3, r3
 8006910:	f003 0307 	and.w	r3, r3, #7
 8006914:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	0f5b      	lsrs	r3, r3, #29
 800691e:	b2db      	uxtb	r3, r3
 8006920:	f003 0307 	and.w	r3, r3, #7
 8006924:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006926:	7bbb      	ldrb	r3, [r7, #14]
 8006928:	7b3a      	ldrb	r2, [r7, #12]
 800692a:	4911      	ldr	r1, [pc, #68]	@ (8006970 <UARTEx_SetNbDataToProcess+0x94>)
 800692c:	5c8a      	ldrb	r2, [r1, r2]
 800692e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006932:	7b3a      	ldrb	r2, [r7, #12]
 8006934:	490f      	ldr	r1, [pc, #60]	@ (8006974 <UARTEx_SetNbDataToProcess+0x98>)
 8006936:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006938:	fb93 f3f2 	sdiv	r3, r3, r2
 800693c:	b29a      	uxth	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	7b7a      	ldrb	r2, [r7, #13]
 8006948:	4909      	ldr	r1, [pc, #36]	@ (8006970 <UARTEx_SetNbDataToProcess+0x94>)
 800694a:	5c8a      	ldrb	r2, [r1, r2]
 800694c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006950:	7b7a      	ldrb	r2, [r7, #13]
 8006952:	4908      	ldr	r1, [pc, #32]	@ (8006974 <UARTEx_SetNbDataToProcess+0x98>)
 8006954:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006956:	fb93 f3f2 	sdiv	r3, r3, r2
 800695a:	b29a      	uxth	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006962:	bf00      	nop
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	0800ad58 	.word	0x0800ad58
 8006974:	0800ad60 	.word	0x0800ad60

08006978 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b088      	sub	sp, #32
 800697c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800697e:	2300      	movs	r3, #0
 8006980:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006982:	f107 0308 	add.w	r3, r7, #8
 8006986:	2218      	movs	r2, #24
 8006988:	2100      	movs	r1, #0
 800698a:	4618      	mov	r0, r3
 800698c:	f001 f92d 	bl	8007bea <Osal_MemSet>
  rq.ogf = 0x3f;
 8006990:	233f      	movs	r3, #63	@ 0x3f
 8006992:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006994:	2381      	movs	r3, #129	@ 0x81
 8006996:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006998:	1dfb      	adds	r3, r7, #7
 800699a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800699c:	2301      	movs	r3, #1
 800699e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80069a0:	f107 0308 	add.w	r3, r7, #8
 80069a4:	2100      	movs	r1, #0
 80069a6:	4618      	mov	r0, r3
 80069a8:	f001 fba8 	bl	80080fc <hci_send_req>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	da01      	bge.n	80069b6 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80069b2:	23ff      	movs	r3, #255	@ 0xff
 80069b4:	e000      	b.n	80069b8 <aci_gap_set_non_discoverable+0x40>
  return status;
 80069b6:	79fb      	ldrb	r3, [r7, #7]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3720      	adds	r7, #32
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80069c0:	b5b0      	push	{r4, r5, r7, lr}
 80069c2:	b0ce      	sub	sp, #312	@ 0x138
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	4605      	mov	r5, r0
 80069c8:	460c      	mov	r4, r1
 80069ca:	4610      	mov	r0, r2
 80069cc:	4619      	mov	r1, r3
 80069ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80069d2:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80069d6:	462a      	mov	r2, r5
 80069d8:	701a      	strb	r2, [r3, #0]
 80069da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80069de:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80069e2:	4622      	mov	r2, r4
 80069e4:	801a      	strh	r2, [r3, #0]
 80069e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80069ea:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80069ee:	4602      	mov	r2, r0
 80069f0:	801a      	strh	r2, [r3, #0]
 80069f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80069f6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80069fa:	460a      	mov	r2, r1
 80069fc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80069fe:	f107 0310 	add.w	r3, r7, #16
 8006a02:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006a06:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	f107 0210 	add.w	r2, r7, #16
 8006a10:	4413      	add	r3, r2
 8006a12:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006a16:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006a1a:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8006a1e:	4413      	add	r3, r2
 8006a20:	3309      	adds	r3, #9
 8006a22:	f107 0210 	add.w	r2, r7, #16
 8006a26:	4413      	add	r3, r2
 8006a28:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006a2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006a30:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006a34:	2200      	movs	r2, #0
 8006a36:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8006a3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006a42:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006a46:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8006a4a:	7812      	ldrb	r2, [r2, #0]
 8006a4c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006a4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a52:	3301      	adds	r3, #1
 8006a54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8006a58:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006a5c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006a60:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8006a64:	8812      	ldrh	r2, [r2, #0]
 8006a66:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006a6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a6e:	3302      	adds	r3, #2
 8006a70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006a74:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006a78:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006a7c:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8006a80:	8812      	ldrh	r2, [r2, #0]
 8006a82:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006a86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a8a:	3302      	adds	r3, #2
 8006a8c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006a90:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006a94:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006a98:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8006a9c:	7812      	ldrb	r2, [r2, #0]
 8006a9e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006aa0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8006aaa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006aae:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8006ab2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006ab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ab8:	3301      	adds	r3, #1
 8006aba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8006abe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006ac2:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006ac6:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8006ac8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006acc:	3301      	adds	r3, #1
 8006ace:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8006ad2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006ad6:	3308      	adds	r3, #8
 8006ad8:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006adc:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f001 f872 	bl	8007bca <Osal_MemCpy>
    index_input += Local_Name_Length;
 8006ae6:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8006aea:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006aee:	4413      	add	r3, r2
 8006af0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8006af4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006af8:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006afc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006afe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006b02:	3301      	adds	r3, #1
 8006b04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8006b08:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006b12:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8006b16:	4618      	mov	r0, r3
 8006b18:	f001 f857 	bl	8007bca <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006b1c:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8006b20:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006b24:	4413      	add	r3, r2
 8006b26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8006b2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006b2e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8006b32:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006b34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006b38:	3302      	adds	r3, #2
 8006b3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8006b3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006b42:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8006b46:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006b48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006b4c:	3302      	adds	r3, #2
 8006b4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006b52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006b56:	2218      	movs	r2, #24
 8006b58:	2100      	movs	r1, #0
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f001 f845 	bl	8007bea <Osal_MemSet>
  rq.ogf = 0x3f;
 8006b60:	233f      	movs	r3, #63	@ 0x3f
 8006b62:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8006b66:	2383      	movs	r3, #131	@ 0x83
 8006b68:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006b6c:	f107 0310 	add.w	r3, r7, #16
 8006b70:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006b74:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006b78:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006b7c:	f107 030f 	add.w	r3, r7, #15
 8006b80:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006b84:	2301      	movs	r3, #1
 8006b86:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006b8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006b8e:	2100      	movs	r1, #0
 8006b90:	4618      	mov	r0, r3
 8006b92:	f001 fab3 	bl	80080fc <hci_send_req>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	da01      	bge.n	8006ba0 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8006b9c:	23ff      	movs	r3, #255	@ 0xff
 8006b9e:	e004      	b.n	8006baa <aci_gap_set_discoverable+0x1ea>
  return status;
 8006ba0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ba4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006ba8:	781b      	ldrb	r3, [r3, #0]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bdb0      	pop	{r4, r5, r7, pc}

08006bb4 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b0cc      	sub	sp, #304	@ 0x130
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	4602      	mov	r2, r0
 8006bbc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006bc0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006bc4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8006bc6:	f107 0310 	add.w	r3, r7, #16
 8006bca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006bce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006bd2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8006be0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006be4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006be8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006bec:	7812      	ldrb	r2, [r2, #0]
 8006bee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006bf0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006bfa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006bfe:	2218      	movs	r2, #24
 8006c00:	2100      	movs	r1, #0
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 fff1 	bl	8007bea <Osal_MemSet>
  rq.ogf = 0x3f;
 8006c08:	233f      	movs	r3, #63	@ 0x3f
 8006c0a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8006c0e:	2385      	movs	r3, #133	@ 0x85
 8006c10:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006c14:	f107 0310 	add.w	r3, r7, #16
 8006c18:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006c1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c20:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006c24:	f107 030f 	add.w	r3, r7, #15
 8006c28:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006c32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006c36:	2100      	movs	r1, #0
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f001 fa5f 	bl	80080fc <hci_send_req>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	da01      	bge.n	8006c48 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8006c44:	23ff      	movs	r3, #255	@ 0xff
 8006c46:	e004      	b.n	8006c52 <aci_gap_set_io_capability+0x9e>
  return status;
 8006c48:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c4c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006c50:	781b      	ldrb	r3, [r3, #0]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8006c5c:	b5b0      	push	{r4, r5, r7, lr}
 8006c5e:	b0cc      	sub	sp, #304	@ 0x130
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	4605      	mov	r5, r0
 8006c64:	460c      	mov	r4, r1
 8006c66:	4610      	mov	r0, r2
 8006c68:	4619      	mov	r1, r3
 8006c6a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c6e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006c72:	462a      	mov	r2, r5
 8006c74:	701a      	strb	r2, [r3, #0]
 8006c76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c7a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006c7e:	4622      	mov	r2, r4
 8006c80:	701a      	strb	r2, [r3, #0]
 8006c82:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c86:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	701a      	strb	r2, [r3, #0]
 8006c8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c96:	460a      	mov	r2, r1
 8006c98:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8006c9a:	f107 0310 	add.w	r3, r7, #16
 8006c9e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006ca2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ca6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006caa:	2200      	movs	r2, #0
 8006cac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8006cb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006cb8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006cbc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006cc0:	7812      	ldrb	r2, [r2, #0]
 8006cc2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006cc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006cc8:	3301      	adds	r3, #1
 8006cca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8006cce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006cd2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006cd6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006cda:	7812      	ldrb	r2, [r2, #0]
 8006cdc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006cde:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8006ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006cec:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006cf0:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006cf4:	7812      	ldrb	r2, [r2, #0]
 8006cf6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006cf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8006d02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d06:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006d0a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8006d0e:	7812      	ldrb	r2, [r2, #0]
 8006d10:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8006d12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d16:	3301      	adds	r3, #1
 8006d18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8006d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d20:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8006d24:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006d26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8006d30:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d34:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8006d38:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006d3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d3e:	3301      	adds	r3, #1
 8006d40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8006d44:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d48:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8006d4c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006d4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d52:	3301      	adds	r3, #1
 8006d54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8006d58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d5c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8006d60:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8006d64:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d68:	3304      	adds	r3, #4
 8006d6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8006d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d72:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8006d76:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8006d78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006d82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006d86:	2218      	movs	r2, #24
 8006d88:	2100      	movs	r1, #0
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 ff2d 	bl	8007bea <Osal_MemSet>
  rq.ogf = 0x3f;
 8006d90:	233f      	movs	r3, #63	@ 0x3f
 8006d92:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8006d96:	2386      	movs	r3, #134	@ 0x86
 8006d98:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006d9c:	f107 0310 	add.w	r3, r7, #16
 8006da0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006da4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006da8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006dac:	f107 030f 	add.w	r3, r7, #15
 8006db0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006db4:	2301      	movs	r3, #1
 8006db6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006dba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f001 f99b 	bl	80080fc <hci_send_req>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	da01      	bge.n	8006dd0 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8006dcc:	23ff      	movs	r3, #255	@ 0xff
 8006dce:	e004      	b.n	8006dda <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8006dd0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006dd4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006dd8:	781b      	ldrb	r3, [r3, #0]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bdb0      	pop	{r4, r5, r7, pc}

08006de4 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b0cc      	sub	sp, #304	@ 0x130
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	4602      	mov	r2, r0
 8006dec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006df0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006df4:	6019      	str	r1, [r3, #0]
 8006df6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006dfa:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006dfe:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8006e00:	f107 0310 	add.w	r3, r7, #16
 8006e04:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006e08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e0c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006e10:	2200      	movs	r2, #0
 8006e12:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006e14:	2300      	movs	r3, #0
 8006e16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006e1e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006e22:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006e26:	8812      	ldrh	r2, [r2, #0]
 8006e28:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006e2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e2e:	3302      	adds	r3, #2
 8006e30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8006e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006e38:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006e3c:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8006e40:	6812      	ldr	r2, [r2, #0]
 8006e42:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8006e46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006e50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e54:	2218      	movs	r2, #24
 8006e56:	2100      	movs	r1, #0
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 fec6 	bl	8007bea <Osal_MemSet>
  rq.ogf = 0x3f;
 8006e5e:	233f      	movs	r3, #63	@ 0x3f
 8006e60:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8006e64:	2388      	movs	r3, #136	@ 0x88
 8006e66:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006e6a:	f107 0310 	add.w	r3, r7, #16
 8006e6e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006e72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e76:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006e7a:	f107 030f 	add.w	r3, r7, #15
 8006e7e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006e82:	2301      	movs	r3, #1
 8006e84:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006e88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f001 f934 	bl	80080fc <hci_send_req>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	da01      	bge.n	8006e9e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8006e9a:	23ff      	movs	r3, #255	@ 0xff
 8006e9c:	e004      	b.n	8006ea8 <aci_gap_pass_key_resp+0xc4>
  return status;
 8006e9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ea2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006ea6:	781b      	ldrb	r3, [r3, #0]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8006eb2:	b590      	push	{r4, r7, lr}
 8006eb4:	b0cd      	sub	sp, #308	@ 0x134
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	4604      	mov	r4, r0
 8006eba:	4608      	mov	r0, r1
 8006ebc:	4611      	mov	r1, r2
 8006ebe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006ec2:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8006ec6:	6013      	str	r3, [r2, #0]
 8006ec8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ecc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006ed0:	4622      	mov	r2, r4
 8006ed2:	701a      	strb	r2, [r3, #0]
 8006ed4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ed8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006edc:	4602      	mov	r2, r0
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ee4:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006ee8:	460a      	mov	r2, r1
 8006eea:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8006eec:	f107 0310 	add.w	r3, r7, #16
 8006ef0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006ef4:	f107 0308 	add.w	r3, r7, #8
 8006ef8:	2207      	movs	r2, #7
 8006efa:	2100      	movs	r1, #0
 8006efc:	4618      	mov	r0, r3
 8006efe:	f000 fe74 	bl	8007bea <Osal_MemSet>
  int index_input = 0;
 8006f02:	2300      	movs	r3, #0
 8006f04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8006f08:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006f0c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006f10:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006f14:	7812      	ldrb	r2, [r2, #0]
 8006f16:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006f18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8006f22:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006f26:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006f2a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006f2e:	7812      	ldrb	r2, [r2, #0]
 8006f30:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006f32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f36:	3301      	adds	r3, #1
 8006f38:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8006f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006f40:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006f44:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006f48:	7812      	ldrb	r2, [r2, #0]
 8006f4a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006f4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f50:	3301      	adds	r3, #1
 8006f52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006f56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006f5a:	2218      	movs	r2, #24
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 fe43 	bl	8007bea <Osal_MemSet>
  rq.ogf = 0x3f;
 8006f64:	233f      	movs	r3, #63	@ 0x3f
 8006f66:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8006f6a:	238a      	movs	r3, #138	@ 0x8a
 8006f6c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006f70:	f107 0310 	add.w	r3, r7, #16
 8006f74:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006f78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f7c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8006f80:	f107 0308 	add.w	r3, r7, #8
 8006f84:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8006f88:	2307      	movs	r3, #7
 8006f8a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006f8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006f92:	2100      	movs	r1, #0
 8006f94:	4618      	mov	r0, r3
 8006f96:	f001 f8b1 	bl	80080fc <hci_send_req>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	da01      	bge.n	8006fa4 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8006fa0:	23ff      	movs	r3, #255	@ 0xff
 8006fa2:	e02e      	b.n	8007002 <aci_gap_init+0x150>
  if ( resp.Status )
 8006fa4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006fa8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d005      	beq.n	8006fbe <aci_gap_init+0x10c>
    return resp.Status;
 8006fb2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006fb6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	e021      	b.n	8007002 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8006fbe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006fc2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006fc6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006fd0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8006fd8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006fdc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006fe0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006fea:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8006fec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ff0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006ff4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006ffe:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8007008:	46bd      	mov	sp, r7
 800700a:	bd90      	pop	{r4, r7, pc}

0800700c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b0cc      	sub	sp, #304	@ 0x130
 8007010:	af00      	add	r7, sp, #0
 8007012:	4602      	mov	r2, r0
 8007014:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007018:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800701c:	6019      	str	r1, [r3, #0]
 800701e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007022:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007026:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8007028:	f107 0310 	add.w	r3, r7, #16
 800702c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007030:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007034:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007038:	2200      	movs	r2, #0
 800703a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800703c:	2300      	movs	r3, #0
 800703e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8007042:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007046:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800704a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800704e:	7812      	ldrb	r2, [r2, #0]
 8007050:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007052:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007056:	3301      	adds	r3, #1
 8007058:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800705c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007060:	1c58      	adds	r0, r3, #1
 8007062:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007066:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800706a:	781a      	ldrb	r2, [r3, #0]
 800706c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007070:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007074:	6819      	ldr	r1, [r3, #0]
 8007076:	f000 fda8 	bl	8007bca <Osal_MemCpy>
  index_input += AdvDataLen;
 800707a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800707e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007088:	4413      	add	r3, r2
 800708a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800708e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007092:	2218      	movs	r2, #24
 8007094:	2100      	movs	r1, #0
 8007096:	4618      	mov	r0, r3
 8007098:	f000 fda7 	bl	8007bea <Osal_MemSet>
  rq.ogf = 0x3f;
 800709c:	233f      	movs	r3, #63	@ 0x3f
 800709e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 80070a2:	238e      	movs	r3, #142	@ 0x8e
 80070a4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80070a8:	f107 0310 	add.w	r3, r7, #16
 80070ac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80070b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80070b4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80070b8:	f107 030f 	add.w	r3, r7, #15
 80070bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80070c0:	2301      	movs	r3, #1
 80070c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80070c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80070ca:	2100      	movs	r1, #0
 80070cc:	4618      	mov	r0, r3
 80070ce:	f001 f815 	bl	80080fc <hci_send_req>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	da01      	bge.n	80070dc <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80070d8:	23ff      	movs	r3, #255	@ 0xff
 80070da:	e004      	b.n	80070e6 <aci_gap_update_adv_data+0xda>
  return status;
 80070dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80070e0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80070e4:	781b      	ldrb	r3, [r3, #0]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b088      	sub	sp, #32
 80070f4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80070f6:	2300      	movs	r3, #0
 80070f8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80070fa:	f107 0308 	add.w	r3, r7, #8
 80070fe:	2218      	movs	r2, #24
 8007100:	2100      	movs	r1, #0
 8007102:	4618      	mov	r0, r3
 8007104:	f000 fd71 	bl	8007bea <Osal_MemSet>
  rq.ogf = 0x3f;
 8007108:	233f      	movs	r3, #63	@ 0x3f
 800710a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800710c:	2392      	movs	r3, #146	@ 0x92
 800710e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007110:	1dfb      	adds	r3, r7, #7
 8007112:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007114:	2301      	movs	r3, #1
 8007116:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007118:	f107 0308 	add.w	r3, r7, #8
 800711c:	2100      	movs	r1, #0
 800711e:	4618      	mov	r0, r3
 8007120:	f000 ffec 	bl	80080fc <hci_send_req>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	da01      	bge.n	800712e <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800712a:	23ff      	movs	r3, #255	@ 0xff
 800712c:	e000      	b.n	8007130 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800712e:	79fb      	ldrb	r3, [r7, #7]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3720      	adds	r7, #32
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b0cc      	sub	sp, #304	@ 0x130
 800713c:	af00      	add	r7, sp, #0
 800713e:	4602      	mov	r2, r0
 8007140:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007144:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007148:	801a      	strh	r2, [r3, #0]
 800714a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800714e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8007152:	460a      	mov	r2, r1
 8007154:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8007156:	f107 0310 	add.w	r3, r7, #16
 800715a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800715e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007162:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007166:	2200      	movs	r2, #0
 8007168:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800716a:	2300      	movs	r3, #0
 800716c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007170:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007174:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007178:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800717c:	8812      	ldrh	r2, [r2, #0]
 800717e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007180:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007184:	3302      	adds	r3, #2
 8007186:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800718a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800718e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007192:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8007196:	7812      	ldrb	r2, [r2, #0]
 8007198:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800719a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800719e:	3301      	adds	r3, #1
 80071a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80071a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80071a8:	2218      	movs	r2, #24
 80071aa:	2100      	movs	r1, #0
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 fd1c 	bl	8007bea <Osal_MemSet>
  rq.ogf = 0x3f;
 80071b2:	233f      	movs	r3, #63	@ 0x3f
 80071b4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 80071b8:	23a5      	movs	r3, #165	@ 0xa5
 80071ba:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80071be:	f107 0310 	add.w	r3, r7, #16
 80071c2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80071c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80071ca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80071ce:	f107 030f 	add.w	r3, r7, #15
 80071d2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80071d6:	2301      	movs	r3, #1
 80071d8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80071dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80071e0:	2100      	movs	r1, #0
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 ff8a 	bl	80080fc <hci_send_req>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	da01      	bge.n	80071f2 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80071ee:	23ff      	movs	r3, #255	@ 0xff
 80071f0:	e004      	b.n	80071fc <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80071f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80071f6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80071fa:	781b      	ldrb	r3, [r3, #0]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b088      	sub	sp, #32
 800720a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800720c:	2300      	movs	r3, #0
 800720e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007210:	f107 0308 	add.w	r3, r7, #8
 8007214:	2218      	movs	r2, #24
 8007216:	2100      	movs	r1, #0
 8007218:	4618      	mov	r0, r3
 800721a:	f000 fce6 	bl	8007bea <Osal_MemSet>
  rq.ogf = 0x3f;
 800721e:	233f      	movs	r3, #63	@ 0x3f
 8007220:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8007222:	f240 1301 	movw	r3, #257	@ 0x101
 8007226:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007228:	1dfb      	adds	r3, r7, #7
 800722a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800722c:	2301      	movs	r3, #1
 800722e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007230:	f107 0308 	add.w	r3, r7, #8
 8007234:	2100      	movs	r1, #0
 8007236:	4618      	mov	r0, r3
 8007238:	f000 ff60 	bl	80080fc <hci_send_req>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	da01      	bge.n	8007246 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8007242:	23ff      	movs	r3, #255	@ 0xff
 8007244:	e000      	b.n	8007248 <aci_gatt_init+0x42>
  return status;
 8007246:	79fb      	ldrb	r3, [r7, #7]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3720      	adds	r7, #32
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8007250:	b590      	push	{r4, r7, lr}
 8007252:	b0cf      	sub	sp, #316	@ 0x13c
 8007254:	af00      	add	r7, sp, #0
 8007256:	4604      	mov	r4, r0
 8007258:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800725c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8007260:	6001      	str	r1, [r0, #0]
 8007262:	4610      	mov	r0, r2
 8007264:	4619      	mov	r1, r3
 8007266:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800726a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800726e:	4622      	mov	r2, r4
 8007270:	701a      	strb	r2, [r3, #0]
 8007272:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007276:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800727a:	4602      	mov	r2, r0
 800727c:	701a      	strb	r2, [r3, #0]
 800727e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007282:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8007286:	460a      	mov	r2, r1
 8007288:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800728a:	f107 0310 	add.w	r3, r7, #16
 800728e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8007292:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007296:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d00a      	beq.n	80072b6 <aci_gatt_add_service+0x66>
 80072a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072a4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d101      	bne.n	80072b2 <aci_gatt_add_service+0x62>
 80072ae:	2311      	movs	r3, #17
 80072b0:	e002      	b.n	80072b8 <aci_gatt_add_service+0x68>
 80072b2:	2301      	movs	r3, #1
 80072b4:	e000      	b.n	80072b8 <aci_gatt_add_service+0x68>
 80072b6:	2303      	movs	r3, #3
 80072b8:	f107 0210 	add.w	r2, r7, #16
 80072bc:	4413      	add	r3, r2
 80072be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80072c2:	f107 030c 	add.w	r3, r7, #12
 80072c6:	2203      	movs	r2, #3
 80072c8:	2100      	movs	r1, #0
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 fc8d 	bl	8007bea <Osal_MemSet>
  int index_input = 0;
 80072d0:	2300      	movs	r3, #0
 80072d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80072d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80072da:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80072de:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80072e2:	7812      	ldrb	r2, [r2, #0]
 80072e4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80072e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80072ea:	3301      	adds	r3, #1
 80072ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80072f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072f4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d002      	beq.n	8007304 <aci_gatt_add_service+0xb4>
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d004      	beq.n	800730c <aci_gatt_add_service+0xbc>
 8007302:	e007      	b.n	8007314 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8007304:	2302      	movs	r3, #2
 8007306:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800730a:	e005      	b.n	8007318 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800730c:	2310      	movs	r3, #16
 800730e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8007312:	e001      	b.n	8007318 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8007314:	2397      	movs	r3, #151	@ 0x97
 8007316:	e06c      	b.n	80073f2 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007318:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800731c:	1c58      	adds	r0, r3, #1
 800731e:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8007322:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007326:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800732a:	6819      	ldr	r1, [r3, #0]
 800732c:	f000 fc4d 	bl	8007bca <Osal_MemCpy>
    index_input += size;
 8007330:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8007334:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007338:	4413      	add	r3, r2
 800733a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800733e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007342:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007346:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800734a:	7812      	ldrb	r2, [r2, #0]
 800734c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800734e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007352:	3301      	adds	r3, #1
 8007354:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8007358:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800735c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007360:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8007364:	7812      	ldrb	r2, [r2, #0]
 8007366:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8007368:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800736c:	3301      	adds	r3, #1
 800736e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007372:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007376:	2218      	movs	r2, #24
 8007378:	2100      	movs	r1, #0
 800737a:	4618      	mov	r0, r3
 800737c:	f000 fc35 	bl	8007bea <Osal_MemSet>
  rq.ogf = 0x3f;
 8007380:	233f      	movs	r3, #63	@ 0x3f
 8007382:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8007386:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800738a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800738e:	f107 0310 	add.w	r3, r7, #16
 8007392:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007396:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800739a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800739e:	f107 030c 	add.w	r3, r7, #12
 80073a2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80073a6:	2303      	movs	r3, #3
 80073a8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80073ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80073b0:	2100      	movs	r1, #0
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 fea2 	bl	80080fc <hci_send_req>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	da01      	bge.n	80073c2 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80073be:	23ff      	movs	r3, #255	@ 0xff
 80073c0:	e017      	b.n	80073f2 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80073c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d005      	beq.n	80073dc <aci_gatt_add_service+0x18c>
    return resp.Status;
 80073d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	e00a      	b.n	80073f2 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80073dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073e4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80073ee:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd90      	pop	{r4, r7, pc}

080073fc <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80073fc:	b590      	push	{r4, r7, lr}
 80073fe:	b0d1      	sub	sp, #324	@ 0x144
 8007400:	af00      	add	r7, sp, #0
 8007402:	4604      	mov	r4, r0
 8007404:	4608      	mov	r0, r1
 8007406:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800740a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800740e:	600a      	str	r2, [r1, #0]
 8007410:	4619      	mov	r1, r3
 8007412:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007416:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800741a:	4622      	mov	r2, r4
 800741c:	801a      	strh	r2, [r3, #0]
 800741e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007422:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8007426:	4602      	mov	r2, r0
 8007428:	701a      	strb	r2, [r3, #0]
 800742a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800742e:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8007432:	460a      	mov	r2, r1
 8007434:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8007436:	f107 0318 	add.w	r3, r7, #24
 800743a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800743e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007442:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d00a      	beq.n	8007462 <aci_gatt_add_char+0x66>
 800744c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007450:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	2b02      	cmp	r3, #2
 8007458:	d101      	bne.n	800745e <aci_gatt_add_char+0x62>
 800745a:	2313      	movs	r3, #19
 800745c:	e002      	b.n	8007464 <aci_gatt_add_char+0x68>
 800745e:	2303      	movs	r3, #3
 8007460:	e000      	b.n	8007464 <aci_gatt_add_char+0x68>
 8007462:	2305      	movs	r3, #5
 8007464:	f107 0218 	add.w	r2, r7, #24
 8007468:	4413      	add	r3, r2
 800746a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800746e:	f107 0314 	add.w	r3, r7, #20
 8007472:	2203      	movs	r2, #3
 8007474:	2100      	movs	r1, #0
 8007476:	4618      	mov	r0, r3
 8007478:	f000 fbb7 	bl	8007bea <Osal_MemSet>
  int index_input = 0;
 800747c:	2300      	movs	r3, #0
 800747e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8007482:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8007486:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800748a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800748e:	8812      	ldrh	r2, [r2, #0]
 8007490:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007492:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007496:	3302      	adds	r3, #2
 8007498:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800749c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80074a0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80074a4:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80074a8:	7812      	ldrb	r2, [r2, #0]
 80074aa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80074ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80074b0:	3301      	adds	r3, #1
 80074b2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80074b6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80074ba:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d002      	beq.n	80074ca <aci_gatt_add_char+0xce>
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d004      	beq.n	80074d2 <aci_gatt_add_char+0xd6>
 80074c8:	e007      	b.n	80074da <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80074ca:	2302      	movs	r3, #2
 80074cc:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80074d0:	e005      	b.n	80074de <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80074d2:	2310      	movs	r3, #16
 80074d4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80074d8:	e001      	b.n	80074de <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80074da:	2397      	movs	r3, #151	@ 0x97
 80074dc:	e091      	b.n	8007602 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80074de:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80074e2:	1cd8      	adds	r0, r3, #3
 80074e4:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 80074e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80074ec:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80074f0:	6819      	ldr	r1, [r3, #0]
 80074f2:	f000 fb6a 	bl	8007bca <Osal_MemCpy>
    index_input += size;
 80074f6:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80074fa:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80074fe:	4413      	add	r3, r2
 8007500:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8007504:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007508:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800750c:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8007510:	8812      	ldrh	r2, [r2, #0]
 8007512:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007514:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007518:	3302      	adds	r3, #2
 800751a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800751e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007522:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8007526:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8007528:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800752c:	3301      	adds	r3, #1
 800752e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8007532:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007536:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800753a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800753c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007540:	3301      	adds	r3, #1
 8007542:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8007546:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800754a:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800754e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007550:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007554:	3301      	adds	r3, #1
 8007556:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800755a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800755e:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8007562:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007564:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007568:	3301      	adds	r3, #1
 800756a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800756e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007572:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8007576:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007578:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800757c:	3301      	adds	r3, #1
 800757e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007582:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007586:	2218      	movs	r2, #24
 8007588:	2100      	movs	r1, #0
 800758a:	4618      	mov	r0, r3
 800758c:	f000 fb2d 	bl	8007bea <Osal_MemSet>
  rq.ogf = 0x3f;
 8007590:	233f      	movs	r3, #63	@ 0x3f
 8007592:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8007596:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800759a:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800759e:	f107 0318 	add.w	r3, r7, #24
 80075a2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80075a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80075aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80075ae:	f107 0314 	add.w	r3, r7, #20
 80075b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80075b6:	2303      	movs	r3, #3
 80075b8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80075bc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80075c0:	2100      	movs	r1, #0
 80075c2:	4618      	mov	r0, r3
 80075c4:	f000 fd9a 	bl	80080fc <hci_send_req>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	da01      	bge.n	80075d2 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80075ce:	23ff      	movs	r3, #255	@ 0xff
 80075d0:	e017      	b.n	8007602 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80075d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80075d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d005      	beq.n	80075ec <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80075e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80075e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	e00a      	b.n	8007602 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80075ec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80075f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075f4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80075fe:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8007608:	46bd      	mov	sp, r7
 800760a:	bd90      	pop	{r4, r7, pc}

0800760c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800760c:	b5b0      	push	{r4, r5, r7, lr}
 800760e:	b0cc      	sub	sp, #304	@ 0x130
 8007610:	af00      	add	r7, sp, #0
 8007612:	4605      	mov	r5, r0
 8007614:	460c      	mov	r4, r1
 8007616:	4610      	mov	r0, r2
 8007618:	4619      	mov	r1, r3
 800761a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800761e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007622:	462a      	mov	r2, r5
 8007624:	801a      	strh	r2, [r3, #0]
 8007626:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800762a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800762e:	4622      	mov	r2, r4
 8007630:	801a      	strh	r2, [r3, #0]
 8007632:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007636:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800763a:	4602      	mov	r2, r0
 800763c:	701a      	strb	r2, [r3, #0]
 800763e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007642:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8007646:	460a      	mov	r2, r1
 8007648:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800764a:	f107 0310 	add.w	r3, r7, #16
 800764e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007652:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007656:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800765a:	2200      	movs	r2, #0
 800765c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800765e:	2300      	movs	r3, #0
 8007660:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8007664:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007668:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800766c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007670:	8812      	ldrh	r2, [r2, #0]
 8007672:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007674:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007678:	3302      	adds	r3, #2
 800767a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800767e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007682:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007686:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800768a:	8812      	ldrh	r2, [r2, #0]
 800768c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800768e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007692:	3302      	adds	r3, #2
 8007694:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8007698:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800769c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80076a0:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 80076a4:	7812      	ldrb	r2, [r2, #0]
 80076a6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80076a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80076ac:	3301      	adds	r3, #1
 80076ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80076b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80076b6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80076ba:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80076be:	7812      	ldrb	r2, [r2, #0]
 80076c0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80076c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80076c6:	3301      	adds	r3, #1
 80076c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80076cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80076d0:	1d98      	adds	r0, r3, #6
 80076d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80076d6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	461a      	mov	r2, r3
 80076de:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80076e2:	f000 fa72 	bl	8007bca <Osal_MemCpy>
  index_input += Char_Value_Length;
 80076e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80076ea:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80076f4:	4413      	add	r3, r2
 80076f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80076fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80076fe:	2218      	movs	r2, #24
 8007700:	2100      	movs	r1, #0
 8007702:	4618      	mov	r0, r3
 8007704:	f000 fa71 	bl	8007bea <Osal_MemSet>
  rq.ogf = 0x3f;
 8007708:	233f      	movs	r3, #63	@ 0x3f
 800770a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800770e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8007712:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007716:	f107 0310 	add.w	r3, r7, #16
 800771a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800771e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007722:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007726:	f107 030f 	add.w	r3, r7, #15
 800772a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800772e:	2301      	movs	r3, #1
 8007730:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007734:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007738:	2100      	movs	r1, #0
 800773a:	4618      	mov	r0, r3
 800773c:	f000 fcde 	bl	80080fc <hci_send_req>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	da01      	bge.n	800774a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8007746:	23ff      	movs	r3, #255	@ 0xff
 8007748:	e004      	b.n	8007754 <aci_gatt_update_char_value+0x148>
  return status;
 800774a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800774e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007752:	781b      	ldrb	r3, [r3, #0]
}
 8007754:	4618      	mov	r0, r3
 8007756:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800775a:	46bd      	mov	sp, r7
 800775c:	bdb0      	pop	{r4, r5, r7, pc}

0800775e <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b0cc      	sub	sp, #304	@ 0x130
 8007762:	af00      	add	r7, sp, #0
 8007764:	4602      	mov	r2, r0
 8007766:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800776a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800776e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8007770:	f107 0310 	add.w	r3, r7, #16
 8007774:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007778:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800777c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007780:	2200      	movs	r2, #0
 8007782:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007784:	2300      	movs	r3, #0
 8007786:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800778a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800778e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007792:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007796:	8812      	ldrh	r2, [r2, #0]
 8007798:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800779a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800779e:	3302      	adds	r3, #2
 80077a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80077a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80077a8:	2218      	movs	r2, #24
 80077aa:	2100      	movs	r1, #0
 80077ac:	4618      	mov	r0, r3
 80077ae:	f000 fa1c 	bl	8007bea <Osal_MemSet>
  rq.ogf = 0x3f;
 80077b2:	233f      	movs	r3, #63	@ 0x3f
 80077b4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 80077b8:	f240 1325 	movw	r3, #293	@ 0x125
 80077bc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80077c0:	f107 0310 	add.w	r3, r7, #16
 80077c4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80077c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80077cc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80077d0:	f107 030f 	add.w	r3, r7, #15
 80077d4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80077d8:	2301      	movs	r3, #1
 80077da:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80077de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80077e2:	2100      	movs	r1, #0
 80077e4:	4618      	mov	r0, r3
 80077e6:	f000 fc89 	bl	80080fc <hci_send_req>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	da01      	bge.n	80077f4 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 80077f0:	23ff      	movs	r3, #255	@ 0xff
 80077f2:	e004      	b.n	80077fe <aci_gatt_confirm_indication+0xa0>
  return status;
 80077f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80077f8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80077fc:	781b      	ldrb	r3, [r3, #0]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b0cc      	sub	sp, #304	@ 0x130
 800780c:	af00      	add	r7, sp, #0
 800780e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007812:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007816:	601a      	str	r2, [r3, #0]
 8007818:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800781c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007820:	4602      	mov	r2, r0
 8007822:	701a      	strb	r2, [r3, #0]
 8007824:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007828:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800782c:	460a      	mov	r2, r1
 800782e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007830:	f107 0310 	add.w	r3, r7, #16
 8007834:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007838:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800783c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007840:	2200      	movs	r2, #0
 8007842:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007844:	2300      	movs	r3, #0
 8007846:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800784a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800784e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007852:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007856:	7812      	ldrb	r2, [r2, #0]
 8007858:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800785a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800785e:	3301      	adds	r3, #1
 8007860:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8007864:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007868:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800786c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007870:	7812      	ldrb	r2, [r2, #0]
 8007872:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007874:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007878:	3301      	adds	r3, #1
 800787a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800787e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007882:	1c98      	adds	r0, r3, #2
 8007884:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007888:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800788c:	781a      	ldrb	r2, [r3, #0]
 800788e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007892:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007896:	6819      	ldr	r1, [r3, #0]
 8007898:	f000 f997 	bl	8007bca <Osal_MemCpy>
  index_input += Length;
 800789c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80078a0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80078aa:	4413      	add	r3, r2
 80078ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80078b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80078b4:	2218      	movs	r2, #24
 80078b6:	2100      	movs	r1, #0
 80078b8:	4618      	mov	r0, r3
 80078ba:	f000 f996 	bl	8007bea <Osal_MemSet>
  rq.ogf = 0x3f;
 80078be:	233f      	movs	r3, #63	@ 0x3f
 80078c0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 80078c4:	230c      	movs	r3, #12
 80078c6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80078ca:	f107 0310 	add.w	r3, r7, #16
 80078ce:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80078d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80078d6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80078da:	f107 030f 	add.w	r3, r7, #15
 80078de:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80078e2:	2301      	movs	r3, #1
 80078e4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80078e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80078ec:	2100      	movs	r1, #0
 80078ee:	4618      	mov	r0, r3
 80078f0:	f000 fc04 	bl	80080fc <hci_send_req>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	da01      	bge.n	80078fe <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80078fa:	23ff      	movs	r3, #255	@ 0xff
 80078fc:	e004      	b.n	8007908 <aci_hal_write_config_data+0x100>
  return status;
 80078fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007902:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007906:	781b      	ldrb	r3, [r3, #0]
}
 8007908:	4618      	mov	r0, r3
 800790a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b0cc      	sub	sp, #304	@ 0x130
 8007916:	af00      	add	r7, sp, #0
 8007918:	4602      	mov	r2, r0
 800791a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800791e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007922:	701a      	strb	r2, [r3, #0]
 8007924:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007928:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800792c:	460a      	mov	r2, r1
 800792e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007930:	f107 0310 	add.w	r3, r7, #16
 8007934:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007938:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800793c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007940:	2200      	movs	r2, #0
 8007942:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007944:	2300      	movs	r3, #0
 8007946:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800794a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800794e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007952:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007956:	7812      	ldrb	r2, [r2, #0]
 8007958:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800795a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800795e:	3301      	adds	r3, #1
 8007960:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8007964:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007968:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800796c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007970:	7812      	ldrb	r2, [r2, #0]
 8007972:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007974:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007978:	3301      	adds	r3, #1
 800797a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800797e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007982:	2218      	movs	r2, #24
 8007984:	2100      	movs	r1, #0
 8007986:	4618      	mov	r0, r3
 8007988:	f000 f92f 	bl	8007bea <Osal_MemSet>
  rq.ogf = 0x3f;
 800798c:	233f      	movs	r3, #63	@ 0x3f
 800798e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8007992:	230f      	movs	r3, #15
 8007994:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007998:	f107 0310 	add.w	r3, r7, #16
 800799c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80079a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80079a4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80079a8:	f107 030f 	add.w	r3, r7, #15
 80079ac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80079b0:	2301      	movs	r3, #1
 80079b2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80079b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80079ba:	2100      	movs	r1, #0
 80079bc:	4618      	mov	r0, r3
 80079be:	f000 fb9d 	bl	80080fc <hci_send_req>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	da01      	bge.n	80079cc <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80079c8:	23ff      	movs	r3, #255	@ 0xff
 80079ca:	e004      	b.n	80079d6 <aci_hal_set_tx_power_level+0xc4>
  return status;
 80079cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80079d0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80079d4:	781b      	ldrb	r3, [r3, #0]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b0cc      	sub	sp, #304	@ 0x130
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	4602      	mov	r2, r0
 80079e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80079ec:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80079f0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80079f2:	f107 0310 	add.w	r3, r7, #16
 80079f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80079fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80079fe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007a02:	2200      	movs	r2, #0
 8007a04:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007a06:	2300      	movs	r3, #0
 8007a08:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007a10:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007a14:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007a18:	8812      	ldrh	r2, [r2, #0]
 8007a1a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007a1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007a20:	3302      	adds	r3, #2
 8007a22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007a2a:	2218      	movs	r2, #24
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 f8db 	bl	8007bea <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a34:	233f      	movs	r3, #63	@ 0x3f
 8007a36:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8007a3a:	2318      	movs	r3, #24
 8007a3c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007a40:	f107 0310 	add.w	r3, r7, #16
 8007a44:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007a48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007a4c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007a50:	f107 030f 	add.w	r3, r7, #15
 8007a54:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007a62:	2100      	movs	r1, #0
 8007a64:	4618      	mov	r0, r3
 8007a66:	f000 fb49 	bl	80080fc <hci_send_req>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	da01      	bge.n	8007a74 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8007a70:	23ff      	movs	r3, #255	@ 0xff
 8007a72:	e004      	b.n	8007a7e <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8007a74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007a78:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007a7c:	781b      	ldrb	r3, [r3, #0]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b088      	sub	sp, #32
 8007a8c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a92:	f107 0308 	add.w	r3, r7, #8
 8007a96:	2218      	movs	r2, #24
 8007a98:	2100      	movs	r1, #0
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 f8a5 	bl	8007bea <Osal_MemSet>
  rq.ogf = 0x03;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007aa8:	1dfb      	adds	r3, r7, #7
 8007aaa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007aac:	2301      	movs	r3, #1
 8007aae:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ab0:	f107 0308 	add.w	r3, r7, #8
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 fb20 	bl	80080fc <hci_send_req>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	da01      	bge.n	8007ac6 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007ac2:	23ff      	movs	r3, #255	@ 0xff
 8007ac4:	e000      	b.n	8007ac8 <hci_reset+0x40>
  return status;
 8007ac6:	79fb      	ldrb	r3, [r7, #7]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3720      	adds	r7, #32
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8007ad0:	b590      	push	{r4, r7, lr}
 8007ad2:	b0cd      	sub	sp, #308	@ 0x134
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	4604      	mov	r4, r0
 8007ad8:	4608      	mov	r0, r1
 8007ada:	4611      	mov	r1, r2
 8007adc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007ae0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007ae4:	4622      	mov	r2, r4
 8007ae6:	701a      	strb	r2, [r3, #0]
 8007ae8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007aec:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007af0:	4602      	mov	r2, r0
 8007af2:	701a      	strb	r2, [r3, #0]
 8007af4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007af8:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8007afc:	460a      	mov	r2, r1
 8007afe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8007b00:	f107 0310 	add.w	r3, r7, #16
 8007b04:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007b08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007b0c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007b10:	2200      	movs	r2, #0
 8007b12:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007b14:	2300      	movs	r3, #0
 8007b16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8007b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007b1e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007b22:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007b26:	7812      	ldrb	r2, [r2, #0]
 8007b28:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007b2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007b2e:	3301      	adds	r3, #1
 8007b30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8007b34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007b38:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007b3c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007b40:	7812      	ldrb	r2, [r2, #0]
 8007b42:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007b44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007b48:	3301      	adds	r3, #1
 8007b4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007b4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007b52:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007b56:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8007b5a:	7812      	ldrb	r2, [r2, #0]
 8007b5c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007b5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007b62:	3301      	adds	r3, #1
 8007b64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007b6c:	2218      	movs	r2, #24
 8007b6e:	2100      	movs	r1, #0
 8007b70:	4618      	mov	r0, r3
 8007b72:	f000 f83a 	bl	8007bea <Osal_MemSet>
  rq.ogf = 0x08;
 8007b76:	2308      	movs	r3, #8
 8007b78:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8007b7c:	2331      	movs	r3, #49	@ 0x31
 8007b7e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007b82:	f107 0310 	add.w	r3, r7, #16
 8007b86:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007b8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007b8e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007b92:	f107 030f 	add.w	r3, r7, #15
 8007b96:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ba0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f000 faa8 	bl	80080fc <hci_send_req>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	da01      	bge.n	8007bb6 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8007bb2:	23ff      	movs	r3, #255	@ 0xff
 8007bb4:	e004      	b.n	8007bc0 <hci_le_set_default_phy+0xf0>
  return status;
 8007bb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007bba:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007bbe:	781b      	ldrb	r3, [r3, #0]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd90      	pop	{r4, r7, pc}

08007bca <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b084      	sub	sp, #16
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	60f8      	str	r0, [r7, #12]
 8007bd2:	60b9      	str	r1, [r7, #8]
 8007bd4:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	68b9      	ldr	r1, [r7, #8]
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f002 ff66 	bl	800aaac <memcpy>
 8007be0:	4603      	mov	r3, r0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b084      	sub	sp, #16
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	60f8      	str	r0, [r7, #12]
 8007bf2:	60b9      	str	r1, [r7, #8]
 8007bf4:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	68b9      	ldr	r1, [r7, #8]
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f002 ff12 	bl	800aa24 <memset>
 8007c00:	4603      	mov	r3, r0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	af00      	add	r7, sp, #0
  return;
 8007c0e:	bf00      	nop
}
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8007c18:	b480      	push	{r7}
 8007c1a:	af00      	add	r7, sp, #0
  return;
 8007c1c:	bf00      	nop
}
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8007c26:	b480      	push	{r7}
 8007c28:	af00      	add	r7, sp, #0
  return;
 8007c2a:	bf00      	nop
}
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8007c34:	b480      	push	{r7}
 8007c36:	af00      	add	r7, sp, #0
  return;
 8007c38:	bf00      	nop
}
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8007c42:	b480      	push	{r7}
 8007c44:	af00      	add	r7, sp, #0
  return;
 8007c46:	bf00      	nop
}
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8007c50:	b480      	push	{r7}
 8007c52:	af00      	add	r7, sp, #0
  return;
 8007c54:	bf00      	nop
}
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8007c5e:	b480      	push	{r7}
 8007c60:	af00      	add	r7, sp, #0
  return;
 8007c62:	bf00      	nop
}
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	af00      	add	r7, sp, #0
  return;
 8007c70:	bf00      	nop
}
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	af00      	add	r7, sp, #0
  return;
 8007c7e:	bf00      	nop
}
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8007c88:	b480      	push	{r7}
 8007c8a:	af00      	add	r7, sp, #0
  return;
 8007c8c:	bf00      	nop
}
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8007c96:	b480      	push	{r7}
 8007c98:	af00      	add	r7, sp, #0
  return;
 8007c9a:	bf00      	nop
}
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	af00      	add	r7, sp, #0
  return;
 8007ca8:	bf00      	nop
}
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	af00      	add	r7, sp, #0
  return;
 8007cb6:	bf00      	nop
}
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	af00      	add	r7, sp, #0
  return;
 8007cc4:	bf00      	nop
}
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8007cce:	b480      	push	{r7}
 8007cd0:	af00      	add	r7, sp, #0
  return;
 8007cd2:	bf00      	nop
}
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8007cdc:	b480      	push	{r7}
 8007cde:	af00      	add	r7, sp, #0
  return;
 8007ce0:	bf00      	nop
}
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8007cea:	b480      	push	{r7}
 8007cec:	af00      	add	r7, sp, #0
  return;
 8007cee:	bf00      	nop
}
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007cfc:	4b04      	ldr	r3, [pc, #16]	@ (8007d10 <SVCCTL_Init+0x18>)
 8007cfe:	2200      	movs	r2, #0
 8007d00:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8007d02:	4b04      	ldr	r3, [pc, #16]	@ (8007d14 <SVCCTL_Init+0x1c>)
 8007d04:	2200      	movs	r2, #0
 8007d06:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007d08:	f000 f806 	bl	8007d18 <SVCCTL_SvcInit>

  return;
 8007d0c:	bf00      	nop
}
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	20000080 	.word	0x20000080
 8007d14:	200000a0 	.word	0x200000a0

08007d18 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	af00      	add	r7, sp, #0
  BAS_Init();
 8007d1c:	f7ff ff75 	bl	8007c0a <BAS_Init>

  BLS_Init();
 8007d20:	f7ff ff7a 	bl	8007c18 <BLS_Init>

  CRS_STM_Init();
 8007d24:	f7ff ff7f 	bl	8007c26 <CRS_STM_Init>

  DIS_Init();
 8007d28:	f7ff ff84 	bl	8007c34 <DIS_Init>

  EDS_STM_Init();
 8007d2c:	f7ff ff89 	bl	8007c42 <EDS_STM_Init>

  HIDS_Init();
 8007d30:	f7ff ff8e 	bl	8007c50 <HIDS_Init>

  HRS_Init();
 8007d34:	f7ff ff93 	bl	8007c5e <HRS_Init>

  HTS_Init();
 8007d38:	f7ff ff98 	bl	8007c6c <HTS_Init>

  IAS_Init();
 8007d3c:	f7ff ff9d 	bl	8007c7a <IAS_Init>

  LLS_Init();
 8007d40:	f7ff ffa2 	bl	8007c88 <LLS_Init>

  TPS_Init();
 8007d44:	f7ff ffa7 	bl	8007c96 <TPS_Init>

  MOTENV_STM_Init();
 8007d48:	f7ff ffac 	bl	8007ca4 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007d4c:	f7ff ffb1 	bl	8007cb2 <P2PS_STM_Init>

  ZDD_STM_Init();
 8007d50:	f7ff ffb6 	bl	8007cc0 <ZDD_STM_Init>

  OTAS_STM_Init();
 8007d54:	f7ff ffbb 	bl	8007cce <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8007d58:	f7ff ffc7 	bl	8007cea <BVOPUS_STM_Init>

  MESH_Init();
 8007d5c:	f7ff ffbe 	bl	8007cdc <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007d60:	f001 fc66 	bl	8009630 <SVCCTL_InitCustomSvc>
  
  return;
 8007d64:	bf00      	nop
}
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8007d70:	4b09      	ldr	r3, [pc, #36]	@ (8007d98 <SVCCTL_RegisterSvcHandler+0x30>)
 8007d72:	7f1b      	ldrb	r3, [r3, #28]
 8007d74:	4619      	mov	r1, r3
 8007d76:	4a08      	ldr	r2, [pc, #32]	@ (8007d98 <SVCCTL_RegisterSvcHandler+0x30>)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8007d7e:	4b06      	ldr	r3, [pc, #24]	@ (8007d98 <SVCCTL_RegisterSvcHandler+0x30>)
 8007d80:	7f1b      	ldrb	r3, [r3, #28]
 8007d82:	3301      	adds	r3, #1
 8007d84:	b2da      	uxtb	r2, r3
 8007d86:	4b04      	ldr	r3, [pc, #16]	@ (8007d98 <SVCCTL_RegisterSvcHandler+0x30>)
 8007d88:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8007d8a:	bf00      	nop
}
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	20000080 	.word	0x20000080

08007d9c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	3301      	adds	r3, #1
 8007da8:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8007daa:	2300      	movs	r3, #0
 8007dac:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	2bff      	cmp	r3, #255	@ 0xff
 8007db4:	d125      	bne.n	8007e02 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	3302      	adds	r3, #2
 8007dba:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	881b      	ldrh	r3, [r3, #0]
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007dc6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007dca:	d118      	bne.n	8007dfe <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007dcc:	2300      	movs	r3, #0
 8007dce:	757b      	strb	r3, [r7, #21]
 8007dd0:	e00d      	b.n	8007dee <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8007dd2:	7d7b      	ldrb	r3, [r7, #21]
 8007dd4:	4a1a      	ldr	r2, [pc, #104]	@ (8007e40 <SVCCTL_UserEvtRx+0xa4>)
 8007dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	4798      	blx	r3
 8007dde:	4603      	mov	r3, r0
 8007de0:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8007de2:	7dfb      	ldrb	r3, [r7, #23]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d108      	bne.n	8007dfa <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007de8:	7d7b      	ldrb	r3, [r7, #21]
 8007dea:	3301      	adds	r3, #1
 8007dec:	757b      	strb	r3, [r7, #21]
 8007dee:	4b14      	ldr	r3, [pc, #80]	@ (8007e40 <SVCCTL_UserEvtRx+0xa4>)
 8007df0:	7f1b      	ldrb	r3, [r3, #28]
 8007df2:	7d7a      	ldrb	r2, [r7, #21]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d3ec      	bcc.n	8007dd2 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8007df8:	e002      	b.n	8007e00 <SVCCTL_UserEvtRx+0x64>
              break;
 8007dfa:	bf00      	nop
          break;
 8007dfc:	e000      	b.n	8007e00 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8007dfe:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007e00:	e000      	b.n	8007e04 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8007e02:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8007e04:	7dfb      	ldrb	r3, [r7, #23]
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d00f      	beq.n	8007e2a <SVCCTL_UserEvtRx+0x8e>
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	dc10      	bgt.n	8007e30 <SVCCTL_UserEvtRx+0x94>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d002      	beq.n	8007e18 <SVCCTL_UserEvtRx+0x7c>
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d006      	beq.n	8007e24 <SVCCTL_UserEvtRx+0x88>
 8007e16:	e00b      	b.n	8007e30 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 ff8f 	bl	8008d3c <SVCCTL_App_Notification>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	75bb      	strb	r3, [r7, #22]
      break;
 8007e22:	e008      	b.n	8007e36 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007e24:	2301      	movs	r3, #1
 8007e26:	75bb      	strb	r3, [r7, #22]
      break;
 8007e28:	e005      	b.n	8007e36 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	75bb      	strb	r3, [r7, #22]
      break;
 8007e2e:	e002      	b.n	8007e36 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007e30:	2301      	movs	r3, #1
 8007e32:	75bb      	strb	r3, [r7, #22]
      break;
 8007e34:	bf00      	nop
  }

  return (return_status);
 8007e36:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	20000080 	.word	0x20000080

08007e44 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b088      	sub	sp, #32
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007e4c:	f107 030c 	add.w	r3, r7, #12
 8007e50:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	212e      	movs	r1, #46	@ 0x2e
 8007e5c:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8007e60:	f000 fae8 	bl	8008434 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	330b      	adds	r3, #11
 8007e68:	78db      	ldrb	r3, [r3, #3]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3720      	adds	r7, #32
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b088      	sub	sp, #32
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007e7a:	f107 030c 	add.w	r3, r7, #12
 8007e7e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	210f      	movs	r1, #15
 8007e8a:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8007e8e:	f000 fad1 	bl	8008434 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	330b      	adds	r3, #11
 8007e96:	78db      	ldrb	r3, [r3, #3]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3720      	adds	r7, #32
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b088      	sub	sp, #32
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007ea8:	f107 030c 	add.w	r3, r7, #12
 8007eac:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	2110      	movs	r1, #16
 8007eb4:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8007eb8:	f000 fabc 	bl	8008434 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	330b      	adds	r3, #11
 8007ec0:	78db      	ldrb	r3, [r3, #3]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3720      	adds	r7, #32
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
	...

08007ecc <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b08b      	sub	sp, #44	@ 0x2c
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8007edc:	2300      	movs	r3, #0
 8007ede:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8007ef4:	4b4a      	ldr	r3, [pc, #296]	@ (8008020 <SHCI_GetWirelessFwInfo+0x154>)
 8007ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ef8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007efc:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8007f06:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a44      	ldr	r2, [pc, #272]	@ (8008024 <SHCI_GetWirelessFwInfo+0x158>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d10f      	bne.n	8007f38 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	695b      	ldr	r3, [r3, #20]
 8007f1c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	69db      	ldr	r3, [r3, #28]
 8007f28:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	617b      	str	r3, [r7, #20]
 8007f36:	e01a      	b.n	8007f6e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8007f40:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8007f44:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	695b      	ldr	r3, [r3, #20]
 8007f54:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f70:	0e1b      	lsrs	r3, r3, #24
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7a:	0c1b      	lsrs	r3, r3, #16
 8007f7c:	b2da      	uxtb	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f84:	0a1b      	lsrs	r3, r3, #8
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8e:	091b      	lsrs	r3, r3, #4
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	f003 030f 	and.w	r3, r3, #15
 8007f96:	b2da      	uxtb	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	f003 030f 	and.w	r3, r3, #15
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	0e1b      	lsrs	r3, r3, #24
 8007fae:	b2da      	uxtb	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	0c1b      	lsrs	r3, r3, #16
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8007fbe:	6a3b      	ldr	r3, [r7, #32]
 8007fc0:	0a1b      	lsrs	r3, r3, #8
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007fc8:	6a3b      	ldr	r3, [r7, #32]
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	0e1b      	lsrs	r3, r3, #24
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	0c1b      	lsrs	r3, r3, #16
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	0a1b      	lsrs	r3, r3, #8
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	0e1b      	lsrs	r3, r3, #24
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	0c1b      	lsrs	r3, r3, #16
 8008004:	b2da      	uxtb	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	b2da      	uxtb	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	372c      	adds	r7, #44	@ 0x2c
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr
 8008020:	58004000 	.word	0x58004000
 8008024:	a94656b9 	.word	0xa94656b9

08008028 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	4a08      	ldr	r2, [pc, #32]	@ (8008058 <hci_init+0x30>)
 8008038:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800803a:	4a08      	ldr	r2, [pc, #32]	@ (800805c <hci_init+0x34>)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008040:	4806      	ldr	r0, [pc, #24]	@ (800805c <hci_init+0x34>)
 8008042:	f000 f979 	bl	8008338 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4618      	mov	r0, r3
 800804c:	f000 f8da 	bl	8008204 <TlInit>

  return;
 8008050:	bf00      	nop
}
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	20000330 	.word	0x20000330
 800805c:	20000308 	.word	0x20000308

08008060 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008066:	4822      	ldr	r0, [pc, #136]	@ (80080f0 <hci_user_evt_proc+0x90>)
 8008068:	f000 fd32 	bl	8008ad0 <LST_is_empty>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d12b      	bne.n	80080ca <hci_user_evt_proc+0x6a>
 8008072:	4b20      	ldr	r3, [pc, #128]	@ (80080f4 <hci_user_evt_proc+0x94>)
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d027      	beq.n	80080ca <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800807a:	f107 030c 	add.w	r3, r7, #12
 800807e:	4619      	mov	r1, r3
 8008080:	481b      	ldr	r0, [pc, #108]	@ (80080f0 <hci_user_evt_proc+0x90>)
 8008082:	f000 fdb4 	bl	8008bee <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008086:	4b1c      	ldr	r3, [pc, #112]	@ (80080f8 <hci_user_evt_proc+0x98>)
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00c      	beq.n	80080a8 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8008092:	2301      	movs	r3, #1
 8008094:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008096:	4b18      	ldr	r3, [pc, #96]	@ (80080f8 <hci_user_evt_proc+0x98>)
 8008098:	69db      	ldr	r3, [r3, #28]
 800809a:	1d3a      	adds	r2, r7, #4
 800809c:	4610      	mov	r0, r2
 800809e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80080a0:	793a      	ldrb	r2, [r7, #4]
 80080a2:	4b14      	ldr	r3, [pc, #80]	@ (80080f4 <hci_user_evt_proc+0x94>)
 80080a4:	701a      	strb	r2, [r3, #0]
 80080a6:	e002      	b.n	80080ae <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80080a8:	4b12      	ldr	r3, [pc, #72]	@ (80080f4 <hci_user_evt_proc+0x94>)
 80080aa:	2201      	movs	r2, #1
 80080ac:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80080ae:	4b11      	ldr	r3, [pc, #68]	@ (80080f4 <hci_user_evt_proc+0x94>)
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d004      	beq.n	80080c0 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4618      	mov	r0, r3
 80080ba:	f000 fc0d 	bl	80088d8 <TL_MM_EvtDone>
 80080be:	e004      	b.n	80080ca <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	4619      	mov	r1, r3
 80080c4:	480a      	ldr	r0, [pc, #40]	@ (80080f0 <hci_user_evt_proc+0x90>)
 80080c6:	f000 fd25 	bl	8008b14 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80080ca:	4809      	ldr	r0, [pc, #36]	@ (80080f0 <hci_user_evt_proc+0x90>)
 80080cc:	f000 fd00 	bl	8008ad0 <LST_is_empty>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d107      	bne.n	80080e6 <hci_user_evt_proc+0x86>
 80080d6:	4b07      	ldr	r3, [pc, #28]	@ (80080f4 <hci_user_evt_proc+0x94>)
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d003      	beq.n	80080e6 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80080de:	4804      	ldr	r0, [pc, #16]	@ (80080f0 <hci_user_evt_proc+0x90>)
 80080e0:	f001 f860 	bl	80091a4 <hci_notify_asynch_evt>
  }


  return;
 80080e4:	bf00      	nop
 80080e6:	bf00      	nop
}
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	200000a8 	.word	0x200000a8
 80080f4:	200000b4 	.word	0x200000b4
 80080f8:	20000308 	.word	0x20000308

080080fc <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b088      	sub	sp, #32
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	460b      	mov	r3, r1
 8008106:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008108:	2000      	movs	r0, #0
 800810a:	f000 f8d1 	bl	80082b0 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800810e:	2300      	movs	r3, #0
 8008110:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	885b      	ldrh	r3, [r3, #2]
 8008116:	b21b      	sxth	r3, r3
 8008118:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800811c:	b21a      	sxth	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	b21b      	sxth	r3, r3
 8008124:	029b      	lsls	r3, r3, #10
 8008126:	b21b      	sxth	r3, r3
 8008128:	4313      	orrs	r3, r2
 800812a:	b21b      	sxth	r3, r3
 800812c:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800812e:	4b33      	ldr	r3, [pc, #204]	@ (80081fc <hci_send_req+0x100>)
 8008130:	2201      	movs	r2, #1
 8008132:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	b2d9      	uxtb	r1, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689a      	ldr	r2, [r3, #8]
 800813e:	8bbb      	ldrh	r3, [r7, #28]
 8008140:	4618      	mov	r0, r3
 8008142:	f000 f88f 	bl	8008264 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8008146:	e04e      	b.n	80081e6 <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008148:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800814c:	f001 f841 	bl	80091d2 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008150:	e043      	b.n	80081da <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8008152:	f107 030c 	add.w	r3, r7, #12
 8008156:	4619      	mov	r1, r3
 8008158:	4829      	ldr	r0, [pc, #164]	@ (8008200 <hci_send_req+0x104>)
 800815a:	f000 fd48 	bl	8008bee <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	7a5b      	ldrb	r3, [r3, #9]
 8008162:	2b0f      	cmp	r3, #15
 8008164:	d114      	bne.n	8008190 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	330b      	adds	r3, #11
 800816a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	885b      	ldrh	r3, [r3, #2]
 8008170:	b29b      	uxth	r3, r3
 8008172:	8bba      	ldrh	r2, [r7, #28]
 8008174:	429a      	cmp	r2, r3
 8008176:	d104      	bne.n	8008182 <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	693a      	ldr	r2, [r7, #16]
 800817e:	7812      	ldrb	r2, [r2, #0]
 8008180:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	785b      	ldrb	r3, [r3, #1]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d027      	beq.n	80081da <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800818a:	2301      	movs	r3, #1
 800818c:	77fb      	strb	r3, [r7, #31]
 800818e:	e024      	b.n	80081da <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	330b      	adds	r3, #11
 8008194:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800819c:	b29b      	uxth	r3, r3
 800819e:	8bba      	ldrh	r2, [r7, #28]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d114      	bne.n	80081ce <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	7a9b      	ldrb	r3, [r3, #10]
 80081a8:	3b03      	subs	r3, #3
 80081aa:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	695a      	ldr	r2, [r3, #20]
 80081b0:	7dfb      	ldrb	r3, [r7, #23]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	bfa8      	it	ge
 80081b6:	461a      	movge	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6918      	ldr	r0, [r3, #16]
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	1cd9      	adds	r1, r3, #3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	695b      	ldr	r3, [r3, #20]
 80081c8:	461a      	mov	r2, r3
 80081ca:	f002 fc6f 	bl	800aaac <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d001      	beq.n	80081da <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80081d6:	2301      	movs	r3, #1
 80081d8:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80081da:	4809      	ldr	r0, [pc, #36]	@ (8008200 <hci_send_req+0x104>)
 80081dc:	f000 fc78 	bl	8008ad0 <LST_is_empty>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d0b5      	beq.n	8008152 <hci_send_req+0x56>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80081e6:	7ffb      	ldrb	r3, [r7, #31]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d0ad      	beq.n	8008148 <hci_send_req+0x4c>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80081ec:	2001      	movs	r0, #1
 80081ee:	f000 f85f 	bl	80082b0 <NotifyCmdStatus>

  return 0;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3720      	adds	r7, #32
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	20000334 	.word	0x20000334
 8008200:	20000328 	.word	0x20000328

08008204 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800820c:	480f      	ldr	r0, [pc, #60]	@ (800824c <TlInit+0x48>)
 800820e:	f000 fc4f 	bl	8008ab0 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8008212:	4a0f      	ldr	r2, [pc, #60]	@ (8008250 <TlInit+0x4c>)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008218:	480e      	ldr	r0, [pc, #56]	@ (8008254 <TlInit+0x50>)
 800821a:	f000 fc49 	bl	8008ab0 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800821e:	4b0e      	ldr	r3, [pc, #56]	@ (8008258 <TlInit+0x54>)
 8008220:	2201      	movs	r2, #1
 8008222:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8008224:	4b0d      	ldr	r3, [pc, #52]	@ (800825c <TlInit+0x58>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00a      	beq.n	8008242 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008230:	4b0b      	ldr	r3, [pc, #44]	@ (8008260 <TlInit+0x5c>)
 8008232:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008234:	4b09      	ldr	r3, [pc, #36]	@ (800825c <TlInit+0x58>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f107 0208 	add.w	r2, r7, #8
 800823c:	4610      	mov	r0, r2
 800823e:	4798      	blx	r3
  }

  return;
 8008240:	bf00      	nop
 8008242:	bf00      	nop
}
 8008244:	3718      	adds	r7, #24
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	20000328 	.word	0x20000328
 8008250:	200000b0 	.word	0x200000b0
 8008254:	200000a8 	.word	0x200000a8
 8008258:	200000b4 	.word	0x200000b4
 800825c:	20000308 	.word	0x20000308
 8008260:	080082f1 	.word	0x080082f1

08008264 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	603a      	str	r2, [r7, #0]
 800826e:	80fb      	strh	r3, [r7, #6]
 8008270:	460b      	mov	r3, r1
 8008272:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8008274:	4b0c      	ldr	r3, [pc, #48]	@ (80082a8 <SendCmd+0x44>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	88fa      	ldrh	r2, [r7, #6]
 800827a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800827e:	4b0a      	ldr	r3, [pc, #40]	@ (80082a8 <SendCmd+0x44>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	797a      	ldrb	r2, [r7, #5]
 8008284:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8008286:	4b08      	ldr	r3, [pc, #32]	@ (80082a8 <SendCmd+0x44>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	330c      	adds	r3, #12
 800828c:	797a      	ldrb	r2, [r7, #5]
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	4618      	mov	r0, r3
 8008292:	f002 fc0b 	bl	800aaac <memcpy>

  hciContext.io.Send(0,0);
 8008296:	4b05      	ldr	r3, [pc, #20]	@ (80082ac <SendCmd+0x48>)
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	2100      	movs	r1, #0
 800829c:	2000      	movs	r0, #0
 800829e:	4798      	blx	r3

  return;
 80082a0:	bf00      	nop
}
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	200000b0 	.word	0x200000b0
 80082ac:	20000308 	.word	0x20000308

080082b0 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	4603      	mov	r3, r0
 80082b8:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80082ba:	79fb      	ldrb	r3, [r7, #7]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d108      	bne.n	80082d2 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80082c0:	4b0a      	ldr	r3, [pc, #40]	@ (80082ec <NotifyCmdStatus+0x3c>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00d      	beq.n	80082e4 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80082c8:	4b08      	ldr	r3, [pc, #32]	@ (80082ec <NotifyCmdStatus+0x3c>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2000      	movs	r0, #0
 80082ce:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80082d0:	e008      	b.n	80082e4 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80082d2:	4b06      	ldr	r3, [pc, #24]	@ (80082ec <NotifyCmdStatus+0x3c>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d004      	beq.n	80082e4 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80082da:	4b04      	ldr	r3, [pc, #16]	@ (80082ec <NotifyCmdStatus+0x3c>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2001      	movs	r0, #1
 80082e0:	4798      	blx	r3
  return;
 80082e2:	bf00      	nop
 80082e4:	bf00      	nop
}
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	20000330 	.word	0x20000330

080082f0 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	7a5b      	ldrb	r3, [r3, #9]
 80082fc:	2b0f      	cmp	r3, #15
 80082fe:	d003      	beq.n	8008308 <TlEvtReceived+0x18>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	7a5b      	ldrb	r3, [r3, #9]
 8008304:	2b0e      	cmp	r3, #14
 8008306:	d107      	bne.n	8008318 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8008308:	6879      	ldr	r1, [r7, #4]
 800830a:	4809      	ldr	r0, [pc, #36]	@ (8008330 <TlEvtReceived+0x40>)
 800830c:	f000 fc28 	bl	8008b60 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8008310:	2000      	movs	r0, #0
 8008312:	f000 ff53 	bl	80091bc <hci_cmd_resp_release>
 8008316:	e006      	b.n	8008326 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008318:	6879      	ldr	r1, [r7, #4]
 800831a:	4806      	ldr	r0, [pc, #24]	@ (8008334 <TlEvtReceived+0x44>)
 800831c:	f000 fc20 	bl	8008b60 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008320:	4804      	ldr	r0, [pc, #16]	@ (8008334 <TlEvtReceived+0x44>)
 8008322:	f000 ff3f 	bl	80091a4 <hci_notify_asynch_evt>
  }

  return;
 8008326:	bf00      	nop
}
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	20000328 	.word	0x20000328
 8008334:	200000a8 	.word	0x200000a8

08008338 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a05      	ldr	r2, [pc, #20]	@ (8008358 <hci_register_io_bus+0x20>)
 8008344:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a04      	ldr	r2, [pc, #16]	@ (800835c <hci_register_io_bus+0x24>)
 800834a:	611a      	str	r2, [r3, #16]

  return;
 800834c:	bf00      	nop
}
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr
 8008358:	08008651 	.word	0x08008651
 800835c:	080086b9 	.word	0x080086b9

08008360 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	4a08      	ldr	r2, [pc, #32]	@ (8008390 <shci_init+0x30>)
 8008370:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8008372:	4a08      	ldr	r2, [pc, #32]	@ (8008394 <shci_init+0x34>)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8008378:	4806      	ldr	r0, [pc, #24]	@ (8008394 <shci_init+0x34>)
 800837a:	f000 f915 	bl	80085a8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4618      	mov	r0, r3
 8008384:	f000 f898 	bl	80084b8 <TlInit>

  return;
 8008388:	bf00      	nop
}
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	20000358 	.word	0x20000358
 8008394:	20000338 	.word	0x20000338

08008398 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800839e:	4822      	ldr	r0, [pc, #136]	@ (8008428 <shci_user_evt_proc+0x90>)
 80083a0:	f000 fb96 	bl	8008ad0 <LST_is_empty>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d12b      	bne.n	8008402 <shci_user_evt_proc+0x6a>
 80083aa:	4b20      	ldr	r3, [pc, #128]	@ (800842c <shci_user_evt_proc+0x94>)
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d027      	beq.n	8008402 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80083b2:	f107 030c 	add.w	r3, r7, #12
 80083b6:	4619      	mov	r1, r3
 80083b8:	481b      	ldr	r0, [pc, #108]	@ (8008428 <shci_user_evt_proc+0x90>)
 80083ba:	f000 fc18 	bl	8008bee <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80083be:	4b1c      	ldr	r3, [pc, #112]	@ (8008430 <shci_user_evt_proc+0x98>)
 80083c0:	69db      	ldr	r3, [r3, #28]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00c      	beq.n	80083e0 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80083ca:	2301      	movs	r3, #1
 80083cc:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80083ce:	4b18      	ldr	r3, [pc, #96]	@ (8008430 <shci_user_evt_proc+0x98>)
 80083d0:	69db      	ldr	r3, [r3, #28]
 80083d2:	1d3a      	adds	r2, r7, #4
 80083d4:	4610      	mov	r0, r2
 80083d6:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80083d8:	793a      	ldrb	r2, [r7, #4]
 80083da:	4b14      	ldr	r3, [pc, #80]	@ (800842c <shci_user_evt_proc+0x94>)
 80083dc:	701a      	strb	r2, [r3, #0]
 80083de:	e002      	b.n	80083e6 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80083e0:	4b12      	ldr	r3, [pc, #72]	@ (800842c <shci_user_evt_proc+0x94>)
 80083e2:	2201      	movs	r2, #1
 80083e4:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80083e6:	4b11      	ldr	r3, [pc, #68]	@ (800842c <shci_user_evt_proc+0x94>)
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d004      	beq.n	80083f8 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	4618      	mov	r0, r3
 80083f2:	f000 fa71 	bl	80088d8 <TL_MM_EvtDone>
 80083f6:	e004      	b.n	8008402 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	4619      	mov	r1, r3
 80083fc:	480a      	ldr	r0, [pc, #40]	@ (8008428 <shci_user_evt_proc+0x90>)
 80083fe:	f000 fb89 	bl	8008b14 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008402:	4809      	ldr	r0, [pc, #36]	@ (8008428 <shci_user_evt_proc+0x90>)
 8008404:	f000 fb64 	bl	8008ad0 <LST_is_empty>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d107      	bne.n	800841e <shci_user_evt_proc+0x86>
 800840e:	4b07      	ldr	r3, [pc, #28]	@ (800842c <shci_user_evt_proc+0x94>)
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d003      	beq.n	800841e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8008416:	4804      	ldr	r0, [pc, #16]	@ (8008428 <shci_user_evt_proc+0x90>)
 8008418:	f7f8 fa5c 	bl	80008d4 <shci_notify_asynch_evt>
  }


  return;
 800841c:	bf00      	nop
 800841e:	bf00      	nop
}
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	200000b8 	.word	0x200000b8
 800842c:	200000c8 	.word	0x200000c8
 8008430:	20000338 	.word	0x20000338

08008434 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	60ba      	str	r2, [r7, #8]
 800843c:	607b      	str	r3, [r7, #4]
 800843e:	4603      	mov	r3, r0
 8008440:	81fb      	strh	r3, [r7, #14]
 8008442:	460b      	mov	r3, r1
 8008444:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8008446:	2000      	movs	r0, #0
 8008448:	f000 f868 	bl	800851c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800844c:	4b17      	ldr	r3, [pc, #92]	@ (80084ac <shci_send+0x78>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	89fa      	ldrh	r2, [r7, #14]
 8008452:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8008456:	4b15      	ldr	r3, [pc, #84]	@ (80084ac <shci_send+0x78>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	7b7a      	ldrb	r2, [r7, #13]
 800845c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800845e:	4b13      	ldr	r3, [pc, #76]	@ (80084ac <shci_send+0x78>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	330c      	adds	r3, #12
 8008464:	7b7a      	ldrb	r2, [r7, #13]
 8008466:	68b9      	ldr	r1, [r7, #8]
 8008468:	4618      	mov	r0, r3
 800846a:	f002 fb1f 	bl	800aaac <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800846e:	4b10      	ldr	r3, [pc, #64]	@ (80084b0 <shci_send+0x7c>)
 8008470:	2201      	movs	r2, #1
 8008472:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8008474:	4b0f      	ldr	r3, [pc, #60]	@ (80084b4 <shci_send+0x80>)
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	2100      	movs	r1, #0
 800847a:	2000      	movs	r0, #0
 800847c:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800847e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8008482:	f7f8 fa3e 	bl	8000902 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f103 0008 	add.w	r0, r3, #8
 800848c:	4b07      	ldr	r3, [pc, #28]	@ (80084ac <shci_send+0x78>)
 800848e:	6819      	ldr	r1, [r3, #0]
 8008490:	4b06      	ldr	r3, [pc, #24]	@ (80084ac <shci_send+0x78>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	789b      	ldrb	r3, [r3, #2]
 8008496:	3303      	adds	r3, #3
 8008498:	461a      	mov	r2, r3
 800849a:	f002 fb07 	bl	800aaac <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800849e:	2001      	movs	r0, #1
 80084a0:	f000 f83c 	bl	800851c <Cmd_SetStatus>

  return;
 80084a4:	bf00      	nop
}
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	200000c4 	.word	0x200000c4
 80084b0:	2000035c 	.word	0x2000035c
 80084b4:	20000338 	.word	0x20000338

080084b8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80084c0:	4a10      	ldr	r2, [pc, #64]	@ (8008504 <TlInit+0x4c>)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80084c6:	4810      	ldr	r0, [pc, #64]	@ (8008508 <TlInit+0x50>)
 80084c8:	f000 faf2 	bl	8008ab0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80084cc:	2001      	movs	r0, #1
 80084ce:	f000 f825 	bl	800851c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80084d2:	4b0e      	ldr	r3, [pc, #56]	@ (800850c <TlInit+0x54>)
 80084d4:	2201      	movs	r2, #1
 80084d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80084d8:	4b0d      	ldr	r3, [pc, #52]	@ (8008510 <TlInit+0x58>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00c      	beq.n	80084fa <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80084e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008514 <TlInit+0x5c>)
 80084e6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80084e8:	4b0b      	ldr	r3, [pc, #44]	@ (8008518 <TlInit+0x60>)
 80084ea:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80084ec:	4b08      	ldr	r3, [pc, #32]	@ (8008510 <TlInit+0x58>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f107 020c 	add.w	r2, r7, #12
 80084f4:	4610      	mov	r0, r2
 80084f6:	4798      	blx	r3
  }

  return;
 80084f8:	bf00      	nop
 80084fa:	bf00      	nop
}
 80084fc:	3718      	adds	r7, #24
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	200000c4 	.word	0x200000c4
 8008508:	200000b8 	.word	0x200000b8
 800850c:	200000c8 	.word	0x200000c8
 8008510:	20000338 	.word	0x20000338
 8008514:	0800856d 	.word	0x0800856d
 8008518:	08008585 	.word	0x08008585

0800851c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	4603      	mov	r3, r0
 8008524:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8008526:	79fb      	ldrb	r3, [r7, #7]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10b      	bne.n	8008544 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800852c:	4b0d      	ldr	r3, [pc, #52]	@ (8008564 <Cmd_SetStatus+0x48>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d003      	beq.n	800853c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8008534:	4b0b      	ldr	r3, [pc, #44]	@ (8008564 <Cmd_SetStatus+0x48>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2000      	movs	r0, #0
 800853a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800853c:	4b0a      	ldr	r3, [pc, #40]	@ (8008568 <Cmd_SetStatus+0x4c>)
 800853e:	2200      	movs	r2, #0
 8008540:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8008542:	e00b      	b.n	800855c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8008544:	4b08      	ldr	r3, [pc, #32]	@ (8008568 <Cmd_SetStatus+0x4c>)
 8008546:	2201      	movs	r2, #1
 8008548:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800854a:	4b06      	ldr	r3, [pc, #24]	@ (8008564 <Cmd_SetStatus+0x48>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d004      	beq.n	800855c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8008552:	4b04      	ldr	r3, [pc, #16]	@ (8008564 <Cmd_SetStatus+0x48>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2001      	movs	r0, #1
 8008558:	4798      	blx	r3
  return;
 800855a:	bf00      	nop
 800855c:	bf00      	nop
}
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	20000358 	.word	0x20000358
 8008568:	200000c0 	.word	0x200000c0

0800856c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8008574:	2000      	movs	r0, #0
 8008576:	f7f8 f9b9 	bl	80008ec <shci_cmd_resp_release>

  return;
 800857a:	bf00      	nop
}
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
	...

08008584 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800858c:	6879      	ldr	r1, [r7, #4]
 800858e:	4805      	ldr	r0, [pc, #20]	@ (80085a4 <TlUserEvtReceived+0x20>)
 8008590:	f000 fae6 	bl	8008b60 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008594:	4803      	ldr	r0, [pc, #12]	@ (80085a4 <TlUserEvtReceived+0x20>)
 8008596:	f7f8 f99d 	bl	80008d4 <shci_notify_asynch_evt>

  return;
 800859a:	bf00      	nop
}
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	200000b8 	.word	0x200000b8

080085a8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a05      	ldr	r2, [pc, #20]	@ (80085c8 <shci_register_io_bus+0x20>)
 80085b4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a04      	ldr	r2, [pc, #16]	@ (80085cc <shci_register_io_bus+0x24>)
 80085ba:	611a      	str	r2, [r3, #16]

  return;
 80085bc:	bf00      	nop
}
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr
 80085c8:	08008765 	.word	0x08008765
 80085cc:	080087b9 	.word	0x080087b9

080085d0 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80085d4:	f001 fdb8 	bl	800a148 <HW_IPCC_Enable>

  return;
 80085d8:	bf00      	nop
}
 80085da:	bd80      	pop	{r7, pc}

080085dc <TL_Init>:


void TL_Init( void )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80085e0:	4b10      	ldr	r3, [pc, #64]	@ (8008624 <TL_Init+0x48>)
 80085e2:	4a11      	ldr	r2, [pc, #68]	@ (8008628 <TL_Init+0x4c>)
 80085e4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80085e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008624 <TL_Init+0x48>)
 80085e8:	4a10      	ldr	r2, [pc, #64]	@ (800862c <TL_Init+0x50>)
 80085ea:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80085ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008624 <TL_Init+0x48>)
 80085ee:	4a10      	ldr	r2, [pc, #64]	@ (8008630 <TL_Init+0x54>)
 80085f0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80085f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008624 <TL_Init+0x48>)
 80085f4:	4a0f      	ldr	r2, [pc, #60]	@ (8008634 <TL_Init+0x58>)
 80085f6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80085f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008624 <TL_Init+0x48>)
 80085fa:	4a0f      	ldr	r2, [pc, #60]	@ (8008638 <TL_Init+0x5c>)
 80085fc:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80085fe:	4b09      	ldr	r3, [pc, #36]	@ (8008624 <TL_Init+0x48>)
 8008600:	4a0e      	ldr	r2, [pc, #56]	@ (800863c <TL_Init+0x60>)
 8008602:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8008604:	4b07      	ldr	r3, [pc, #28]	@ (8008624 <TL_Init+0x48>)
 8008606:	4a0e      	ldr	r2, [pc, #56]	@ (8008640 <TL_Init+0x64>)
 8008608:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800860a:	4b06      	ldr	r3, [pc, #24]	@ (8008624 <TL_Init+0x48>)
 800860c:	4a0d      	ldr	r2, [pc, #52]	@ (8008644 <TL_Init+0x68>)
 800860e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008610:	4b04      	ldr	r3, [pc, #16]	@ (8008624 <TL_Init+0x48>)
 8008612:	4a0d      	ldr	r2, [pc, #52]	@ (8008648 <TL_Init+0x6c>)
 8008614:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8008616:	4b03      	ldr	r3, [pc, #12]	@ (8008624 <TL_Init+0x48>)
 8008618:	4a0c      	ldr	r2, [pc, #48]	@ (800864c <TL_Init+0x70>)
 800861a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800861c:	f001 fda8 	bl	800a170 <HW_IPCC_Init>

  return;
 8008620:	bf00      	nop
}
 8008622:	bd80      	pop	{r7, pc}
 8008624:	20030000 	.word	0x20030000
 8008628:	20030028 	.word	0x20030028
 800862c:	20030048 	.word	0x20030048
 8008630:	20030058 	.word	0x20030058
 8008634:	20030068 	.word	0x20030068
 8008638:	20030070 	.word	0x20030070
 800863c:	20030078 	.word	0x20030078
 8008640:	20030080 	.word	0x20030080
 8008644:	2003009c 	.word	0x2003009c
 8008648:	200300a0 	.word	0x200300a0
 800864c:	200300ac 	.word	0x200300ac

08008650 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800865c:	4811      	ldr	r0, [pc, #68]	@ (80086a4 <TL_BLE_Init+0x54>)
 800865e:	f000 fa27 	bl	8008ab0 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8008662:	4b11      	ldr	r3, [pc, #68]	@ (80086a8 <TL_BLE_Init+0x58>)
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	689a      	ldr	r2, [r3, #8]
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	68da      	ldr	r2, [r3, #12]
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	4a0c      	ldr	r2, [pc, #48]	@ (80086ac <TL_BLE_Init+0x5c>)
 800867c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	4a08      	ldr	r2, [pc, #32]	@ (80086a4 <TL_BLE_Init+0x54>)
 8008682:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008684:	f001 fd8a 	bl	800a19c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a08      	ldr	r2, [pc, #32]	@ (80086b0 <TL_BLE_Init+0x60>)
 800868e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	4a07      	ldr	r2, [pc, #28]	@ (80086b4 <TL_BLE_Init+0x64>)
 8008696:	6013      	str	r3, [r2, #0]

  return 0;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	200300c8 	.word	0x200300c8
 80086a8:	20030000 	.word	0x20030000
 80086ac:	20030a58 	.word	0x20030a58
 80086b0:	20000368 	.word	0x20000368
 80086b4:	2000036c 	.word	0x2000036c

080086b8 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	460b      	mov	r3, r1
 80086c2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80086c4:	4b09      	ldr	r3, [pc, #36]	@ (80086ec <TL_BLE_SendCmd+0x34>)
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2201      	movs	r2, #1
 80086cc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80086ce:	4b07      	ldr	r3, [pc, #28]	@ (80086ec <TL_BLE_SendCmd+0x34>)
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4619      	mov	r1, r3
 80086d6:	2001      	movs	r0, #1
 80086d8:	f000 f96c 	bl	80089b4 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80086dc:	f001 fd78 	bl	800a1d0 <HW_IPCC_BLE_SendCmd>

  return 0;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3708      	adds	r7, #8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	20030000 	.word	0x20030000

080086f0 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80086f6:	e01c      	b.n	8008732 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80086f8:	1d3b      	adds	r3, r7, #4
 80086fa:	4619      	mov	r1, r3
 80086fc:	4812      	ldr	r0, [pc, #72]	@ (8008748 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80086fe:	f000 fa76 	bl	8008bee <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	7a5b      	ldrb	r3, [r3, #9]
 8008706:	2b0f      	cmp	r3, #15
 8008708:	d003      	beq.n	8008712 <HW_IPCC_BLE_RxEvtNot+0x22>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	7a5b      	ldrb	r3, [r3, #9]
 800870e:	2b0e      	cmp	r3, #14
 8008710:	d105      	bne.n	800871e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4619      	mov	r1, r3
 8008716:	2002      	movs	r0, #2
 8008718:	f000 f94c 	bl	80089b4 <OutputDbgTrace>
 800871c:	e004      	b.n	8008728 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4619      	mov	r1, r3
 8008722:	2003      	movs	r0, #3
 8008724:	f000 f946 	bl	80089b4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008728:	4b08      	ldr	r3, [pc, #32]	@ (800874c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	4610      	mov	r0, r2
 8008730:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8008732:	4805      	ldr	r0, [pc, #20]	@ (8008748 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008734:	f000 f9cc 	bl	8008ad0 <LST_is_empty>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d0dc      	beq.n	80086f8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800873e:	bf00      	nop
}
 8008740:	3708      	adds	r7, #8
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	200300c8 	.word	0x200300c8
 800874c:	20000368 	.word	0x20000368

08008750 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8008754:	4b02      	ldr	r3, [pc, #8]	@ (8008760 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4798      	blx	r3

  return;
 800875a:	bf00      	nop
}
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	2000036c 	.word	0x2000036c

08008764 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008770:	480d      	ldr	r0, [pc, #52]	@ (80087a8 <TL_SYS_Init+0x44>)
 8008772:	f000 f99d 	bl	8008ab0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8008776:	4b0d      	ldr	r3, [pc, #52]	@ (80087ac <TL_SYS_Init+0x48>)
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	689a      	ldr	r2, [r3, #8]
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	4a08      	ldr	r2, [pc, #32]	@ (80087a8 <TL_SYS_Init+0x44>)
 8008788:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800878a:	f001 fd53 	bl	800a234 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a07      	ldr	r2, [pc, #28]	@ (80087b0 <TL_SYS_Init+0x4c>)
 8008794:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	4a06      	ldr	r2, [pc, #24]	@ (80087b4 <TL_SYS_Init+0x50>)
 800879c:	6013      	str	r3, [r2, #0]

  return 0;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	200300d0 	.word	0x200300d0
 80087ac:	20030000 	.word	0x20030000
 80087b0:	20000370 	.word	0x20000370
 80087b4:	20000374 	.word	0x20000374

080087b8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	460b      	mov	r3, r1
 80087c2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80087c4:	4b09      	ldr	r3, [pc, #36]	@ (80087ec <TL_SYS_SendCmd+0x34>)
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2210      	movs	r2, #16
 80087cc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80087ce:	4b07      	ldr	r3, [pc, #28]	@ (80087ec <TL_SYS_SendCmd+0x34>)
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4619      	mov	r1, r3
 80087d6:	2004      	movs	r0, #4
 80087d8:	f000 f8ec 	bl	80089b4 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80087dc:	f001 fd44 	bl	800a268 <HW_IPCC_SYS_SendCmd>

  return 0;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	20030000 	.word	0x20030000

080087f0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80087f4:	4b07      	ldr	r3, [pc, #28]	@ (8008814 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4619      	mov	r1, r3
 80087fc:	2005      	movs	r0, #5
 80087fe:	f000 f8d9 	bl	80089b4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008802:	4b05      	ldr	r3, [pc, #20]	@ (8008818 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a03      	ldr	r2, [pc, #12]	@ (8008814 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008808:	68d2      	ldr	r2, [r2, #12]
 800880a:	6812      	ldr	r2, [r2, #0]
 800880c:	4610      	mov	r0, r2
 800880e:	4798      	blx	r3

  return;
 8008810:	bf00      	nop
}
 8008812:	bd80      	pop	{r7, pc}
 8008814:	20030000 	.word	0x20030000
 8008818:	20000370 	.word	0x20000370

0800881c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008822:	e00e      	b.n	8008842 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8008824:	1d3b      	adds	r3, r7, #4
 8008826:	4619      	mov	r1, r3
 8008828:	480b      	ldr	r0, [pc, #44]	@ (8008858 <HW_IPCC_SYS_EvtNot+0x3c>)
 800882a:	f000 f9e0 	bl	8008bee <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4619      	mov	r1, r3
 8008832:	2006      	movs	r0, #6
 8008834:	f000 f8be 	bl	80089b4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008838:	4b08      	ldr	r3, [pc, #32]	@ (800885c <HW_IPCC_SYS_EvtNot+0x40>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	4610      	mov	r0, r2
 8008840:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008842:	4805      	ldr	r0, [pc, #20]	@ (8008858 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008844:	f000 f944 	bl	8008ad0 <LST_is_empty>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d0ea      	beq.n	8008824 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800884e:	bf00      	nop
}
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	200300d0 	.word	0x200300d0
 800885c:	20000374 	.word	0x20000374

08008860 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008868:	4817      	ldr	r0, [pc, #92]	@ (80088c8 <TL_MM_Init+0x68>)
 800886a:	f000 f921 	bl	8008ab0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800886e:	4817      	ldr	r0, [pc, #92]	@ (80088cc <TL_MM_Init+0x6c>)
 8008870:	f000 f91e 	bl	8008ab0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008874:	4b16      	ldr	r3, [pc, #88]	@ (80088d0 <TL_MM_Init+0x70>)
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	4a16      	ldr	r2, [pc, #88]	@ (80088d4 <TL_MM_Init+0x74>)
 800887a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800887c:	4b15      	ldr	r3, [pc, #84]	@ (80088d4 <TL_MM_Init+0x74>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	6892      	ldr	r2, [r2, #8]
 8008884:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008886:	4b13      	ldr	r3, [pc, #76]	@ (80088d4 <TL_MM_Init+0x74>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	68d2      	ldr	r2, [r2, #12]
 800888e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008890:	4b10      	ldr	r3, [pc, #64]	@ (80088d4 <TL_MM_Init+0x74>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a0c      	ldr	r2, [pc, #48]	@ (80088c8 <TL_MM_Init+0x68>)
 8008896:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008898:	4b0e      	ldr	r3, [pc, #56]	@ (80088d4 <TL_MM_Init+0x74>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	6812      	ldr	r2, [r2, #0]
 80088a0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80088a2:	4b0c      	ldr	r3, [pc, #48]	@ (80088d4 <TL_MM_Init+0x74>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	6852      	ldr	r2, [r2, #4]
 80088aa:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80088ac:	4b09      	ldr	r3, [pc, #36]	@ (80088d4 <TL_MM_Init+0x74>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	6912      	ldr	r2, [r2, #16]
 80088b4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80088b6:	4b07      	ldr	r3, [pc, #28]	@ (80088d4 <TL_MM_Init+0x74>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	6952      	ldr	r2, [r2, #20]
 80088be:	619a      	str	r2, [r3, #24]

  return;
 80088c0:	bf00      	nop
}
 80088c2:	3708      	adds	r7, #8
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	200300b8 	.word	0x200300b8
 80088cc:	20000360 	.word	0x20000360
 80088d0:	20030000 	.word	0x20030000
 80088d4:	20000378 	.word	0x20000378

080088d8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80088e0:	6879      	ldr	r1, [r7, #4]
 80088e2:	4807      	ldr	r0, [pc, #28]	@ (8008900 <TL_MM_EvtDone+0x28>)
 80088e4:	f000 f93c 	bl	8008b60 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80088e8:	6879      	ldr	r1, [r7, #4]
 80088ea:	2000      	movs	r0, #0
 80088ec:	f000 f862 	bl	80089b4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80088f0:	4804      	ldr	r0, [pc, #16]	@ (8008904 <TL_MM_EvtDone+0x2c>)
 80088f2:	f001 fcff 	bl	800a2f4 <HW_IPCC_MM_SendFreeBuf>

  return;
 80088f6:	bf00      	nop
}
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	20000360 	.word	0x20000360
 8008904:	08008909 	.word	0x08008909

08008908 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800890e:	e00c      	b.n	800892a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008910:	1d3b      	adds	r3, r7, #4
 8008912:	4619      	mov	r1, r3
 8008914:	480a      	ldr	r0, [pc, #40]	@ (8008940 <SendFreeBuf+0x38>)
 8008916:	f000 f96a 	bl	8008bee <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800891a:	4b0a      	ldr	r3, [pc, #40]	@ (8008944 <SendFreeBuf+0x3c>)
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	4611      	mov	r1, r2
 8008924:	4618      	mov	r0, r3
 8008926:	f000 f91b 	bl	8008b60 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800892a:	4805      	ldr	r0, [pc, #20]	@ (8008940 <SendFreeBuf+0x38>)
 800892c:	f000 f8d0 	bl	8008ad0 <LST_is_empty>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d0ec      	beq.n	8008910 <SendFreeBuf+0x8>
  }

  return;
 8008936:	bf00      	nop
}
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	20000360 	.word	0x20000360
 8008944:	20030000 	.word	0x20030000

08008948 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800894c:	4805      	ldr	r0, [pc, #20]	@ (8008964 <TL_TRACES_Init+0x1c>)
 800894e:	f000 f8af 	bl	8008ab0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008952:	4b05      	ldr	r3, [pc, #20]	@ (8008968 <TL_TRACES_Init+0x20>)
 8008954:	695b      	ldr	r3, [r3, #20]
 8008956:	4a03      	ldr	r2, [pc, #12]	@ (8008964 <TL_TRACES_Init+0x1c>)
 8008958:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800895a:	f001 fd1d 	bl	800a398 <HW_IPCC_TRACES_Init>

  return;
 800895e:	bf00      	nop
}
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	200300c0 	.word	0x200300c0
 8008968:	20030000 	.word	0x20030000

0800896c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008972:	e008      	b.n	8008986 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008974:	1d3b      	adds	r3, r7, #4
 8008976:	4619      	mov	r1, r3
 8008978:	4808      	ldr	r0, [pc, #32]	@ (800899c <HW_IPCC_TRACES_EvtNot+0x30>)
 800897a:	f000 f938 	bl	8008bee <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4618      	mov	r0, r3
 8008982:	f000 f80d 	bl	80089a0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008986:	4805      	ldr	r0, [pc, #20]	@ (800899c <HW_IPCC_TRACES_EvtNot+0x30>)
 8008988:	f000 f8a2 	bl	8008ad0 <LST_is_empty>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d0f0      	beq.n	8008974 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8008992:	bf00      	nop
}
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	200300c0 	.word	0x200300c0

080089a0 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b087      	sub	sp, #28
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	4603      	mov	r3, r0
 80089bc:	6039      	str	r1, [r7, #0]
 80089be:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 80089c0:	79fb      	ldrb	r3, [r7, #7]
 80089c2:	2b06      	cmp	r3, #6
 80089c4:	d845      	bhi.n	8008a52 <OutputDbgTrace+0x9e>
 80089c6:	a201      	add	r2, pc, #4	@ (adr r2, 80089cc <OutputDbgTrace+0x18>)
 80089c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089cc:	080089e9 	.word	0x080089e9
 80089d0:	08008a0d 	.word	0x08008a0d
 80089d4:	08008a13 	.word	0x08008a13
 80089d8:	08008a27 	.word	0x08008a27
 80089dc:	08008a33 	.word	0x08008a33
 80089e0:	08008a39 	.word	0x08008a39
 80089e4:	08008a47 	.word	0x08008a47
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	7a5b      	ldrb	r3, [r3, #9]
 80089f0:	2bff      	cmp	r3, #255	@ 0xff
 80089f2:	d005      	beq.n	8008a00 <OutputDbgTrace+0x4c>
 80089f4:	2bff      	cmp	r3, #255	@ 0xff
 80089f6:	dc05      	bgt.n	8008a04 <OutputDbgTrace+0x50>
 80089f8:	2b0e      	cmp	r3, #14
 80089fa:	d005      	beq.n	8008a08 <OutputDbgTrace+0x54>
 80089fc:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80089fe:	e001      	b.n	8008a04 <OutputDbgTrace+0x50>
          break;
 8008a00:	bf00      	nop
 8008a02:	e027      	b.n	8008a54 <OutputDbgTrace+0xa0>
          break;
 8008a04:	bf00      	nop
 8008a06:	e025      	b.n	8008a54 <OutputDbgTrace+0xa0>
          break;
 8008a08:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008a0a:	e023      	b.n	8008a54 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008a10:	e020      	b.n	8008a54 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	7a5b      	ldrb	r3, [r3, #9]
 8008a1a:	2b0e      	cmp	r3, #14
 8008a1c:	d001      	beq.n	8008a22 <OutputDbgTrace+0x6e>
 8008a1e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008a20:	e000      	b.n	8008a24 <OutputDbgTrace+0x70>
          break;
 8008a22:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008a24:	e016      	b.n	8008a54 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	7a5b      	ldrb	r3, [r3, #9]
 8008a2e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008a30:	e010      	b.n	8008a54 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008a36:	e00d      	b.n	8008a54 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	785b      	ldrb	r3, [r3, #1]
 8008a40:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8008a42:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008a44:	e006      	b.n	8008a54 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	7a5b      	ldrb	r3, [r3, #9]
 8008a4e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008a50:	e000      	b.n	8008a54 <OutputDbgTrace+0xa0>

    default:
      break;
 8008a52:	bf00      	nop
  }

  return;
 8008a54:	bf00      	nop
}
 8008a56:	371c      	adds	r7, #28
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8008aa8 <OTP_Read+0x48>)
 8008a6c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008a6e:	e002      	b.n	8008a76 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	3b08      	subs	r3, #8
 8008a74:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	3307      	adds	r3, #7
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	79fa      	ldrb	r2, [r7, #7]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d003      	beq.n	8008a8a <OTP_Read+0x2a>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	4a09      	ldr	r2, [pc, #36]	@ (8008aac <OTP_Read+0x4c>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d1f2      	bne.n	8008a70 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	3307      	adds	r3, #7
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	79fa      	ldrb	r2, [r7, #7]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d001      	beq.n	8008a9a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008a96:	2300      	movs	r3, #0
 8008a98:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3714      	adds	r7, #20
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	1fff73f8 	.word	0x1fff73f8
 8008aac:	1fff7000 	.word	0x1fff7000

08008ab0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	605a      	str	r2, [r3, #4]
}
 8008ac4:	bf00      	nop
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b087      	sub	sp, #28
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8008adc:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ade:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008ae0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ae2:	b672      	cpsid	i
}
 8008ae4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d102      	bne.n	8008af6 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008af0:	2301      	movs	r3, #1
 8008af2:	75fb      	strb	r3, [r7, #23]
 8008af4:	e001      	b.n	8008afa <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8008af6:	2300      	movs	r3, #0
 8008af8:	75fb      	strb	r3, [r7, #23]
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	f383 8810 	msr	PRIMASK, r3
}
 8008b04:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8008b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	371c      	adds	r7, #28
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b087      	sub	sp, #28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8008b22:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b24:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008b26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b28:	b672      	cpsid	i
}
 8008b2a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	683a      	ldr	r2, [r7, #0]
 8008b46:	605a      	str	r2, [r3, #4]
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	f383 8810 	msr	PRIMASK, r3
}
 8008b52:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008b54:	bf00      	nop
 8008b56:	371c      	adds	r7, #28
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b087      	sub	sp, #28
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8008b6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b70:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008b72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b74:	b672      	cpsid	i
}
 8008b76:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	685a      	ldr	r2, [r3, #4]
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	601a      	str	r2, [r3, #0]
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	f383 8810 	msr	PRIMASK, r3
}
 8008b9e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008ba0:	bf00      	nop
 8008ba2:	371c      	adds	r7, #28
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b087      	sub	sp, #28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8008bb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008bbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008bbe:	b672      	cpsid	i
}
 8008bc0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	6812      	ldr	r2, [r2, #0]
 8008bca:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	6852      	ldr	r2, [r2, #4]
 8008bd4:	605a      	str	r2, [r3, #4]
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	f383 8810 	msr	PRIMASK, r3
}
 8008be0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008be2:	bf00      	nop
 8008be4:	371c      	adds	r7, #28
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr

08008bee <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b086      	sub	sp, #24
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
 8008bf6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8008bfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008c00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c02:	b672      	cpsid	i
}
 8008c04:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7ff ffca 	bl	8008bac <LST_remove_node>
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	f383 8810 	msr	PRIMASK, r3
}
 8008c22:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008c24:	bf00      	nop
 8008c26:	3718      	adds	r7, #24
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8008c30:	4b03      	ldr	r3, [pc, #12]	@ (8008c40 <LL_FLASH_GetUDN+0x14>)
 8008c32:	681b      	ldr	r3, [r3, #0]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	1fff7580 	.word	0x1fff7580

08008c44 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8008c44:	b480      	push	{r7}
 8008c46:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8008c48:	4b03      	ldr	r3, [pc, #12]	@ (8008c58 <LL_FLASH_GetDeviceID+0x14>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	b2db      	uxtb	r3, r3
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr
 8008c58:	1fff7584 	.word	0x1fff7584

08008c5c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8008c60:	4b03      	ldr	r3, [pc, #12]	@ (8008c70 <LL_FLASH_GetSTCompanyID+0x14>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	0a1b      	lsrs	r3, r3, #8
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	1fff7584 	.word	0x1fff7584

08008c74 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8008c74:	b5b0      	push	{r4, r5, r7, lr}
 8008c76:	b090      	sub	sp, #64	@ 0x40
 8008c78:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008c7a:	2392      	movs	r3, #146	@ 0x92
 8008c7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1<<CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 8008c80:	4a29      	ldr	r2, [pc, #164]	@ (8008d28 <APP_BLE_Init+0xb4>)
 8008c82:	2100      	movs	r1, #0
 8008c84:	2004      	movs	r0, #4
 8008c86:	f001 fceb 	bl	800a660 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1<<CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	2004      	movs	r0, #4
 8008c8e:	f001 fd09 	bl	800a6a4 <UTIL_SEQ_SetTask>

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8008c92:	4b26      	ldr	r3, [pc, #152]	@ (8008d2c <APP_BLE_Init+0xb8>)
 8008c94:	1d3c      	adds	r4, r7, #4
 8008c96:	461d      	mov	r5, r3
 8008c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ca4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008ca8:	c403      	stmia	r4!, {r0, r1}
 8008caa:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8008cac:	f000 f922 	bl	8008ef4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8008cb0:	2101      	movs	r1, #1
 8008cb2:	2002      	movs	r0, #2
 8008cb4:	f001 fba8 	bl	800a408 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8008cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8008d30 <APP_BLE_Init+0xbc>)
 8008cba:	2100      	movs	r1, #0
 8008cbc:	2002      	movs	r0, #2
 8008cbe:	f001 fccf 	bl	800a660 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8008cc2:	1d3b      	adds	r3, r7, #4
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7ff f8bd 	bl	8007e44 <SHCI_C2_BLE_Init>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8008cd0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d001      	beq.n	8008cdc <APP_BLE_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8008cd8:	f7f8 fda7 	bl	800182a <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8008cdc:	f000 f920 	bl	8008f20 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8008ce0:	f7ff f80a 	bl	8007cf8 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008ce4:	4b13      	ldr	r3, [pc, #76]	@ (8008d34 <APP_BLE_Init+0xc0>)
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8008cec:	4b11      	ldr	r3, [pc, #68]	@ (8008d34 <APP_BLE_Init+0xc0>)
 8008cee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008cf2:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8008cf4:	4a10      	ldr	r2, [pc, #64]	@ (8008d38 <APP_BLE_Init+0xc4>)
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	2001      	movs	r0, #1
 8008cfa:	f001 fcb1 	bl	800a660 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8008cfe:	2006      	movs	r0, #6
 8008d00:	f7fe fe6e 	bl	80079e0 <aci_hal_set_radio_activity_mask>
 8008d04:	4603      	mov	r3, r0
 8008d06:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8008d0a:	f000 fbaf 	bl	800946c <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8008d0e:	4b09      	ldr	r3, [pc, #36]	@ (8008d34 <APP_BLE_Init+0xc0>)
 8008d10:	2200      	movs	r2, #0
 8008d12:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8008d14:	4b07      	ldr	r3, [pc, #28]	@ (8008d34 <APP_BLE_Init+0xc0>)
 8008d16:	2200      	movs	r2, #0
 8008d18:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8008d1a:	2001      	movs	r0, #1
 8008d1c:	f000 f9b4 	bl	8009088 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8008d20:	bf00      	nop
}
 8008d22:	3740      	adds	r7, #64	@ 0x40
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bdb0      	pop	{r4, r5, r7, pc}
 8008d28:	08009299 	.word	0x08009299
 8008d2c:	0800ab28 	.word	0x0800ab28
 8008d30:	08008061 	.word	0x08008061
 8008d34:	20000384 	.word	0x20000384
 8008d38:	08009171 	.word	0x08009171

08008d3c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b08c      	sub	sp, #48	@ 0x30
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8008d44:	2392      	movs	r3, #146	@ 0x92
 8008d46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8008d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	2bff      	cmp	r3, #255	@ 0xff
 8008d56:	d05c      	beq.n	8008e12 <SVCCTL_App_Notification+0xd6>
 8008d58:	2bff      	cmp	r3, #255	@ 0xff
 8008d5a:	f300 80bd 	bgt.w	8008ed8 <SVCCTL_App_Notification+0x19c>
 8008d5e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d60:	d02b      	beq.n	8008dba <SVCCTL_App_Notification+0x7e>
 8008d62:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d64:	f300 80b8 	bgt.w	8008ed8 <SVCCTL_App_Notification+0x19c>
 8008d68:	2b05      	cmp	r3, #5
 8008d6a:	d002      	beq.n	8008d72 <SVCCTL_App_Notification+0x36>
 8008d6c:	2b10      	cmp	r3, #16
 8008d6e:	d020      	beq.n	8008db2 <SVCCTL_App_Notification+0x76>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8008d70:	e0b2      	b.n	8008ed8 <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8008d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d74:	3302      	adds	r3, #2
 8008d76:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	4b59      	ldr	r3, [pc, #356]	@ (8008ee8 <SVCCTL_App_Notification+0x1ac>)
 8008d82:	8adb      	ldrh	r3, [r3, #22]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d106      	bne.n	8008d96 <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8008d88:	4b57      	ldr	r3, [pc, #348]	@ (8008ee8 <SVCCTL_App_Notification+0x1ac>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008d8e:	4b56      	ldr	r3, [pc, #344]	@ (8008ee8 <SVCCTL_App_Notification+0x1ac>)
 8008d90:	2200      	movs	r2, #0
 8008d92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8008d96:	2001      	movs	r0, #1
 8008d98:	f000 f976 	bl	8009088 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8008d9c:	4b53      	ldr	r3, [pc, #332]	@ (8008eec <SVCCTL_App_Notification+0x1b0>)
 8008d9e:	2201      	movs	r2, #1
 8008da0:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008da2:	4b51      	ldr	r3, [pc, #324]	@ (8008ee8 <SVCCTL_App_Notification+0x1ac>)
 8008da4:	8ada      	ldrh	r2, [r3, #22]
 8008da6:	4b51      	ldr	r3, [pc, #324]	@ (8008eec <SVCCTL_App_Notification+0x1b0>)
 8008da8:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8008daa:	4850      	ldr	r0, [pc, #320]	@ (8008eec <SVCCTL_App_Notification+0x1b0>)
 8008dac:	f000 fb4a 	bl	8009444 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8008db0:	e095      	b.n	8008ede <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 8008db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db4:	3302      	adds	r3, #2
 8008db6:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 8008db8:	e091      	b.n	8008ede <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8008dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbc:	3302      	adds	r3, #2
 8008dbe:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d001      	beq.n	8008dcc <SVCCTL_App_Notification+0x90>
 8008dc8:	2b03      	cmp	r3, #3
          break;
 8008dca:	e021      	b.n	8008e10 <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8008dd2:	4b45      	ldr	r3, [pc, #276]	@ (8008ee8 <SVCCTL_App_Notification+0x1ac>)
 8008dd4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008dd8:	2b04      	cmp	r3, #4
 8008dda:	d104      	bne.n	8008de6 <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8008ddc:	4b42      	ldr	r3, [pc, #264]	@ (8008ee8 <SVCCTL_App_Notification+0x1ac>)
 8008dde:	2206      	movs	r2, #6
 8008de0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8008de4:	e003      	b.n	8008dee <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8008de6:	4b40      	ldr	r3, [pc, #256]	@ (8008ee8 <SVCCTL_App_Notification+0x1ac>)
 8008de8:	2205      	movs	r2, #5
 8008dea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	4b3c      	ldr	r3, [pc, #240]	@ (8008ee8 <SVCCTL_App_Notification+0x1ac>)
 8008df8:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8008dfa:	4b3c      	ldr	r3, [pc, #240]	@ (8008eec <SVCCTL_App_Notification+0x1b0>)
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008e00:	4b39      	ldr	r3, [pc, #228]	@ (8008ee8 <SVCCTL_App_Notification+0x1ac>)
 8008e02:	8ada      	ldrh	r2, [r3, #22]
 8008e04:	4b39      	ldr	r3, [pc, #228]	@ (8008eec <SVCCTL_App_Notification+0x1b0>)
 8008e06:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8008e08:	4838      	ldr	r0, [pc, #224]	@ (8008eec <SVCCTL_App_Notification+0x1b0>)
 8008e0a:	f000 fb1b 	bl	8009444 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8008e0e:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8008e10:	e065      	b.n	8008ede <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8008e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e14:	3302      	adds	r3, #2
 8008e16:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 8008e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e1a:	881b      	ldrh	r3, [r3, #0]
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d048      	beq.n	8008eb8 <SVCCTL_App_Notification+0x17c>
 8008e26:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	dc56      	bgt.n	8008edc <SVCCTL_App_Notification+0x1a0>
 8008e2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e32:	d04b      	beq.n	8008ecc <SVCCTL_App_Notification+0x190>
 8008e34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e38:	dc50      	bgt.n	8008edc <SVCCTL_App_Notification+0x1a0>
 8008e3a:	f240 420a 	movw	r2, #1034	@ 0x40a
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	dc4c      	bgt.n	8008edc <SVCCTL_App_Notification+0x1a0>
 8008e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e46:	dc04      	bgt.n	8008e52 <SVCCTL_App_Notification+0x116>
 8008e48:	2b04      	cmp	r3, #4
 8008e4a:	d041      	beq.n	8008ed0 <SVCCTL_App_Notification+0x194>
 8008e4c:	2b06      	cmp	r3, #6
 8008e4e:	d039      	beq.n	8008ec4 <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008e50:	e044      	b.n	8008edc <SVCCTL_App_Notification+0x1a0>
      switch (p_blecore_evt->ecode)
 8008e52:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8008e56:	2b09      	cmp	r3, #9
 8008e58:	d840      	bhi.n	8008edc <SVCCTL_App_Notification+0x1a0>
 8008e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e60 <SVCCTL_App_Notification+0x124>)
 8008e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e60:	08008eb1 	.word	0x08008eb1
 8008e64:	08008e89 	.word	0x08008e89
 8008e68:	08008edd 	.word	0x08008edd
 8008e6c:	08008edd 	.word	0x08008edd
 8008e70:	08008edd 	.word	0x08008edd
 8008e74:	08008edd 	.word	0x08008edd
 8008e78:	08008ed5 	.word	0x08008ed5
 8008e7c:	08008edd 	.word	0x08008edd
 8008e80:	08008e9d 	.word	0x08008e9d
 8008e84:	08008ed5 	.word	0x08008ed5
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8008e88:	4b17      	ldr	r3, [pc, #92]	@ (8008ee8 <SVCCTL_App_Notification+0x1ac>)
 8008e8a:	8adb      	ldrh	r3, [r3, #22]
 8008e8c:	4918      	ldr	r1, [pc, #96]	@ (8008ef0 <SVCCTL_App_Notification+0x1b4>)
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fd ffa8 	bl	8006de4 <aci_gap_pass_key_resp>
 8008e94:	4603      	mov	r3, r0
 8008e96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8008e9a:	e01c      	b.n	8008ed6 <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8008e9c:	4b12      	ldr	r3, [pc, #72]	@ (8008ee8 <SVCCTL_App_Notification+0x1ac>)
 8008e9e:	8adb      	ldrh	r3, [r3, #22]
 8008ea0:	2101      	movs	r1, #1
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7fe f948 	bl	8007138 <aci_gap_numeric_comparison_value_confirm_yesno>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8008eae:	e012      	b.n	8008ed6 <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb2:	3302      	adds	r3, #2
 8008eb4:	623b      	str	r3, [r7, #32]
          break;
 8008eb6:	e00e      	b.n	8008ed6 <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8008eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8008ee8 <SVCCTL_App_Notification+0x1ac>)
 8008eba:	8adb      	ldrh	r3, [r3, #22]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7fe fc4e 	bl	800775e <aci_gatt_confirm_indication>
        break;
 8008ec2:	e008      	b.n	8008ed6 <SVCCTL_App_Notification+0x19a>
	      p_warning_event = (aci_hal_warning_event_rp0 *)p_blecore_evt->data;
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec6:	3302      	adds	r3, #2
 8008ec8:	61fb      	str	r3, [r7, #28]
          break;
 8008eca:	e004      	b.n	8008ed6 <SVCCTL_App_Notification+0x19a>
          break;
 8008ecc:	bf00      	nop
 8008ece:	e005      	b.n	8008edc <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8008ed0:	bf00      	nop
 8008ed2:	e003      	b.n	8008edc <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8008ed4:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008ed6:	e001      	b.n	8008edc <SVCCTL_App_Notification+0x1a0>
      break;
 8008ed8:	bf00      	nop
 8008eda:	e000      	b.n	8008ede <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008edc:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8008ede:	2301      	movs	r3, #1
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3730      	adds	r7, #48	@ 0x30
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	20000384 	.word	0x20000384
 8008eec:	20000408 	.word	0x20000408
 8008ef0:	0001b207 	.word	0x0001b207

08008ef4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8008efa:	4b06      	ldr	r3, [pc, #24]	@ (8008f14 <Ble_Tl_Init+0x20>)
 8008efc:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8008efe:	4b06      	ldr	r3, [pc, #24]	@ (8008f18 <Ble_Tl_Init+0x24>)
 8008f00:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8008f02:	463b      	mov	r3, r7
 8008f04:	4619      	mov	r1, r3
 8008f06:	4805      	ldr	r0, [pc, #20]	@ (8008f1c <Ble_Tl_Init+0x28>)
 8008f08:	f7ff f88e 	bl	8008028 <hci_init>

  return;
 8008f0c:	bf00      	nop
}
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	200300d8 	.word	0x200300d8
 8008f18:	08009221 	.word	0x08009221
 8008f1c:	080091e9 	.word	0x080091e9

08008f20 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8008f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f22:	b08d      	sub	sp, #52	@ 0x34
 8008f24:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8008f26:	2300      	movs	r3, #0
 8008f28:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008f2a:	2392      	movs	r3, #146	@ 0x92
 8008f2c:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8008f2e:	f7fe fdab 	bl	8007a88 <hci_reset>
 8008f32:	4603      	mov	r3, r0
 8008f34:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8008f36:	f000 f8d7 	bl	80090e8 <BleGetBdAddress>
 8008f3a:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, CONFIG_DATA_PUBLIC_ADDRESS_LEN, (uint8_t*) p_bd_addr);
 8008f3c:	693a      	ldr	r2, [r7, #16]
 8008f3e:	2106      	movs	r1, #6
 8008f40:	2000      	movs	r0, #0
 8008f42:	f7fe fc61 	bl	8007808 <aci_hal_write_config_data>
 8008f46:	4603      	mov	r3, r0
 8008f48:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8008f4a:	4a4a      	ldr	r2, [pc, #296]	@ (8009074 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8008f4c:	2110      	movs	r1, #16
 8008f4e:	2018      	movs	r0, #24
 8008f50:	f7fe fc5a 	bl	8007808 <aci_hal_write_config_data>
 8008f54:	4603      	mov	r3, r0
 8008f56:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8008f58:	4a47      	ldr	r2, [pc, #284]	@ (8009078 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8008f5a:	2110      	movs	r1, #16
 8008f5c:	2008      	movs	r0, #8
 8008f5e:	f7fe fc53 	bl	8007808 <aci_hal_write_config_data>
 8008f62:	4603      	mov	r3, r0
 8008f64:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8008f66:	2118      	movs	r1, #24
 8008f68:	2001      	movs	r0, #1
 8008f6a:	f7fe fcd2 	bl	8007912 <aci_hal_set_tx_power_level>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8008f72:	f7fe f948 	bl	8007206 <aci_gatt_init>
 8008f76:	4603      	mov	r3, r0
 8008f78:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
 8008f80:	f043 0301 	orr.w	r3, r3, #1
 8008f84:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8008f86:	7bfb      	ldrb	r3, [r7, #15]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d01f      	beq.n	8008fcc <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8008f8c:	4b3b      	ldr	r3, [pc, #236]	@ (800907c <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8008f8e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8008f90:	1dba      	adds	r2, r7, #6
 8008f92:	7bf8      	ldrb	r0, [r7, #15]
 8008f94:	1cbb      	adds	r3, r7, #2
 8008f96:	9301      	str	r3, [sp, #4]
 8008f98:	1d3b      	adds	r3, r7, #4
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	2208      	movs	r2, #8
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	f7fd ff86 	bl	8006eb2 <aci_gap_init>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8008faa:	88fc      	ldrh	r4, [r7, #6]
 8008fac:	88bd      	ldrh	r5, [r7, #4]
 8008fae:	68b8      	ldr	r0, [r7, #8]
 8008fb0:	f7f7 f8e4 	bl	800017c <strlen>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	4629      	mov	r1, r5
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f7fe fb22 	bl	800760c <aci_gatt_update_char_value>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8008fcc:	88f8      	ldrh	r0, [r7, #6]
 8008fce:	8879      	ldrh	r1, [r7, #2]
 8008fd0:	463b      	mov	r3, r7
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	2302      	movs	r3, #2
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f7fe fb18 	bl	800760c <aci_gatt_update_char_value>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8008fe0:	2202      	movs	r2, #2
 8008fe2:	2102      	movs	r1, #2
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	f7fe fd73 	bl	8007ad0 <hci_le_set_default_phy>
 8008fea:	4603      	mov	r3, r0
 8008fec:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8008fee:	4b24      	ldr	r3, [pc, #144]	@ (8009080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8008ff4:	4b22      	ldr	r3, [pc, #136]	@ (8009080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7fd fddb 	bl	8006bb4 <aci_gap_set_io_capability>
 8008ffe:	4603      	mov	r3, r0
 8009000:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8009002:	4b1f      	ldr	r3, [pc, #124]	@ (8009080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009004:	2201      	movs	r2, #1
 8009006:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8009008:	4b1d      	ldr	r3, [pc, #116]	@ (8009080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800900a:	2208      	movs	r2, #8
 800900c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800900e:	4b1c      	ldr	r3, [pc, #112]	@ (8009080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009010:	2210      	movs	r2, #16
 8009012:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8009014:	4b1a      	ldr	r3, [pc, #104]	@ (8009080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009016:	2200      	movs	r2, #0
 8009018:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800901a:	4b19      	ldr	r3, [pc, #100]	@ (8009080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800901c:	4a19      	ldr	r2, [pc, #100]	@ (8009084 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800901e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8009020:	4b17      	ldr	r3, [pc, #92]	@ (8009080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009022:	2201      	movs	r2, #1
 8009024:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8009026:	4b16      	ldr	r3, [pc, #88]	@ (8009080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009028:	789c      	ldrb	r4, [r3, #2]
 800902a:	4b15      	ldr	r3, [pc, #84]	@ (8009080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800902c:	785d      	ldrb	r5, [r3, #1]
 800902e:	4b14      	ldr	r3, [pc, #80]	@ (8009080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009030:	791b      	ldrb	r3, [r3, #4]
 8009032:	4a13      	ldr	r2, [pc, #76]	@ (8009080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009034:	7952      	ldrb	r2, [r2, #5]
 8009036:	4912      	ldr	r1, [pc, #72]	@ (8009080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009038:	78c9      	ldrb	r1, [r1, #3]
 800903a:	4811      	ldr	r0, [pc, #68]	@ (8009080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800903c:	6880      	ldr	r0, [r0, #8]
 800903e:	2600      	movs	r6, #0
 8009040:	9604      	str	r6, [sp, #16]
 8009042:	9003      	str	r0, [sp, #12]
 8009044:	9102      	str	r1, [sp, #8]
 8009046:	9201      	str	r2, [sp, #4]
 8009048:	9300      	str	r3, [sp, #0]
 800904a:	2300      	movs	r3, #0
 800904c:	2201      	movs	r2, #1
 800904e:	4629      	mov	r1, r5
 8009050:	4620      	mov	r0, r4
 8009052:	f7fd fe03 	bl	8006c5c <aci_gap_set_authentication_requirement>
 8009056:	4603      	mov	r3, r0
 8009058:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800905a:	4b09      	ldr	r3, [pc, #36]	@ (8009080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800905c:	789b      	ldrb	r3, [r3, #2]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d003      	beq.n	800906a <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8009062:	f7fe f845 	bl	80070f0 <aci_gap_configure_filter_accept_list>
 8009066:	4603      	mov	r3, r0
 8009068:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800906a:	bf00      	nop
 800906c:	371c      	adds	r7, #28
 800906e:	46bd      	mov	sp, r7
 8009070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009072:	bf00      	nop
 8009074:	0800ad70 	.word	0x0800ad70
 8009078:	0800ad80 	.word	0x0800ad80
 800907c:	0800ab64 	.word	0x0800ab64
 8009080:	20000384 	.word	0x20000384
 8009084:	0001b207 	.word	0x0001b207

08009088 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b08c      	sub	sp, #48	@ 0x30
 800908c:	af08      	add	r7, sp, #32
 800908e:	4603      	mov	r3, r0
 8009090:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009092:	2392      	movs	r3, #146	@ 0x92
 8009094:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8009096:	4a12      	ldr	r2, [pc, #72]	@ (80090e0 <Adv_Request+0x58>)
 8009098:	79fb      	ldrb	r3, [r7, #7]
 800909a:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800909e:	2300      	movs	r3, #0
 80090a0:	9306      	str	r3, [sp, #24]
 80090a2:	2300      	movs	r3, #0
 80090a4:	9305      	str	r3, [sp, #20]
 80090a6:	2300      	movs	r3, #0
 80090a8:	9304      	str	r3, [sp, #16]
 80090aa:	2300      	movs	r3, #0
 80090ac:	9303      	str	r3, [sp, #12]
 80090ae:	2300      	movs	r3, #0
 80090b0:	9302      	str	r3, [sp, #8]
 80090b2:	2300      	movs	r3, #0
 80090b4:	9301      	str	r3, [sp, #4]
 80090b6:	2300      	movs	r3, #0
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	2300      	movs	r3, #0
 80090bc:	22a0      	movs	r2, #160	@ 0xa0
 80090be:	2180      	movs	r1, #128	@ 0x80
 80090c0:	2000      	movs	r0, #0
 80090c2:	f7fd fc7d 	bl	80069c0 <aci_gap_set_discoverable>
 80090c6:	4603      	mov	r3, r0
 80090c8:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80090ca:	4906      	ldr	r1, [pc, #24]	@ (80090e4 <Adv_Request+0x5c>)
 80090cc:	200e      	movs	r0, #14
 80090ce:	f7fd ff9d 	bl	800700c <aci_gap_update_adv_data>
 80090d2:	4603      	mov	r3, r0
 80090d4:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80090d6:	bf00      	nop
}
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	20000384 	.word	0x20000384
 80090e4:	20000014 	.word	0x20000014

080090e8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80090ee:	f7ff fd9d 	bl	8008c2c <LL_FLASH_GetUDN>
 80090f2:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090fa:	d023      	beq.n	8009144 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80090fc:	f7ff fdae 	bl	8008c5c <LL_FLASH_GetSTCompanyID>
 8009100:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8009102:	f7ff fd9f 	bl	8008c44 <LL_FLASH_GetDeviceID>
 8009106:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	b2da      	uxtb	r2, r3
 800910c:	4b16      	ldr	r3, [pc, #88]	@ (8009168 <BleGetBdAddress+0x80>)
 800910e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	0a1b      	lsrs	r3, r3, #8
 8009114:	b2da      	uxtb	r2, r3
 8009116:	4b14      	ldr	r3, [pc, #80]	@ (8009168 <BleGetBdAddress+0x80>)
 8009118:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	b2da      	uxtb	r2, r3
 800911e:	4b12      	ldr	r3, [pc, #72]	@ (8009168 <BleGetBdAddress+0x80>)
 8009120:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	b2da      	uxtb	r2, r3
 8009126:	4b10      	ldr	r3, [pc, #64]	@ (8009168 <BleGetBdAddress+0x80>)
 8009128:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	0a1b      	lsrs	r3, r3, #8
 800912e:	b2da      	uxtb	r2, r3
 8009130:	4b0d      	ldr	r3, [pc, #52]	@ (8009168 <BleGetBdAddress+0x80>)
 8009132:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	0c1b      	lsrs	r3, r3, #16
 8009138:	b2da      	uxtb	r2, r3
 800913a:	4b0b      	ldr	r3, [pc, #44]	@ (8009168 <BleGetBdAddress+0x80>)
 800913c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800913e:	4b0a      	ldr	r3, [pc, #40]	@ (8009168 <BleGetBdAddress+0x80>)
 8009140:	617b      	str	r3, [r7, #20]
 8009142:	e00b      	b.n	800915c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8009144:	2000      	movs	r0, #0
 8009146:	f7ff fc8b 	bl	8008a60 <OTP_Read>
 800914a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d002      	beq.n	8009158 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	617b      	str	r3, [r7, #20]
 8009156:	e001      	b.n	800915c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8009158:	4b04      	ldr	r3, [pc, #16]	@ (800916c <BleGetBdAddress+0x84>)
 800915a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800915c:	697b      	ldr	r3, [r7, #20]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3718      	adds	r7, #24
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	2000037c 	.word	0x2000037c
 800916c:	0800ad68 	.word	0x0800ad68

08009170 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8009176:	4b0a      	ldr	r3, [pc, #40]	@ (80091a0 <Adv_Cancel+0x30>)
 8009178:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800917c:	2b05      	cmp	r3, #5
 800917e:	d00a      	beq.n	8009196 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009180:	2392      	movs	r3, #146	@ 0x92
 8009182:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8009184:	f7fd fbf8 	bl	8006978 <aci_gap_set_non_discoverable>
 8009188:	4603      	mov	r3, r0
 800918a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800918c:	4b04      	ldr	r3, [pc, #16]	@ (80091a0 <Adv_Cancel+0x30>)
 800918e:	2200      	movs	r2, #0
 8009190:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8009194:	bf00      	nop
 8009196:	bf00      	nop
}
 8009198:	3708      	adds	r7, #8
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	20000384 	.word	0x20000384

080091a4 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80091ac:	2100      	movs	r1, #0
 80091ae:	2002      	movs	r0, #2
 80091b0:	f001 fa78 	bl	800a6a4 <UTIL_SEQ_SetTask>

  return;
 80091b4:	bf00      	nop
}
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80091c4:	2001      	movs	r0, #1
 80091c6:	f001 fad9 	bl	800a77c <UTIL_SEQ_SetEvt>

  return;
 80091ca:	bf00      	nop
}
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b082      	sub	sp, #8
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80091da:	2001      	movs	r0, #1
 80091dc:	f001 faee 	bl	800a7bc <UTIL_SEQ_WaitEvt>

  return;
 80091e0:	bf00      	nop
}
 80091e2:	3708      	adds	r7, #8
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	3308      	adds	r3, #8
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fe fdce 	bl	8007d9c <SVCCTL_UserEvtRx>
 8009200:	4603      	mov	r3, r0
 8009202:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8009204:	7afb      	ldrb	r3, [r7, #11]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d003      	beq.n	8009212 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2201      	movs	r2, #1
 800920e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8009210:	e003      	b.n	800921a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2200      	movs	r2, #0
 8009216:	701a      	strb	r2, [r3, #0]
  return;
 8009218:	bf00      	nop
}
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	4603      	mov	r3, r0
 8009228:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800922a:	79fb      	ldrb	r3, [r7, #7]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d002      	beq.n	8009236 <BLE_StatusNot+0x16>
 8009230:	2b01      	cmp	r3, #1
 8009232:	d006      	beq.n	8009242 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8009234:	e00b      	b.n	800924e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8009236:	2307      	movs	r3, #7
 8009238:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800923a:	68f8      	ldr	r0, [r7, #12]
 800923c:	f001 fa5e 	bl	800a6fc <UTIL_SEQ_PauseTask>
      break;
 8009240:	e005      	b.n	800924e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8009242:	2307      	movs	r3, #7
 8009244:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	f001 fa78 	bl	800a73c <UTIL_SEQ_ResumeTask>
      break;
 800924c:	bf00      	nop
  }

  return;
 800924e:	bf00      	nop
}
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <ble_calculate_chksum>:

#include "ble_custom_utils.h"



uint8_t ble_calculate_chksum(uint8_t *pck, uint8_t length){
 8009256:	b480      	push	{r7}
 8009258:	b085      	sub	sp, #20
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	460b      	mov	r3, r1
 8009260:	70fb      	strb	r3, [r7, #3]
	uint8_t chksum=0x00;
 8009262:	2300      	movs	r3, #0
 8009264:	73fb      	strb	r3, [r7, #15]
	uint16_t i;


	for(i=0; i<length; i++){
 8009266:	2300      	movs	r3, #0
 8009268:	81bb      	strh	r3, [r7, #12]
 800926a:	e009      	b.n	8009280 <ble_calculate_chksum+0x2a>
		chksum= (*(pck+i)) +chksum;
 800926c:	89bb      	ldrh	r3, [r7, #12]
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	4413      	add	r3, r2
 8009272:	781a      	ldrb	r2, [r3, #0]
 8009274:	7bfb      	ldrb	r3, [r7, #15]
 8009276:	4413      	add	r3, r2
 8009278:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<length; i++){
 800927a:	89bb      	ldrh	r3, [r7, #12]
 800927c:	3301      	adds	r3, #1
 800927e:	81bb      	strh	r3, [r7, #12]
 8009280:	78fb      	ldrb	r3, [r7, #3]
 8009282:	b29b      	uxth	r3, r3
 8009284:	89ba      	ldrh	r2, [r7, #12]
 8009286:	429a      	cmp	r2, r3
 8009288:	d3f0      	bcc.n	800926c <ble_calculate_chksum+0x16>
	}

	return chksum;
 800928a:	7bfb      	ldrb	r3, [r7, #15]
}
 800928c:	4618      	mov	r0, r3
 800928e:	3714      	adds	r7, #20
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <myTask>:
/* HealthMonitoringS */
static void Custom_Charnotify_Update_Char(void);
static void Custom_Charnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
void myTask(void){
 8009298:	b580      	push	{r7, lr}
 800929a:	af00      	add	r7, sp, #0
	//This task Controls notifycation Char. Check Pending Notification and execute it
	if(Notify_Interface.Status==Notify_Pending){
 800929c:	4b07      	ldr	r3, [pc, #28]	@ (80092bc <myTask+0x24>)
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d104      	bne.n	80092ae <myTask+0x16>
		Notify_Interface.Status=Notify_None;
 80092a4:	4b05      	ldr	r3, [pc, #20]	@ (80092bc <myTask+0x24>)
 80092a6:	2200      	movs	r2, #0
 80092a8:	701a      	strb	r2, [r3, #0]
//		UpdateCharData[0]+=0x01;


		Custom_Charnotify_Update_Char(); // This function triggers the Notificaation of the the content of NotifyCharData array
 80092aa:	f000 f8f7 	bl	800949c <Custom_Charnotify_Update_Char>

	}


	//Re-Schedule the task
	UTIL_SEQ_SetTask(1<<CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 80092ae:	2100      	movs	r1, #0
 80092b0:	2004      	movs	r0, #4
 80092b2:	f001 f9f7 	bl	800a6a4 <UTIL_SEQ_SetTask>
}
 80092b6:	bf00      	nop
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	2000060c 	.word	0x2000060c

080092c0 <ble_notify_interface_get>:


Custom_BLE_Notify_interface_t* ble_notify_interface_get(){
 80092c0:	b480      	push	{r7}
 80092c2:	af00      	add	r7, sp, #0
	return &Notify_Interface;
 80092c4:	4b02      	ldr	r3, [pc, #8]	@ (80092d0 <ble_notify_interface_get+0x10>)
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr
 80092d0:	2000060c 	.word	0x2000060c

080092d4 <Custom_STM_App_Notification>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b08a      	sub	sp, #40	@ 0x28
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	2b03      	cmp	r3, #3
 80092e2:	f200 80a7 	bhi.w	8009434 <Custom_STM_App_Notification+0x160>
 80092e6:	a201      	add	r2, pc, #4	@ (adr r2, 80092ec <Custom_STM_App_Notification+0x18>)
 80092e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ec:	080092fd 	.word	0x080092fd
 80092f0:	08009435 	.word	0x08009435
 80092f4:	08009435 	.word	0x08009435
 80092f8:	08009435 	.word	0x08009435

    /* HealthMonitoringS */
    case CUSTOM_STM_CHARWRITE_WRITE_EVT:
      /* USER CODE BEGIN CUSTOM_STM_CHARWRITE_WRITE_EVT */

    	uint8_t * p_Payload = pNotification->DataTransfered.pPayload ;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	627b      	str	r3, [r7, #36]	@ 0x24
    	uint8_t req_length = pNotification->DataTransfered.Length ;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	7a1b      	ldrb	r3, [r3, #8]
 8009306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    	// Sanity check for minimal packet size (CMD + LEN + CRC)
//		if (req_length < 7)
//			break;
		uint8_t cmd = p_Payload[0];
 800930a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		uint8_t len = p_Payload[1];
 8009312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009314:	785b      	ldrb	r3, [r3, #1]
 8009316:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		uint8_t *params = &p_Payload[2];
 800931a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800931c:	3302      	adds	r3, #2
 800931e:	61fb      	str	r3, [r7, #28]
		uint8_t chksum_rcv = p_Payload[req_length - 1];
 8009320:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009324:	3b01      	subs	r3, #1
 8009326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009328:	4413      	add	r3, r2
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	76fb      	strb	r3, [r7, #27]
		uint8_t chksum_calc = ble_calculate_chksum(p_Payload, req_length - 1);
 800932e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009332:	3b01      	subs	r3, #1
 8009334:	b2db      	uxtb	r3, r3
 8009336:	4619      	mov	r1, r3
 8009338:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800933a:	f7ff ff8c 	bl	8009256 <ble_calculate_chksum>
 800933e:	4603      	mov	r3, r0
 8009340:	76bb      	strb	r3, [r7, #26]
//		}


		// Filter the CMds

		    if (cmd == 0x01) { // REQ_HR_SPO2_DATA
 8009342:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009346:	2b01      	cmp	r3, #1
 8009348:	d102      	bne.n	8009350 <Custom_STM_App_Notification+0x7c>
		    	data_handler_req_hr_spo2();
 800934a:	f000 fce5 	bl	8009d18 <data_handler_req_hr_spo2>


//    	Notify_Interface.Status=Notify_Pending; // Schedule a new Notification

      /* USER CODE END CUSTOM_STM_CHARWRITE_WRITE_EVT */
      break;
 800934e:	e073      	b.n	8009438 <Custom_STM_App_Notification+0x164>
		    } else if (cmd == 0x02) { // REQ_TEMP_DATA
 8009350:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009354:	2b02      	cmp	r3, #2
 8009356:	d107      	bne.n	8009368 <Custom_STM_App_Notification+0x94>
		        uint8_t temp_type = params[0];  // 0x01 = Body, 0x02 = Env, 0x03 = Both
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	72fb      	strb	r3, [r7, #11]
		        data_handler_req_temp(temp_type);
 800935e:	7afb      	ldrb	r3, [r7, #11]
 8009360:	4618      	mov	r0, r3
 8009362:	f000 fcdf 	bl	8009d24 <data_handler_req_temp>
      break;
 8009366:	e067      	b.n	8009438 <Custom_STM_App_Notification+0x164>
		    } else if (cmd == 0x03) { // REQ_PRESSURE_DATA
 8009368:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800936c:	2b03      	cmp	r3, #3
 800936e:	d102      	bne.n	8009376 <Custom_STM_App_Notification+0xa2>
		    	data_handler_req_pressure();
 8009370:	f000 fce5 	bl	8009d3e <data_handler_req_pressure>
      break;
 8009374:	e060      	b.n	8009438 <Custom_STM_App_Notification+0x164>
		    } else if (cmd == 0x04) { // REQ_ALL_DATA
 8009376:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800937a:	2b04      	cmp	r3, #4
 800937c:	d102      	bne.n	8009384 <Custom_STM_App_Notification+0xb0>
		    	data_handler_req_all_data();
 800937e:	f000 fce4 	bl	8009d4a <data_handler_req_all_data>
      break;
 8009382:	e059      	b.n	8009438 <Custom_STM_App_Notification+0x164>
		    } else if (cmd == 0x10) { // REQ_HISTORICAL_DATA
 8009384:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009388:	2b10      	cmp	r3, #16
 800938a:	d115      	bne.n	80093b8 <Custom_STM_App_Notification+0xe4>
		        uint32_t start_time = (params[0] << 24) | (params[1] << 16) | (params[2] << 8) | params[3];
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	061a      	lsls	r2, r3, #24
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	3301      	adds	r3, #1
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	041b      	lsls	r3, r3, #16
 800939a:	431a      	orrs	r2, r3
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	3302      	adds	r3, #2
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	021b      	lsls	r3, r3, #8
 80093a4:	4313      	orrs	r3, r2
 80093a6:	69fa      	ldr	r2, [r7, #28]
 80093a8:	3203      	adds	r2, #3
 80093aa:	7812      	ldrb	r2, [r2, #0]
 80093ac:	4313      	orrs	r3, r2
 80093ae:	60fb      	str	r3, [r7, #12]
		        data_handler_req_historical_data(start_time);
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f000 fcd0 	bl	8009d56 <data_handler_req_historical_data>
      break;
 80093b6:	e03f      	b.n	8009438 <Custom_STM_App_Notification+0x164>
		    } else if (cmd == 0x20) { // SET_UNIX_TIME
 80093b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80093bc:	2b20      	cmp	r3, #32
 80093be:	d115      	bne.n	80093ec <Custom_STM_App_Notification+0x118>
		        uint32_t unix_time = (params[0] << 24) | (params[1] << 16) | (params[2] << 8) | params[3];
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	061a      	lsls	r2, r3, #24
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	3301      	adds	r3, #1
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	041b      	lsls	r3, r3, #16
 80093ce:	431a      	orrs	r2, r3
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	3302      	adds	r3, #2
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	021b      	lsls	r3, r3, #8
 80093d8:	4313      	orrs	r3, r2
 80093da:	69fa      	ldr	r2, [r7, #28]
 80093dc:	3203      	adds	r2, #3
 80093de:	7812      	ldrb	r2, [r2, #0]
 80093e0:	4313      	orrs	r3, r2
 80093e2:	613b      	str	r3, [r7, #16]
		        data_handler_req_set_unix_time(unix_time);
 80093e4:	6938      	ldr	r0, [r7, #16]
 80093e6:	f000 fccf 	bl	8009d88 <data_handler_req_set_unix_time>
      break;
 80093ea:	e025      	b.n	8009438 <Custom_STM_App_Notification+0x164>
		    } else if (cmd == 0x30) { // SET_SENSOR_CONFIG
 80093ec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80093f0:	2b30      	cmp	r3, #48	@ 0x30
 80093f2:	d10c      	bne.n	800940e <Custom_STM_App_Notification+0x13a>
		        uint8_t sensor_type = params[0]; // Igual al tipo de dato (HR, SpO2, Temp, etc.)
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	763b      	strb	r3, [r7, #24]
		        uint8_t config_val  = params[1]; // Valor de configuración (más detalles en el futuro)
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	785b      	ldrb	r3, [r3, #1]
 80093fe:	75fb      	strb	r3, [r7, #23]
		        data_handler_req_set_sensor_config(sensor_type, config_val);
 8009400:	7dfa      	ldrb	r2, [r7, #23]
 8009402:	7e3b      	ldrb	r3, [r7, #24]
 8009404:	4611      	mov	r1, r2
 8009406:	4618      	mov	r0, r3
 8009408:	f000 fcd7 	bl	8009dba <data_handler_req_set_sensor_config>
      break;
 800940c:	e014      	b.n	8009438 <Custom_STM_App_Notification+0x164>
		    } else if (cmd == 0x40) { // START_STREAM
 800940e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009412:	2b40      	cmp	r3, #64	@ 0x40
 8009414:	d107      	bne.n	8009426 <Custom_STM_App_Notification+0x152>
		        uint8_t stream_mask = params[0];
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	767b      	strb	r3, [r7, #25]
		        data_handler_req_start_stream(stream_mask);
 800941c:	7e7b      	ldrb	r3, [r7, #25]
 800941e:	4618      	mov	r0, r3
 8009420:	f000 fce1 	bl	8009de6 <data_handler_req_start_stream>
      break;
 8009424:	e008      	b.n	8009438 <Custom_STM_App_Notification+0x164>
		    } else if (cmd == 0x41) { // STOP_STREAM
 8009426:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800942a:	2b41      	cmp	r3, #65	@ 0x41
 800942c:	d104      	bne.n	8009438 <Custom_STM_App_Notification+0x164>
		    	data_handler_req_stop_stream();
 800942e:	f000 fced 	bl	8009e0c <data_handler_req_stop_stream>
      break;
 8009432:	e001      	b.n	8009438 <Custom_STM_App_Notification+0x164>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8009434:	bf00      	nop
 8009436:	e000      	b.n	800943a <Custom_STM_App_Notification+0x166>
      break;
 8009438:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800943a:	bf00      	nop
}
 800943c:	3728      	adds	r7, #40	@ 0x28
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop

08009444 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d002      	beq.n	800945a <Custom_APP_Notification+0x16>
 8009454:	2b01      	cmp	r3, #1
 8009456:	d002      	beq.n	800945e <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8009458:	e002      	b.n	8009460 <Custom_APP_Notification+0x1c>
      break;
 800945a:	bf00      	nop
 800945c:	e000      	b.n	8009460 <Custom_APP_Notification+0x1c>
      break;
 800945e:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8009460:	bf00      	nop
}
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800946c:	b480      	push	{r7}
 800946e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	Notify_Interface.Status=Notify_None;
 8009470:	4b08      	ldr	r3, [pc, #32]	@ (8009494 <Custom_APP_Init+0x28>)
 8009472:	2200      	movs	r2, #0
 8009474:	701a      	strb	r2, [r3, #0]
	Notify_Interface.checkSum=0;
 8009476:	4b07      	ldr	r3, [pc, #28]	@ (8009494 <Custom_APP_Init+0x28>)
 8009478:	2200      	movs	r2, #0
 800947a:	721a      	strb	r2, [r3, #8]
	Notify_Interface.length=0;
 800947c:	4b05      	ldr	r3, [pc, #20]	@ (8009494 <Custom_APP_Init+0x28>)
 800947e:	2200      	movs	r2, #0
 8009480:	725a      	strb	r2, [r3, #9]
	Notify_Interface.pck=UpdateCharData;
 8009482:	4b04      	ldr	r3, [pc, #16]	@ (8009494 <Custom_APP_Init+0x28>)
 8009484:	4a04      	ldr	r2, [pc, #16]	@ (8009498 <Custom_APP_Init+0x2c>)
 8009486:	605a      	str	r2, [r3, #4]

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8009488:	bf00      	nop
}
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	2000060c 	.word	0x2000060c
 8009498:	2000040c 	.word	0x2000040c

0800949c <Custom_Charnotify_Update_Char>:
 *
 *************************************************************/

/* HealthMonitoringS */
__USED void Custom_Charnotify_Update_Char(void) /* Property Read */
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 80094a2:	2300      	movs	r3, #0
 80094a4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Charnotify_UC_1*/
  updateflag=1;
 80094a6:	2301      	movs	r3, #1
 80094a8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE END Charnotify_UC_1*/

  if (updateflag != 0)
 80094aa:	79fb      	ldrb	r3, [r7, #7]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d004      	beq.n	80094ba <Custom_Charnotify_Update_Char+0x1e>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_CHARNOTIFY, (uint8_t *)UpdateCharData);
 80094b0:	4904      	ldr	r1, [pc, #16]	@ (80094c4 <Custom_Charnotify_Update_Char+0x28>)
 80094b2:	2001      	movs	r0, #1
 80094b4:	f000 f96c 	bl	8009790 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Charnotify_UC_Last*/

  /* USER CODE END Charnotify_UC_Last*/
  return;
 80094b8:	bf00      	nop
 80094ba:	bf00      	nop
}
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	2000040c 	.word	0x2000040c

080094c8 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b08c      	sub	sp, #48	@ 0x30
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80094d0:	2300      	movs	r3, #0
 80094d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	3301      	adds	r3, #1
 80094da:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 80094dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	2bff      	cmp	r3, #255	@ 0xff
 80094e2:	f040 809b 	bne.w	800961c <Custom_STM_Event_Handler+0x154>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80094e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e8:	3302      	adds	r3, #2
 80094ea:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 80094ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ee:	881b      	ldrh	r3, [r3, #0]
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 80094f6:	2b1a      	cmp	r3, #26
 80094f8:	f200 808c 	bhi.w	8009614 <Custom_STM_Event_Handler+0x14c>
 80094fc:	a201      	add	r2, pc, #4	@ (adr r2, 8009504 <Custom_STM_Event_Handler+0x3c>)
 80094fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009502:	bf00      	nop
 8009504:	08009571 	.word	0x08009571
 8009508:	08009615 	.word	0x08009615
 800950c:	08009615 	.word	0x08009615
 8009510:	08009615 	.word	0x08009615
 8009514:	08009615 	.word	0x08009615
 8009518:	08009615 	.word	0x08009615
 800951c:	08009615 	.word	0x08009615
 8009520:	08009615 	.word	0x08009615
 8009524:	08009615 	.word	0x08009615
 8009528:	08009615 	.word	0x08009615
 800952c:	08009615 	.word	0x08009615
 8009530:	08009615 	.word	0x08009615
 8009534:	08009615 	.word	0x08009615
 8009538:	08009615 	.word	0x08009615
 800953c:	08009615 	.word	0x08009615
 8009540:	08009615 	.word	0x08009615
 8009544:	08009615 	.word	0x08009615
 8009548:	08009615 	.word	0x08009615
 800954c:	08009615 	.word	0x08009615
 8009550:	08009615 	.word	0x08009615
 8009554:	08009615 	.word	0x08009615
 8009558:	08009615 	.word	0x08009615
 800955c:	08009615 	.word	0x08009615
 8009560:	08009615 	.word	0x08009615
 8009564:	08009615 	.word	0x08009615
 8009568:	08009615 	.word	0x08009615
 800956c:	080095f7 	.word	0x080095f7
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8009570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009572:	3302      	adds	r3, #2
 8009574:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomCharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	885b      	ldrh	r3, [r3, #2]
 800957a:	b29b      	uxth	r3, r3
 800957c:	461a      	mov	r2, r3
 800957e:	4b2b      	ldr	r3, [pc, #172]	@ (800962c <Custom_STM_Event_Handler+0x164>)
 8009580:	889b      	ldrh	r3, [r3, #4]
 8009582:	3302      	adds	r3, #2
 8009584:	429a      	cmp	r2, r3
 8009586:	d119      	bne.n	80095bc <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8009588:	2301      	movs	r3, #1
 800958a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	7a1b      	ldrb	r3, [r3, #8]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d002      	beq.n	800959c <Custom_STM_Event_Handler+0xd4>
 8009596:	2b01      	cmp	r3, #1
 8009598:	d008      	beq.n	80095ac <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 800959a:	e02b      	b.n	80095f4 <Custom_STM_Event_Handler+0x12c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_CHARNOTIFY_NOTIFY_DISABLED_EVT;
 800959c:	2302      	movs	r3, #2
 800959e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80095a0:	f107 0308 	add.w	r3, r7, #8
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7ff fe95 	bl	80092d4 <Custom_STM_App_Notification>
                break;
 80095aa:	e023      	b.n	80095f4 <Custom_STM_Event_Handler+0x12c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_CHARNOTIFY_NOTIFY_ENABLED_EVT;
 80095ac:	2301      	movs	r3, #1
 80095ae:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80095b0:	f107 0308 	add.w	r3, r7, #8
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7ff fe8d 	bl	80092d4 <Custom_STM_App_Notification>
                break;
 80095ba:	e01b      	b.n	80095f4 <Custom_STM_Event_Handler+0x12c>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomCharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	885b      	ldrh	r3, [r3, #2]
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	461a      	mov	r2, r3
 80095c4:	4b19      	ldr	r3, [pc, #100]	@ (800962c <Custom_STM_Event_Handler+0x164>)
 80095c6:	885b      	ldrh	r3, [r3, #2]
 80095c8:	3301      	adds	r3, #1
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d124      	bne.n	8009618 <Custom_STM_Event_Handler+0x150>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80095ce:	2301      	movs	r3, #1
 80095d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            Notification.Custom_Evt_Opcode = CUSTOM_STM_CHARWRITE_WRITE_EVT;
 80095d4:	2300      	movs	r3, #0
 80095d6:	723b      	strb	r3, [r7, #8]
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	88db      	ldrh	r3, [r3, #6]
 80095dc:	b29b      	uxth	r3, r3
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	743b      	strb	r3, [r7, #16]
            Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	3308      	adds	r3, #8
 80095e6:	60fb      	str	r3, [r7, #12]
            Custom_STM_App_Notification(&Notification);
 80095e8:	f107 0308 	add.w	r3, r7, #8
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7ff fe71 	bl	80092d4 <Custom_STM_App_Notification>
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 80095f2:	e011      	b.n	8009618 <Custom_STM_Event_Handler+0x150>
 80095f4:	e010      	b.n	8009618 <Custom_STM_Event_Handler+0x150>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 80095f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f8:	3302      	adds	r3, #2
 80095fa:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 80095fc:	2303      	movs	r3, #3
 80095fe:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8009600:	6a3b      	ldr	r3, [r7, #32]
 8009602:	881b      	ldrh	r3, [r3, #0]
 8009604:	b29b      	uxth	r3, r3
 8009606:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 8009608:	f107 0308 	add.w	r3, r7, #8
 800960c:	4618      	mov	r0, r3
 800960e:	f7ff fe61 	bl	80092d4 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8009612:	e002      	b.n	800961a <Custom_STM_Event_Handler+0x152>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8009614:	bf00      	nop
 8009616:	e002      	b.n	800961e <Custom_STM_Event_Handler+0x156>
          break;
 8009618:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800961a:	e000      	b.n	800961e <Custom_STM_Event_Handler+0x156>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800961c:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800961e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 8009622:	4618      	mov	r0, r3
 8009624:	3730      	adds	r7, #48	@ 0x30
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	20000618 	.word	0x20000618

08009630 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b08c      	sub	sp, #48	@ 0x30
 8009634:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009636:	2392      	movs	r3, #146	@ 0x92
 8009638:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800963a:	484f      	ldr	r0, [pc, #316]	@ (8009778 <SVCCTL_InitCustomSvc+0x148>)
 800963c:	f7fe fb94 	bl	8007d68 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 8009640:	2306      	movs	r3, #6
 8009642:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService1 */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService1 */

  COPY_HEALTHMONITORINGS_UUID(uuid.Char_UUID_128);
 8009644:	238f      	movs	r3, #143	@ 0x8f
 8009646:	713b      	strb	r3, [r7, #4]
 8009648:	23e5      	movs	r3, #229	@ 0xe5
 800964a:	717b      	strb	r3, [r7, #5]
 800964c:	23b3      	movs	r3, #179	@ 0xb3
 800964e:	71bb      	strb	r3, [r7, #6]
 8009650:	23d5      	movs	r3, #213	@ 0xd5
 8009652:	71fb      	strb	r3, [r7, #7]
 8009654:	232e      	movs	r3, #46	@ 0x2e
 8009656:	723b      	strb	r3, [r7, #8]
 8009658:	237f      	movs	r3, #127	@ 0x7f
 800965a:	727b      	strb	r3, [r7, #9]
 800965c:	234a      	movs	r3, #74	@ 0x4a
 800965e:	72bb      	strb	r3, [r7, #10]
 8009660:	2398      	movs	r3, #152	@ 0x98
 8009662:	72fb      	strb	r3, [r7, #11]
 8009664:	232a      	movs	r3, #42	@ 0x2a
 8009666:	733b      	strb	r3, [r7, #12]
 8009668:	2348      	movs	r3, #72	@ 0x48
 800966a:	737b      	strb	r3, [r7, #13]
 800966c:	237a      	movs	r3, #122	@ 0x7a
 800966e:	73bb      	strb	r3, [r7, #14]
 8009670:	23cc      	movs	r3, #204	@ 0xcc
 8009672:	73fb      	strb	r3, [r7, #15]
 8009674:	2300      	movs	r3, #0
 8009676:	743b      	strb	r3, [r7, #16]
 8009678:	2300      	movs	r3, #0
 800967a:	747b      	strb	r3, [r7, #17]
 800967c:	2300      	movs	r3, #0
 800967e:	74bb      	strb	r3, [r7, #18]
 8009680:	2300      	movs	r3, #0
 8009682:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8009684:	7dbb      	ldrb	r3, [r7, #22]
 8009686:	1d39      	adds	r1, r7, #4
 8009688:	4a3c      	ldr	r2, [pc, #240]	@ (800977c <SVCCTL_InitCustomSvc+0x14c>)
 800968a:	9200      	str	r2, [sp, #0]
 800968c:	2201      	movs	r2, #1
 800968e:	2002      	movs	r0, #2
 8009690:	f7fd fdde 	bl	8007250 <aci_gatt_add_service>
 8009694:	4603      	mov	r3, r0
 8009696:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  CharWrite
   */
  COPY_CHARWRITE_UUID(uuid.Char_UUID_128);
 8009698:	2319      	movs	r3, #25
 800969a:	713b      	strb	r3, [r7, #4]
 800969c:	23ed      	movs	r3, #237	@ 0xed
 800969e:	717b      	strb	r3, [r7, #5]
 80096a0:	2382      	movs	r3, #130	@ 0x82
 80096a2:	71bb      	strb	r3, [r7, #6]
 80096a4:	23ae      	movs	r3, #174	@ 0xae
 80096a6:	71fb      	strb	r3, [r7, #7]
 80096a8:	23ed      	movs	r3, #237	@ 0xed
 80096aa:	723b      	strb	r3, [r7, #8]
 80096ac:	2321      	movs	r3, #33	@ 0x21
 80096ae:	727b      	strb	r3, [r7, #9]
 80096b0:	234c      	movs	r3, #76	@ 0x4c
 80096b2:	72bb      	strb	r3, [r7, #10]
 80096b4:	239d      	movs	r3, #157	@ 0x9d
 80096b6:	72fb      	strb	r3, [r7, #11]
 80096b8:	2341      	movs	r3, #65	@ 0x41
 80096ba:	733b      	strb	r3, [r7, #12]
 80096bc:	2345      	movs	r3, #69	@ 0x45
 80096be:	737b      	strb	r3, [r7, #13]
 80096c0:	2322      	movs	r3, #34	@ 0x22
 80096c2:	73bb      	strb	r3, [r7, #14]
 80096c4:	238e      	movs	r3, #142	@ 0x8e
 80096c6:	73fb      	strb	r3, [r7, #15]
 80096c8:	2300      	movs	r3, #0
 80096ca:	743b      	strb	r3, [r7, #16]
 80096cc:	2300      	movs	r3, #0
 80096ce:	747b      	strb	r3, [r7, #17]
 80096d0:	2300      	movs	r3, #0
 80096d2:	74bb      	strb	r3, [r7, #18]
 80096d4:	2300      	movs	r3, #0
 80096d6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomHmHdle,
 80096d8:	4b28      	ldr	r3, [pc, #160]	@ (800977c <SVCCTL_InitCustomSvc+0x14c>)
 80096da:	8818      	ldrh	r0, [r3, #0]
 80096dc:	4b28      	ldr	r3, [pc, #160]	@ (8009780 <SVCCTL_InitCustomSvc+0x150>)
 80096de:	881b      	ldrh	r3, [r3, #0]
 80096e0:	1d3a      	adds	r2, r7, #4
 80096e2:	4928      	ldr	r1, [pc, #160]	@ (8009784 <SVCCTL_InitCustomSvc+0x154>)
 80096e4:	9105      	str	r1, [sp, #20]
 80096e6:	2100      	movs	r1, #0
 80096e8:	9104      	str	r1, [sp, #16]
 80096ea:	2110      	movs	r1, #16
 80096ec:	9103      	str	r1, [sp, #12]
 80096ee:	2101      	movs	r1, #1
 80096f0:	9102      	str	r1, [sp, #8]
 80096f2:	2100      	movs	r1, #0
 80096f4:	9101      	str	r1, [sp, #4]
 80096f6:	2108      	movs	r1, #8
 80096f8:	9100      	str	r1, [sp, #0]
 80096fa:	2102      	movs	r1, #2
 80096fc:	f7fd fe7e 	bl	80073fc <aci_gatt_add_char>
 8009700:	4603      	mov	r3, r0
 8009702:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  CharNotify
   */
  COPY_CHARNOTIFY_UUID(uuid.Char_UUID_128);
 8009704:	2319      	movs	r3, #25
 8009706:	713b      	strb	r3, [r7, #4]
 8009708:	23ed      	movs	r3, #237	@ 0xed
 800970a:	717b      	strb	r3, [r7, #5]
 800970c:	2382      	movs	r3, #130	@ 0x82
 800970e:	71bb      	strb	r3, [r7, #6]
 8009710:	23ae      	movs	r3, #174	@ 0xae
 8009712:	71fb      	strb	r3, [r7, #7]
 8009714:	23ed      	movs	r3, #237	@ 0xed
 8009716:	723b      	strb	r3, [r7, #8]
 8009718:	2321      	movs	r3, #33	@ 0x21
 800971a:	727b      	strb	r3, [r7, #9]
 800971c:	234c      	movs	r3, #76	@ 0x4c
 800971e:	72bb      	strb	r3, [r7, #10]
 8009720:	239d      	movs	r3, #157	@ 0x9d
 8009722:	72fb      	strb	r3, [r7, #11]
 8009724:	2341      	movs	r3, #65	@ 0x41
 8009726:	733b      	strb	r3, [r7, #12]
 8009728:	2345      	movs	r3, #69	@ 0x45
 800972a:	737b      	strb	r3, [r7, #13]
 800972c:	2322      	movs	r3, #34	@ 0x22
 800972e:	73bb      	strb	r3, [r7, #14]
 8009730:	238e      	movs	r3, #142	@ 0x8e
 8009732:	73fb      	strb	r3, [r7, #15]
 8009734:	2301      	movs	r3, #1
 8009736:	743b      	strb	r3, [r7, #16]
 8009738:	2300      	movs	r3, #0
 800973a:	747b      	strb	r3, [r7, #17]
 800973c:	2300      	movs	r3, #0
 800973e:	74bb      	strb	r3, [r7, #18]
 8009740:	2300      	movs	r3, #0
 8009742:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomHmHdle,
 8009744:	4b0d      	ldr	r3, [pc, #52]	@ (800977c <SVCCTL_InitCustomSvc+0x14c>)
 8009746:	8818      	ldrh	r0, [r3, #0]
 8009748:	4b0f      	ldr	r3, [pc, #60]	@ (8009788 <SVCCTL_InitCustomSvc+0x158>)
 800974a:	881b      	ldrh	r3, [r3, #0]
 800974c:	1d3a      	adds	r2, r7, #4
 800974e:	490f      	ldr	r1, [pc, #60]	@ (800978c <SVCCTL_InitCustomSvc+0x15c>)
 8009750:	9105      	str	r1, [sp, #20]
 8009752:	2100      	movs	r1, #0
 8009754:	9104      	str	r1, [sp, #16]
 8009756:	2110      	movs	r1, #16
 8009758:	9103      	str	r1, [sp, #12]
 800975a:	2107      	movs	r1, #7
 800975c:	9102      	str	r1, [sp, #8]
 800975e:	2100      	movs	r1, #0
 8009760:	9101      	str	r1, [sp, #4]
 8009762:	2110      	movs	r1, #16
 8009764:	9100      	str	r1, [sp, #0]
 8009766:	2102      	movs	r1, #2
 8009768:	f7fd fe48 	bl	80073fc <aci_gatt_add_char>
 800976c:	4603      	mov	r3, r0
 800976e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8009770:	bf00      	nop
}
 8009772:	3718      	adds	r7, #24
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	080094c9 	.word	0x080094c9
 800977c:	20000618 	.word	0x20000618
 8009780:	20000022 	.word	0x20000022
 8009784:	2000061a 	.word	0x2000061a
 8009788:	20000024 	.word	0x20000024
 800978c:	2000061c 	.word	0x2000061c

08009790 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af02      	add	r7, sp, #8
 8009796:	4603      	mov	r3, r0
 8009798:	6039      	str	r1, [r7, #0]
 800979a:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800979c:	2392      	movs	r3, #146	@ 0x92
 800979e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 80097a0:	79fb      	ldrb	r3, [r7, #7]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d002      	beq.n	80097ac <Custom_STM_App_Update_Char+0x1c>
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d010      	beq.n	80097cc <Custom_STM_App_Update_Char+0x3c>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 80097aa:	e01f      	b.n	80097ec <Custom_STM_App_Update_Char+0x5c>
      ret = aci_gatt_update_char_value(CustomContext.CustomHmHdle,
 80097ac:	4b12      	ldr	r3, [pc, #72]	@ (80097f8 <Custom_STM_App_Update_Char+0x68>)
 80097ae:	8818      	ldrh	r0, [r3, #0]
 80097b0:	4b11      	ldr	r3, [pc, #68]	@ (80097f8 <Custom_STM_App_Update_Char+0x68>)
 80097b2:	8859      	ldrh	r1, [r3, #2]
 80097b4:	4b11      	ldr	r3, [pc, #68]	@ (80097fc <Custom_STM_App_Update_Char+0x6c>)
 80097b6:	881b      	ldrh	r3, [r3, #0]
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	4613      	mov	r3, r2
 80097c0:	2200      	movs	r2, #0
 80097c2:	f7fd ff23 	bl	800760c <aci_gatt_update_char_value>
 80097c6:	4603      	mov	r3, r0
 80097c8:	73fb      	strb	r3, [r7, #15]
      break;
 80097ca:	e00f      	b.n	80097ec <Custom_STM_App_Update_Char+0x5c>
      ret = aci_gatt_update_char_value(CustomContext.CustomHmHdle,
 80097cc:	4b0a      	ldr	r3, [pc, #40]	@ (80097f8 <Custom_STM_App_Update_Char+0x68>)
 80097ce:	8818      	ldrh	r0, [r3, #0]
 80097d0:	4b09      	ldr	r3, [pc, #36]	@ (80097f8 <Custom_STM_App_Update_Char+0x68>)
 80097d2:	8899      	ldrh	r1, [r3, #4]
 80097d4:	4b0a      	ldr	r3, [pc, #40]	@ (8009800 <Custom_STM_App_Update_Char+0x70>)
 80097d6:	881b      	ldrh	r3, [r3, #0]
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	4613      	mov	r3, r2
 80097e0:	2200      	movs	r2, #0
 80097e2:	f7fd ff13 	bl	800760c <aci_gatt_update_char_value>
 80097e6:	4603      	mov	r3, r0
 80097e8:	73fb      	strb	r3, [r7, #15]
      break;
 80097ea:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 80097ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	20000618 	.word	0x20000618
 80097fc:	20000022 	.word	0x20000022
 8009800:	20000024 	.word	0x20000024

08009804 <send_dummy_hr_spo2>:
/**
 * @brief  Generate and send a dummy HR & SpO₂ notification over BLE.
 *         Structure: [CMD][LEN][DATA(5)][TIMESTAMP(4)][CRC]
 */
static void send_dummy_hr_spo2(void)
{
 8009804:	b590      	push	{r4, r7, lr}
 8009806:	b087      	sub	sp, #28
 8009808:	af00      	add	r7, sp, #0
	Custom_BLE_Notify_interface_t* p_ble_notify =ble_notify_interface_get();
 800980a:	f7ff fd59 	bl	80092c0 <ble_notify_interface_get>
 800980e:	6178      	str	r0, [r7, #20]
    uint8_t* notif= p_ble_notify->pck ;
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	613b      	str	r3, [r7, #16]
    uint8_t idx = 0;
 8009816:	2300      	movs	r3, #0
 8009818:	73fb      	strb	r3, [r7, #15]

    // DATA_TYPE: bitmask for HR (0x01) + SpO₂ (0x02) = 0x03
	notif[idx++] = 0x01;
 800981a:	7bfb      	ldrb	r3, [r7, #15]
 800981c:	1c5a      	adds	r2, r3, #1
 800981e:	73fa      	strb	r2, [r7, #15]
 8009820:	461a      	mov	r2, r3
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	4413      	add	r3, r2
 8009826:	2201      	movs	r2, #1
 8009828:	701a      	strb	r2, [r3, #0]
	// LEN: always 0x05
	notif[idx++] = 0x05;
 800982a:	7bfb      	ldrb	r3, [r7, #15]
 800982c:	1c5a      	adds	r2, r3, #1
 800982e:	73fa      	strb	r2, [r7, #15]
 8009830:	461a      	mov	r2, r3
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	4413      	add	r3, r2
 8009836:	2205      	movs	r2, #5
 8009838:	701a      	strb	r2, [r3, #0]

	// DATA: HR (2 bytes), SpO₂ (2 bytes), padding (1 byte)
	uint16_t dummy_hr = 7000;    // e.g., 70 bpm -> 0x0046
 800983a:	f641 3358 	movw	r3, #7000	@ 0x1b58
 800983e:	81bb      	strh	r3, [r7, #12]
	uint16_t dummy_spo2 = 9800;  // e.g., 98% -> 0x0062
 8009840:	f242 6348 	movw	r3, #9800	@ 0x2648
 8009844:	817b      	strh	r3, [r7, #10]

	notif[idx++] = 0x00;       // Padding
 8009846:	7bfb      	ldrb	r3, [r7, #15]
 8009848:	1c5a      	adds	r2, r3, #1
 800984a:	73fa      	strb	r2, [r7, #15]
 800984c:	461a      	mov	r2, r3
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	4413      	add	r3, r2
 8009852:	2200      	movs	r2, #0
 8009854:	701a      	strb	r2, [r3, #0]
	notif[idx++] = (dummy_hr >> 8) & 0xFF;
 8009856:	89bb      	ldrh	r3, [r7, #12]
 8009858:	0a1b      	lsrs	r3, r3, #8
 800985a:	b29a      	uxth	r2, r3
 800985c:	7bfb      	ldrb	r3, [r7, #15]
 800985e:	1c59      	adds	r1, r3, #1
 8009860:	73f9      	strb	r1, [r7, #15]
 8009862:	4619      	mov	r1, r3
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	440b      	add	r3, r1
 8009868:	b2d2      	uxtb	r2, r2
 800986a:	701a      	strb	r2, [r3, #0]
	notif[idx++] = (dummy_hr >> 0) & 0xFF;
 800986c:	7bfb      	ldrb	r3, [r7, #15]
 800986e:	1c5a      	adds	r2, r3, #1
 8009870:	73fa      	strb	r2, [r7, #15]
 8009872:	461a      	mov	r2, r3
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	4413      	add	r3, r2
 8009878:	89ba      	ldrh	r2, [r7, #12]
 800987a:	b2d2      	uxtb	r2, r2
 800987c:	701a      	strb	r2, [r3, #0]
	notif[idx++] = (dummy_spo2 >> 8) & 0xFF;
 800987e:	897b      	ldrh	r3, [r7, #10]
 8009880:	0a1b      	lsrs	r3, r3, #8
 8009882:	b29a      	uxth	r2, r3
 8009884:	7bfb      	ldrb	r3, [r7, #15]
 8009886:	1c59      	adds	r1, r3, #1
 8009888:	73f9      	strb	r1, [r7, #15]
 800988a:	4619      	mov	r1, r3
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	440b      	add	r3, r1
 8009890:	b2d2      	uxtb	r2, r2
 8009892:	701a      	strb	r2, [r3, #0]
	notif[idx++] = (dummy_spo2 >> 0) & 0xFF;
 8009894:	7bfb      	ldrb	r3, [r7, #15]
 8009896:	1c5a      	adds	r2, r3, #1
 8009898:	73fa      	strb	r2, [r7, #15]
 800989a:	461a      	mov	r2, r3
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	4413      	add	r3, r2
 80098a0:	897a      	ldrh	r2, [r7, #10]
 80098a2:	b2d2      	uxtb	r2, r2
 80098a4:	701a      	strb	r2, [r3, #0]

    // TIMESTAMP: fixed dummy Unix time, e.g., 1620000000 (0x60D4A000)
    uint32_t ts = 0x60D4A000;
 80098a6:	4b1c      	ldr	r3, [pc, #112]	@ (8009918 <send_dummy_hr_spo2+0x114>)
 80098a8:	607b      	str	r3, [r7, #4]
    notif[idx++] = (ts >> 24) & 0xFF;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	0e1a      	lsrs	r2, r3, #24
 80098ae:	7bfb      	ldrb	r3, [r7, #15]
 80098b0:	1c59      	adds	r1, r3, #1
 80098b2:	73f9      	strb	r1, [r7, #15]
 80098b4:	4619      	mov	r1, r3
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	440b      	add	r3, r1
 80098ba:	b2d2      	uxtb	r2, r2
 80098bc:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 16) & 0xFF;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	0c1a      	lsrs	r2, r3, #16
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
 80098c4:	1c59      	adds	r1, r3, #1
 80098c6:	73f9      	strb	r1, [r7, #15]
 80098c8:	4619      	mov	r1, r3
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	440b      	add	r3, r1
 80098ce:	b2d2      	uxtb	r2, r2
 80098d0:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 8)  & 0xFF;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	0a1a      	lsrs	r2, r3, #8
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
 80098d8:	1c59      	adds	r1, r3, #1
 80098da:	73f9      	strb	r1, [r7, #15]
 80098dc:	4619      	mov	r1, r3
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	440b      	add	r3, r1
 80098e2:	b2d2      	uxtb	r2, r2
 80098e4:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 0)  & 0xFF;
 80098e6:	7bfb      	ldrb	r3, [r7, #15]
 80098e8:	1c5a      	adds	r2, r3, #1
 80098ea:	73fa      	strb	r2, [r7, #15]
 80098ec:	461a      	mov	r2, r3
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	4413      	add	r3, r2
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	b2d2      	uxtb	r2, r2
 80098f6:	701a      	strb	r2, [r3, #0]

    // CRC: sum of bytes [0..10] mod 256
    notif[idx] = ble_calculate_chksum(notif, 11);
 80098f8:	7bfb      	ldrb	r3, [r7, #15]
 80098fa:	693a      	ldr	r2, [r7, #16]
 80098fc:	18d4      	adds	r4, r2, r3
 80098fe:	210b      	movs	r1, #11
 8009900:	6938      	ldr	r0, [r7, #16]
 8009902:	f7ff fca8 	bl	8009256 <ble_calculate_chksum>
 8009906:	4603      	mov	r3, r0
 8009908:	7023      	strb	r3, [r4, #0]


    p_ble_notify->Status=Notify_Pending;
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	2201      	movs	r2, #1
 800990e:	701a      	strb	r2, [r3, #0]
}
 8009910:	bf00      	nop
 8009912:	371c      	adds	r7, #28
 8009914:	46bd      	mov	sp, r7
 8009916:	bd90      	pop	{r4, r7, pc}
 8009918:	60d4a000 	.word	0x60d4a000

0800991c <send_dummy_temp>:
/**
 * @brief  Generate and send a dummy Temperature notification over BLE.
 * @param  temp_type: 0x01 = Body, 0x02 = Environmental, 0x03 = Both
 */
static void send_dummy_temp(uint8_t temp_type)
{
 800991c:	b590      	push	{r4, r7, lr}
 800991e:	b089      	sub	sp, #36	@ 0x24
 8009920:	af00      	add	r7, sp, #0
 8009922:	4603      	mov	r3, r0
 8009924:	71fb      	strb	r3, [r7, #7]
	Custom_BLE_Notify_interface_t* p_ble_notify = ble_notify_interface_get();
 8009926:	f7ff fccb 	bl	80092c0 <ble_notify_interface_get>
 800992a:	61b8      	str	r0, [r7, #24]
	uint8_t *notif = p_ble_notify->pck;
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	617b      	str	r3, [r7, #20]
	uint8_t idx = 0;
 8009932:	2300      	movs	r3, #0
 8009934:	77fb      	strb	r3, [r7, #31]

    // DATA_TYPE: bitmask for Temperature = 0x04
    notif[idx++] = 0x02;
 8009936:	7ffb      	ldrb	r3, [r7, #31]
 8009938:	1c5a      	adds	r2, r3, #1
 800993a:	77fa      	strb	r2, [r7, #31]
 800993c:	461a      	mov	r2, r3
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	4413      	add	r3, r2
 8009942:	2202      	movs	r2, #2
 8009944:	701a      	strb	r2, [r3, #0]
    // LEN: always 0x05
    notif[idx++] = 0x05;
 8009946:	7ffb      	ldrb	r3, [r7, #31]
 8009948:	1c5a      	adds	r2, r3, #1
 800994a:	77fa      	strb	r2, [r7, #31]
 800994c:	461a      	mov	r2, r3
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	4413      	add	r3, r2
 8009952:	2205      	movs	r2, #5
 8009954:	701a      	strb	r2, [r3, #0]

    // DATA: depends on temp_type
    // Use dummy values: Ambient = 25.0°C -> 250 (0x00FA), Body = 36.5°C -> 365 (0x016D)
    uint16_t amb = 250;
 8009956:	23fa      	movs	r3, #250	@ 0xfa
 8009958:	827b      	strh	r3, [r7, #18]
    uint16_t body = 365;
 800995a:	f240 136d 	movw	r3, #365	@ 0x16d
 800995e:	823b      	strh	r3, [r7, #16]

    if (temp_type == 0x01) {
 8009960:	79fb      	ldrb	r3, [r7, #7]
 8009962:	2b01      	cmp	r3, #1
 8009964:	d12c      	bne.n	80099c0 <send_dummy_temp+0xa4>
        // Body only
        notif[idx++] = 0x01;
 8009966:	7ffb      	ldrb	r3, [r7, #31]
 8009968:	1c5a      	adds	r2, r3, #1
 800996a:	77fa      	strb	r2, [r7, #31]
 800996c:	461a      	mov	r2, r3
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	4413      	add	r3, r2
 8009972:	2201      	movs	r2, #1
 8009974:	701a      	strb	r2, [r3, #0]
        notif[idx++] = (body >> 8) & 0xFF;
 8009976:	8a3b      	ldrh	r3, [r7, #16]
 8009978:	0a1b      	lsrs	r3, r3, #8
 800997a:	b29a      	uxth	r2, r3
 800997c:	7ffb      	ldrb	r3, [r7, #31]
 800997e:	1c59      	adds	r1, r3, #1
 8009980:	77f9      	strb	r1, [r7, #31]
 8009982:	4619      	mov	r1, r3
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	440b      	add	r3, r1
 8009988:	b2d2      	uxtb	r2, r2
 800998a:	701a      	strb	r2, [r3, #0]
        notif[idx++] = (body >> 0) & 0xFF;
 800998c:	7ffb      	ldrb	r3, [r7, #31]
 800998e:	1c5a      	adds	r2, r3, #1
 8009990:	77fa      	strb	r2, [r7, #31]
 8009992:	461a      	mov	r2, r3
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	4413      	add	r3, r2
 8009998:	8a3a      	ldrh	r2, [r7, #16]
 800999a:	b2d2      	uxtb	r2, r2
 800999c:	701a      	strb	r2, [r3, #0]
        notif[idx++] = 0x00;
 800999e:	7ffb      	ldrb	r3, [r7, #31]
 80099a0:	1c5a      	adds	r2, r3, #1
 80099a2:	77fa      	strb	r2, [r7, #31]
 80099a4:	461a      	mov	r2, r3
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	4413      	add	r3, r2
 80099aa:	2200      	movs	r2, #0
 80099ac:	701a      	strb	r2, [r3, #0]
        notif[idx++] = 0x00; // Padding
 80099ae:	7ffb      	ldrb	r3, [r7, #31]
 80099b0:	1c5a      	adds	r2, r3, #1
 80099b2:	77fa      	strb	r2, [r7, #31]
 80099b4:	461a      	mov	r2, r3
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	4413      	add	r3, r2
 80099ba:	2200      	movs	r2, #0
 80099bc:	701a      	strb	r2, [r3, #0]
 80099be:	e05f      	b.n	8009a80 <send_dummy_temp+0x164>
    } else if (temp_type == 0x02) {
 80099c0:	79fb      	ldrb	r3, [r7, #7]
 80099c2:	2b02      	cmp	r3, #2
 80099c4:	d12c      	bne.n	8009a20 <send_dummy_temp+0x104>
        // Ambient only
        notif[idx++] = 0x02;
 80099c6:	7ffb      	ldrb	r3, [r7, #31]
 80099c8:	1c5a      	adds	r2, r3, #1
 80099ca:	77fa      	strb	r2, [r7, #31]
 80099cc:	461a      	mov	r2, r3
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	4413      	add	r3, r2
 80099d2:	2202      	movs	r2, #2
 80099d4:	701a      	strb	r2, [r3, #0]
        notif[idx++] = (amb >> 8) & 0xFF;
 80099d6:	8a7b      	ldrh	r3, [r7, #18]
 80099d8:	0a1b      	lsrs	r3, r3, #8
 80099da:	b29a      	uxth	r2, r3
 80099dc:	7ffb      	ldrb	r3, [r7, #31]
 80099de:	1c59      	adds	r1, r3, #1
 80099e0:	77f9      	strb	r1, [r7, #31]
 80099e2:	4619      	mov	r1, r3
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	440b      	add	r3, r1
 80099e8:	b2d2      	uxtb	r2, r2
 80099ea:	701a      	strb	r2, [r3, #0]
        notif[idx++] = (amb >> 0) & 0xFF;
 80099ec:	7ffb      	ldrb	r3, [r7, #31]
 80099ee:	1c5a      	adds	r2, r3, #1
 80099f0:	77fa      	strb	r2, [r7, #31]
 80099f2:	461a      	mov	r2, r3
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	4413      	add	r3, r2
 80099f8:	8a7a      	ldrh	r2, [r7, #18]
 80099fa:	b2d2      	uxtb	r2, r2
 80099fc:	701a      	strb	r2, [r3, #0]
        notif[idx++] = 0x00;
 80099fe:	7ffb      	ldrb	r3, [r7, #31]
 8009a00:	1c5a      	adds	r2, r3, #1
 8009a02:	77fa      	strb	r2, [r7, #31]
 8009a04:	461a      	mov	r2, r3
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	4413      	add	r3, r2
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	701a      	strb	r2, [r3, #0]
        notif[idx++] = 0x00; // Padding
 8009a0e:	7ffb      	ldrb	r3, [r7, #31]
 8009a10:	1c5a      	adds	r2, r3, #1
 8009a12:	77fa      	strb	r2, [r7, #31]
 8009a14:	461a      	mov	r2, r3
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	4413      	add	r3, r2
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	701a      	strb	r2, [r3, #0]
 8009a1e:	e02f      	b.n	8009a80 <send_dummy_temp+0x164>
    } else {
        // Both: pack ambient then body, pad 1 byte
    	notif[idx++] = 0x03; // Padding
 8009a20:	7ffb      	ldrb	r3, [r7, #31]
 8009a22:	1c5a      	adds	r2, r3, #1
 8009a24:	77fa      	strb	r2, [r7, #31]
 8009a26:	461a      	mov	r2, r3
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	4413      	add	r3, r2
 8009a2c:	2203      	movs	r2, #3
 8009a2e:	701a      	strb	r2, [r3, #0]
        notif[idx++] = (amb >> 8) & 0xFF;
 8009a30:	8a7b      	ldrh	r3, [r7, #18]
 8009a32:	0a1b      	lsrs	r3, r3, #8
 8009a34:	b29a      	uxth	r2, r3
 8009a36:	7ffb      	ldrb	r3, [r7, #31]
 8009a38:	1c59      	adds	r1, r3, #1
 8009a3a:	77f9      	strb	r1, [r7, #31]
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	440b      	add	r3, r1
 8009a42:	b2d2      	uxtb	r2, r2
 8009a44:	701a      	strb	r2, [r3, #0]
        notif[idx++] = (amb >> 0) & 0xFF;
 8009a46:	7ffb      	ldrb	r3, [r7, #31]
 8009a48:	1c5a      	adds	r2, r3, #1
 8009a4a:	77fa      	strb	r2, [r7, #31]
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	4413      	add	r3, r2
 8009a52:	8a7a      	ldrh	r2, [r7, #18]
 8009a54:	b2d2      	uxtb	r2, r2
 8009a56:	701a      	strb	r2, [r3, #0]
        notif[idx++] = (body >> 8) & 0xFF;
 8009a58:	8a3b      	ldrh	r3, [r7, #16]
 8009a5a:	0a1b      	lsrs	r3, r3, #8
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	7ffb      	ldrb	r3, [r7, #31]
 8009a60:	1c59      	adds	r1, r3, #1
 8009a62:	77f9      	strb	r1, [r7, #31]
 8009a64:	4619      	mov	r1, r3
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	440b      	add	r3, r1
 8009a6a:	b2d2      	uxtb	r2, r2
 8009a6c:	701a      	strb	r2, [r3, #0]
        notif[idx++] = (body >> 0) & 0xFF;
 8009a6e:	7ffb      	ldrb	r3, [r7, #31]
 8009a70:	1c5a      	adds	r2, r3, #1
 8009a72:	77fa      	strb	r2, [r7, #31]
 8009a74:	461a      	mov	r2, r3
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	4413      	add	r3, r2
 8009a7a:	8a3a      	ldrh	r2, [r7, #16]
 8009a7c:	b2d2      	uxtb	r2, r2
 8009a7e:	701a      	strb	r2, [r3, #0]

    }

    // TIMESTAMP: fixed dummy Unix time
    uint32_t ts = 0x60D4A000;
 8009a80:	4b1c      	ldr	r3, [pc, #112]	@ (8009af4 <send_dummy_temp+0x1d8>)
 8009a82:	60fb      	str	r3, [r7, #12]
    notif[idx++] = (ts >> 24) & 0xFF;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	0e1a      	lsrs	r2, r3, #24
 8009a88:	7ffb      	ldrb	r3, [r7, #31]
 8009a8a:	1c59      	adds	r1, r3, #1
 8009a8c:	77f9      	strb	r1, [r7, #31]
 8009a8e:	4619      	mov	r1, r3
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	440b      	add	r3, r1
 8009a94:	b2d2      	uxtb	r2, r2
 8009a96:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 16) & 0xFF;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	0c1a      	lsrs	r2, r3, #16
 8009a9c:	7ffb      	ldrb	r3, [r7, #31]
 8009a9e:	1c59      	adds	r1, r3, #1
 8009aa0:	77f9      	strb	r1, [r7, #31]
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	440b      	add	r3, r1
 8009aa8:	b2d2      	uxtb	r2, r2
 8009aaa:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 8)  & 0xFF;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	0a1a      	lsrs	r2, r3, #8
 8009ab0:	7ffb      	ldrb	r3, [r7, #31]
 8009ab2:	1c59      	adds	r1, r3, #1
 8009ab4:	77f9      	strb	r1, [r7, #31]
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	440b      	add	r3, r1
 8009abc:	b2d2      	uxtb	r2, r2
 8009abe:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 0)  & 0xFF;
 8009ac0:	7ffb      	ldrb	r3, [r7, #31]
 8009ac2:	1c5a      	adds	r2, r3, #1
 8009ac4:	77fa      	strb	r2, [r7, #31]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	4413      	add	r3, r2
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	b2d2      	uxtb	r2, r2
 8009ad0:	701a      	strb	r2, [r3, #0]

    // CRC: sum of bytes [0..10] mod 256
    notif[idx] = ble_calculate_chksum(notif, 11);
 8009ad2:	7ffb      	ldrb	r3, [r7, #31]
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	18d4      	adds	r4, r2, r3
 8009ad8:	210b      	movs	r1, #11
 8009ada:	6978      	ldr	r0, [r7, #20]
 8009adc:	f7ff fbbb 	bl	8009256 <ble_calculate_chksum>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	7023      	strb	r3, [r4, #0]

    p_ble_notify->Status=Notify_Pending;
 8009ae4:	69bb      	ldr	r3, [r7, #24]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	701a      	strb	r2, [r3, #0]
}
 8009aea:	bf00      	nop
 8009aec:	3724      	adds	r7, #36	@ 0x24
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd90      	pop	{r4, r7, pc}
 8009af2:	bf00      	nop
 8009af4:	60d4a000 	.word	0x60d4a000

08009af8 <send_dummy_pressure>:

/**
 * @brief  Generate and send a dummy Pressure notification over BLE.
 */
static void send_dummy_pressure(void)
{
 8009af8:	b590      	push	{r4, r7, lr}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
	Custom_BLE_Notify_interface_t* p_ble_notify = ble_notify_interface_get();
 8009afe:	f7ff fbdf 	bl	80092c0 <ble_notify_interface_get>
 8009b02:	60f8      	str	r0, [r7, #12]
	uint8_t *notif = p_ble_notify->pck;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	60bb      	str	r3, [r7, #8]
    uint8_t idx = 0;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	71fb      	strb	r3, [r7, #7]

    // DATA_TYPE: bitmask for Pressure = 0x08
    notif[idx++] = 0x03;
 8009b0e:	79fb      	ldrb	r3, [r7, #7]
 8009b10:	1c5a      	adds	r2, r3, #1
 8009b12:	71fa      	strb	r2, [r7, #7]
 8009b14:	461a      	mov	r2, r3
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	4413      	add	r3, r2
 8009b1a:	2203      	movs	r2, #3
 8009b1c:	701a      	strb	r2, [r3, #0]
    // LEN: always 0x05
    notif[idx++] = 0x05;
 8009b1e:	79fb      	ldrb	r3, [r7, #7]
 8009b20:	1c5a      	adds	r2, r3, #1
 8009b22:	71fa      	strb	r2, [r7, #7]
 8009b24:	461a      	mov	r2, r3
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	4413      	add	r3, r2
 8009b2a:	2205      	movs	r2, #5
 8009b2c:	701a      	strb	r2, [r3, #0]

    // DATA: Pressure (e.g., 1013 hPa -> 0x03F5), pad 3 bytes
    uint16_t dummy_press = 1013;
 8009b2e:	f240 33f5 	movw	r3, #1013	@ 0x3f5
 8009b32:	80bb      	strh	r3, [r7, #4]
    notif[idx++] = 0x00;
 8009b34:	79fb      	ldrb	r3, [r7, #7]
 8009b36:	1c5a      	adds	r2, r3, #1
 8009b38:	71fa      	strb	r2, [r7, #7]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	4413      	add	r3, r2
 8009b40:	2200      	movs	r2, #0
 8009b42:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (dummy_press >> 8) & 0xFF;
 8009b44:	88bb      	ldrh	r3, [r7, #4]
 8009b46:	0a1b      	lsrs	r3, r3, #8
 8009b48:	b29a      	uxth	r2, r3
 8009b4a:	79fb      	ldrb	r3, [r7, #7]
 8009b4c:	1c59      	adds	r1, r3, #1
 8009b4e:	71f9      	strb	r1, [r7, #7]
 8009b50:	4619      	mov	r1, r3
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	440b      	add	r3, r1
 8009b56:	b2d2      	uxtb	r2, r2
 8009b58:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (dummy_press >> 0) & 0xFF;
 8009b5a:	79fb      	ldrb	r3, [r7, #7]
 8009b5c:	1c5a      	adds	r2, r3, #1
 8009b5e:	71fa      	strb	r2, [r7, #7]
 8009b60:	461a      	mov	r2, r3
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	4413      	add	r3, r2
 8009b66:	88ba      	ldrh	r2, [r7, #4]
 8009b68:	b2d2      	uxtb	r2, r2
 8009b6a:	701a      	strb	r2, [r3, #0]
    notif[idx++] = 0x00;
 8009b6c:	79fb      	ldrb	r3, [r7, #7]
 8009b6e:	1c5a      	adds	r2, r3, #1
 8009b70:	71fa      	strb	r2, [r7, #7]
 8009b72:	461a      	mov	r2, r3
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	4413      	add	r3, r2
 8009b78:	2200      	movs	r2, #0
 8009b7a:	701a      	strb	r2, [r3, #0]
    notif[idx++] = 0x00; // Padding
 8009b7c:	79fb      	ldrb	r3, [r7, #7]
 8009b7e:	1c5a      	adds	r2, r3, #1
 8009b80:	71fa      	strb	r2, [r7, #7]
 8009b82:	461a      	mov	r2, r3
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	4413      	add	r3, r2
 8009b88:	2200      	movs	r2, #0
 8009b8a:	701a      	strb	r2, [r3, #0]

    // TIMESTAMP: fixed dummy Unix time
    uint32_t ts = 0x60D4A000;
 8009b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8009c00 <send_dummy_pressure+0x108>)
 8009b8e:	603b      	str	r3, [r7, #0]
    notif[idx++] = (ts >> 24) & 0xFF;
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	0e1a      	lsrs	r2, r3, #24
 8009b94:	79fb      	ldrb	r3, [r7, #7]
 8009b96:	1c59      	adds	r1, r3, #1
 8009b98:	71f9      	strb	r1, [r7, #7]
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	440b      	add	r3, r1
 8009ba0:	b2d2      	uxtb	r2, r2
 8009ba2:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 16) & 0xFF;
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	0c1a      	lsrs	r2, r3, #16
 8009ba8:	79fb      	ldrb	r3, [r7, #7]
 8009baa:	1c59      	adds	r1, r3, #1
 8009bac:	71f9      	strb	r1, [r7, #7]
 8009bae:	4619      	mov	r1, r3
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	440b      	add	r3, r1
 8009bb4:	b2d2      	uxtb	r2, r2
 8009bb6:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 8)  & 0xFF;
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	0a1a      	lsrs	r2, r3, #8
 8009bbc:	79fb      	ldrb	r3, [r7, #7]
 8009bbe:	1c59      	adds	r1, r3, #1
 8009bc0:	71f9      	strb	r1, [r7, #7]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	440b      	add	r3, r1
 8009bc8:	b2d2      	uxtb	r2, r2
 8009bca:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 0)  & 0xFF;
 8009bcc:	79fb      	ldrb	r3, [r7, #7]
 8009bce:	1c5a      	adds	r2, r3, #1
 8009bd0:	71fa      	strb	r2, [r7, #7]
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	683a      	ldr	r2, [r7, #0]
 8009bda:	b2d2      	uxtb	r2, r2
 8009bdc:	701a      	strb	r2, [r3, #0]

    // CRC: sum of bytes [0..10] mod 256
    notif[idx] = ble_calculate_chksum(notif, 11);
 8009bde:	79fb      	ldrb	r3, [r7, #7]
 8009be0:	68ba      	ldr	r2, [r7, #8]
 8009be2:	18d4      	adds	r4, r2, r3
 8009be4:	210b      	movs	r1, #11
 8009be6:	68b8      	ldr	r0, [r7, #8]
 8009be8:	f7ff fb35 	bl	8009256 <ble_calculate_chksum>
 8009bec:	4603      	mov	r3, r0
 8009bee:	7023      	strb	r3, [r4, #0]

    p_ble_notify->Status=Notify_Pending;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	701a      	strb	r2, [r3, #0]
}
 8009bf6:	bf00      	nop
 8009bf8:	3714      	adds	r7, #20
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd90      	pop	{r4, r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	60d4a000 	.word	0x60d4a000

08009c04 <send_dummy_all_data>:
/**
 * @brief  Generate and send dummy “all data” notifications over BLE.
 *         Splits into two notifications: [HR+SpO₂], then [Temp+Pressure].
 */
static void send_dummy_all_data(void)
{
 8009c04:	b590      	push	{r4, r7, lr}
 8009c06:	b087      	sub	sp, #28
 8009c08:	af00      	add	r7, sp, #0
    // First packet: HR (0x01) + SpO₂ (0x02) = data_type 0x03
//    {
		Custom_BLE_Notify_interface_t* p_ble_notify =ble_notify_interface_get();
 8009c0a:	f7ff fb59 	bl	80092c0 <ble_notify_interface_get>
 8009c0e:	6178      	str	r0, [r7, #20]
		uint8_t *notif = p_ble_notify->pck;
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	613b      	str	r3, [r7, #16]
        uint8_t idx1 = 0;
 8009c16:	2300      	movs	r3, #0
 8009c18:	73fb      	strb	r3, [r7, #15]
        notif[idx1++] = 0x04;  // DATA_TYPE
 8009c1a:	7bfb      	ldrb	r3, [r7, #15]
 8009c1c:	1c5a      	adds	r2, r3, #1
 8009c1e:	73fa      	strb	r2, [r7, #15]
 8009c20:	461a      	mov	r2, r3
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	4413      	add	r3, r2
 8009c26:	2204      	movs	r2, #4
 8009c28:	701a      	strb	r2, [r3, #0]
        notif[idx1++] = 0x05;  // LEN
 8009c2a:	7bfb      	ldrb	r3, [r7, #15]
 8009c2c:	1c5a      	adds	r2, r3, #1
 8009c2e:	73fa      	strb	r2, [r7, #15]
 8009c30:	461a      	mov	r2, r3
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	4413      	add	r3, r2
 8009c36:	2205      	movs	r2, #5
 8009c38:	701a      	strb	r2, [r3, #0]

        uint16_t dummy_hr = 70;
 8009c3a:	2346      	movs	r3, #70	@ 0x46
 8009c3c:	81bb      	strh	r3, [r7, #12]
        uint16_t dummy_spo2 = 98;
 8009c3e:	2362      	movs	r3, #98	@ 0x62
 8009c40:	817b      	strh	r3, [r7, #10]

        notif[idx1++] = 0x00;  // Padding
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
 8009c44:	1c5a      	adds	r2, r3, #1
 8009c46:	73fa      	strb	r2, [r7, #15]
 8009c48:	461a      	mov	r2, r3
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	2200      	movs	r2, #0
 8009c50:	701a      	strb	r2, [r3, #0]
        notif[idx1++] = (dummy_hr >> 8) & 0xFF;
 8009c52:	89bb      	ldrh	r3, [r7, #12]
 8009c54:	0a1b      	lsrs	r3, r3, #8
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	7bfb      	ldrb	r3, [r7, #15]
 8009c5a:	1c59      	adds	r1, r3, #1
 8009c5c:	73f9      	strb	r1, [r7, #15]
 8009c5e:	4619      	mov	r1, r3
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	440b      	add	r3, r1
 8009c64:	b2d2      	uxtb	r2, r2
 8009c66:	701a      	strb	r2, [r3, #0]
        notif[idx1++] = (dummy_hr >> 0) & 0xFF;
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
 8009c6a:	1c5a      	adds	r2, r3, #1
 8009c6c:	73fa      	strb	r2, [r7, #15]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	4413      	add	r3, r2
 8009c74:	89ba      	ldrh	r2, [r7, #12]
 8009c76:	b2d2      	uxtb	r2, r2
 8009c78:	701a      	strb	r2, [r3, #0]
        notif[idx1++] = (dummy_spo2 >> 8) & 0xFF;
 8009c7a:	897b      	ldrh	r3, [r7, #10]
 8009c7c:	0a1b      	lsrs	r3, r3, #8
 8009c7e:	b29a      	uxth	r2, r3
 8009c80:	7bfb      	ldrb	r3, [r7, #15]
 8009c82:	1c59      	adds	r1, r3, #1
 8009c84:	73f9      	strb	r1, [r7, #15]
 8009c86:	4619      	mov	r1, r3
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	440b      	add	r3, r1
 8009c8c:	b2d2      	uxtb	r2, r2
 8009c8e:	701a      	strb	r2, [r3, #0]
        notif[idx1++] = (dummy_spo2 >> 0) & 0xFF;
 8009c90:	7bfb      	ldrb	r3, [r7, #15]
 8009c92:	1c5a      	adds	r2, r3, #1
 8009c94:	73fa      	strb	r2, [r7, #15]
 8009c96:	461a      	mov	r2, r3
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	897a      	ldrh	r2, [r7, #10]
 8009c9e:	b2d2      	uxtb	r2, r2
 8009ca0:	701a      	strb	r2, [r3, #0]


        uint32_t ts = 0x60D4A000;
 8009ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8009d14 <send_dummy_all_data+0x110>)
 8009ca4:	607b      	str	r3, [r7, #4]
        notif[idx1++] = (ts >> 24) & 0xFF;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	0e1a      	lsrs	r2, r3, #24
 8009caa:	7bfb      	ldrb	r3, [r7, #15]
 8009cac:	1c59      	adds	r1, r3, #1
 8009cae:	73f9      	strb	r1, [r7, #15]
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	440b      	add	r3, r1
 8009cb6:	b2d2      	uxtb	r2, r2
 8009cb8:	701a      	strb	r2, [r3, #0]
        notif[idx1++] = (ts >> 16) & 0xFF;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	0c1a      	lsrs	r2, r3, #16
 8009cbe:	7bfb      	ldrb	r3, [r7, #15]
 8009cc0:	1c59      	adds	r1, r3, #1
 8009cc2:	73f9      	strb	r1, [r7, #15]
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	440b      	add	r3, r1
 8009cca:	b2d2      	uxtb	r2, r2
 8009ccc:	701a      	strb	r2, [r3, #0]
        notif[idx1++] = (ts >> 8)  & 0xFF;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	0a1a      	lsrs	r2, r3, #8
 8009cd2:	7bfb      	ldrb	r3, [r7, #15]
 8009cd4:	1c59      	adds	r1, r3, #1
 8009cd6:	73f9      	strb	r1, [r7, #15]
 8009cd8:	4619      	mov	r1, r3
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	440b      	add	r3, r1
 8009cde:	b2d2      	uxtb	r2, r2
 8009ce0:	701a      	strb	r2, [r3, #0]
        notif[idx1++] = (ts >> 0)  & 0xFF;
 8009ce2:	7bfb      	ldrb	r3, [r7, #15]
 8009ce4:	1c5a      	adds	r2, r3, #1
 8009ce6:	73fa      	strb	r2, [r7, #15]
 8009ce8:	461a      	mov	r2, r3
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	4413      	add	r3, r2
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	b2d2      	uxtb	r2, r2
 8009cf2:	701a      	strb	r2, [r3, #0]

        notif[idx1] = ble_calculate_chksum(notif, 11);
 8009cf4:	7bfb      	ldrb	r3, [r7, #15]
 8009cf6:	693a      	ldr	r2, [r7, #16]
 8009cf8:	18d4      	adds	r4, r2, r3
 8009cfa:	210b      	movs	r1, #11
 8009cfc:	6938      	ldr	r0, [r7, #16]
 8009cfe:	f7ff faaa 	bl	8009256 <ble_calculate_chksum>
 8009d02:	4603      	mov	r3, r0
 8009d04:	7023      	strb	r3, [r4, #0]
        p_ble_notify->Status=Notify_Pending;
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	701a      	strb	r2, [r3, #0]

}
 8009d0c:	bf00      	nop
 8009d0e:	371c      	adds	r7, #28
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd90      	pop	{r4, r7, pc}
 8009d14:	60d4a000 	.word	0x60d4a000

08009d18 <data_handler_req_hr_spo2>:

/**
 * @brief  Request current Heart Rate & SpO₂ + timestamp from the other MCU.
 */
void data_handler_req_hr_spo2(void)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	af00      	add	r7, sp, #0
#ifdef BLE_DEBUG_DUMMY_DATA
    send_dummy_hr_spo2();
 8009d1c:	f7ff fd72 	bl	8009804 <send_dummy_hr_spo2>
#else
    uint8_t params[4] = {0x00, 0x00, 0x00, 0x00};
    uart_send_frame(0x01, params);
    uart_receive_response();
#endif
}
 8009d20:	bf00      	nop
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <data_handler_req_temp>:
/**
 * @brief  Request Temperature.
 * @param  temp_type: 0x01 = Body, 0x02 = Environmental, 0x03 = Both
 */
void data_handler_req_temp(uint8_t temp_type)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	71fb      	strb	r3, [r7, #7]
#ifdef BLE_DEBUG_DUMMY_DATA
    send_dummy_temp(temp_type);
 8009d2e:	79fb      	ldrb	r3, [r7, #7]
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7ff fdf3 	bl	800991c <send_dummy_temp>
#else
    uint8_t params[4] = { temp_type, 0x00, 0x00, 0x00 };
    uart_send_frame(0x02, params);
    uart_receive_response();
#endif
}
 8009d36:	bf00      	nop
 8009d38:	3708      	adds	r7, #8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <data_handler_req_pressure>:

/**
 * @brief  Request Pressure.
 */
void data_handler_req_pressure(void)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	af00      	add	r7, sp, #0
#ifdef BLE_DEBUG_DUMMY_DATA
    send_dummy_pressure();
 8009d42:	f7ff fed9 	bl	8009af8 <send_dummy_pressure>
#else
    uint8_t params[4] = {0x00, 0x00, 0x00, 0x00};
    uart_send_frame(0x03, params);
    uart_receive_response();
#endif
}
 8009d46:	bf00      	nop
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <data_handler_req_all_data>:

/**
 * @brief  Request all sensor data (HR, SpO₂, Temp, Pressure).
 */
void data_handler_req_all_data(void)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	af00      	add	r7, sp, #0
#ifdef BLE_DEBUG_DUMMY_DATA
    send_dummy_all_data();
 8009d4e:	f7ff ff59 	bl	8009c04 <send_dummy_all_data>
#else
    uint8_t params[4] = {0x00, 0x00, 0x00, 0x00};
    uart_send_frame(0x04, params);
    uart_receive_response();
#endif
}
 8009d52:	bf00      	nop
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <data_handler_req_historical_data>:
/**
 * @brief  Request historical data starting from a Unix timestamp.
 * @param  start_time: 32-bit Unix timestamp (big-endian).
 */
void data_handler_req_historical_data(uint32_t start_time)
{
 8009d56:	b480      	push	{r7}
 8009d58:	b085      	sub	sp, #20
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
    uint8_t params[4];
    params[0] = (start_time >> 24) & 0xFF;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	0e1b      	lsrs	r3, r3, #24
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	733b      	strb	r3, [r7, #12]
    params[1] = (start_time >> 16) & 0xFF;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	0c1b      	lsrs	r3, r3, #16
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	737b      	strb	r3, [r7, #13]
    params[2] = (start_time >> 8)  & 0xFF;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	0a1b      	lsrs	r3, r3, #8
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	73bb      	strb	r3, [r7, #14]
    params[3] = (start_time >> 0)  & 0xFF;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	73fb      	strb	r3, [r7, #15]

//    uart_send_frame(0x10, params);
//    uart_receive_response();
    // Note: might require multiple responses if there are many historical records.
}
 8009d7c:	bf00      	nop
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <data_handler_req_set_unix_time>:
/**
 * @brief  Send current Unix time to the other MCU.
 * @param  unix_time: 32-bit Unix time (big-endian).
 */
void data_handler_req_set_unix_time(uint32_t unix_time)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
    uint8_t params[4];
    params[0] = (unix_time >> 24) & 0xFF;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	0e1b      	lsrs	r3, r3, #24
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	733b      	strb	r3, [r7, #12]
    params[1] = (unix_time >> 16) & 0xFF;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	0c1b      	lsrs	r3, r3, #16
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	737b      	strb	r3, [r7, #13]
    params[2] = (unix_time >> 8)  & 0xFF;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	0a1b      	lsrs	r3, r3, #8
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	73bb      	strb	r3, [r7, #14]
    params[3] = (unix_time >> 0)  & 0xFF;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	73fb      	strb	r3, [r7, #15]

//    uart_send_frame(0x20, params);
//    uart_receive_response();
}
 8009dae:	bf00      	nop
 8009db0:	3714      	adds	r7, #20
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr

08009dba <data_handler_req_set_sensor_config>:
 * @brief  Configure a sensor (sampling rate or future features).
 * @param  sensor_type: 1-byte ID (same as BLE data type).
 * @param  config_val:  1-byte configuration value (TBD).
 */
void data_handler_req_set_sensor_config(uint8_t sensor_type, uint8_t config_val)
{
 8009dba:	b480      	push	{r7}
 8009dbc:	b085      	sub	sp, #20
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	460a      	mov	r2, r1
 8009dc4:	71fb      	strb	r3, [r7, #7]
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	71bb      	strb	r3, [r7, #6]
    uint8_t params[4] = { sensor_type, config_val, 0x00, 0x00 };
 8009dca:	79fb      	ldrb	r3, [r7, #7]
 8009dcc:	733b      	strb	r3, [r7, #12]
 8009dce:	79bb      	ldrb	r3, [r7, #6]
 8009dd0:	737b      	strb	r3, [r7, #13]
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	73bb      	strb	r3, [r7, #14]
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	73fb      	strb	r3, [r7, #15]
//    uart_send_frame(0x30, params);
//    uart_receive_response();
}
 8009dda:	bf00      	nop
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr

08009de6 <data_handler_req_start_stream>:
/**
 * @brief  Start live data streaming.
 * @param  stream_mask: bitmask (e.g., 0x1F = HR | SpO₂ | Temp | Pressure).
 */
void data_handler_req_start_stream(uint8_t stream_mask)
{
 8009de6:	b480      	push	{r7}
 8009de8:	b085      	sub	sp, #20
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	4603      	mov	r3, r0
 8009dee:	71fb      	strb	r3, [r7, #7]
    uint8_t params[4] = { stream_mask, 0x00, 0x00, 0x00 };
 8009df0:	79fb      	ldrb	r3, [r7, #7]
 8009df2:	733b      	strb	r3, [r7, #12]
 8009df4:	2300      	movs	r3, #0
 8009df6:	737b      	strb	r3, [r7, #13]
 8009df8:	2300      	movs	r3, #0
 8009dfa:	73bb      	strb	r3, [r7, #14]
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	73fb      	strb	r3, [r7, #15]
//    uart_send_frame(0x40, params);
//    // The secondary MCU will begin sending periodic frames:
//    // [START][DATA_TYPE][LEN][DATA...][TIMESTAMP][CRC]
//    uart_receive_response();
}
 8009e00:	bf00      	nop
 8009e02:	3714      	adds	r7, #20
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <data_handler_req_stop_stream>:

/**
 * @brief  Stop any ongoing live streaming.
 */
void data_handler_req_stop_stream(void)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
    uint8_t params[4] = {0x00, 0x00, 0x00, 0x00};
 8009e12:	2300      	movs	r3, #0
 8009e14:	607b      	str	r3, [r7, #4]
//    uart_send_frame(0x41, params);
//    uart_receive_response();
}
 8009e16:	bf00      	nop
 8009e18:	370c      	adds	r7, #12
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
	...

08009e24 <data_handler_Init>:
	    p_ble_notify->Status = Notify_Pending;


}

void data_handler_Init() {
 8009e24:	b580      	push	{r7, lr}
 8009e26:	af00      	add	r7, sp, #0

    data_handler = (Data_Handler_t *)malloc(sizeof(Data_Handler_t));
 8009e28:	2008      	movs	r0, #8
 8009e2a:	f000 fd45 	bl	800a8b8 <malloc>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	461a      	mov	r2, r3
 8009e32:	4b08      	ldr	r3, [pc, #32]	@ (8009e54 <data_handler_Init+0x30>)
 8009e34:	601a      	str	r2, [r3, #0]
    data_handler->payload=data_handler_buffer;
 8009e36:	4b07      	ldr	r3, [pc, #28]	@ (8009e54 <data_handler_Init+0x30>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a07      	ldr	r2, [pc, #28]	@ (8009e58 <data_handler_Init+0x34>)
 8009e3c:	605a      	str	r2, [r3, #4]

    memset(data_handler->payload, 0, DATA_HANDLER_PAYLOAD_LENGHT);
 8009e3e:	4b05      	ldr	r3, [pc, #20]	@ (8009e54 <data_handler_Init+0x30>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	220a      	movs	r2, #10
 8009e46:	2100      	movs	r1, #0
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f000 fdeb 	bl	800aa24 <memset>

}
 8009e4e:	bf00      	nop
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	20000620 	.word	0x20000620
 8009e58:	20000624 	.word	0x20000624

08009e5c <LL_PWR_EnableBootC2>:
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8009e60:	4b05      	ldr	r3, [pc, #20]	@ (8009e78 <LL_PWR_EnableBootC2+0x1c>)
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	4a04      	ldr	r2, [pc, #16]	@ (8009e78 <LL_PWR_EnableBootC2+0x1c>)
 8009e66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e6a:	60d3      	str	r3, [r2, #12]
}
 8009e6c:	bf00      	nop
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop
 8009e78:	58000400 	.word	0x58000400

08009e7c <LL_C2_EXTI_EnableEvent_32_63>:
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8009e84:	4b06      	ldr	r3, [pc, #24]	@ (8009ea0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009e86:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8009e8a:	4905      	ldr	r1, [pc, #20]	@ (8009ea0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr
 8009ea0:	58000800 	.word	0x58000800

08009ea4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009eac:	4b05      	ldr	r3, [pc, #20]	@ (8009ec4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009eae:	6a1a      	ldr	r2, [r3, #32]
 8009eb0:	4904      	ldr	r1, [pc, #16]	@ (8009ec4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	620b      	str	r3, [r1, #32]
}
 8009eb8:	bf00      	nop
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr
 8009ec4:	58000800 	.word	0x58000800

08009ec8 <LL_AHB3_GRP1_EnableClock>:
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8009ed0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009ed4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009ed6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8009ee0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009ee4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4013      	ands	r3, r2
 8009eea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009eec:	68fb      	ldr	r3, [r7, #12]
}
 8009eee:	bf00      	nop
 8009ef0:	3714      	adds	r7, #20
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8009efa:	b480      	push	{r7}
 8009efc:	b085      	sub	sp, #20
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8009f02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009f06:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8009f0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8009f16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009f1a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4013      	ands	r3, r2
 8009f22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009f24:	68fb      	ldr	r3, [r7, #12]
}
 8009f26:	bf00      	nop
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr

08009f32 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8009f32:	b480      	push	{r7}
 8009f34:	b083      	sub	sp, #12
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	601a      	str	r2, [r3, #0]
}
 8009f46:	bf00      	nop
 8009f48:	370c      	adds	r7, #12
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr

08009f52 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8009f52:	b480      	push	{r7}
 8009f54:	b083      	sub	sp, #12
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f043 0201 	orr.w	r2, r3, #1
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	601a      	str	r2, [r3, #0]
}
 8009f66:	bf00      	nop
 8009f68:	370c      	adds	r7, #12
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr

08009f72 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009f72:	b480      	push	{r7}
 8009f74:	b083      	sub	sp, #12
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
 8009f7a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	685a      	ldr	r2, [r3, #4]
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	041b      	lsls	r3, r3, #16
 8009f84:	43db      	mvns	r3, r3
 8009f86:	401a      	ands	r2, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	605a      	str	r2, [r3, #4]
}
 8009f8c:	bf00      	nop
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	685a      	ldr	r2, [r3, #4]
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	041b      	lsls	r3, r3, #16
 8009faa:	431a      	orrs	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	605a      	str	r2, [r3, #4]
}
 8009fb0:	bf00      	nop
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	685a      	ldr	r2, [r3, #4]
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	43db      	mvns	r3, r3
 8009fce:	401a      	ands	r2, r3
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	605a      	str	r2, [r3, #4]
}
 8009fd4:	bf00      	nop
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	683a      	ldr	r2, [r7, #0]
 8009fee:	609a      	str	r2, [r3, #8]
}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	041a      	lsls	r2, r3, #16
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	609a      	str	r2, [r3, #8]
}
 800a00e:	bf00      	nop
 800a010:	370c      	adds	r7, #12
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr

0800a01a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800a01a:	b480      	push	{r7}
 800a01c:	b083      	sub	sp, #12
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	68da      	ldr	r2, [r3, #12]
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	4013      	ands	r3, r2
 800a02c:	683a      	ldr	r2, [r7, #0]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d101      	bne.n	800a036 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800a032:	2301      	movs	r3, #1
 800a034:	e000      	b.n	800a038 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	69da      	ldr	r2, [r3, #28]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	4013      	ands	r3, r2
 800a056:	683a      	ldr	r2, [r7, #0]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d101      	bne.n	800a060 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800a05c:	2301      	movs	r3, #1
 800a05e:	e000      	b.n	800a062 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	370c      	adds	r7, #12
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr
	...

0800a070 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800a074:	2102      	movs	r1, #2
 800a076:	4818      	ldr	r0, [pc, #96]	@ (800a0d8 <HW_IPCC_Rx_Handler+0x68>)
 800a078:	f7ff ffe4 	bl	800a044 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d008      	beq.n	800a094 <HW_IPCC_Rx_Handler+0x24>
 800a082:	4b15      	ldr	r3, [pc, #84]	@ (800a0d8 <HW_IPCC_Rx_Handler+0x68>)
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	f003 0302 	and.w	r3, r3, #2
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d102      	bne.n	800a094 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800a08e:	f000 f925 	bl	800a2dc <HW_IPCC_SYS_EvtHandler>
 800a092:	e01e      	b.n	800a0d2 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800a094:	2101      	movs	r1, #1
 800a096:	4810      	ldr	r0, [pc, #64]	@ (800a0d8 <HW_IPCC_Rx_Handler+0x68>)
 800a098:	f7ff ffd4 	bl	800a044 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d008      	beq.n	800a0b4 <HW_IPCC_Rx_Handler+0x44>
 800a0a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a0d8 <HW_IPCC_Rx_Handler+0x68>)
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	f003 0301 	and.w	r3, r3, #1
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d102      	bne.n	800a0b4 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800a0ae:	f000 f899 	bl	800a1e4 <HW_IPCC_BLE_EvtHandler>
 800a0b2:	e00e      	b.n	800a0d2 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800a0b4:	2108      	movs	r1, #8
 800a0b6:	4808      	ldr	r0, [pc, #32]	@ (800a0d8 <HW_IPCC_Rx_Handler+0x68>)
 800a0b8:	f7ff ffc4 	bl	800a044 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d008      	beq.n	800a0d4 <HW_IPCC_Rx_Handler+0x64>
 800a0c2:	4b05      	ldr	r3, [pc, #20]	@ (800a0d8 <HW_IPCC_Rx_Handler+0x68>)
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	f003 0308 	and.w	r3, r3, #8
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d102      	bne.n	800a0d4 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800a0ce:	f000 f97d 	bl	800a3cc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800a0d2:	bf00      	nop
 800a0d4:	bf00      	nop
}
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	58000c00 	.word	0x58000c00

0800a0dc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800a0e0:	2102      	movs	r1, #2
 800a0e2:	4818      	ldr	r0, [pc, #96]	@ (800a144 <HW_IPCC_Tx_Handler+0x68>)
 800a0e4:	f7ff ff99 	bl	800a01a <LL_C1_IPCC_IsActiveFlag_CHx>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d108      	bne.n	800a100 <HW_IPCC_Tx_Handler+0x24>
 800a0ee:	4b15      	ldr	r3, [pc, #84]	@ (800a144 <HW_IPCC_Tx_Handler+0x68>)
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d102      	bne.n	800a100 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800a0fa:	f000 f8d3 	bl	800a2a4 <HW_IPCC_SYS_CmdEvtHandler>
 800a0fe:	e01e      	b.n	800a13e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800a100:	2108      	movs	r1, #8
 800a102:	4810      	ldr	r0, [pc, #64]	@ (800a144 <HW_IPCC_Tx_Handler+0x68>)
 800a104:	f7ff ff89 	bl	800a01a <LL_C1_IPCC_IsActiveFlag_CHx>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d108      	bne.n	800a120 <HW_IPCC_Tx_Handler+0x44>
 800a10e:	4b0d      	ldr	r3, [pc, #52]	@ (800a144 <HW_IPCC_Tx_Handler+0x68>)
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a116:	2b00      	cmp	r3, #0
 800a118:	d102      	bne.n	800a120 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800a11a:	f000 f919 	bl	800a350 <HW_IPCC_MM_FreeBufHandler>
 800a11e:	e00e      	b.n	800a13e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800a120:	2120      	movs	r1, #32
 800a122:	4808      	ldr	r0, [pc, #32]	@ (800a144 <HW_IPCC_Tx_Handler+0x68>)
 800a124:	f7ff ff79 	bl	800a01a <LL_C1_IPCC_IsActiveFlag_CHx>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d108      	bne.n	800a140 <HW_IPCC_Tx_Handler+0x64>
 800a12e:	4b05      	ldr	r3, [pc, #20]	@ (800a144 <HW_IPCC_Tx_Handler+0x68>)
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a136:	2b00      	cmp	r3, #0
 800a138:	d102      	bne.n	800a140 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800a13a:	f000 f85f 	bl	800a1fc <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800a13e:	bf00      	nop
 800a140:	bf00      	nop
}
 800a142:	bd80      	pop	{r7, pc}
 800a144:	58000c00 	.word	0x58000c00

0800a148 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800a14c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a150:	f7ff fed3 	bl	8009efa <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800a154:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a158:	f7ff fea4 	bl	8009ea4 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800a15c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a160:	f7ff fe8c 	bl	8009e7c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800a164:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800a166:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800a168:	f7ff fe78 	bl	8009e5c <LL_PWR_EnableBootC2>

  return;
 800a16c:	bf00      	nop
}
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800a174:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a178:	f7ff fea6 	bl	8009ec8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800a17c:	4806      	ldr	r0, [pc, #24]	@ (800a198 <HW_IPCC_Init+0x28>)
 800a17e:	f7ff fee8 	bl	8009f52 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800a182:	4805      	ldr	r0, [pc, #20]	@ (800a198 <HW_IPCC_Init+0x28>)
 800a184:	f7ff fed5 	bl	8009f32 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800a188:	202c      	movs	r0, #44	@ 0x2c
 800a18a:	f7f8 f89a 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800a18e:	202d      	movs	r0, #45	@ 0x2d
 800a190:	f7f8 f897 	bl	80022c2 <HAL_NVIC_EnableIRQ>

  return;
 800a194:	bf00      	nop
}
 800a196:	bd80      	pop	{r7, pc}
 800a198:	58000c00 	.word	0x58000c00

0800a19c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1a2:	f3ef 8310 	mrs	r3, PRIMASK
 800a1a6:	607b      	str	r3, [r7, #4]
  return(result);
 800a1a8:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a1aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1ac:	b672      	cpsid	i
}
 800a1ae:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a1b0:	2101      	movs	r1, #1
 800a1b2:	4806      	ldr	r0, [pc, #24]	@ (800a1cc <HW_IPCC_BLE_Init+0x30>)
 800a1b4:	f7ff ff02 	bl	8009fbc <LL_C1_IPCC_EnableReceiveChannel>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	f383 8810 	msr	PRIMASK, r3
}
 800a1c2:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800a1c4:	bf00      	nop
}
 800a1c6:	3710      	adds	r7, #16
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	58000c00 	.word	0x58000c00

0800a1d0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800a1d4:	2101      	movs	r1, #1
 800a1d6:	4802      	ldr	r0, [pc, #8]	@ (800a1e0 <HW_IPCC_BLE_SendCmd+0x10>)
 800a1d8:	f7ff ff10 	bl	8009ffc <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a1dc:	bf00      	nop
}
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	58000c00 	.word	0x58000c00

0800a1e4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800a1e8:	f7fe fa82 	bl	80086f0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a1ec:	2101      	movs	r1, #1
 800a1ee:	4802      	ldr	r0, [pc, #8]	@ (800a1f8 <HW_IPCC_BLE_EvtHandler+0x14>)
 800a1f0:	f7ff fef6 	bl	8009fe0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a1f4:	bf00      	nop
}
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	58000c00 	.word	0x58000c00

0800a1fc <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a202:	f3ef 8310 	mrs	r3, PRIMASK
 800a206:	607b      	str	r3, [r7, #4]
  return(result);
 800a208:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a20a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a20c:	b672      	cpsid	i
}
 800a20e:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800a210:	2120      	movs	r1, #32
 800a212:	4807      	ldr	r0, [pc, #28]	@ (800a230 <HW_IPCC_BLE_AclDataEvtHandler+0x34>)
 800a214:	f7ff fec0 	bl	8009f98 <LL_C1_IPCC_DisableTransmitChannel>
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	f383 8810 	msr	PRIMASK, r3
}
 800a222:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_BLE_AclDataAckNot();
 800a224:	f7fe fa94 	bl	8008750 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800a228:	bf00      	nop
}
 800a22a:	3710      	adds	r7, #16
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	58000c00 	.word	0x58000c00

0800a234 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a23a:	f3ef 8310 	mrs	r3, PRIMASK
 800a23e:	607b      	str	r3, [r7, #4]
  return(result);
 800a240:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a242:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a244:	b672      	cpsid	i
}
 800a246:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a248:	2102      	movs	r1, #2
 800a24a:	4806      	ldr	r0, [pc, #24]	@ (800a264 <HW_IPCC_SYS_Init+0x30>)
 800a24c:	f7ff feb6 	bl	8009fbc <LL_C1_IPCC_EnableReceiveChannel>
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	f383 8810 	msr	PRIMASK, r3
}
 800a25a:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800a25c:	bf00      	nop
}
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	58000c00 	.word	0x58000c00

0800a268 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a26e:	2102      	movs	r1, #2
 800a270:	480b      	ldr	r0, [pc, #44]	@ (800a2a0 <HW_IPCC_SYS_SendCmd+0x38>)
 800a272:	f7ff fec3 	bl	8009ffc <LL_C1_IPCC_SetFlag_CHx>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a276:	f3ef 8310 	mrs	r3, PRIMASK
 800a27a:	607b      	str	r3, [r7, #4]
  return(result);
 800a27c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a27e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a280:	b672      	cpsid	i
}
 800a282:	bf00      	nop
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a284:	2102      	movs	r1, #2
 800a286:	4806      	ldr	r0, [pc, #24]	@ (800a2a0 <HW_IPCC_SYS_SendCmd+0x38>)
 800a288:	f7ff fe73 	bl	8009f72 <LL_C1_IPCC_EnableTransmitChannel>
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	f383 8810 	msr	PRIMASK, r3
}
 800a296:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800a298:	bf00      	nop
}
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	58000c00 	.word	0x58000c00

0800a2a4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2aa:	f3ef 8310 	mrs	r3, PRIMASK
 800a2ae:	607b      	str	r3, [r7, #4]
  return(result);
 800a2b0:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a2b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2b4:	b672      	cpsid	i
}
 800a2b6:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a2b8:	2102      	movs	r1, #2
 800a2ba:	4807      	ldr	r0, [pc, #28]	@ (800a2d8 <HW_IPCC_SYS_CmdEvtHandler+0x34>)
 800a2bc:	f7ff fe6c 	bl	8009f98 <LL_C1_IPCC_DisableTransmitChannel>
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	f383 8810 	msr	PRIMASK, r3
}
 800a2ca:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_SYS_CmdEvtNot();
 800a2cc:	f7fe fa90 	bl	80087f0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800a2d0:	bf00      	nop
}
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	58000c00 	.word	0x58000c00

0800a2dc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800a2e0:	f7fe fa9c 	bl	800881c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a2e4:	2102      	movs	r1, #2
 800a2e6:	4802      	ldr	r0, [pc, #8]	@ (800a2f0 <HW_IPCC_SYS_EvtHandler+0x14>)
 800a2e8:	f7ff fe7a 	bl	8009fe0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a2ec:	bf00      	nop
}
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	58000c00 	.word	0x58000c00

0800a2f4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b086      	sub	sp, #24
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800a2fc:	2108      	movs	r1, #8
 800a2fe:	4812      	ldr	r0, [pc, #72]	@ (800a348 <HW_IPCC_MM_SendFreeBuf+0x54>)
 800a300:	f7ff fe8b 	bl	800a01a <LL_C1_IPCC_IsActiveFlag_CHx>
 800a304:	4603      	mov	r3, r0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d013      	beq.n	800a332 <HW_IPCC_MM_SendFreeBuf+0x3e>
  {
    FreeBufCb = cb;
 800a30a:	4a10      	ldr	r2, [pc, #64]	@ (800a34c <HW_IPCC_MM_SendFreeBuf+0x58>)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a310:	f3ef 8310 	mrs	r3, PRIMASK
 800a314:	60fb      	str	r3, [r7, #12]
  return(result);
 800a316:	68fb      	ldr	r3, [r7, #12]
    UTILS_ENTER_CRITICAL_SECTION();
 800a318:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a31a:	b672      	cpsid	i
}
 800a31c:	bf00      	nop
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a31e:	2108      	movs	r1, #8
 800a320:	4809      	ldr	r0, [pc, #36]	@ (800a348 <HW_IPCC_MM_SendFreeBuf+0x54>)
 800a322:	f7ff fe26 	bl	8009f72 <LL_C1_IPCC_EnableTransmitChannel>
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	f383 8810 	msr	PRIMASK, r3
}
 800a330:	e005      	b.n	800a33e <HW_IPCC_MM_SendFreeBuf+0x4a>
    UTILS_EXIT_CRITICAL_SECTION();
  }
  else
  {
    cb();
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4798      	blx	r3

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a336:	2108      	movs	r1, #8
 800a338:	4803      	ldr	r0, [pc, #12]	@ (800a348 <HW_IPCC_MM_SendFreeBuf+0x54>)
 800a33a:	f7ff fe5f 	bl	8009ffc <LL_C1_IPCC_SetFlag_CHx>
  }

  return;
 800a33e:	bf00      	nop
}
 800a340:	3718      	adds	r7, #24
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	58000c00 	.word	0x58000c00
 800a34c:	20000630 	.word	0x20000630

0800a350 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a356:	f3ef 8310 	mrs	r3, PRIMASK
 800a35a:	607b      	str	r3, [r7, #4]
  return(result);
 800a35c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a35e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a360:	b672      	cpsid	i
}
 800a362:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a364:	2108      	movs	r1, #8
 800a366:	480a      	ldr	r0, [pc, #40]	@ (800a390 <HW_IPCC_MM_FreeBufHandler+0x40>)
 800a368:	f7ff fe16 	bl	8009f98 <LL_C1_IPCC_DisableTransmitChannel>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	f383 8810 	msr	PRIMASK, r3
}
 800a376:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  FreeBufCb();
 800a378:	4b06      	ldr	r3, [pc, #24]	@ (800a394 <HW_IPCC_MM_FreeBufHandler+0x44>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a37e:	2108      	movs	r1, #8
 800a380:	4803      	ldr	r0, [pc, #12]	@ (800a390 <HW_IPCC_MM_FreeBufHandler+0x40>)
 800a382:	f7ff fe3b 	bl	8009ffc <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a386:	bf00      	nop
}
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	58000c00 	.word	0x58000c00
 800a394:	20000630 	.word	0x20000630

0800a398 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a39e:	f3ef 8310 	mrs	r3, PRIMASK
 800a3a2:	607b      	str	r3, [r7, #4]
  return(result);
 800a3a4:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a3a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a3a8:	b672      	cpsid	i
}
 800a3aa:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a3ac:	2108      	movs	r1, #8
 800a3ae:	4806      	ldr	r0, [pc, #24]	@ (800a3c8 <HW_IPCC_TRACES_Init+0x30>)
 800a3b0:	f7ff fe04 	bl	8009fbc <LL_C1_IPCC_EnableReceiveChannel>
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	f383 8810 	msr	PRIMASK, r3
}
 800a3be:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800a3c0:	bf00      	nop
}
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	58000c00 	.word	0x58000c00

0800a3cc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800a3d0:	f7fe facc 	bl	800896c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a3d4:	2108      	movs	r1, #8
 800a3d6:	4802      	ldr	r0, [pc, #8]	@ (800a3e0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800a3d8:	f7ff fe02 	bl	8009fe0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a3dc:	bf00      	nop
}
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	58000c00 	.word	0x58000c00

0800a3e4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a3e8:	4b05      	ldr	r3, [pc, #20]	@ (800a400 <UTIL_LPM_Init+0x1c>)
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a3ee:	4b05      	ldr	r3, [pc, #20]	@ (800a404 <UTIL_LPM_Init+0x20>)
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a3f4:	bf00      	nop
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	20000634 	.word	0x20000634
 800a404:	20000638 	.word	0x20000638

0800a408 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a408:	b480      	push	{r7}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	460b      	mov	r3, r1
 800a412:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a414:	f3ef 8310 	mrs	r3, PRIMASK
 800a418:	613b      	str	r3, [r7, #16]
  return(result);
 800a41a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a41c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a41e:	b672      	cpsid	i
}
 800a420:	bf00      	nop
  
  switch(state)
 800a422:	78fb      	ldrb	r3, [r7, #3]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d008      	beq.n	800a43a <UTIL_LPM_SetOffMode+0x32>
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d10e      	bne.n	800a44a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a42c:	4b0d      	ldr	r3, [pc, #52]	@ (800a464 <UTIL_LPM_SetOffMode+0x5c>)
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	4313      	orrs	r3, r2
 800a434:	4a0b      	ldr	r2, [pc, #44]	@ (800a464 <UTIL_LPM_SetOffMode+0x5c>)
 800a436:	6013      	str	r3, [r2, #0]
      break;
 800a438:	e008      	b.n	800a44c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	43da      	mvns	r2, r3
 800a43e:	4b09      	ldr	r3, [pc, #36]	@ (800a464 <UTIL_LPM_SetOffMode+0x5c>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4013      	ands	r3, r2
 800a444:	4a07      	ldr	r2, [pc, #28]	@ (800a464 <UTIL_LPM_SetOffMode+0x5c>)
 800a446:	6013      	str	r3, [r2, #0]
      break;
 800a448:	e000      	b.n	800a44c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a44a:	bf00      	nop
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f383 8810 	msr	PRIMASK, r3
}
 800a456:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a458:	bf00      	nop
 800a45a:	371c      	adds	r7, #28
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr
 800a464:	20000638 	.word	0x20000638

0800a468 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b090      	sub	sp, #64	@ 0x40
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800a470:	4b73      	ldr	r3, [pc, #460]	@ (800a640 <UTIL_SEQ_Run+0x1d8>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800a476:	4b72      	ldr	r3, [pc, #456]	@ (800a640 <UTIL_SEQ_Run+0x1d8>)
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4013      	ands	r3, r2
 800a47e:	4a70      	ldr	r2, [pc, #448]	@ (800a640 <UTIL_SEQ_Run+0x1d8>)
 800a480:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800a482:	4b70      	ldr	r3, [pc, #448]	@ (800a644 <UTIL_SEQ_Run+0x1dc>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800a488:	4b6f      	ldr	r3, [pc, #444]	@ (800a648 <UTIL_SEQ_Run+0x1e0>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800a48e:	4b6f      	ldr	r3, [pc, #444]	@ (800a64c <UTIL_SEQ_Run+0x1e4>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800a494:	4b6e      	ldr	r3, [pc, #440]	@ (800a650 <UTIL_SEQ_Run+0x1e8>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a49a:	e08d      	b.n	800a5b8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800a49c:	2300      	movs	r3, #0
 800a49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a4a0:	e002      	b.n	800a4a8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800a4a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a4a8:	4a6a      	ldr	r2, [pc, #424]	@ (800a654 <UTIL_SEQ_Run+0x1ec>)
 800a4aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4ac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b2:	401a      	ands	r2, r3
 800a4b4:	4b62      	ldr	r3, [pc, #392]	@ (800a640 <UTIL_SEQ_Run+0x1d8>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4013      	ands	r3, r2
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d0f1      	beq.n	800a4a2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800a4be:	4a65      	ldr	r2, [pc, #404]	@ (800a654 <UTIL_SEQ_Run+0x1ec>)
 800a4c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4c2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c8:	401a      	ands	r2, r3
 800a4ca:	4b5d      	ldr	r3, [pc, #372]	@ (800a640 <UTIL_SEQ_Run+0x1d8>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4013      	ands	r3, r2
 800a4d0:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a4d2:	4a60      	ldr	r2, [pc, #384]	@ (800a654 <UTIL_SEQ_Run+0x1ec>)
 800a4d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4d6:	00db      	lsls	r3, r3, #3
 800a4d8:	4413      	add	r3, r2
 800a4da:	685a      	ldr	r2, [r3, #4]
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4de:	4013      	ands	r3, r2
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d106      	bne.n	800a4f2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a4e4:	4a5b      	ldr	r2, [pc, #364]	@ (800a654 <UTIL_SEQ_Run+0x1ec>)
 800a4e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4e8:	00db      	lsls	r3, r3, #3
 800a4ea:	4413      	add	r3, r2
 800a4ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a4f2:	4a58      	ldr	r2, [pc, #352]	@ (800a654 <UTIL_SEQ_Run+0x1ec>)
 800a4f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4f6:	00db      	lsls	r3, r3, #3
 800a4f8:	4413      	add	r3, r2
 800a4fa:	685a      	ldr	r2, [r3, #4]
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4fe:	4013      	ands	r3, r2
 800a500:	4618      	mov	r0, r3
 800a502:	f000 f9c1 	bl	800a888 <SEQ_BitPosition>
 800a506:	4603      	mov	r3, r0
 800a508:	461a      	mov	r2, r3
 800a50a:	4b53      	ldr	r3, [pc, #332]	@ (800a658 <UTIL_SEQ_Run+0x1f0>)
 800a50c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a50e:	4a51      	ldr	r2, [pc, #324]	@ (800a654 <UTIL_SEQ_Run+0x1ec>)
 800a510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a512:	00db      	lsls	r3, r3, #3
 800a514:	4413      	add	r3, r2
 800a516:	685a      	ldr	r2, [r3, #4]
 800a518:	4b4f      	ldr	r3, [pc, #316]	@ (800a658 <UTIL_SEQ_Run+0x1f0>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2101      	movs	r1, #1
 800a51e:	fa01 f303 	lsl.w	r3, r1, r3
 800a522:	43db      	mvns	r3, r3
 800a524:	401a      	ands	r2, r3
 800a526:	494b      	ldr	r1, [pc, #300]	@ (800a654 <UTIL_SEQ_Run+0x1ec>)
 800a528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a52a:	00db      	lsls	r3, r3, #3
 800a52c:	440b      	add	r3, r1
 800a52e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a530:	f3ef 8310 	mrs	r3, PRIMASK
 800a534:	61bb      	str	r3, [r7, #24]
  return(result);
 800a536:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a538:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a53a:	b672      	cpsid	i
}
 800a53c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a53e:	4b46      	ldr	r3, [pc, #280]	@ (800a658 <UTIL_SEQ_Run+0x1f0>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2201      	movs	r2, #1
 800a544:	fa02 f303 	lsl.w	r3, r2, r3
 800a548:	43da      	mvns	r2, r3
 800a54a:	4b3e      	ldr	r3, [pc, #248]	@ (800a644 <UTIL_SEQ_Run+0x1dc>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4013      	ands	r3, r2
 800a550:	4a3c      	ldr	r2, [pc, #240]	@ (800a644 <UTIL_SEQ_Run+0x1dc>)
 800a552:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a554:	2301      	movs	r3, #1
 800a556:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a558:	e013      	b.n	800a582 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a55a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a55c:	3b01      	subs	r3, #1
 800a55e:	4a3d      	ldr	r2, [pc, #244]	@ (800a654 <UTIL_SEQ_Run+0x1ec>)
 800a560:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a564:	4b3c      	ldr	r3, [pc, #240]	@ (800a658 <UTIL_SEQ_Run+0x1f0>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2201      	movs	r2, #1
 800a56a:	fa02 f303 	lsl.w	r3, r2, r3
 800a56e:	43da      	mvns	r2, r3
 800a570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a572:	3b01      	subs	r3, #1
 800a574:	400a      	ands	r2, r1
 800a576:	4937      	ldr	r1, [pc, #220]	@ (800a654 <UTIL_SEQ_Run+0x1ec>)
 800a578:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a57c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a57e:	3b01      	subs	r3, #1
 800a580:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a584:	2b00      	cmp	r3, #0
 800a586:	d1e8      	bne.n	800a55a <UTIL_SEQ_Run+0xf2>
 800a588:	6a3b      	ldr	r3, [r7, #32]
 800a58a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	f383 8810 	msr	PRIMASK, r3
}
 800a592:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a594:	4b30      	ldr	r3, [pc, #192]	@ (800a658 <UTIL_SEQ_Run+0x1f0>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a30      	ldr	r2, [pc, #192]	@ (800a65c <UTIL_SEQ_Run+0x1f4>)
 800a59a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a59e:	4798      	blx	r3

    local_taskset = TaskSet;
 800a5a0:	4b28      	ldr	r3, [pc, #160]	@ (800a644 <UTIL_SEQ_Run+0x1dc>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800a5a6:	4b28      	ldr	r3, [pc, #160]	@ (800a648 <UTIL_SEQ_Run+0x1e0>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800a5ac:	4b27      	ldr	r3, [pc, #156]	@ (800a64c <UTIL_SEQ_Run+0x1e4>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800a5b2:	4b27      	ldr	r3, [pc, #156]	@ (800a650 <UTIL_SEQ_Run+0x1e8>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a5b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5bc:	401a      	ands	r2, r3
 800a5be:	4b20      	ldr	r3, [pc, #128]	@ (800a640 <UTIL_SEQ_Run+0x1d8>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4013      	ands	r3, r2
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d005      	beq.n	800a5d4 <UTIL_SEQ_Run+0x16c>
 800a5c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a5ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5cc:	4013      	ands	r3, r2
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f43f af64 	beq.w	800a49c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a5d4:	4b20      	ldr	r3, [pc, #128]	@ (800a658 <UTIL_SEQ_Run+0x1f0>)
 800a5d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a5da:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a5dc:	f000 f946 	bl	800a86c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5e0:	f3ef 8310 	mrs	r3, PRIMASK
 800a5e4:	613b      	str	r3, [r7, #16]
  return(result);
 800a5e6:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a5e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5ea:	b672      	cpsid	i
}
 800a5ec:	bf00      	nop
  local_taskset = TaskSet;
 800a5ee:	4b15      	ldr	r3, [pc, #84]	@ (800a644 <UTIL_SEQ_Run+0x1dc>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800a5f4:	4b14      	ldr	r3, [pc, #80]	@ (800a648 <UTIL_SEQ_Run+0x1e0>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800a5fa:	4b14      	ldr	r3, [pc, #80]	@ (800a64c <UTIL_SEQ_Run+0x1e4>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800a600:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a604:	401a      	ands	r2, r3
 800a606:	4b0e      	ldr	r3, [pc, #56]	@ (800a640 <UTIL_SEQ_Run+0x1d8>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4013      	ands	r3, r2
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d107      	bne.n	800a620 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800a610:	4b0f      	ldr	r3, [pc, #60]	@ (800a650 <UTIL_SEQ_Run+0x1e8>)
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a616:	4013      	ands	r3, r2
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d101      	bne.n	800a620 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800a61c:	f7f6 f953 	bl	80008c6 <UTIL_SEQ_Idle>
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f383 8810 	msr	PRIMASK, r3
}
 800a62a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800a62c:	f000 f925 	bl	800a87a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a630:	4a03      	ldr	r2, [pc, #12]	@ (800a640 <UTIL_SEQ_Run+0x1d8>)
 800a632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a634:	6013      	str	r3, [r2, #0]

  return;
 800a636:	bf00      	nop
}
 800a638:	3740      	adds	r7, #64	@ 0x40
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	2000002c 	.word	0x2000002c
 800a644:	2000063c 	.word	0x2000063c
 800a648:	20000640 	.word	0x20000640
 800a64c:	20000028 	.word	0x20000028
 800a650:	20000644 	.word	0x20000644
 800a654:	200006cc 	.word	0x200006cc
 800a658:	20000648 	.word	0x20000648
 800a65c:	2000064c 	.word	0x2000064c

0800a660 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b088      	sub	sp, #32
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a66c:	f3ef 8310 	mrs	r3, PRIMASK
 800a670:	617b      	str	r3, [r7, #20]
  return(result);
 800a672:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a674:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a676:	b672      	cpsid	i
}
 800a678:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f000 f904 	bl	800a888 <SEQ_BitPosition>
 800a680:	4603      	mov	r3, r0
 800a682:	4619      	mov	r1, r3
 800a684:	4a06      	ldr	r2, [pc, #24]	@ (800a6a0 <UTIL_SEQ_RegTask+0x40>)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	f383 8810 	msr	PRIMASK, r3
}
 800a696:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a698:	bf00      	nop
}
 800a69a:	3720      	adds	r7, #32
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	2000064c 	.word	0x2000064c

0800a6a4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b087      	sub	sp, #28
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6ae:	f3ef 8310 	mrs	r3, PRIMASK
 800a6b2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a6b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6b8:	b672      	cpsid	i
}
 800a6ba:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a6bc:	4b0d      	ldr	r3, [pc, #52]	@ (800a6f4 <UTIL_SEQ_SetTask+0x50>)
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	4a0b      	ldr	r2, [pc, #44]	@ (800a6f4 <UTIL_SEQ_SetTask+0x50>)
 800a6c6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a6c8:	4a0b      	ldr	r2, [pc, #44]	@ (800a6f8 <UTIL_SEQ_SetTask+0x54>)
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	431a      	orrs	r2, r3
 800a6d4:	4908      	ldr	r1, [pc, #32]	@ (800a6f8 <UTIL_SEQ_SetTask+0x54>)
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	f383 8810 	msr	PRIMASK, r3
}
 800a6e6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a6e8:	bf00      	nop
}
 800a6ea:	371c      	adds	r7, #28
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr
 800a6f4:	2000063c 	.word	0x2000063c
 800a6f8:	200006cc 	.word	0x200006cc

0800a6fc <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b087      	sub	sp, #28
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a704:	f3ef 8310 	mrs	r3, PRIMASK
 800a708:	60fb      	str	r3, [r7, #12]
  return(result);
 800a70a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a70c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a70e:	b672      	cpsid	i
}
 800a710:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	43da      	mvns	r2, r3
 800a716:	4b08      	ldr	r3, [pc, #32]	@ (800a738 <UTIL_SEQ_PauseTask+0x3c>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4013      	ands	r3, r2
 800a71c:	4a06      	ldr	r2, [pc, #24]	@ (800a738 <UTIL_SEQ_PauseTask+0x3c>)
 800a71e:	6013      	str	r3, [r2, #0]
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	f383 8810 	msr	PRIMASK, r3
}
 800a72a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a72c:	bf00      	nop
}
 800a72e:	371c      	adds	r7, #28
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr
 800a738:	20000028 	.word	0x20000028

0800a73c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a73c:	b480      	push	{r7}
 800a73e:	b087      	sub	sp, #28
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a744:	f3ef 8310 	mrs	r3, PRIMASK
 800a748:	60fb      	str	r3, [r7, #12]
  return(result);
 800a74a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a74c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a74e:	b672      	cpsid	i
}
 800a750:	bf00      	nop

  TaskMask |= TaskId_bm;
 800a752:	4b09      	ldr	r3, [pc, #36]	@ (800a778 <UTIL_SEQ_ResumeTask+0x3c>)
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	4313      	orrs	r3, r2
 800a75a:	4a07      	ldr	r2, [pc, #28]	@ (800a778 <UTIL_SEQ_ResumeTask+0x3c>)
 800a75c:	6013      	str	r3, [r2, #0]
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	f383 8810 	msr	PRIMASK, r3
}
 800a768:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a76a:	bf00      	nop
}
 800a76c:	371c      	adds	r7, #28
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop
 800a778:	20000028 	.word	0x20000028

0800a77c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a77c:	b480      	push	{r7}
 800a77e:	b087      	sub	sp, #28
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a784:	f3ef 8310 	mrs	r3, PRIMASK
 800a788:	60fb      	str	r3, [r7, #12]
  return(result);
 800a78a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a78c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a78e:	b672      	cpsid	i
}
 800a790:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a792:	4b09      	ldr	r3, [pc, #36]	@ (800a7b8 <UTIL_SEQ_SetEvt+0x3c>)
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	4313      	orrs	r3, r2
 800a79a:	4a07      	ldr	r2, [pc, #28]	@ (800a7b8 <UTIL_SEQ_SetEvt+0x3c>)
 800a79c:	6013      	str	r3, [r2, #0]
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	f383 8810 	msr	PRIMASK, r3
}
 800a7a8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a7aa:	bf00      	nop
}
 800a7ac:	371c      	adds	r7, #28
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	20000640 	.word	0x20000640

0800a7bc <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b088      	sub	sp, #32
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a7c4:	4b1f      	ldr	r3, [pc, #124]	@ (800a844 <UTIL_SEQ_WaitEvt+0x88>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a7ca:	4b1e      	ldr	r3, [pc, #120]	@ (800a844 <UTIL_SEQ_WaitEvt+0x88>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7d2:	d102      	bne.n	800a7da <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	61fb      	str	r3, [r7, #28]
 800a7d8:	e005      	b.n	800a7e6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800a7da:	4b1a      	ldr	r3, [pc, #104]	@ (800a844 <UTIL_SEQ_WaitEvt+0x88>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a7e4:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a7e6:	4b18      	ldr	r3, [pc, #96]	@ (800a848 <UTIL_SEQ_WaitEvt+0x8c>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800a7ec:	4a16      	ldr	r2, [pc, #88]	@ (800a848 <UTIL_SEQ_WaitEvt+0x8c>)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800a7f2:	e003      	b.n	800a7fc <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800a7f4:	6879      	ldr	r1, [r7, #4]
 800a7f6:	69f8      	ldr	r0, [r7, #28]
 800a7f8:	f000 f82a 	bl	800a850 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800a7fc:	4b13      	ldr	r3, [pc, #76]	@ (800a84c <UTIL_SEQ_WaitEvt+0x90>)
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	4013      	ands	r3, r2
 800a804:	2b00      	cmp	r3, #0
 800a806:	d0f5      	beq.n	800a7f4 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a808:	4a0e      	ldr	r2, [pc, #56]	@ (800a844 <UTIL_SEQ_WaitEvt+0x88>)
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a80e:	f3ef 8310 	mrs	r3, PRIMASK
 800a812:	60bb      	str	r3, [r7, #8]
  return(result);
 800a814:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a816:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a818:	b672      	cpsid	i
}
 800a81a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	43da      	mvns	r2, r3
 800a820:	4b0a      	ldr	r3, [pc, #40]	@ (800a84c <UTIL_SEQ_WaitEvt+0x90>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4013      	ands	r3, r2
 800a826:	4a09      	ldr	r2, [pc, #36]	@ (800a84c <UTIL_SEQ_WaitEvt+0x90>)
 800a828:	6013      	str	r3, [r2, #0]
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f383 8810 	msr	PRIMASK, r3
}
 800a834:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800a836:	4a04      	ldr	r2, [pc, #16]	@ (800a848 <UTIL_SEQ_WaitEvt+0x8c>)
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	6013      	str	r3, [r2, #0]
  return;
 800a83c:	bf00      	nop
}
 800a83e:	3720      	adds	r7, #32
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}
 800a844:	20000648 	.word	0x20000648
 800a848:	20000644 	.word	0x20000644
 800a84c:	20000640 	.word	0x20000640

0800a850 <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	43db      	mvns	r3, r3
 800a85e:	4618      	mov	r0, r3
 800a860:	f7ff fe02 	bl	800a468 <UTIL_SEQ_Run>
  return;
 800a864:	bf00      	nop
}
 800a866:	3708      	adds	r7, #8
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a86c:	b480      	push	{r7}
 800a86e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a870:	bf00      	nop
}
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a87a:	b480      	push	{r7}
 800a87c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a87e:	bf00      	nop
}
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d101      	bne.n	800a89e <SEQ_BitPosition+0x16>
    return 32U;
 800a89a:	2320      	movs	r3, #32
 800a89c:	e003      	b.n	800a8a6 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	fab3 f383 	clz	r3, r3
 800a8a4:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 800a8a6:	f1c3 031f 	rsb	r3, r3, #31
 800a8aa:	b2db      	uxtb	r3, r3
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3714      	adds	r7, #20
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <malloc>:
 800a8b8:	4b02      	ldr	r3, [pc, #8]	@ (800a8c4 <malloc+0xc>)
 800a8ba:	4601      	mov	r1, r0
 800a8bc:	6818      	ldr	r0, [r3, #0]
 800a8be:	f000 b825 	b.w	800a90c <_malloc_r>
 800a8c2:	bf00      	nop
 800a8c4:	20000030 	.word	0x20000030

0800a8c8 <sbrk_aligned>:
 800a8c8:	b570      	push	{r4, r5, r6, lr}
 800a8ca:	4e0f      	ldr	r6, [pc, #60]	@ (800a908 <sbrk_aligned+0x40>)
 800a8cc:	460c      	mov	r4, r1
 800a8ce:	6831      	ldr	r1, [r6, #0]
 800a8d0:	4605      	mov	r5, r0
 800a8d2:	b911      	cbnz	r1, 800a8da <sbrk_aligned+0x12>
 800a8d4:	f000 f8ae 	bl	800aa34 <_sbrk_r>
 800a8d8:	6030      	str	r0, [r6, #0]
 800a8da:	4621      	mov	r1, r4
 800a8dc:	4628      	mov	r0, r5
 800a8de:	f000 f8a9 	bl	800aa34 <_sbrk_r>
 800a8e2:	1c43      	adds	r3, r0, #1
 800a8e4:	d103      	bne.n	800a8ee <sbrk_aligned+0x26>
 800a8e6:	f04f 34ff 	mov.w	r4, #4294967295
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	bd70      	pop	{r4, r5, r6, pc}
 800a8ee:	1cc4      	adds	r4, r0, #3
 800a8f0:	f024 0403 	bic.w	r4, r4, #3
 800a8f4:	42a0      	cmp	r0, r4
 800a8f6:	d0f8      	beq.n	800a8ea <sbrk_aligned+0x22>
 800a8f8:	1a21      	subs	r1, r4, r0
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	f000 f89a 	bl	800aa34 <_sbrk_r>
 800a900:	3001      	adds	r0, #1
 800a902:	d1f2      	bne.n	800a8ea <sbrk_aligned+0x22>
 800a904:	e7ef      	b.n	800a8e6 <sbrk_aligned+0x1e>
 800a906:	bf00      	nop
 800a908:	200006d4 	.word	0x200006d4

0800a90c <_malloc_r>:
 800a90c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a910:	1ccd      	adds	r5, r1, #3
 800a912:	f025 0503 	bic.w	r5, r5, #3
 800a916:	3508      	adds	r5, #8
 800a918:	2d0c      	cmp	r5, #12
 800a91a:	bf38      	it	cc
 800a91c:	250c      	movcc	r5, #12
 800a91e:	2d00      	cmp	r5, #0
 800a920:	4606      	mov	r6, r0
 800a922:	db01      	blt.n	800a928 <_malloc_r+0x1c>
 800a924:	42a9      	cmp	r1, r5
 800a926:	d904      	bls.n	800a932 <_malloc_r+0x26>
 800a928:	230c      	movs	r3, #12
 800a92a:	6033      	str	r3, [r6, #0]
 800a92c:	2000      	movs	r0, #0
 800a92e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a932:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa08 <_malloc_r+0xfc>
 800a936:	f000 f869 	bl	800aa0c <__malloc_lock>
 800a93a:	f8d8 3000 	ldr.w	r3, [r8]
 800a93e:	461c      	mov	r4, r3
 800a940:	bb44      	cbnz	r4, 800a994 <_malloc_r+0x88>
 800a942:	4629      	mov	r1, r5
 800a944:	4630      	mov	r0, r6
 800a946:	f7ff ffbf 	bl	800a8c8 <sbrk_aligned>
 800a94a:	1c43      	adds	r3, r0, #1
 800a94c:	4604      	mov	r4, r0
 800a94e:	d158      	bne.n	800aa02 <_malloc_r+0xf6>
 800a950:	f8d8 4000 	ldr.w	r4, [r8]
 800a954:	4627      	mov	r7, r4
 800a956:	2f00      	cmp	r7, #0
 800a958:	d143      	bne.n	800a9e2 <_malloc_r+0xd6>
 800a95a:	2c00      	cmp	r4, #0
 800a95c:	d04b      	beq.n	800a9f6 <_malloc_r+0xea>
 800a95e:	6823      	ldr	r3, [r4, #0]
 800a960:	4639      	mov	r1, r7
 800a962:	4630      	mov	r0, r6
 800a964:	eb04 0903 	add.w	r9, r4, r3
 800a968:	f000 f864 	bl	800aa34 <_sbrk_r>
 800a96c:	4581      	cmp	r9, r0
 800a96e:	d142      	bne.n	800a9f6 <_malloc_r+0xea>
 800a970:	6821      	ldr	r1, [r4, #0]
 800a972:	1a6d      	subs	r5, r5, r1
 800a974:	4629      	mov	r1, r5
 800a976:	4630      	mov	r0, r6
 800a978:	f7ff ffa6 	bl	800a8c8 <sbrk_aligned>
 800a97c:	3001      	adds	r0, #1
 800a97e:	d03a      	beq.n	800a9f6 <_malloc_r+0xea>
 800a980:	6823      	ldr	r3, [r4, #0]
 800a982:	442b      	add	r3, r5
 800a984:	6023      	str	r3, [r4, #0]
 800a986:	f8d8 3000 	ldr.w	r3, [r8]
 800a98a:	685a      	ldr	r2, [r3, #4]
 800a98c:	bb62      	cbnz	r2, 800a9e8 <_malloc_r+0xdc>
 800a98e:	f8c8 7000 	str.w	r7, [r8]
 800a992:	e00f      	b.n	800a9b4 <_malloc_r+0xa8>
 800a994:	6822      	ldr	r2, [r4, #0]
 800a996:	1b52      	subs	r2, r2, r5
 800a998:	d420      	bmi.n	800a9dc <_malloc_r+0xd0>
 800a99a:	2a0b      	cmp	r2, #11
 800a99c:	d917      	bls.n	800a9ce <_malloc_r+0xc2>
 800a99e:	1961      	adds	r1, r4, r5
 800a9a0:	42a3      	cmp	r3, r4
 800a9a2:	6025      	str	r5, [r4, #0]
 800a9a4:	bf18      	it	ne
 800a9a6:	6059      	strne	r1, [r3, #4]
 800a9a8:	6863      	ldr	r3, [r4, #4]
 800a9aa:	bf08      	it	eq
 800a9ac:	f8c8 1000 	streq.w	r1, [r8]
 800a9b0:	5162      	str	r2, [r4, r5]
 800a9b2:	604b      	str	r3, [r1, #4]
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	f000 f82f 	bl	800aa18 <__malloc_unlock>
 800a9ba:	f104 000b 	add.w	r0, r4, #11
 800a9be:	1d23      	adds	r3, r4, #4
 800a9c0:	f020 0007 	bic.w	r0, r0, #7
 800a9c4:	1ac2      	subs	r2, r0, r3
 800a9c6:	bf1c      	itt	ne
 800a9c8:	1a1b      	subne	r3, r3, r0
 800a9ca:	50a3      	strne	r3, [r4, r2]
 800a9cc:	e7af      	b.n	800a92e <_malloc_r+0x22>
 800a9ce:	6862      	ldr	r2, [r4, #4]
 800a9d0:	42a3      	cmp	r3, r4
 800a9d2:	bf0c      	ite	eq
 800a9d4:	f8c8 2000 	streq.w	r2, [r8]
 800a9d8:	605a      	strne	r2, [r3, #4]
 800a9da:	e7eb      	b.n	800a9b4 <_malloc_r+0xa8>
 800a9dc:	4623      	mov	r3, r4
 800a9de:	6864      	ldr	r4, [r4, #4]
 800a9e0:	e7ae      	b.n	800a940 <_malloc_r+0x34>
 800a9e2:	463c      	mov	r4, r7
 800a9e4:	687f      	ldr	r7, [r7, #4]
 800a9e6:	e7b6      	b.n	800a956 <_malloc_r+0x4a>
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	42a3      	cmp	r3, r4
 800a9ee:	d1fb      	bne.n	800a9e8 <_malloc_r+0xdc>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	6053      	str	r3, [r2, #4]
 800a9f4:	e7de      	b.n	800a9b4 <_malloc_r+0xa8>
 800a9f6:	230c      	movs	r3, #12
 800a9f8:	6033      	str	r3, [r6, #0]
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	f000 f80c 	bl	800aa18 <__malloc_unlock>
 800aa00:	e794      	b.n	800a92c <_malloc_r+0x20>
 800aa02:	6005      	str	r5, [r0, #0]
 800aa04:	e7d6      	b.n	800a9b4 <_malloc_r+0xa8>
 800aa06:	bf00      	nop
 800aa08:	200006d8 	.word	0x200006d8

0800aa0c <__malloc_lock>:
 800aa0c:	4801      	ldr	r0, [pc, #4]	@ (800aa14 <__malloc_lock+0x8>)
 800aa0e:	f000 b84b 	b.w	800aaa8 <__retarget_lock_acquire_recursive>
 800aa12:	bf00      	nop
 800aa14:	20000818 	.word	0x20000818

0800aa18 <__malloc_unlock>:
 800aa18:	4801      	ldr	r0, [pc, #4]	@ (800aa20 <__malloc_unlock+0x8>)
 800aa1a:	f000 b846 	b.w	800aaaa <__retarget_lock_release_recursive>
 800aa1e:	bf00      	nop
 800aa20:	20000818 	.word	0x20000818

0800aa24 <memset>:
 800aa24:	4402      	add	r2, r0
 800aa26:	4603      	mov	r3, r0
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d100      	bne.n	800aa2e <memset+0xa>
 800aa2c:	4770      	bx	lr
 800aa2e:	f803 1b01 	strb.w	r1, [r3], #1
 800aa32:	e7f9      	b.n	800aa28 <memset+0x4>

0800aa34 <_sbrk_r>:
 800aa34:	b538      	push	{r3, r4, r5, lr}
 800aa36:	4d06      	ldr	r5, [pc, #24]	@ (800aa50 <_sbrk_r+0x1c>)
 800aa38:	2300      	movs	r3, #0
 800aa3a:	4604      	mov	r4, r0
 800aa3c:	4608      	mov	r0, r1
 800aa3e:	602b      	str	r3, [r5, #0]
 800aa40:	f7f7 f882 	bl	8001b48 <_sbrk>
 800aa44:	1c43      	adds	r3, r0, #1
 800aa46:	d102      	bne.n	800aa4e <_sbrk_r+0x1a>
 800aa48:	682b      	ldr	r3, [r5, #0]
 800aa4a:	b103      	cbz	r3, 800aa4e <_sbrk_r+0x1a>
 800aa4c:	6023      	str	r3, [r4, #0]
 800aa4e:	bd38      	pop	{r3, r4, r5, pc}
 800aa50:	20000814 	.word	0x20000814

0800aa54 <__errno>:
 800aa54:	4b01      	ldr	r3, [pc, #4]	@ (800aa5c <__errno+0x8>)
 800aa56:	6818      	ldr	r0, [r3, #0]
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	20000030 	.word	0x20000030

0800aa60 <__libc_init_array>:
 800aa60:	b570      	push	{r4, r5, r6, lr}
 800aa62:	4d0d      	ldr	r5, [pc, #52]	@ (800aa98 <__libc_init_array+0x38>)
 800aa64:	4c0d      	ldr	r4, [pc, #52]	@ (800aa9c <__libc_init_array+0x3c>)
 800aa66:	1b64      	subs	r4, r4, r5
 800aa68:	10a4      	asrs	r4, r4, #2
 800aa6a:	2600      	movs	r6, #0
 800aa6c:	42a6      	cmp	r6, r4
 800aa6e:	d109      	bne.n	800aa84 <__libc_init_array+0x24>
 800aa70:	4d0b      	ldr	r5, [pc, #44]	@ (800aaa0 <__libc_init_array+0x40>)
 800aa72:	4c0c      	ldr	r4, [pc, #48]	@ (800aaa4 <__libc_init_array+0x44>)
 800aa74:	f000 f828 	bl	800aac8 <_init>
 800aa78:	1b64      	subs	r4, r4, r5
 800aa7a:	10a4      	asrs	r4, r4, #2
 800aa7c:	2600      	movs	r6, #0
 800aa7e:	42a6      	cmp	r6, r4
 800aa80:	d105      	bne.n	800aa8e <__libc_init_array+0x2e>
 800aa82:	bd70      	pop	{r4, r5, r6, pc}
 800aa84:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa88:	4798      	blx	r3
 800aa8a:	3601      	adds	r6, #1
 800aa8c:	e7ee      	b.n	800aa6c <__libc_init_array+0xc>
 800aa8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa92:	4798      	blx	r3
 800aa94:	3601      	adds	r6, #1
 800aa96:	e7f2      	b.n	800aa7e <__libc_init_array+0x1e>
 800aa98:	0800ad98 	.word	0x0800ad98
 800aa9c:	0800ad98 	.word	0x0800ad98
 800aaa0:	0800ad98 	.word	0x0800ad98
 800aaa4:	0800ad9c 	.word	0x0800ad9c

0800aaa8 <__retarget_lock_acquire_recursive>:
 800aaa8:	4770      	bx	lr

0800aaaa <__retarget_lock_release_recursive>:
 800aaaa:	4770      	bx	lr

0800aaac <memcpy>:
 800aaac:	440a      	add	r2, r1
 800aaae:	4291      	cmp	r1, r2
 800aab0:	f100 33ff 	add.w	r3, r0, #4294967295
 800aab4:	d100      	bne.n	800aab8 <memcpy+0xc>
 800aab6:	4770      	bx	lr
 800aab8:	b510      	push	{r4, lr}
 800aaba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aabe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aac2:	4291      	cmp	r1, r2
 800aac4:	d1f9      	bne.n	800aaba <memcpy+0xe>
 800aac6:	bd10      	pop	{r4, pc}

0800aac8 <_init>:
 800aac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaca:	bf00      	nop
 800aacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aace:	bc08      	pop	{r3}
 800aad0:	469e      	mov	lr, r3
 800aad2:	4770      	bx	lr

0800aad4 <_fini>:
 800aad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad6:	bf00      	nop
 800aad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aada:	bc08      	pop	{r3}
 800aadc:	469e      	mov	lr, r3
 800aade:	4770      	bx	lr
