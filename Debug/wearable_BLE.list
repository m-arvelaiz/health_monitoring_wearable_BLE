
wearable_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096d4  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08009810  08009810  0000a810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009ac0  08009ac0  0000aac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009ac8  08009ac8  0000aac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009acc  08009acc  0000aacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000028  20000008  08009ad0  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000030  08009af8  0000b030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000068  08009b2d  0000b068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  2000007c  08009b3e  0000b07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  08009b3e  0000b5ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ba67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000c000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000c000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08009b3e  0000b1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0002b822  00000000  00000000  0000ba97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005eac  00000000  00000000  000372b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002720  00000000  00000000  0003d168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001de6  00000000  00000000  0003f888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002b4eb  00000000  00000000  0004166e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002b579  00000000  00000000  0006cb59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f65bd  00000000  00000000  000980d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0018e68f  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000a314  00000000  00000000  0018e6d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000078  00000000  00000000  001989e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000007c 	.word	0x2000007c
 8000158:	00000000 	.word	0x00000000
 800015c:	080097f8 	.word	0x080097f8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000080 	.word	0x20000080
 8000178:	080097f8 	.word	0x080097f8

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b988 	b.w	80004b4 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9d08      	ldr	r5, [sp, #32]
 80001c2:	468e      	mov	lr, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14a      	bne.n	8000262 <__udivmoddi4+0xa6>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4617      	mov	r7, r2
 80001d0:	d962      	bls.n	8000298 <__udivmoddi4+0xdc>
 80001d2:	fab2 f682 	clz	r6, r2
 80001d6:	b14e      	cbz	r6, 80001ec <__udivmoddi4+0x30>
 80001d8:	f1c6 0320 	rsb	r3, r6, #32
 80001dc:	fa01 f806 	lsl.w	r8, r1, r6
 80001e0:	fa20 f303 	lsr.w	r3, r0, r3
 80001e4:	40b7      	lsls	r7, r6
 80001e6:	ea43 0808 	orr.w	r8, r3, r8
 80001ea:	40b4      	lsls	r4, r6
 80001ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001f0:	fa1f fc87 	uxth.w	ip, r7
 80001f4:	fbb8 f1fe 	udiv	r1, r8, lr
 80001f8:	0c23      	lsrs	r3, r4, #16
 80001fa:	fb0e 8811 	mls	r8, lr, r1, r8
 80001fe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000202:	fb01 f20c 	mul.w	r2, r1, ip
 8000206:	429a      	cmp	r2, r3
 8000208:	d909      	bls.n	800021e <__udivmoddi4+0x62>
 800020a:	18fb      	adds	r3, r7, r3
 800020c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000210:	f080 80ea 	bcs.w	80003e8 <__udivmoddi4+0x22c>
 8000214:	429a      	cmp	r2, r3
 8000216:	f240 80e7 	bls.w	80003e8 <__udivmoddi4+0x22c>
 800021a:	3902      	subs	r1, #2
 800021c:	443b      	add	r3, r7
 800021e:	1a9a      	subs	r2, r3, r2
 8000220:	b2a3      	uxth	r3, r4
 8000222:	fbb2 f0fe 	udiv	r0, r2, lr
 8000226:	fb0e 2210 	mls	r2, lr, r0, r2
 800022a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800022e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000232:	459c      	cmp	ip, r3
 8000234:	d909      	bls.n	800024a <__udivmoddi4+0x8e>
 8000236:	18fb      	adds	r3, r7, r3
 8000238:	f100 32ff 	add.w	r2, r0, #4294967295
 800023c:	f080 80d6 	bcs.w	80003ec <__udivmoddi4+0x230>
 8000240:	459c      	cmp	ip, r3
 8000242:	f240 80d3 	bls.w	80003ec <__udivmoddi4+0x230>
 8000246:	443b      	add	r3, r7
 8000248:	3802      	subs	r0, #2
 800024a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800024e:	eba3 030c 	sub.w	r3, r3, ip
 8000252:	2100      	movs	r1, #0
 8000254:	b11d      	cbz	r5, 800025e <__udivmoddi4+0xa2>
 8000256:	40f3      	lsrs	r3, r6
 8000258:	2200      	movs	r2, #0
 800025a:	e9c5 3200 	strd	r3, r2, [r5]
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d905      	bls.n	8000272 <__udivmoddi4+0xb6>
 8000266:	b10d      	cbz	r5, 800026c <__udivmoddi4+0xb0>
 8000268:	e9c5 0100 	strd	r0, r1, [r5]
 800026c:	2100      	movs	r1, #0
 800026e:	4608      	mov	r0, r1
 8000270:	e7f5      	b.n	800025e <__udivmoddi4+0xa2>
 8000272:	fab3 f183 	clz	r1, r3
 8000276:	2900      	cmp	r1, #0
 8000278:	d146      	bne.n	8000308 <__udivmoddi4+0x14c>
 800027a:	4573      	cmp	r3, lr
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xc8>
 800027e:	4282      	cmp	r2, r0
 8000280:	f200 8105 	bhi.w	800048e <__udivmoddi4+0x2d2>
 8000284:	1a84      	subs	r4, r0, r2
 8000286:	eb6e 0203 	sbc.w	r2, lr, r3
 800028a:	2001      	movs	r0, #1
 800028c:	4690      	mov	r8, r2
 800028e:	2d00      	cmp	r5, #0
 8000290:	d0e5      	beq.n	800025e <__udivmoddi4+0xa2>
 8000292:	e9c5 4800 	strd	r4, r8, [r5]
 8000296:	e7e2      	b.n	800025e <__udivmoddi4+0xa2>
 8000298:	2a00      	cmp	r2, #0
 800029a:	f000 8090 	beq.w	80003be <__udivmoddi4+0x202>
 800029e:	fab2 f682 	clz	r6, r2
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f040 80a4 	bne.w	80003f0 <__udivmoddi4+0x234>
 80002a8:	1a8a      	subs	r2, r1, r2
 80002aa:	0c03      	lsrs	r3, r0, #16
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	b280      	uxth	r0, r0
 80002b2:	b2bc      	uxth	r4, r7
 80002b4:	2101      	movs	r1, #1
 80002b6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002ba:	fb0e 221c 	mls	r2, lr, ip, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb04 f20c 	mul.w	r2, r4, ip
 80002c6:	429a      	cmp	r2, r3
 80002c8:	d907      	bls.n	80002da <__udivmoddi4+0x11e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80002d0:	d202      	bcs.n	80002d8 <__udivmoddi4+0x11c>
 80002d2:	429a      	cmp	r2, r3
 80002d4:	f200 80e0 	bhi.w	8000498 <__udivmoddi4+0x2dc>
 80002d8:	46c4      	mov	ip, r8
 80002da:	1a9b      	subs	r3, r3, r2
 80002dc:	fbb3 f2fe 	udiv	r2, r3, lr
 80002e0:	fb0e 3312 	mls	r3, lr, r2, r3
 80002e4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002e8:	fb02 f404 	mul.w	r4, r2, r4
 80002ec:	429c      	cmp	r4, r3
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0x144>
 80002f0:	18fb      	adds	r3, r7, r3
 80002f2:	f102 30ff 	add.w	r0, r2, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x142>
 80002f8:	429c      	cmp	r4, r3
 80002fa:	f200 80ca 	bhi.w	8000492 <__udivmoddi4+0x2d6>
 80002fe:	4602      	mov	r2, r0
 8000300:	1b1b      	subs	r3, r3, r4
 8000302:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000306:	e7a5      	b.n	8000254 <__udivmoddi4+0x98>
 8000308:	f1c1 0620 	rsb	r6, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 f706 	lsr.w	r7, r2, r6
 8000312:	431f      	orrs	r7, r3
 8000314:	fa0e f401 	lsl.w	r4, lr, r1
 8000318:	fa20 f306 	lsr.w	r3, r0, r6
 800031c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000320:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000324:	4323      	orrs	r3, r4
 8000326:	fa00 f801 	lsl.w	r8, r0, r1
 800032a:	fa1f fc87 	uxth.w	ip, r7
 800032e:	fbbe f0f9 	udiv	r0, lr, r9
 8000332:	0c1c      	lsrs	r4, r3, #16
 8000334:	fb09 ee10 	mls	lr, r9, r0, lr
 8000338:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800033c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000340:	45a6      	cmp	lr, r4
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x1a0>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 3aff 	add.w	sl, r0, #4294967295
 800034e:	f080 809c 	bcs.w	800048a <__udivmoddi4+0x2ce>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8099 	bls.w	800048a <__udivmoddi4+0x2ce>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	eba4 040e 	sub.w	r4, r4, lr
 8000360:	fa1f fe83 	uxth.w	lr, r3
 8000364:	fbb4 f3f9 	udiv	r3, r4, r9
 8000368:	fb09 4413 	mls	r4, r9, r3, r4
 800036c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000370:	fb03 fc0c 	mul.w	ip, r3, ip
 8000374:	45a4      	cmp	ip, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1ce>
 8000378:	193c      	adds	r4, r7, r4
 800037a:	f103 3eff 	add.w	lr, r3, #4294967295
 800037e:	f080 8082 	bcs.w	8000486 <__udivmoddi4+0x2ca>
 8000382:	45a4      	cmp	ip, r4
 8000384:	d97f      	bls.n	8000486 <__udivmoddi4+0x2ca>
 8000386:	3b02      	subs	r3, #2
 8000388:	443c      	add	r4, r7
 800038a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800038e:	eba4 040c 	sub.w	r4, r4, ip
 8000392:	fba0 ec02 	umull	lr, ip, r0, r2
 8000396:	4564      	cmp	r4, ip
 8000398:	4673      	mov	r3, lr
 800039a:	46e1      	mov	r9, ip
 800039c:	d362      	bcc.n	8000464 <__udivmoddi4+0x2a8>
 800039e:	d05f      	beq.n	8000460 <__udivmoddi4+0x2a4>
 80003a0:	b15d      	cbz	r5, 80003ba <__udivmoddi4+0x1fe>
 80003a2:	ebb8 0203 	subs.w	r2, r8, r3
 80003a6:	eb64 0409 	sbc.w	r4, r4, r9
 80003aa:	fa04 f606 	lsl.w	r6, r4, r6
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	431e      	orrs	r6, r3
 80003b4:	40cc      	lsrs	r4, r1
 80003b6:	e9c5 6400 	strd	r6, r4, [r5]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e74f      	b.n	800025e <__udivmoddi4+0xa2>
 80003be:	fbb1 fcf2 	udiv	ip, r1, r2
 80003c2:	0c01      	lsrs	r1, r0, #16
 80003c4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003c8:	b280      	uxth	r0, r0
 80003ca:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003ce:	463b      	mov	r3, r7
 80003d0:	4638      	mov	r0, r7
 80003d2:	463c      	mov	r4, r7
 80003d4:	46b8      	mov	r8, r7
 80003d6:	46be      	mov	lr, r7
 80003d8:	2620      	movs	r6, #32
 80003da:	fbb1 f1f7 	udiv	r1, r1, r7
 80003de:	eba2 0208 	sub.w	r2, r2, r8
 80003e2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003e6:	e766      	b.n	80002b6 <__udivmoddi4+0xfa>
 80003e8:	4601      	mov	r1, r0
 80003ea:	e718      	b.n	800021e <__udivmoddi4+0x62>
 80003ec:	4610      	mov	r0, r2
 80003ee:	e72c      	b.n	800024a <__udivmoddi4+0x8e>
 80003f0:	f1c6 0220 	rsb	r2, r6, #32
 80003f4:	fa2e f302 	lsr.w	r3, lr, r2
 80003f8:	40b7      	lsls	r7, r6
 80003fa:	40b1      	lsls	r1, r6
 80003fc:	fa20 f202 	lsr.w	r2, r0, r2
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	430a      	orrs	r2, r1
 8000406:	fbb3 f8fe 	udiv	r8, r3, lr
 800040a:	b2bc      	uxth	r4, r7
 800040c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000410:	0c11      	lsrs	r1, r2, #16
 8000412:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000416:	fb08 f904 	mul.w	r9, r8, r4
 800041a:	40b0      	lsls	r0, r6
 800041c:	4589      	cmp	r9, r1
 800041e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000422:	b280      	uxth	r0, r0
 8000424:	d93e      	bls.n	80004a4 <__udivmoddi4+0x2e8>
 8000426:	1879      	adds	r1, r7, r1
 8000428:	f108 3cff 	add.w	ip, r8, #4294967295
 800042c:	d201      	bcs.n	8000432 <__udivmoddi4+0x276>
 800042e:	4589      	cmp	r9, r1
 8000430:	d81f      	bhi.n	8000472 <__udivmoddi4+0x2b6>
 8000432:	eba1 0109 	sub.w	r1, r1, r9
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fb09 f804 	mul.w	r8, r9, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	b292      	uxth	r2, r2
 8000444:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000448:	4542      	cmp	r2, r8
 800044a:	d229      	bcs.n	80004a0 <__udivmoddi4+0x2e4>
 800044c:	18ba      	adds	r2, r7, r2
 800044e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000452:	d2c4      	bcs.n	80003de <__udivmoddi4+0x222>
 8000454:	4542      	cmp	r2, r8
 8000456:	d2c2      	bcs.n	80003de <__udivmoddi4+0x222>
 8000458:	f1a9 0102 	sub.w	r1, r9, #2
 800045c:	443a      	add	r2, r7
 800045e:	e7be      	b.n	80003de <__udivmoddi4+0x222>
 8000460:	45f0      	cmp	r8, lr
 8000462:	d29d      	bcs.n	80003a0 <__udivmoddi4+0x1e4>
 8000464:	ebbe 0302 	subs.w	r3, lr, r2
 8000468:	eb6c 0c07 	sbc.w	ip, ip, r7
 800046c:	3801      	subs	r0, #1
 800046e:	46e1      	mov	r9, ip
 8000470:	e796      	b.n	80003a0 <__udivmoddi4+0x1e4>
 8000472:	eba7 0909 	sub.w	r9, r7, r9
 8000476:	4449      	add	r1, r9
 8000478:	f1a8 0c02 	sub.w	ip, r8, #2
 800047c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000480:	fb09 f804 	mul.w	r8, r9, r4
 8000484:	e7db      	b.n	800043e <__udivmoddi4+0x282>
 8000486:	4673      	mov	r3, lr
 8000488:	e77f      	b.n	800038a <__udivmoddi4+0x1ce>
 800048a:	4650      	mov	r0, sl
 800048c:	e766      	b.n	800035c <__udivmoddi4+0x1a0>
 800048e:	4608      	mov	r0, r1
 8000490:	e6fd      	b.n	800028e <__udivmoddi4+0xd2>
 8000492:	443b      	add	r3, r7
 8000494:	3a02      	subs	r2, #2
 8000496:	e733      	b.n	8000300 <__udivmoddi4+0x144>
 8000498:	f1ac 0c02 	sub.w	ip, ip, #2
 800049c:	443b      	add	r3, r7
 800049e:	e71c      	b.n	80002da <__udivmoddi4+0x11e>
 80004a0:	4649      	mov	r1, r9
 80004a2:	e79c      	b.n	80003de <__udivmoddi4+0x222>
 80004a4:	eba1 0109 	sub.w	r1, r1, r9
 80004a8:	46c4      	mov	ip, r8
 80004aa:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ae:	fb09 f804 	mul.w	r8, r9, r4
 80004b2:	e7c4      	b.n	800043e <__udivmoddi4+0x282>

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80004be:	4b0b      	ldr	r3, [pc, #44]	@ (80004ec <APPD_EnableCPU2+0x34>)
 80004c0:	1d3c      	adds	r4, r7, #4
 80004c2:	461d      	mov	r5, r3
 80004c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004cc:	c403      	stmia	r4!, {r0, r1}
 80004ce:	8022      	strh	r2, [r4, #0]
 80004d0:	3402      	adds	r4, #2
 80004d2:	0c13      	lsrs	r3, r2, #16
 80004d4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80004d6:	f007 f9bb 	bl	8007850 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	4618      	mov	r0, r3
 80004de:	f006 fc4c 	bl	8006d7a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80004e2:	bf00      	nop
}
 80004e4:	3720      	adds	r7, #32
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bdb0      	pop	{r4, r5, r7, pc}
 80004ea:	bf00      	nop
 80004ec:	08009810 	.word	0x08009810

080004f0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80004f8:	4b07      	ldr	r3, [pc, #28]	@ (8000518 <LL_C2_PWR_SetPowerMode+0x28>)
 80004fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80004fe:	f023 0207 	bic.w	r2, r3, #7
 8000502:	4905      	ldr	r1, [pc, #20]	@ (8000518 <LL_C2_PWR_SetPowerMode+0x28>)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4313      	orrs	r3, r2
 8000508:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	58000400 	.word	0x58000400

0800051c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <LL_EXTI_EnableIT_32_63+0x24>)
 8000526:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800052a:	4905      	ldr	r1, [pc, #20]	@ (8000540 <LL_EXTI_EnableIT_32_63+0x24>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4313      	orrs	r3, r2
 8000530:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	58000800 	.word	0x58000800

08000544 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800054c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000550:	4a0a      	ldr	r2, [pc, #40]	@ (800057c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000552:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000556:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800055a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800055e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	021b      	lsls	r3, r3, #8
 8000566:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800056a:	4313      	orrs	r3, r2
 800056c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	cafecafe 	.word	0xcafecafe

08000580 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000588:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000592:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4313      	orrs	r3, r2
 800059a:	608b      	str	r3, [r1, #8]
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80005ac:	4b04      	ldr	r3, [pc, #16]	@ (80005c0 <LL_DBGMCU_GetDeviceID+0x18>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	e0042000 	.word	0xe0042000

080005c4 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80005c8:	4b04      	ldr	r3, [pc, #16]	@ (80005dc <LL_DBGMCU_GetRevisionID+0x18>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	0c1b      	lsrs	r3, r3, #16
 80005ce:	b29b      	uxth	r3, r3
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e0042000 	.word	0xe0042000

080005e0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	22ff      	movs	r2, #255	@ 0xff
 80005ec:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b083      	sub	sp, #12
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	22ca      	movs	r2, #202	@ 0xca
 8000606:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2253      	movs	r2, #83	@ 0x53
 800060c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800061a:	b480      	push	{r7}
 800061c:	b083      	sub	sp, #12
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
 8000622:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	f023 0207 	bic.w	r2, r3, #7
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	431a      	orrs	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	609a      	str	r2, [r3, #8]
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000644:	4b04      	ldr	r3, [pc, #16]	@ (8000658 <MX_APPE_Config+0x18>)
 8000646:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800064a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800064c:	f000 f824 	bl	8000698 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000650:	f000 f829 	bl	80006a6 <Config_HSE>

  return;
 8000654:	bf00      	nop
}
 8000656:	bd80      	pop	{r7, pc}
 8000658:	58004000 	.word	0x58004000

0800065c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000660:	f000 f835 	bl	80006ce <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000664:	f000 f84e 	bl	8000704 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000668:	4903      	ldr	r1, [pc, #12]	@ (8000678 <MX_APPE_Init+0x1c>)
 800066a:	2000      	movs	r0, #0
 800066c:	f000 fd68 	bl	8001140 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000670:	f000 f856 	bl	8000720 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000674:	bf00      	nop
}
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000208 	.word	0x20000208

0800067c <Init_Smps>:

void Init_Smps(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000680:	bf00      	nop
}
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <Init_Exti>:

void Init_Exti(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800068e:	2050      	movs	r0, #80	@ 0x50
 8000690:	f7ff ff44 	bl	800051c <LL_EXTI_EnableIT_32_63>

  return;
 8000694:	bf00      	nop
}
 8000696:	bd80      	pop	{r7, pc}

08000698 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800069c:	bf00      	nop
}
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f007 f95b 	bl	8007968 <OTP_Read>
 80006b2:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d005      	beq.n	80006c6 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	799b      	ldrb	r3, [r3, #6]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff40 	bl	8000544 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80006c4:	bf00      	nop
 80006c6:	bf00      	nop
}
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <System_Init>:

static void System_Init(void)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	af00      	add	r7, sp, #0
  Init_Smps();
 80006d2:	f7ff ffd3 	bl	800067c <Init_Smps>

  Init_Exti();
 80006d6:	f7ff ffd8 	bl	800068a <Init_Exti>

  Init_Rtc();
 80006da:	f000 f803 	bl	80006e4 <Init_Rtc>

  return;
 80006de:	bf00      	nop
}
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <Init_Rtc>:

static void Init_Rtc(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80006e8:	4805      	ldr	r0, [pc, #20]	@ (8000700 <Init_Rtc+0x1c>)
 80006ea:	f7ff ff86 	bl	80005fa <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80006ee:	2100      	movs	r1, #0
 80006f0:	4803      	ldr	r0, [pc, #12]	@ (8000700 <Init_Rtc+0x1c>)
 80006f2:	f7ff ff92 	bl	800061a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80006f6:	4802      	ldr	r0, [pc, #8]	@ (8000700 <Init_Rtc+0x1c>)
 80006f8:	f7ff ff72 	bl	80005e0 <LL_RTC_EnableWriteProtection>

  return;
 80006fc:	bf00      	nop
}
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40002800 	.word	0x40002800

08000704 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000708:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800070c:	f7ff ff38 	bl	8000580 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000710:	f008 fdce 	bl	80092b0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000714:	2004      	movs	r0, #4
 8000716:	f7ff feeb 	bl	80004f0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800071a:	bf00      	nop
}
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000726:	f006 fedd 	bl	80074e4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800072a:	4a11      	ldr	r2, [pc, #68]	@ (8000770 <appe_Tl_Init+0x50>)
 800072c:	2100      	movs	r1, #0
 800072e:	2008      	movs	r0, #8
 8000730:	f008 fefc 	bl	800952c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <appe_Tl_Init+0x54>)
 8000736:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <appe_Tl_Init+0x58>)
 800073a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800073c:	463b      	mov	r3, r7
 800073e:	4619      	mov	r1, r3
 8000740:	480e      	ldr	r0, [pc, #56]	@ (800077c <appe_Tl_Init+0x5c>)
 8000742:	f006 fd91 	bl	8007268 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <appe_Tl_Init+0x60>)
 8000748:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800074a:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <appe_Tl_Init+0x64>)
 800074c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <appe_Tl_Init+0x68>)
 8000750:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000752:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000756:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	4618      	mov	r0, r3
 800075e:	f007 f803 	bl	8007768 <TL_MM_Init>

  TL_Enable();
 8000762:	f006 feb9 	bl	80074d8 <TL_Enable>

  return;
 8000766:	bf00      	nop
}
 8000768:	3720      	adds	r7, #32
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	080072a1 	.word	0x080072a1
 8000774:	20030734 	.word	0x20030734
 8000778:	0800078d 	.word	0x0800078d
 800077c:	080007a5 	.word	0x080007a5
 8000780:	2003094c 	.word	0x2003094c
 8000784:	20030840 	.word	0x20030840
 8000788:	200301f8 	.word	0x200301f8

0800078c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000796:	bf00      	nop
}
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
	...

080007a4 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	330b      	adds	r3, #11
 80007b2:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80007be:	2b07      	cmp	r3, #7
 80007c0:	d81f      	bhi.n	8000802 <APPE_SysUserEvtRx+0x5e>
 80007c2:	a201      	add	r2, pc, #4	@ (adr r2, 80007c8 <APPE_SysUserEvtRx+0x24>)
 80007c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c8:	080007e9 	.word	0x080007e9
 80007cc:	080007fb 	.word	0x080007fb
 80007d0:	08000803 	.word	0x08000803
 80007d4:	08000803 	.word	0x08000803
 80007d8:	08000803 	.word	0x08000803
 80007dc:	08000803 	.word	0x08000803
 80007e0:	08000803 	.word	0x08000803
 80007e4:	08000803 	.word	0x08000803
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4618      	mov	r0, r3
 80007ee:	f006 faf1 	bl	8006dd4 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f000 f81b 	bl	800082e <APPE_SysEvtReadyProcessing>
    break;
 80007f8:	e004      	b.n	8000804 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f000 f806 	bl	800080c <APPE_SysEvtError>
    break;
 8000800:	e000      	b.n	8000804 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000802:	bf00      	nop
  }

  return;
 8000804:	bf00      	nop
}
 8000806:	3720      	adds	r7, #32
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	330b      	adds	r3, #11
 800081a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	3302      	adds	r3, #2
 8000820:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000822:	bf00      	nop
}
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b08a      	sub	sp, #40	@ 0x28
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	330b      	adds	r3, #11
 8000852:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	3302      	adds	r3, #2
 8000858:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800085a:	69bb      	ldr	r3, [r7, #24]
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d11d      	bne.n	800089e <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000862:	f7ff fe29 	bl	80004b8 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000866:	230f      	movs	r3, #15
 8000868:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800086a:	237f      	movs	r3, #127	@ 0x7f
 800086c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800086e:	f7ff fea9 	bl	80005c4 <LL_DBGMCU_GetRevisionID>
 8000872:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000876:	b29b      	uxth	r3, r3
 8000878:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800087a:	f7ff fe95 	bl	80005a8 <LL_DBGMCU_GetDeviceID>
 800087e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000880:	6a3b      	ldr	r3, [r7, #32]
 8000882:	b29b      	uxth	r3, r3
 8000884:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	4618      	mov	r0, r3
 800088c:	f006 fa8c 	bl	8006da8 <SHCI_C2_Config>

    APP_BLE_Init();
 8000890:	f007 f974 	bl	8007b7c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000894:	2100      	movs	r1, #0
 8000896:	2001      	movs	r0, #1
 8000898:	f008 fd1c 	bl	80092d4 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 800089c:	e007      	b.n	80008ae <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d103      	bne.n	80008ae <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
  return;
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
}
 80008b0:	3728      	adds	r7, #40	@ 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80008ba:	f04f 30ff 	mov.w	r0, #4294967295
 80008be:	f008 fd39 	bl	8009334 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80008ca:	bf00      	nop
}
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80008dc:	2100      	movs	r1, #0
 80008de:	2008      	movs	r0, #8
 80008e0:	f008 fe46 	bl	8009570 <UTIL_SEQ_SetTask>
  return;
 80008e4:	bf00      	nop
}
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008f4:	2002      	movs	r0, #2
 80008f6:	f008 fea7 	bl	8009648 <UTIL_SEQ_SetEvt>
  return;
 80008fa:	bf00      	nop
}
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800090a:	2002      	movs	r0, #2
 800090c:	f008 febc 	bl	8009688 <UTIL_SEQ_WaitEvt>
  return;
 8000910:	bf00      	nop
}
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <LL_EXTI_EnableIT_0_31>:
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <LL_EXTI_EnableIT_0_31+0x24>)
 8000922:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8000926:	4905      	ldr	r1, [pc, #20]	@ (800093c <LL_EXTI_EnableIT_0_31+0x24>)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4313      	orrs	r3, r2
 800092c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	58000800 	.word	0x58000800

08000940 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4904      	ldr	r1, [pc, #16]	@ (8000960 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4313      	orrs	r3, r2
 8000952:	600b      	str	r3, [r1, #0]

}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	58000800 	.word	0x58000800

08000964 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <ReadRtcSsrValue+0x3c>)
 800096c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800096e:	b29b      	uxth	r3, r3
 8000970:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <ReadRtcSsrValue+0x3c>)
 8000974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000976:	b29b      	uxth	r3, r3
 8000978:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800097a:	e005      	b.n	8000988 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000980:	4b07      	ldr	r3, [pc, #28]	@ (80009a0 <ReadRtcSsrValue+0x3c>)
 8000982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000984:	b29b      	uxth	r3, r3
 8000986:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	429a      	cmp	r2, r3
 800098e:	d1f5      	bne.n	800097c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000990:	683b      	ldr	r3, [r7, #0]
}
 8000992:	4618      	mov	r0, r3
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40002800 	.word	0x40002800

080009a4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	460a      	mov	r2, r1
 80009ae:	71fb      	strb	r3, [r7, #7]
 80009b0:	4613      	mov	r3, r2
 80009b2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80009b4:	79ba      	ldrb	r2, [r7, #6]
 80009b6:	491d      	ldr	r1, [pc, #116]	@ (8000a2c <LinkTimerAfter+0x88>)
 80009b8:	4613      	mov	r3, r2
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	4413      	add	r3, r2
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	440b      	add	r3, r1
 80009c2:	3315      	adds	r3, #21
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	2b06      	cmp	r3, #6
 80009cc:	d009      	beq.n	80009e2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80009ce:	7bfa      	ldrb	r2, [r7, #15]
 80009d0:	4916      	ldr	r1, [pc, #88]	@ (8000a2c <LinkTimerAfter+0x88>)
 80009d2:	4613      	mov	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	440b      	add	r3, r1
 80009dc:	3314      	adds	r3, #20
 80009de:	79fa      	ldrb	r2, [r7, #7]
 80009e0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	4911      	ldr	r1, [pc, #68]	@ (8000a2c <LinkTimerAfter+0x88>)
 80009e6:	4613      	mov	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	440b      	add	r3, r1
 80009f0:	3315      	adds	r3, #21
 80009f2:	7bfa      	ldrb	r2, [r7, #15]
 80009f4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80009f6:	79fa      	ldrb	r2, [r7, #7]
 80009f8:	490c      	ldr	r1, [pc, #48]	@ (8000a2c <LinkTimerAfter+0x88>)
 80009fa:	4613      	mov	r3, r2
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	4413      	add	r3, r2
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	440b      	add	r3, r1
 8000a04:	3314      	adds	r3, #20
 8000a06:	79ba      	ldrb	r2, [r7, #6]
 8000a08:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000a0a:	79ba      	ldrb	r2, [r7, #6]
 8000a0c:	4907      	ldr	r1, [pc, #28]	@ (8000a2c <LinkTimerAfter+0x88>)
 8000a0e:	4613      	mov	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4413      	add	r3, r2
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	440b      	add	r3, r1
 8000a18:	3315      	adds	r3, #21
 8000a1a:	79fa      	ldrb	r2, [r7, #7]
 8000a1c:	701a      	strb	r2, [r3, #0]

  return;
 8000a1e:	bf00      	nop
}
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000098 	.word	0x20000098

08000a30 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	460a      	mov	r2, r1
 8000a3a:	71fb      	strb	r3, [r7, #7]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000a40:	4b29      	ldr	r3, [pc, #164]	@ (8000ae8 <LinkTimerBefore+0xb8>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	79ba      	ldrb	r2, [r7, #6]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d032      	beq.n	8000ab2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000a4c:	79ba      	ldrb	r2, [r7, #6]
 8000a4e:	4927      	ldr	r1, [pc, #156]	@ (8000aec <LinkTimerBefore+0xbc>)
 8000a50:	4613      	mov	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4413      	add	r3, r2
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	440b      	add	r3, r1
 8000a5a:	3314      	adds	r3, #20
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000a60:	7bfa      	ldrb	r2, [r7, #15]
 8000a62:	4922      	ldr	r1, [pc, #136]	@ (8000aec <LinkTimerBefore+0xbc>)
 8000a64:	4613      	mov	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	4413      	add	r3, r2
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	440b      	add	r3, r1
 8000a6e:	3315      	adds	r3, #21
 8000a70:	79fa      	ldrb	r2, [r7, #7]
 8000a72:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a74:	79fa      	ldrb	r2, [r7, #7]
 8000a76:	491d      	ldr	r1, [pc, #116]	@ (8000aec <LinkTimerBefore+0xbc>)
 8000a78:	4613      	mov	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	4413      	add	r3, r2
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	440b      	add	r3, r1
 8000a82:	3315      	adds	r3, #21
 8000a84:	79ba      	ldrb	r2, [r7, #6]
 8000a86:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000a88:	79fa      	ldrb	r2, [r7, #7]
 8000a8a:	4918      	ldr	r1, [pc, #96]	@ (8000aec <LinkTimerBefore+0xbc>)
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	4413      	add	r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	440b      	add	r3, r1
 8000a96:	3314      	adds	r3, #20
 8000a98:	7bfa      	ldrb	r2, [r7, #15]
 8000a9a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000a9c:	79ba      	ldrb	r2, [r7, #6]
 8000a9e:	4913      	ldr	r1, [pc, #76]	@ (8000aec <LinkTimerBefore+0xbc>)
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	4413      	add	r3, r2
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	440b      	add	r3, r1
 8000aaa:	3314      	adds	r3, #20
 8000aac:	79fa      	ldrb	r2, [r7, #7]
 8000aae:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000ab0:	e014      	b.n	8000adc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000ab2:	79fa      	ldrb	r2, [r7, #7]
 8000ab4:	490d      	ldr	r1, [pc, #52]	@ (8000aec <LinkTimerBefore+0xbc>)
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	440b      	add	r3, r1
 8000ac0:	3315      	adds	r3, #21
 8000ac2:	79ba      	ldrb	r2, [r7, #6]
 8000ac4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000ac6:	79ba      	ldrb	r2, [r7, #6]
 8000ac8:	4908      	ldr	r1, [pc, #32]	@ (8000aec <LinkTimerBefore+0xbc>)
 8000aca:	4613      	mov	r3, r2
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	4413      	add	r3, r2
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	440b      	add	r3, r1
 8000ad4:	3314      	adds	r3, #20
 8000ad6:	79fa      	ldrb	r2, [r7, #7]
 8000ad8:	701a      	strb	r2, [r3, #0]
  return;
 8000ada:	bf00      	nop
}
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000128 	.word	0x20000128
 8000aec:	20000098 	.word	0x20000098

08000af0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000afa:	4b4e      	ldr	r3, [pc, #312]	@ (8000c34 <linkTimer+0x144>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	2b06      	cmp	r3, #6
 8000b02:	d118      	bne.n	8000b36 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000b04:	4b4b      	ldr	r3, [pc, #300]	@ (8000c34 <linkTimer+0x144>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4b4b      	ldr	r3, [pc, #300]	@ (8000c38 <linkTimer+0x148>)
 8000b0c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000b0e:	4a49      	ldr	r2, [pc, #292]	@ (8000c34 <linkTimer+0x144>)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000b14:	79fa      	ldrb	r2, [r7, #7]
 8000b16:	4949      	ldr	r1, [pc, #292]	@ (8000c3c <linkTimer+0x14c>)
 8000b18:	4613      	mov	r3, r2
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	4413      	add	r3, r2
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	440b      	add	r3, r1
 8000b22:	3315      	adds	r3, #21
 8000b24:	2206      	movs	r2, #6
 8000b26:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000b28:	4b45      	ldr	r3, [pc, #276]	@ (8000c40 <linkTimer+0x150>)
 8000b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b2e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	81fb      	strh	r3, [r7, #14]
 8000b34:	e078      	b.n	8000c28 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000b36:	f000 f909 	bl	8000d4c <ReturnTimeElapsed>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	493e      	ldr	r1, [pc, #248]	@ (8000c3c <linkTimer+0x14c>)
 8000b42:	4613      	mov	r3, r2
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	4413      	add	r3, r2
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	440b      	add	r3, r1
 8000b4c:	3308      	adds	r3, #8
 8000b4e:	6819      	ldr	r1, [r3, #0]
 8000b50:	89fb      	ldrh	r3, [r7, #14]
 8000b52:	79fa      	ldrb	r2, [r7, #7]
 8000b54:	4419      	add	r1, r3
 8000b56:	4839      	ldr	r0, [pc, #228]	@ (8000c3c <linkTimer+0x14c>)
 8000b58:	4613      	mov	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	4413      	add	r3, r2
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	4403      	add	r3, r0
 8000b62:	3308      	adds	r3, #8
 8000b64:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000b66:	79fa      	ldrb	r2, [r7, #7]
 8000b68:	4934      	ldr	r1, [pc, #208]	@ (8000c3c <linkTimer+0x14c>)
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	4413      	add	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	440b      	add	r3, r1
 8000b74:	3308      	adds	r3, #8
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000b7a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c34 <linkTimer+0x144>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	4619      	mov	r1, r3
 8000b82:	4a2e      	ldr	r2, [pc, #184]	@ (8000c3c <linkTimer+0x14c>)
 8000b84:	460b      	mov	r3, r1
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	440b      	add	r3, r1
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	4413      	add	r3, r2
 8000b8e:	3308      	adds	r3, #8
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d337      	bcc.n	8000c08 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000b98:	4b26      	ldr	r3, [pc, #152]	@ (8000c34 <linkTimer+0x144>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000b9e:	7b7a      	ldrb	r2, [r7, #13]
 8000ba0:	4926      	ldr	r1, [pc, #152]	@ (8000c3c <linkTimer+0x14c>)
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	4413      	add	r3, r2
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	440b      	add	r3, r1
 8000bac:	3315      	adds	r3, #21
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000bb2:	e013      	b.n	8000bdc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000bb4:	7b7a      	ldrb	r2, [r7, #13]
 8000bb6:	4921      	ldr	r1, [pc, #132]	@ (8000c3c <linkTimer+0x14c>)
 8000bb8:	4613      	mov	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3315      	adds	r3, #21
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000bc8:	7b7a      	ldrb	r2, [r7, #13]
 8000bca:	491c      	ldr	r1, [pc, #112]	@ (8000c3c <linkTimer+0x14c>)
 8000bcc:	4613      	mov	r3, r2
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	4413      	add	r3, r2
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	440b      	add	r3, r1
 8000bd6:	3315      	adds	r3, #21
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000bdc:	7b3b      	ldrb	r3, [r7, #12]
 8000bde:	2b06      	cmp	r3, #6
 8000be0:	d00b      	beq.n	8000bfa <linkTimer+0x10a>
 8000be2:	7b3a      	ldrb	r2, [r7, #12]
 8000be4:	4915      	ldr	r1, [pc, #84]	@ (8000c3c <linkTimer+0x14c>)
 8000be6:	4613      	mov	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4413      	add	r3, r2
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	440b      	add	r3, r1
 8000bf0:	3308      	adds	r3, #8
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	68ba      	ldr	r2, [r7, #8]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d2dc      	bcs.n	8000bb4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000bfa:	7b7a      	ldrb	r2, [r7, #13]
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fecf 	bl	80009a4 <LinkTimerAfter>
 8000c06:	e00f      	b.n	8000c28 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000c08:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <linkTimer+0x144>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4611      	mov	r1, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff0c 	bl	8000a30 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <linkTimer+0x144>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <linkTimer+0x148>)
 8000c20:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000c22:	4a04      	ldr	r2, [pc, #16]	@ (8000c34 <linkTimer+0x144>)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000c28:	89fb      	ldrh	r3, [r7, #14]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000128 	.word	0x20000128
 8000c38:	20000129 	.word	0x20000129
 8000c3c:	20000098 	.word	0x20000098
 8000c40:	2000012c 	.word	0x2000012c

08000c44 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	460a      	mov	r2, r1
 8000c4e:	71fb      	strb	r3, [r7, #7]
 8000c50:	4613      	mov	r3, r2
 8000c52:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000c54:	4b39      	ldr	r3, [pc, #228]	@ (8000d3c <UnlinkTimer+0xf8>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	79fa      	ldrb	r2, [r7, #7]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d111      	bne.n	8000c84 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c60:	4b36      	ldr	r3, [pc, #216]	@ (8000d3c <UnlinkTimer+0xf8>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b36      	ldr	r3, [pc, #216]	@ (8000d40 <UnlinkTimer+0xfc>)
 8000c68:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000c6a:	79fa      	ldrb	r2, [r7, #7]
 8000c6c:	4935      	ldr	r1, [pc, #212]	@ (8000d44 <UnlinkTimer+0x100>)
 8000c6e:	4613      	mov	r3, r2
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	4413      	add	r3, r2
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	440b      	add	r3, r1
 8000c78:	3315      	adds	r3, #21
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d3c <UnlinkTimer+0xf8>)
 8000c80:	701a      	strb	r2, [r3, #0]
 8000c82:	e03e      	b.n	8000d02 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000c84:	79fa      	ldrb	r2, [r7, #7]
 8000c86:	492f      	ldr	r1, [pc, #188]	@ (8000d44 <UnlinkTimer+0x100>)
 8000c88:	4613      	mov	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	4413      	add	r3, r2
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	440b      	add	r3, r1
 8000c92:	3314      	adds	r3, #20
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000c98:	79fa      	ldrb	r2, [r7, #7]
 8000c9a:	492a      	ldr	r1, [pc, #168]	@ (8000d44 <UnlinkTimer+0x100>)
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4413      	add	r3, r2
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	440b      	add	r3, r1
 8000ca6:	3315      	adds	r3, #21
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000cac:	79f9      	ldrb	r1, [r7, #7]
 8000cae:	7bfa      	ldrb	r2, [r7, #15]
 8000cb0:	4824      	ldr	r0, [pc, #144]	@ (8000d44 <UnlinkTimer+0x100>)
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	440b      	add	r3, r1
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	4403      	add	r3, r0
 8000cbc:	3315      	adds	r3, #21
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2d8      	uxtb	r0, r3
 8000cc2:	4920      	ldr	r1, [pc, #128]	@ (8000d44 <UnlinkTimer+0x100>)
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4413      	add	r3, r2
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	440b      	add	r3, r1
 8000cce:	3315      	adds	r3, #21
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cd4:	7bbb      	ldrb	r3, [r7, #14]
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d013      	beq.n	8000d02 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000cda:	79f9      	ldrb	r1, [r7, #7]
 8000cdc:	7bba      	ldrb	r2, [r7, #14]
 8000cde:	4819      	ldr	r0, [pc, #100]	@ (8000d44 <UnlinkTimer+0x100>)
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	440b      	add	r3, r1
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	4403      	add	r3, r0
 8000cea:	3314      	adds	r3, #20
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b2d8      	uxtb	r0, r3
 8000cf0:	4914      	ldr	r1, [pc, #80]	@ (8000d44 <UnlinkTimer+0x100>)
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	4413      	add	r3, r2
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	440b      	add	r3, r1
 8000cfc:	3314      	adds	r3, #20
 8000cfe:	4602      	mov	r2, r0
 8000d00:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000d02:	79fa      	ldrb	r2, [r7, #7]
 8000d04:	490f      	ldr	r1, [pc, #60]	@ (8000d44 <UnlinkTimer+0x100>)
 8000d06:	4613      	mov	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	440b      	add	r3, r1
 8000d10:	330c      	adds	r3, #12
 8000d12:	2201      	movs	r2, #1
 8000d14:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <UnlinkTimer+0xf8>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b06      	cmp	r3, #6
 8000d1e:	d107      	bne.n	8000d30 <UnlinkTimer+0xec>
 8000d20:	79bb      	ldrb	r3, [r7, #6]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d104      	bne.n	8000d30 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <UnlinkTimer+0x104>)
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000d2e:	bf00      	nop
 8000d30:	bf00      	nop
}
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	20000128 	.word	0x20000128
 8000d40:	20000129 	.word	0x20000129
 8000d44:	20000098 	.word	0x20000098
 8000d48:	2000012c 	.word	0x2000012c

08000d4c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000d52:	4b1a      	ldr	r3, [pc, #104]	@ (8000dbc <ReturnTimeElapsed+0x70>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d5a:	d026      	beq.n	8000daa <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000d5c:	f7ff fe02 	bl	8000964 <ReadRtcSsrValue>
 8000d60:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000d62:	4b16      	ldr	r3, [pc, #88]	@ (8000dbc <ReturnTimeElapsed+0x70>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d805      	bhi.n	8000d78 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000d6c:	4b13      	ldr	r3, [pc, #76]	@ (8000dbc <ReturnTimeElapsed+0x70>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	e00a      	b.n	8000d8e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000d78:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <ReturnTimeElapsed+0x74>)
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000d84:	4b0d      	ldr	r3, [pc, #52]	@ (8000dbc <ReturnTimeElapsed+0x70>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc4 <ReturnTimeElapsed+0x78>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	fb02 f303 	mul.w	r3, r2, r3
 8000d9a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <ReturnTimeElapsed+0x7c>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	40d3      	lsrs	r3, r2
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	e001      	b.n	8000dae <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	b29b      	uxth	r3, r3
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	2000012c 	.word	0x2000012c
 8000dc0:	20000134 	.word	0x20000134
 8000dc4:	20000132 	.word	0x20000132
 8000dc8:	20000131 	.word	0x20000131

08000dcc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d108      	bne.n	8000dee <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ddc:	f7ff fdc2 	bl	8000964 <ReadRtcSsrValue>
 8000de0:	4603      	mov	r3, r0
 8000de2:	4a21      	ldr	r2, [pc, #132]	@ (8000e68 <RestartWakeupCounter+0x9c>)
 8000de4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000de6:	2003      	movs	r0, #3
 8000de8:	f001 f937 	bl	800205a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000dec:	e039      	b.n	8000e62 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d803      	bhi.n	8000dfc <RestartWakeupCounter+0x30>
 8000df4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e6c <RestartWakeupCounter+0xa0>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d002      	beq.n	8000e02 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000e02:	bf00      	nop
 8000e04:	4b1a      	ldr	r3, [pc, #104]	@ (8000e70 <RestartWakeupCounter+0xa4>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0f8      	beq.n	8000e04 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000e12:	4b17      	ldr	r3, [pc, #92]	@ (8000e70 <RestartWakeupCounter+0xa4>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <RestartWakeupCounter+0xa4>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000e22:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e24:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <RestartWakeupCounter+0xa8>)
 8000e26:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e2a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	f001 f922 	bl	8002076 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000e32:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <RestartWakeupCounter+0xac>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	0c1b      	lsrs	r3, r3, #16
 8000e38:	041b      	lsls	r3, r3, #16
 8000e3a:	88fa      	ldrh	r2, [r7, #6]
 8000e3c:	490e      	ldr	r1, [pc, #56]	@ (8000e78 <RestartWakeupCounter+0xac>)
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e42:	f7ff fd8f 	bl	8000964 <ReadRtcSsrValue>
 8000e46:	4603      	mov	r3, r0
 8000e48:	4a07      	ldr	r2, [pc, #28]	@ (8000e68 <RestartWakeupCounter+0x9c>)
 8000e4a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000e4c:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <RestartWakeupCounter+0xa4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	4b07      	ldr	r3, [pc, #28]	@ (8000e70 <RestartWakeupCounter+0xa4>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e5a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000e5c:	f3af 8000 	nop.w
  return ;
 8000e60:	bf00      	nop
}
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	2000012c 	.word	0x2000012c
 8000e6c:	20000131 	.word	0x20000131
 8000e70:	20000208 	.word	0x20000208
 8000e74:	58000800 	.word	0x58000800
 8000e78:	40002800 	.word	0x40002800

08000e7c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000e82:	4b45      	ldr	r3, [pc, #276]	@ (8000f98 <RescheduleTimerList+0x11c>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e8e:	d107      	bne.n	8000ea0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000e90:	bf00      	nop
 8000e92:	4b42      	ldr	r3, [pc, #264]	@ (8000f9c <RescheduleTimerList+0x120>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1f8      	bne.n	8000e92 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000ea0:	4b3e      	ldr	r3, [pc, #248]	@ (8000f9c <RescheduleTimerList+0x120>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	4b3d      	ldr	r3, [pc, #244]	@ (8000f9c <RescheduleTimerList+0x120>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000eae:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000eb0:	4b3b      	ldr	r3, [pc, #236]	@ (8000fa0 <RescheduleTimerList+0x124>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000eb6:	7bfa      	ldrb	r2, [r7, #15]
 8000eb8:	493a      	ldr	r1, [pc, #232]	@ (8000fa4 <RescheduleTimerList+0x128>)
 8000eba:	4613      	mov	r3, r2
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	4413      	add	r3, r2
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	440b      	add	r3, r1
 8000ec4:	3308      	adds	r3, #8
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000eca:	f7ff ff3f 	bl	8000d4c <ReturnTimeElapsed>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d205      	bcs.n	8000ee6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ede:	4b32      	ldr	r3, [pc, #200]	@ (8000fa8 <RescheduleTimerList+0x12c>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	e04d      	b.n	8000f82 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	4a30      	ldr	r2, [pc, #192]	@ (8000fac <RescheduleTimerList+0x130>)
 8000eea:	8812      	ldrh	r2, [r2, #0]
 8000eec:	b292      	uxth	r2, r2
 8000eee:	4413      	add	r3, r2
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d906      	bls.n	8000f06 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8000fac <RescheduleTimerList+0x130>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000efe:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa8 <RescheduleTimerList+0x12c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
 8000f04:	e03d      	b.n	8000f82 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f10:	4b25      	ldr	r3, [pc, #148]	@ (8000fa8 <RescheduleTimerList+0x12c>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f16:	e034      	b.n	8000f82 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000f18:	7bfa      	ldrb	r2, [r7, #15]
 8000f1a:	4922      	ldr	r1, [pc, #136]	@ (8000fa4 <RescheduleTimerList+0x128>)
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4413      	add	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	440b      	add	r3, r1
 8000f26:	3308      	adds	r3, #8
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d20a      	bcs.n	8000f46 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000f30:	7bfa      	ldrb	r2, [r7, #15]
 8000f32:	491c      	ldr	r1, [pc, #112]	@ (8000fa4 <RescheduleTimerList+0x128>)
 8000f34:	4613      	mov	r3, r2
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4413      	add	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	440b      	add	r3, r1
 8000f3e:	3308      	adds	r3, #8
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	e013      	b.n	8000f6e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000f46:	7bfa      	ldrb	r2, [r7, #15]
 8000f48:	4916      	ldr	r1, [pc, #88]	@ (8000fa4 <RescheduleTimerList+0x128>)
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4413      	add	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	440b      	add	r3, r1
 8000f54:	3308      	adds	r3, #8
 8000f56:	6819      	ldr	r1, [r3, #0]
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	1ac9      	subs	r1, r1, r3
 8000f5e:	4811      	ldr	r0, [pc, #68]	@ (8000fa4 <RescheduleTimerList+0x128>)
 8000f60:	4613      	mov	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	4403      	add	r3, r0
 8000f6a:	3308      	adds	r3, #8
 8000f6c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000f6e:	7bfa      	ldrb	r2, [r7, #15]
 8000f70:	490c      	ldr	r1, [pc, #48]	@ (8000fa4 <RescheduleTimerList+0x128>)
 8000f72:	4613      	mov	r3, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4413      	add	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	440b      	add	r3, r1
 8000f7c:	3315      	adds	r3, #21
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	2b06      	cmp	r3, #6
 8000f86:	d1c7      	bne.n	8000f18 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000f88:	89bb      	ldrh	r3, [r7, #12]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff1e 	bl	8000dcc <RestartWakeupCounter>

  return ;
 8000f90:	bf00      	nop
}
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40002800 	.word	0x40002800
 8000f9c:	20000208 	.word	0x20000208
 8000fa0:	20000128 	.word	0x20000128
 8000fa4:	20000098 	.word	0x20000098
 8000fa8:	20000130 	.word	0x20000130
 8000fac:	20000136 	.word	0x20000136

08000fb0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	@ 0x28
 8000fb4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8000fba:	617b      	str	r3, [r7, #20]
  return(result);
 8000fbc:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc0:	b672      	cpsid	i
}
 8000fc2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000fc4:	4b59      	ldr	r3, [pc, #356]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	22ca      	movs	r2, #202	@ 0xca
 8000fca:	625a      	str	r2, [r3, #36]	@ 0x24
 8000fcc:	4b57      	ldr	r3, [pc, #348]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2253      	movs	r2, #83	@ 0x53
 8000fd2:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000fd4:	4b55      	ldr	r3, [pc, #340]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	689a      	ldr	r2, [r3, #8]
 8000fda:	4b54      	ldr	r3, [pc, #336]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000fe2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000fe4:	4b52      	ldr	r3, [pc, #328]	@ (8001130 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000fec:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000ff0:	4950      	ldr	r1, [pc, #320]	@ (8001134 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	440b      	add	r3, r1
 8000ffc:	330c      	adds	r3, #12
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d16e      	bne.n	80010e4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001006:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800100a:	494a      	ldr	r1, [pc, #296]	@ (8001134 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800101a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800101e:	4945      	ldr	r1, [pc, #276]	@ (8001134 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001020:	4613      	mov	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	440b      	add	r3, r1
 800102a:	3310      	adds	r3, #16
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001030:	4b41      	ldr	r3, [pc, #260]	@ (8001138 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d04c      	beq.n	80010d4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800103a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800103e:	493d      	ldr	r1, [pc, #244]	@ (8001134 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	440b      	add	r3, r1
 800104a:	330d      	adds	r3, #13
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b01      	cmp	r3, #1
 8001052:	d124      	bne.n	800109e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001054:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001058:	2101      	movs	r1, #1
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fdf2 	bl	8000c44 <UnlinkTimer>
 8001060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001062:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	f383 8810 	msr	PRIMASK, r3
}
 800106a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800106c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001070:	4930      	ldr	r1, [pc, #192]	@ (8001134 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001072:	4613      	mov	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4413      	add	r3, r2
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	440b      	add	r3, r1
 800107c:	3304      	adds	r3, #4
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f9b8 	bl	80013fc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800108c:	4b27      	ldr	r3, [pc, #156]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	22ca      	movs	r2, #202	@ 0xca
 8001092:	625a      	str	r2, [r3, #36]	@ 0x24
 8001094:	4b25      	ldr	r3, [pc, #148]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2253      	movs	r2, #83	@ 0x53
 800109a:	625a      	str	r2, [r3, #36]	@ 0x24
 800109c:	e012      	b.n	80010c4 <HW_TS_RTC_Wakeup_Handler+0x114>
 800109e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f383 8810 	msr	PRIMASK, r3
}
 80010a8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80010aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f920 	bl	80012f4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80010b4:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	22ca      	movs	r2, #202	@ 0xca
 80010ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80010bc:	4b1b      	ldr	r3, [pc, #108]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2253      	movs	r2, #83	@ 0x53
 80010c2:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80010c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80010c8:	69fa      	ldr	r2, [r7, #28]
 80010ca:	4619      	mov	r1, r3
 80010cc:	69b8      	ldr	r0, [r7, #24]
 80010ce:	f000 fa1b 	bl	8001508 <HW_TS_RTC_Int_AppNot>
 80010d2:	e022      	b.n	800111a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80010d4:	f7ff fed2 	bl	8000e7c <RescheduleTimerList>
 80010d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010da:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	f383 8810 	msr	PRIMASK, r3
}
 80010e2:	e01a      	b.n	800111a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80010e4:	bf00      	nop
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0f8      	beq.n	80010e6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80010f4:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001104:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001106:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001108:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001110:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f383 8810 	msr	PRIMASK, r3
}
 8001118:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800111a:	4b04      	ldr	r3, [pc, #16]	@ (800112c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	22ff      	movs	r2, #255	@ 0xff
 8001120:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001122:	bf00      	nop
}
 8001124:	3728      	adds	r7, #40	@ 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000208 	.word	0x20000208
 8001130:	20000128 	.word	0x20000128
 8001134:	20000098 	.word	0x20000098
 8001138:	20000130 	.word	0x20000130
 800113c:	58000800 	.word	0x58000800

08001140 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800114c:	4b5e      	ldr	r3, [pc, #376]	@ (80012c8 <HW_TS_Init+0x188>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	22ca      	movs	r2, #202	@ 0xca
 8001152:	625a      	str	r2, [r3, #36]	@ 0x24
 8001154:	4b5c      	ldr	r3, [pc, #368]	@ (80012c8 <HW_TS_Init+0x188>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2253      	movs	r2, #83	@ 0x53
 800115a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800115c:	4b5b      	ldr	r3, [pc, #364]	@ (80012cc <HW_TS_Init+0x18c>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	4a5a      	ldr	r2, [pc, #360]	@ (80012cc <HW_TS_Init+0x18c>)
 8001162:	f043 0320 	orr.w	r3, r3, #32
 8001166:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001168:	4b58      	ldr	r3, [pc, #352]	@ (80012cc <HW_TS_Init+0x18c>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	b2db      	uxtb	r3, r3
 8001174:	f1c3 0304 	rsb	r3, r3, #4
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b55      	ldr	r3, [pc, #340]	@ (80012d0 <HW_TS_Init+0x190>)
 800117c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800117e:	4b53      	ldr	r3, [pc, #332]	@ (80012cc <HW_TS_Init+0x18c>)
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001186:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800118a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	fa92 f2a2 	rbit	r2, r2
 8001192:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	2a00      	cmp	r2, #0
 800119c:	d101      	bne.n	80011a2 <HW_TS_Init+0x62>
  {
    return 32U;
 800119e:	2220      	movs	r2, #32
 80011a0:	e003      	b.n	80011aa <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	fab2 f282 	clz	r2, r2
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	40d3      	lsrs	r3, r2
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	3301      	adds	r3, #1
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b48      	ldr	r3, [pc, #288]	@ (80012d4 <HW_TS_Init+0x194>)
 80011b4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80011b6:	4b45      	ldr	r3, [pc, #276]	@ (80012cc <HW_TS_Init+0x18c>)
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	3301      	adds	r3, #1
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b44      	ldr	r3, [pc, #272]	@ (80012d8 <HW_TS_Init+0x198>)
 80011c8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80011ca:	4b43      	ldr	r3, [pc, #268]	@ (80012d8 <HW_TS_Init+0x198>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	4a40      	ldr	r2, [pc, #256]	@ (80012d4 <HW_TS_Init+0x194>)
 80011d2:	7812      	ldrb	r2, [r2, #0]
 80011d4:	fb02 f303 	mul.w	r3, r2, r3
 80011d8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80011dc:	4a3c      	ldr	r2, [pc, #240]	@ (80012d0 <HW_TS_Init+0x190>)
 80011de:	7812      	ldrb	r2, [r2, #0]
 80011e0:	40d3      	lsrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d904      	bls.n	80011f8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80011ee:	4b3b      	ldr	r3, [pc, #236]	@ (80012dc <HW_TS_Init+0x19c>)
 80011f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011f4:	801a      	strh	r2, [r3, #0]
 80011f6:	e003      	b.n	8001200 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b37      	ldr	r3, [pc, #220]	@ (80012dc <HW_TS_Init+0x19c>)
 80011fe:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001200:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001204:	f7ff fb9c 	bl	8000940 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001208:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800120c:	f7ff fb84 	bl	8000918 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d13d      	bne.n	8001292 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001216:	4b32      	ldr	r3, [pc, #200]	@ (80012e0 <HW_TS_Init+0x1a0>)
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800121c:	4b31      	ldr	r3, [pc, #196]	@ (80012e4 <HW_TS_Init+0x1a4>)
 800121e:	f04f 32ff 	mov.w	r2, #4294967295
 8001222:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001224:	2300      	movs	r3, #0
 8001226:	77fb      	strb	r3, [r7, #31]
 8001228:	e00c      	b.n	8001244 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800122a:	7ffa      	ldrb	r2, [r7, #31]
 800122c:	492e      	ldr	r1, [pc, #184]	@ (80012e8 <HW_TS_Init+0x1a8>)
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	440b      	add	r3, r1
 8001238:	330c      	adds	r3, #12
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800123e:	7ffb      	ldrb	r3, [r7, #31]
 8001240:	3301      	adds	r3, #1
 8001242:	77fb      	strb	r3, [r7, #31]
 8001244:	7ffb      	ldrb	r3, [r7, #31]
 8001246:	2b05      	cmp	r3, #5
 8001248:	d9ef      	bls.n	800122a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800124a:	4b28      	ldr	r3, [pc, #160]	@ (80012ec <HW_TS_Init+0x1ac>)
 800124c:	2206      	movs	r2, #6
 800124e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001250:	4b1d      	ldr	r3, [pc, #116]	@ (80012c8 <HW_TS_Init+0x188>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	4b1c      	ldr	r3, [pc, #112]	@ (80012c8 <HW_TS_Init+0x188>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800125e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001260:	4b19      	ldr	r3, [pc, #100]	@ (80012c8 <HW_TS_Init+0x188>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b17      	ldr	r3, [pc, #92]	@ (80012c8 <HW_TS_Init+0x188>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001270:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001272:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <HW_TS_Init+0x1b0>)
 8001274:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001278:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800127a:	2003      	movs	r0, #3
 800127c:	f000 fefb 	bl	8002076 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <HW_TS_Init+0x188>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <HW_TS_Init+0x188>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	e009      	b.n	80012a6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001292:	4b0d      	ldr	r3, [pc, #52]	@ (80012c8 <HW_TS_Init+0x188>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800129c:	2b00      	cmp	r3, #0
 800129e:	d002      	beq.n	80012a6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80012a0:	2003      	movs	r0, #3
 80012a2:	f000 feda 	bl	800205a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80012a6:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <HW_TS_Init+0x188>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	22ff      	movs	r2, #255	@ 0xff
 80012ac:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80012ae:	2200      	movs	r2, #0
 80012b0:	2103      	movs	r1, #3
 80012b2:	2003      	movs	r0, #3
 80012b4:	f000 fe8f 	bl	8001fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012b8:	2003      	movs	r0, #3
 80012ba:	f000 fea6 	bl	800200a <HAL_NVIC_EnableIRQ>

  return;
 80012be:	bf00      	nop
}
 80012c0:	3720      	adds	r7, #32
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000208 	.word	0x20000208
 80012cc:	40002800 	.word	0x40002800
 80012d0:	20000131 	.word	0x20000131
 80012d4:	20000132 	.word	0x20000132
 80012d8:	20000134 	.word	0x20000134
 80012dc:	20000136 	.word	0x20000136
 80012e0:	20000130 	.word	0x20000130
 80012e4:	2000012c 	.word	0x2000012c
 80012e8:	20000098 	.word	0x20000098
 80012ec:	20000128 	.word	0x20000128
 80012f0:	58000800 	.word	0x58000800

080012f4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012fe:	f3ef 8310 	mrs	r3, PRIMASK
 8001302:	60fb      	str	r3, [r7, #12]
  return(result);
 8001304:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001306:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800130c:	2003      	movs	r0, #3
 800130e:	f000 fe8a 	bl	8002026 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001312:	4b34      	ldr	r3, [pc, #208]	@ (80013e4 <HW_TS_Stop+0xf0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	22ca      	movs	r2, #202	@ 0xca
 8001318:	625a      	str	r2, [r3, #36]	@ 0x24
 800131a:	4b32      	ldr	r3, [pc, #200]	@ (80013e4 <HW_TS_Stop+0xf0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2253      	movs	r2, #83	@ 0x53
 8001320:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001322:	79fa      	ldrb	r2, [r7, #7]
 8001324:	4930      	ldr	r1, [pc, #192]	@ (80013e8 <HW_TS_Stop+0xf4>)
 8001326:	4613      	mov	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	440b      	add	r3, r1
 8001330:	330c      	adds	r3, #12
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d142      	bne.n	80013c0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fc80 	bl	8000c44 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001344:	4b29      	ldr	r3, [pc, #164]	@ (80013ec <HW_TS_Stop+0xf8>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800134a:	7cfb      	ldrb	r3, [r7, #19]
 800134c:	2b06      	cmp	r3, #6
 800134e:	d12f      	bne.n	80013b0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001350:	4b27      	ldr	r3, [pc, #156]	@ (80013f0 <HW_TS_Stop+0xfc>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800135c:	d107      	bne.n	800136e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800135e:	bf00      	nop
 8001360:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <HW_TS_Stop+0xf0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f8      	bne.n	8001360 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800136e:	4b1d      	ldr	r3, [pc, #116]	@ (80013e4 <HW_TS_Stop+0xf0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <HW_TS_Stop+0xf0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800137c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800137e:	bf00      	nop
 8001380:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <HW_TS_Stop+0xf0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f8      	beq.n	8001380 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <HW_TS_Stop+0xf0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b13      	ldr	r3, [pc, #76]	@ (80013e4 <HW_TS_Stop+0xf0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800139e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80013a0:	4b14      	ldr	r3, [pc, #80]	@ (80013f4 <HW_TS_Stop+0x100>)
 80013a2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80013a6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 fe64 	bl	8002076 <HAL_NVIC_ClearPendingIRQ>
 80013ae:	e007      	b.n	80013c0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80013b0:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <HW_TS_Stop+0x104>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	7cfa      	ldrb	r2, [r7, #19]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d001      	beq.n	80013c0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80013bc:	f7ff fd5e 	bl	8000e7c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80013c0:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <HW_TS_Stop+0xf0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	22ff      	movs	r2, #255	@ 0xff
 80013c6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013c8:	2003      	movs	r0, #3
 80013ca:	f000 fe1e 	bl	800200a <HAL_NVIC_EnableIRQ>
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	f383 8810 	msr	PRIMASK, r3
}
 80013d8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80013da:	bf00      	nop
}
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000208 	.word	0x20000208
 80013e8:	20000098 	.word	0x20000098
 80013ec:	20000128 	.word	0x20000128
 80013f0:	40002800 	.word	0x40002800
 80013f4:	58000800 	.word	0x58000800
 80013f8:	20000129 	.word	0x20000129

080013fc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	6039      	str	r1, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001408:	79fa      	ldrb	r2, [r7, #7]
 800140a:	493b      	ldr	r1, [pc, #236]	@ (80014f8 <HW_TS_Start+0xfc>)
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	440b      	add	r3, r1
 8001416:	330c      	adds	r3, #12
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d103      	bne.n	8001428 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff66 	bl	80012f4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001428:	f3ef 8310 	mrs	r3, PRIMASK
 800142c:	60fb      	str	r3, [r7, #12]
  return(result);
 800142e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001430:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001432:	b672      	cpsid	i
}
 8001434:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001436:	2003      	movs	r0, #3
 8001438:	f000 fdf5 	bl	8002026 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800143c:	4b2f      	ldr	r3, [pc, #188]	@ (80014fc <HW_TS_Start+0x100>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	22ca      	movs	r2, #202	@ 0xca
 8001442:	625a      	str	r2, [r3, #36]	@ 0x24
 8001444:	4b2d      	ldr	r3, [pc, #180]	@ (80014fc <HW_TS_Start+0x100>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2253      	movs	r2, #83	@ 0x53
 800144a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800144c:	79fa      	ldrb	r2, [r7, #7]
 800144e:	492a      	ldr	r1, [pc, #168]	@ (80014f8 <HW_TS_Start+0xfc>)
 8001450:	4613      	mov	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4413      	add	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	440b      	add	r3, r1
 800145a:	330c      	adds	r3, #12
 800145c:	2202      	movs	r2, #2
 800145e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001460:	79fa      	ldrb	r2, [r7, #7]
 8001462:	4925      	ldr	r1, [pc, #148]	@ (80014f8 <HW_TS_Start+0xfc>)
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	3308      	adds	r3, #8
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001474:	79fa      	ldrb	r2, [r7, #7]
 8001476:	4920      	ldr	r1, [pc, #128]	@ (80014f8 <HW_TS_Start+0xfc>)
 8001478:	4613      	mov	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	440b      	add	r3, r1
 8001482:	3304      	adds	r3, #4
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fb30 	bl	8000af0 <linkTimer>
 8001490:	4603      	mov	r3, r0
 8001492:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001494:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <HW_TS_Start+0x104>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800149a:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <HW_TS_Start+0x108>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	7c7a      	ldrb	r2, [r7, #17]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d002      	beq.n	80014ac <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80014a6:	f7ff fce9 	bl	8000e7c <RescheduleTimerList>
 80014aa:	e013      	b.n	80014d4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80014ac:	79fa      	ldrb	r2, [r7, #7]
 80014ae:	4912      	ldr	r1, [pc, #72]	@ (80014f8 <HW_TS_Start+0xfc>)
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	440b      	add	r3, r1
 80014ba:	3308      	adds	r3, #8
 80014bc:	6819      	ldr	r1, [r3, #0]
 80014be:	8a7b      	ldrh	r3, [r7, #18]
 80014c0:	79fa      	ldrb	r2, [r7, #7]
 80014c2:	1ac9      	subs	r1, r1, r3
 80014c4:	480c      	ldr	r0, [pc, #48]	@ (80014f8 <HW_TS_Start+0xfc>)
 80014c6:	4613      	mov	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	4413      	add	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	4403      	add	r3, r0
 80014d0:	3308      	adds	r3, #8
 80014d2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80014d4:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <HW_TS_Start+0x100>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	22ff      	movs	r2, #255	@ 0xff
 80014da:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80014dc:	2003      	movs	r0, #3
 80014de:	f000 fd94 	bl	800200a <HAL_NVIC_EnableIRQ>
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	f383 8810 	msr	PRIMASK, r3
}
 80014ec:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80014ee:	bf00      	nop
}
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000098 	.word	0x20000098
 80014fc:	20000208 	.word	0x20000208
 8001500:	20000128 	.word	0x20000128
 8001504:	20000129 	.word	0x20000129

08001508 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	460b      	mov	r3, r1
 8001512:	607a      	str	r2, [r7, #4]
 8001514:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4798      	blx	r3

  return;
 800151a:	bf00      	nop
}
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <LL_RCC_LSE_SetDriveCapability>:
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800152a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800152e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001532:	f023 0218 	bic.w	r2, r3, #24
 8001536:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4313      	orrs	r3, r2
 800153e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800154e:	b480      	push	{r7}
 8001550:	b085      	sub	sp, #20
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001556:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800155a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800155c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4313      	orrs	r3, r2
 8001564:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800156a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4013      	ands	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001572:	68fb      	ldr	r3, [r7, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001584:	f000 fb66 	bl	8001c54 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001588:	f7ff f85a 	bl	8000640 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800158c:	f000 f812 	bl	80015b4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001590:	f000 f882 	bl	8001698 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001594:	f000 f8a0 	bl	80016d8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001598:	f000 f93a 	bl	8001810 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800159c:	f000 f8b0 	bl	8001700 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80015a0:	f000 f902 	bl	80017a8 <MX_RTC_Init>
  MX_RF_Init();
 80015a4:	f000 f8f8 	bl	8001798 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80015a8:	f7ff f858 	bl	800065c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80015ac:	f7ff f983 	bl	80008b6 <MX_APPE_Process>
 80015b0:	e7fc      	b.n	80015ac <main+0x2c>
	...

080015b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b09a      	sub	sp, #104	@ 0x68
 80015b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ba:	f107 0320 	add.w	r3, r7, #32
 80015be:	2248      	movs	r2, #72	@ 0x48
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f008 f8de 	bl	8009784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]
 80015d6:	615a      	str	r2, [r3, #20]
 80015d8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015da:	f001 f833 	bl	8002644 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80015de:	2010      	movs	r0, #16
 80015e0:	f7ff ff9f 	bl	8001522 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001694 <SystemClock_Config+0xe0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015ec:	4a29      	ldr	r2, [pc, #164]	@ (8001694 <SystemClock_Config+0xe0>)
 80015ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b27      	ldr	r3, [pc, #156]	@ (8001694 <SystemClock_Config+0xe0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001600:	2327      	movs	r3, #39	@ 0x27
 8001602:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001604:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800160a:	2301      	movs	r3, #1
 800160c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800160e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001614:	2301      	movs	r3, #1
 8001616:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001618:	2340      	movs	r3, #64	@ 0x40
 800161a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800161c:	2300      	movs	r3, #0
 800161e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001620:	2360      	movs	r3, #96	@ 0x60
 8001622:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001624:	2302      	movs	r3, #2
 8001626:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001628:	2301      	movs	r3, #1
 800162a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800162c:	2300      	movs	r3, #0
 800162e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 48;
 8001630:	2330      	movs	r3, #48	@ 0x30
 8001632:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001634:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001638:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 800163a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800163e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001640:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001644:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001646:	f107 0320 	add.w	r3, r7, #32
 800164a:	4618      	mov	r0, r3
 800164c:	f001 fb8e 	bl	8002d6c <HAL_RCC_OscConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001656:	f000 f8e2 	bl	800181e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800165a:	236f      	movs	r3, #111	@ 0x6f
 800165c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800165e:	2303      	movs	r3, #3
 8001660:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800166e:	2380      	movs	r3, #128	@ 0x80
 8001670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2103      	movs	r1, #3
 800167a:	4618      	mov	r0, r3
 800167c:	f001 feea 	bl	8003454 <HAL_RCC_ClockConfig>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001686:	f000 f8ca 	bl	800181e <Error_Handler>
  }
}
 800168a:	bf00      	nop
 800168c:	3768      	adds	r7, #104	@ 0x68
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	58000400 	.word	0x58000400

08001698 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b094      	sub	sp, #80	@ 0x50
 800169c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800169e:	463b      	mov	r3, r7
 80016a0:	2250      	movs	r2, #80	@ 0x50
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f008 f86d 	bl	8009784 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80016aa:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80016ae:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80016b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016b4:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80016b6:	2300      	movs	r3, #0
 80016b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80016ba:	2310      	movs	r3, #16
 80016bc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016be:	463b      	mov	r3, r7
 80016c0:	4618      	mov	r0, r3
 80016c2:	f002 fb04 	bl	8003cce <HAL_RCCEx_PeriphCLKConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80016cc:	f000 f8a7 	bl	800181e <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80016d0:	bf00      	nop
 80016d2:	3750      	adds	r7, #80	@ 0x50
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <MX_IPCC_Init+0x20>)
 80016de:	4a07      	ldr	r2, [pc, #28]	@ (80016fc <MX_IPCC_Init+0x24>)
 80016e0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80016e2:	4805      	ldr	r0, [pc, #20]	@ (80016f8 <MX_IPCC_Init+0x20>)
 80016e4:	f000 ff28 	bl	8002538 <HAL_IPCC_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80016ee:	f000 f896 	bl	800181e <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000138 	.word	0x20000138
 80016fc:	58000c00 	.word	0x58000c00

08001700 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001704:	4b22      	ldr	r3, [pc, #136]	@ (8001790 <MX_LPUART1_UART_Init+0x90>)
 8001706:	4a23      	ldr	r2, [pc, #140]	@ (8001794 <MX_LPUART1_UART_Init+0x94>)
 8001708:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800170a:	4b21      	ldr	r3, [pc, #132]	@ (8001790 <MX_LPUART1_UART_Init+0x90>)
 800170c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001710:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001712:	4b1f      	ldr	r3, [pc, #124]	@ (8001790 <MX_LPUART1_UART_Init+0x90>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001718:	4b1d      	ldr	r3, [pc, #116]	@ (8001790 <MX_LPUART1_UART_Init+0x90>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800171e:	4b1c      	ldr	r3, [pc, #112]	@ (8001790 <MX_LPUART1_UART_Init+0x90>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001724:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <MX_LPUART1_UART_Init+0x90>)
 8001726:	220c      	movs	r2, #12
 8001728:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172a:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <MX_LPUART1_UART_Init+0x90>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001730:	4b17      	ldr	r3, [pc, #92]	@ (8001790 <MX_LPUART1_UART_Init+0x90>)
 8001732:	2200      	movs	r2, #0
 8001734:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001736:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <MX_LPUART1_UART_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800173c:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <MX_LPUART1_UART_Init+0x90>)
 800173e:	2200      	movs	r2, #0
 8001740:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001742:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <MX_LPUART1_UART_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001748:	4811      	ldr	r0, [pc, #68]	@ (8001790 <MX_LPUART1_UART_Init+0x90>)
 800174a:	f002 ff41 	bl	80045d0 <HAL_UART_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001754:	f000 f863 	bl	800181e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001758:	2100      	movs	r1, #0
 800175a:	480d      	ldr	r0, [pc, #52]	@ (8001790 <MX_LPUART1_UART_Init+0x90>)
 800175c:	f003 ffc5 	bl	80056ea <HAL_UARTEx_SetTxFifoThreshold>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001766:	f000 f85a 	bl	800181e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800176a:	2100      	movs	r1, #0
 800176c:	4808      	ldr	r0, [pc, #32]	@ (8001790 <MX_LPUART1_UART_Init+0x90>)
 800176e:	f003 fffa 	bl	8005766 <HAL_UARTEx_SetRxFifoThreshold>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001778:	f000 f851 	bl	800181e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800177c:	4804      	ldr	r0, [pc, #16]	@ (8001790 <MX_LPUART1_UART_Init+0x90>)
 800177e:	f003 ff7b 	bl	8005678 <HAL_UARTEx_DisableFifoMode>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001788:	f000 f849 	bl	800181e <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000174 	.word	0x20000174
 8001794:	40008000 	.word	0x40008000

08001798 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017ac:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <MX_RTC_Init+0x60>)
 80017ae:	4a17      	ldr	r2, [pc, #92]	@ (800180c <MX_RTC_Init+0x64>)
 80017b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017b2:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <MX_RTC_Init+0x60>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80017b8:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <MX_RTC_Init+0x60>)
 80017ba:	220f      	movs	r2, #15
 80017bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80017be:	4b12      	ldr	r3, [pc, #72]	@ (8001808 <MX_RTC_Init+0x60>)
 80017c0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80017c4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <MX_RTC_Init+0x60>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <MX_RTC_Init+0x60>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001808 <MX_RTC_Init+0x60>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80017d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001808 <MX_RTC_Init+0x60>)
 80017da:	2200      	movs	r2, #0
 80017dc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017de:	480a      	ldr	r0, [pc, #40]	@ (8001808 <MX_RTC_Init+0x60>)
 80017e0:	f002 fcfc 	bl	80041dc <HAL_RTC_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80017ea:	f000 f818 	bl	800181e <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80017ee:	2200      	movs	r2, #0
 80017f0:	2100      	movs	r1, #0
 80017f2:	4805      	ldr	r0, [pc, #20]	@ (8001808 <MX_RTC_Init+0x60>)
 80017f4:	f002 fe00 	bl	80043f8 <HAL_RTCEx_SetWakeUpTimer_IT>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80017fe:	f000 f80e 	bl	800181e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000208 	.word	0x20000208
 800180c:	40002800 	.word	0x40002800

08001810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001814:	2001      	movs	r0, #1
 8001816:	f7ff fe9a 	bl	800154e <LL_AHB2_GRP1_EnableClock>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}

0800181e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001822:	b672      	cpsid	i
}
 8001824:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001826:	bf00      	nop
 8001828:	e7fd      	b.n	8001826 <Error_Handler+0x8>

0800182a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800182e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001836:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800183a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800183e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_AHB2_GRP1_EnableClock>:
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001854:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001858:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800185a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4313      	orrs	r3, r2
 8001862:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001864:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001868:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4013      	ands	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001870:	68fb      	ldr	r3, [r7, #12]
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800187e:	b480      	push	{r7}
 8001880:	b085      	sub	sp, #20
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001886:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800188a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800188c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4313      	orrs	r3, r2
 8001894:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001896:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800189a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4013      	ands	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018a2:	68fb      	ldr	r3, [r7, #12]
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80018b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80018be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80018c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4013      	ands	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018d4:	68fb      	ldr	r3, [r7, #12]
}
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b085      	sub	sp, #20
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80018ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80018fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4013      	ands	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001918:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800191c:	f7ff ffaf 	bl	800187e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001920:	2200      	movs	r2, #0
 8001922:	2100      	movs	r1, #0
 8001924:	2005      	movs	r0, #5
 8001926:	f000 fb56 	bl	8001fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800192a:	2005      	movs	r0, #5
 800192c:	f000 fb6d 	bl	800200a <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001930:	2200      	movs	r2, #0
 8001932:	2100      	movs	r1, #0
 8001934:	202e      	movs	r0, #46	@ 0x2e
 8001936:	f000 fb4e 	bl	8001fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800193a:	202e      	movs	r0, #46	@ 0x2e
 800193c:	f000 fb65 	bl	800200a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_IPCC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hipcc: IPCC handle pointer
  * @retval None
  */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0d      	ldr	r2, [pc, #52]	@ (8001988 <HAL_IPCC_MspInit+0x44>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d113      	bne.n	800197e <HAL_IPCC_MspInit+0x3a>
  {
    /* USER CODE BEGIN IPCC_MspInit 0 */

    /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001956:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800195a:	f7ff ff90 	bl	800187e <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2100      	movs	r1, #0
 8001962:	202c      	movs	r0, #44	@ 0x2c
 8001964:	f000 fb37 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001968:	202c      	movs	r0, #44	@ 0x2c
 800196a:	f000 fb4e 	bl	800200a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2100      	movs	r1, #0
 8001972:	202d      	movs	r0, #45	@ 0x2d
 8001974:	f000 fb2f 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001978:	202d      	movs	r0, #45	@ 0x2d
 800197a:	f000 fb46 	bl	800200a <HAL_NVIC_EnableIRQ>

    /* USER CODE END IPCC_MspInit 1 */

  }

}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	58000c00 	.word	0x58000c00

0800198c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b09c      	sub	sp, #112	@ 0x70
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	2250      	movs	r2, #80	@ 0x50
 80019aa:	2100      	movs	r1, #0
 80019ac:	4618      	mov	r0, r3
 80019ae:	f007 fee9 	bl	8009784 <memset>
  if(huart->Instance==LPUART1)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001a20 <HAL_UART_MspInit+0x94>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d12c      	bne.n	8001a16 <HAL_UART_MspInit+0x8a>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80019bc:	2302      	movs	r3, #2
 80019be:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	4618      	mov	r0, r3
 80019ca:	f002 f980 	bl	8003cce <HAL_RCCEx_PeriphCLKConfig>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019d4:	f7ff ff23 	bl	800181e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80019d8:	2001      	movs	r0, #1
 80019da:	f7ff ff82 	bl	80018e2 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2001      	movs	r0, #1
 80019e0:	f7ff ff34 	bl	800184c <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = TX_pin_Pin|RX_pin_Pin;
 80019e4:	230c      	movs	r3, #12
 80019e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80019f4:	2308      	movs	r3, #8
 80019f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80019fc:	4619      	mov	r1, r3
 80019fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a02:	f000 fc05 	bl	8002210 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2100      	movs	r1, #0
 8001a0a:	2025      	movs	r0, #37	@ 0x25
 8001a0c:	f000 fae3 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001a10:	2025      	movs	r0, #37	@ 0x25
 8001a12:	f000 fafa 	bl	800200a <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001a16:	bf00      	nop
 8001a18:	3770      	adds	r7, #112	@ 0x70
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40008000 	.word	0x40008000

08001a24 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b096      	sub	sp, #88	@ 0x58
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a2c:	f107 0308 	add.w	r3, r7, #8
 8001a30:	2250      	movs	r2, #80	@ 0x50
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f007 fea5 	bl	8009784 <memset>
  if(hrtc->Instance==RTC)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a12      	ldr	r2, [pc, #72]	@ (8001a88 <HAL_RTC_MspInit+0x64>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d11d      	bne.n	8001a80 <HAL_RTC_MspInit+0x5c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a48:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a50:	f107 0308 	add.w	r3, r7, #8
 8001a54:	4618      	mov	r0, r3
 8001a56:	f002 f93a 	bl	8003cce <HAL_RCCEx_PeriphCLKConfig>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001a60:	f7ff fedd 	bl	800181e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a64:	f7ff fee1 	bl	800182a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001a68:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001a6c:	f7ff ff20 	bl	80018b0 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	2003      	movs	r0, #3
 8001a76:	f000 faae 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001a7a:	2003      	movs	r0, #3
 8001a7c:	f000 fac5 	bl	800200a <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001a80:	bf00      	nop
 8001a82:	3758      	adds	r7, #88	@ 0x58
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40002800 	.word	0x40002800

08001a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <NMI_Handler+0x4>

08001a94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <HardFault_Handler+0x4>

08001a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <MemManage_Handler+0x4>

08001aa4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <BusFault_Handler+0x4>

08001aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <UsageFault_Handler+0x4>

08001ab4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae2:	f000 f911 	bl	8001d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001aee:	f7ff fa5f 	bl	8000fb0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001b08:	4802      	ldr	r0, [pc, #8]	@ (8001b14 <LPUART1_IRQHandler+0x10>)
 8001b0a:	f002 fdb1 	bl	8004670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000174 	.word	0x20000174

08001b18 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001b1c:	f007 fa0e 	bl	8008f3c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001b28:	f007 fa3e 	bl	8008fa8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001b34:	f000 fcdc 	bl	80024f0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001b40:	4b24      	ldr	r3, [pc, #144]	@ (8001bd4 <SystemInit+0x98>)
 8001b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b46:	4a23      	ldr	r2, [pc, #140]	@ (8001bd4 <SystemInit+0x98>)
 8001b48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001b60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b64:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001b68:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001b6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b74:	4b18      	ldr	r3, [pc, #96]	@ (8001bd8 <SystemInit+0x9c>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001b7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b86:	f023 0305 	bic.w	r3, r3, #5
 8001b8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b9a:	f023 0301 	bic.w	r3, r3, #1
 8001b9e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001ba2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ba6:	4a0d      	ldr	r2, [pc, #52]	@ (8001bdc <SystemInit+0xa0>)
 8001ba8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001baa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bae:	4a0b      	ldr	r2, [pc, #44]	@ (8001bdc <SystemInit+0xa0>)
 8001bb0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bc0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	619a      	str	r2, [r3, #24]
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00
 8001bd8:	faf6fefb 	.word	0xfaf6fefb
 8001bdc:	22041000 	.word	0x22041000

08001be0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001be0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001be4:	3304      	adds	r3, #4

08001be6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001bea:	d3f9      	bcc.n	8001be0 <CopyDataInit>
  bx lr
 8001bec:	4770      	bx	lr

08001bee <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001bee:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001bf0:	3004      	adds	r0, #4

08001bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001bf2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001bf4:	d3fb      	bcc.n	8001bee <FillZerobss>
  bx lr
 8001bf6:	4770      	bx	lr

08001bf8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bf8:	480c      	ldr	r0, [pc, #48]	@ (8001c2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bfa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bfc:	f7ff ff9e 	bl	8001b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001c00:	480b      	ldr	r0, [pc, #44]	@ (8001c30 <LoopForever+0x6>)
 8001c02:	490c      	ldr	r1, [pc, #48]	@ (8001c34 <LoopForever+0xa>)
 8001c04:	4a0c      	ldr	r2, [pc, #48]	@ (8001c38 <LoopForever+0xe>)
 8001c06:	2300      	movs	r3, #0
 8001c08:	f7ff ffed 	bl	8001be6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001c0c:	480b      	ldr	r0, [pc, #44]	@ (8001c3c <LoopForever+0x12>)
 8001c0e:	490c      	ldr	r1, [pc, #48]	@ (8001c40 <LoopForever+0x16>)
 8001c10:	4a0c      	ldr	r2, [pc, #48]	@ (8001c44 <LoopForever+0x1a>)
 8001c12:	2300      	movs	r3, #0
 8001c14:	f7ff ffe7 	bl	8001be6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001c18:	480b      	ldr	r0, [pc, #44]	@ (8001c48 <LoopForever+0x1e>)
 8001c1a:	490c      	ldr	r1, [pc, #48]	@ (8001c4c <LoopForever+0x22>)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f7ff ffe8 	bl	8001bf2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c22:	f007 fdb7 	bl	8009794 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001c26:	f7ff fcab 	bl	8001580 <main>

08001c2a <LoopForever>:

LoopForever:
  b LoopForever
 8001c2a:	e7fe      	b.n	8001c2a <LoopForever>
  ldr   r0, =_estack
 8001c2c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001c30:	20000008 	.word	0x20000008
 8001c34:	20000030 	.word	0x20000030
 8001c38:	08009ad0 	.word	0x08009ad0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001c3c:	200301e4 	.word	0x200301e4
 8001c40:	20030a67 	.word	0x20030a67
 8001c44:	08009b3e 	.word	0x08009b3e
  INIT_BSS _sbss, _ebss
 8001c48:	2000007c 	.word	0x2000007c
 8001c4c:	200005ec 	.word	0x200005ec

08001c50 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC1_IRQHandler>
	...

08001c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c90 <HAL_Init+0x3c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a0b      	ldr	r2, [pc, #44]	@ (8001c90 <HAL_Init+0x3c>)
 8001c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c6a:	2003      	movs	r0, #3
 8001c6c:	f000 f9a8 	bl	8001fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c70:	200f      	movs	r0, #15
 8001c72:	f000 f80f 	bl	8001c94 <HAL_InitTick>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	71fb      	strb	r3, [r7, #7]
 8001c80:	e001      	b.n	8001c86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c82:	f7ff fe47 	bl	8001914 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c86:	79fb      	ldrb	r3, [r7, #7]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	58004000 	.word	0x58004000

08001c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001ca0:	4b17      	ldr	r3, [pc, #92]	@ (8001d00 <HAL_InitTick+0x6c>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d024      	beq.n	8001cf2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ca8:	f001 fd80 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b14      	ldr	r3, [pc, #80]	@ (8001d00 <HAL_InitTick+0x6c>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 f9be 	bl	8002042 <HAL_SYSTICK_Config>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10f      	bne.n	8001cec <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b0f      	cmp	r3, #15
 8001cd0:	d809      	bhi.n	8001ce6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8001cda:	f000 f97c 	bl	8001fd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cde:	4a09      	ldr	r2, [pc, #36]	@ (8001d04 <HAL_InitTick+0x70>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	e007      	b.n	8001cf6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	73fb      	strb	r3, [r7, #15]
 8001cea:	e004      	b.n	8001cf6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
 8001cf0:	e001      	b.n	8001cf6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000010 	.word	0x20000010
 8001d04:	2000000c 	.word	0x2000000c

08001d08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <HAL_IncTick+0x20>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_IncTick+0x24>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	4a04      	ldr	r2, [pc, #16]	@ (8001d2c <HAL_IncTick+0x24>)
 8001d1a:	6013      	str	r3, [r2, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000010 	.word	0x20000010
 8001d2c:	2000022c 	.word	0x2000022c

08001d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return uwTick;
 8001d34:	4b03      	ldr	r3, [pc, #12]	@ (8001d44 <HAL_GetTick+0x14>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	2000022c 	.word	0x2000022c

08001d48 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001d4c:	4b03      	ldr	r3, [pc, #12]	@ (8001d5c <HAL_GetTickPrio+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	2000000c 	.word	0x2000000c

08001d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d70:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d92:	4a04      	ldr	r2, [pc, #16]	@ (8001da4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	60d3      	str	r3, [r2, #12]
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dac:	4b04      	ldr	r3, [pc, #16]	@ (8001dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	f003 0307 	and.w	r3, r3, #7
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	db0b      	blt.n	8001dee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	f003 021f 	and.w	r2, r3, #31
 8001ddc:	4907      	ldr	r1, [pc, #28]	@ (8001dfc <__NVIC_EnableIRQ+0x38>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	2001      	movs	r0, #1
 8001de6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	e000e100 	.word	0xe000e100

08001e00 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	db12      	blt.n	8001e38 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	f003 021f 	and.w	r2, r3, #31
 8001e18:	490a      	ldr	r1, [pc, #40]	@ (8001e44 <__NVIC_DisableIRQ+0x44>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	2001      	movs	r0, #1
 8001e22:	fa00 f202 	lsl.w	r2, r0, r2
 8001e26:	3320      	adds	r3, #32
 8001e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e2c:	f3bf 8f4f 	dsb	sy
}
 8001e30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e32:	f3bf 8f6f 	isb	sy
}
 8001e36:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000e100 	.word	0xe000e100

08001e48 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	db0c      	blt.n	8001e74 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	f003 021f 	and.w	r2, r3, #31
 8001e60:	4907      	ldr	r1, [pc, #28]	@ (8001e80 <__NVIC_SetPendingIRQ+0x38>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	2001      	movs	r0, #1
 8001e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e6e:	3340      	adds	r3, #64	@ 0x40
 8001e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000e100 	.word	0xe000e100

08001e84 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db0c      	blt.n	8001eb0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4907      	ldr	r1, [pc, #28]	@ (8001ebc <__NVIC_ClearPendingIRQ+0x38>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eaa:	3360      	adds	r3, #96	@ 0x60
 8001eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000e100 	.word	0xe000e100

08001ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db0a      	blt.n	8001eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	490c      	ldr	r1, [pc, #48]	@ (8001f0c <__NVIC_SetPriority+0x4c>)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee8:	e00a      	b.n	8001f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4908      	ldr	r1, [pc, #32]	@ (8001f10 <__NVIC_SetPriority+0x50>)
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	3b04      	subs	r3, #4
 8001ef8:	0112      	lsls	r2, r2, #4
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	440b      	add	r3, r1
 8001efe:	761a      	strb	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	@ 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f1c3 0307 	rsb	r3, r3, #7
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	bf28      	it	cs
 8001f32:	2304      	movcs	r3, #4
 8001f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d902      	bls.n	8001f44 <NVIC_EncodePriority+0x30>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3b03      	subs	r3, #3
 8001f42:	e000      	b.n	8001f46 <NVIC_EncodePriority+0x32>
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	401a      	ands	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	4313      	orrs	r3, r2
         );
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	@ 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f8c:	d301      	bcc.n	8001f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00f      	b.n	8001fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f92:	4a0a      	ldr	r2, [pc, #40]	@ (8001fbc <SysTick_Config+0x40>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f7ff ff8e 	bl	8001ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa4:	4b05      	ldr	r3, [pc, #20]	@ (8001fbc <SysTick_Config+0x40>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001faa:	4b04      	ldr	r3, [pc, #16]	@ (8001fbc <SysTick_Config+0x40>)
 8001fac:	2207      	movs	r2, #7
 8001fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	e000e010 	.word	0xe000e010

08001fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff fec9 	bl	8001d60 <__NVIC_SetPriorityGrouping>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe4:	f7ff fee0 	bl	8001da8 <__NVIC_GetPriorityGrouping>
 8001fe8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	6978      	ldr	r0, [r7, #20]
 8001ff0:	f7ff ff90 	bl	8001f14 <NVIC_EncodePriority>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff5f 	bl	8001ec0 <__NVIC_SetPriority>
}
 8002002:	bf00      	nop
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fed3 	bl	8001dc4 <__NVIC_EnableIRQ>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	4603      	mov	r3, r0
 800202e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fee3 	bl	8001e00 <__NVIC_DisableIRQ>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff ff96 	bl	8001f7c <SysTick_Config>
 8002050:	4603      	mov	r3, r0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff feed 	bl	8001e48 <__NVIC_SetPendingIRQ>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fefd 	bl	8001e84 <__NVIC_ClearPendingIRQ>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e04f      	b.n	8002144 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d008      	beq.n	80020c2 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2204      	movs	r2, #4
 80020b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e040      	b.n	8002144 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 020e 	bic.w	r2, r2, #14
 80020d0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0201 	bic.w	r2, r2, #1
 80020f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f6:	f003 021c 	and.w	r2, r3, #28
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	2101      	movs	r1, #1
 8002100:	fa01 f202 	lsl.w	r2, r1, r2
 8002104:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800210e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00c      	beq.n	8002132 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002122:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002126:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002130:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d005      	beq.n	8002174 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2204      	movs	r2, #4
 800216c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	73fb      	strb	r3, [r7, #15]
 8002172:	e047      	b.n	8002204 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 020e 	bic.w	r2, r2, #14
 8002182:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0201 	bic.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800219e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a8:	f003 021c 	and.w	r2, r3, #28
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b0:	2101      	movs	r1, #1
 80021b2:	fa01 f202 	lsl.w	r2, r1, r2
 80021b6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80021c0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00c      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80021e2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	4798      	blx	r3
    }
  }
  return status;
 8002204:	7bfb      	ldrb	r3, [r7, #15]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221e:	e14c      	b.n	80024ba <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	2101      	movs	r1, #1
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	4013      	ands	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 813e 	beq.w	80024b4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d005      	beq.n	8002250 <HAL_GPIO_Init+0x40>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d130      	bne.n	80022b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	2203      	movs	r2, #3
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002286:	2201      	movs	r2, #1
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	f003 0201 	and.w	r2, r3, #1
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d017      	beq.n	80022ee <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d123      	bne.n	8002342 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	08da      	lsrs	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3208      	adds	r2, #8
 8002302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002306:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	220f      	movs	r2, #15
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	08da      	lsrs	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3208      	adds	r2, #8
 800233c:	6939      	ldr	r1, [r7, #16]
 800233e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2203      	movs	r2, #3
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0203 	and.w	r2, r3, #3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 8098 	beq.w	80024b4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002384:	4a54      	ldr	r2, [pc, #336]	@ (80024d8 <HAL_GPIO_Init+0x2c8>)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	089b      	lsrs	r3, r3, #2
 800238a:	3302      	adds	r3, #2
 800238c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	220f      	movs	r2, #15
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023ae:	d019      	beq.n	80023e4 <HAL_GPIO_Init+0x1d4>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a4a      	ldr	r2, [pc, #296]	@ (80024dc <HAL_GPIO_Init+0x2cc>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d013      	beq.n	80023e0 <HAL_GPIO_Init+0x1d0>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a49      	ldr	r2, [pc, #292]	@ (80024e0 <HAL_GPIO_Init+0x2d0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d00d      	beq.n	80023dc <HAL_GPIO_Init+0x1cc>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a48      	ldr	r2, [pc, #288]	@ (80024e4 <HAL_GPIO_Init+0x2d4>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d007      	beq.n	80023d8 <HAL_GPIO_Init+0x1c8>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a47      	ldr	r2, [pc, #284]	@ (80024e8 <HAL_GPIO_Init+0x2d8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d101      	bne.n	80023d4 <HAL_GPIO_Init+0x1c4>
 80023d0:	2304      	movs	r3, #4
 80023d2:	e008      	b.n	80023e6 <HAL_GPIO_Init+0x1d6>
 80023d4:	2307      	movs	r3, #7
 80023d6:	e006      	b.n	80023e6 <HAL_GPIO_Init+0x1d6>
 80023d8:	2303      	movs	r3, #3
 80023da:	e004      	b.n	80023e6 <HAL_GPIO_Init+0x1d6>
 80023dc:	2302      	movs	r3, #2
 80023de:	e002      	b.n	80023e6 <HAL_GPIO_Init+0x1d6>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <HAL_GPIO_Init+0x1d6>
 80023e4:	2300      	movs	r3, #0
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	f002 0203 	and.w	r2, r2, #3
 80023ec:	0092      	lsls	r2, r2, #2
 80023ee:	4093      	lsls	r3, r2
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023f6:	4938      	ldr	r1, [pc, #224]	@ (80024d8 <HAL_GPIO_Init+0x2c8>)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	089b      	lsrs	r3, r3, #2
 80023fc:	3302      	adds	r3, #2
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002404:	4b39      	ldr	r3, [pc, #228]	@ (80024ec <HAL_GPIO_Init+0x2dc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	43db      	mvns	r3, r3
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4013      	ands	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4313      	orrs	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002428:	4a30      	ldr	r2, [pc, #192]	@ (80024ec <HAL_GPIO_Init+0x2dc>)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800242e:	4b2f      	ldr	r3, [pc, #188]	@ (80024ec <HAL_GPIO_Init+0x2dc>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	43db      	mvns	r3, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4013      	ands	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4313      	orrs	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002452:	4a26      	ldr	r2, [pc, #152]	@ (80024ec <HAL_GPIO_Init+0x2dc>)
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002458:	4b24      	ldr	r3, [pc, #144]	@ (80024ec <HAL_GPIO_Init+0x2dc>)
 800245a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800245e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	43db      	mvns	r3, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800247e:	4a1b      	ldr	r2, [pc, #108]	@ (80024ec <HAL_GPIO_Init+0x2dc>)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002486:	4b19      	ldr	r3, [pc, #100]	@ (80024ec <HAL_GPIO_Init+0x2dc>)
 8002488:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800248c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	43db      	mvns	r3, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024ac:	4a0f      	ldr	r2, [pc, #60]	@ (80024ec <HAL_GPIO_Init+0x2dc>)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	3301      	adds	r3, #1
 80024b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f47f aeab 	bne.w	8002220 <HAL_GPIO_Init+0x10>
  }
}
 80024ca:	bf00      	nop
 80024cc:	bf00      	nop
 80024ce:	371c      	adds	r7, #28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	40010000 	.word	0x40010000
 80024dc:	48000400 	.word	0x48000400
 80024e0:	48000800 	.word	0x48000800
 80024e4:	48000c00 	.word	0x48000c00
 80024e8:	48001000 	.word	0x48001000
 80024ec:	58000800 	.word	0x58000800

080024f0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80024f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002520 <HAL_HSEM_IRQHandler+0x30>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80024fc:	4b08      	ldr	r3, [pc, #32]	@ (8002520 <HAL_HSEM_IRQHandler+0x30>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	43db      	mvns	r3, r3
 8002504:	4906      	ldr	r1, [pc, #24]	@ (8002520 <HAL_HSEM_IRQHandler+0x30>)
 8002506:	4013      	ands	r3, r2
 8002508:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800250a:	4a05      	ldr	r2, [pc, #20]	@ (8002520 <HAL_HSEM_IRQHandler+0x30>)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f807 	bl	8002524 <HAL_HSEM_FreeCallback>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	58001500 	.word	0x58001500

08002524 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d01e      	beq.n	8002588 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800254a:	4b13      	ldr	r3, [pc, #76]	@ (8002598 <HAL_IPCC_Init+0x60>)
 800254c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d102      	bne.n	8002560 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff f9f2 	bl	8001944 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002560:	68b8      	ldr	r0, [r7, #8]
 8002562:	f000 f85b 	bl	800261c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f82c 	bl	80025d0 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8002586:	e001      	b.n	800258c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800258c:	7bfb      	ldrb	r3, [r7, #15]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	58000c00 	.word	0x58000c00

0800259c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	4613      	mov	r3, r2
 80025a8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80025aa:	bf00      	nop
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b085      	sub	sp, #20
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	4613      	mov	r3, r2
 80025c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	e00f      	b.n	80025fe <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002614 <IPCC_SetDefaultCallbacks+0x44>)
 80025e8:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3306      	adds	r3, #6
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	4a08      	ldr	r2, [pc, #32]	@ (8002618 <IPCC_SetDefaultCallbacks+0x48>)
 80025f6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	3301      	adds	r3, #1
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b05      	cmp	r3, #5
 8002602:	d9ec      	bls.n	80025de <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	0800259d 	.word	0x0800259d
 8002618:	080025b7 	.word	0x080025b7

0800261c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8002630:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	223f      	movs	r2, #63	@ 0x3f
 8002636:	609a      	str	r2, [r3, #8]
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002648:	4b05      	ldr	r3, [pc, #20]	@ (8002660 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a04      	ldr	r2, [pc, #16]	@ (8002660 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800264e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002652:	6013      	str	r3, [r2, #0]
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	58000400 	.word	0x58000400

08002664 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002668:	4b04      	ldr	r3, [pc, #16]	@ (800267c <HAL_PWREx_GetVoltageRange+0x18>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	58000400 	.word	0x58000400

08002680 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002684:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800268e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002692:	d101      	bne.n	8002698 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_RCC_HSE_Enable>:
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80026a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026b6:	6013      	str	r3, [r2, #0]
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <LL_RCC_HSE_Disable>:
{
 80026c2:	b480      	push	{r7}
 80026c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80026c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
}
 80026d6:	bf00      	nop
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <LL_RCC_HSE_IsReady>:
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80026e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80026f2:	d101      	bne.n	80026f8 <LL_RCC_HSE_IsReady+0x18>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <LL_RCC_HSE_IsReady+0x1a>
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_RCC_HSI_Enable>:
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002708:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002712:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002716:	6013      	str	r3, [r2, #0]
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <LL_RCC_HSI_Disable>:
{
 8002722:	b480      	push	{r7}
 8002724:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002726:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002730:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002734:	6013      	str	r3, [r2, #0]
}
 8002736:	bf00      	nop
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <LL_RCC_HSI_IsReady>:
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002744:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800274e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002752:	d101      	bne.n	8002758 <LL_RCC_HSI_IsReady+0x18>
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <LL_RCC_HSI_IsReady+0x1a>
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800276c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	061b      	lsls	r3, r3, #24
 800277a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800277e:	4313      	orrs	r3, r2
 8002780:	604b      	str	r3, [r1, #4]
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <LL_RCC_HSI48_Enable>:
{
 800278e:	b480      	push	{r7}
 8002790:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002792:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002796:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800279a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80027a6:	bf00      	nop
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <LL_RCC_HSI48_Disable>:
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80027b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027c0:	f023 0301 	bic.w	r3, r3, #1
 80027c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <LL_RCC_HSI48_IsReady>:
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80027d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d101      	bne.n	80027ea <LL_RCC_HSI48_IsReady+0x18>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <LL_RCC_HSI48_IsReady+0x1a>
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <LL_RCC_LSE_Enable>:
{
 80027f6:	b480      	push	{r7}
 80027f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002802:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800280e:	bf00      	nop
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_RCC_LSE_Disable>:
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800281c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002824:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <LL_RCC_LSE_EnableBypass>:
{
 800283a:	b480      	push	{r7}
 800283c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800283e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002846:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800284a:	f043 0304 	orr.w	r3, r3, #4
 800284e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002852:	bf00      	nop
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <LL_RCC_LSE_DisableBypass>:
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002868:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800286c:	f023 0304 	bic.w	r3, r3, #4
 8002870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <LL_RCC_LSE_IsReady>:
{
 800287e:	b480      	push	{r7}
 8002880:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b02      	cmp	r3, #2
 8002890:	d101      	bne.n	8002896 <LL_RCC_LSE_IsReady+0x18>
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <LL_RCC_LSE_IsReady+0x1a>
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <LL_RCC_LSI1_Enable>:
{
 80028a2:	b480      	push	{r7}
 80028a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80028a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80028ba:	bf00      	nop
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <LL_RCC_LSI1_Disable>:
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80028c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028d4:	f023 0301 	bic.w	r3, r3, #1
 80028d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <LL_RCC_LSI1_IsReady>:
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80028ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d101      	bne.n	80028fe <LL_RCC_LSI1_IsReady+0x18>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <LL_RCC_LSI1_IsReady+0x1a>
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <LL_RCC_LSI2_Enable>:
{
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800290e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002912:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002916:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800291a:	f043 0304 	orr.w	r3, r3, #4
 800291e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002922:	bf00      	nop
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <LL_RCC_LSI2_Disable>:
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002930:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002934:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002938:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800293c:	f023 0304 	bic.w	r3, r3, #4
 8002940:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <LL_RCC_LSI2_IsReady>:
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002952:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002956:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b08      	cmp	r3, #8
 8002960:	d101      	bne.n	8002966 <LL_RCC_LSI2_IsReady+0x18>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <LL_RCC_LSI2_IsReady+0x1a>
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <LL_RCC_LSI2_SetTrimming>:
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800297a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800297e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002982:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	021b      	lsls	r3, r3, #8
 800298a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <LL_RCC_MSI_Enable>:
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80029a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6013      	str	r3, [r2, #0]
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <LL_RCC_MSI_Disable>:
{
 80029be:	b480      	push	{r7}
 80029c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80029c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029cc:	f023 0301 	bic.w	r3, r3, #1
 80029d0:	6013      	str	r3, [r2, #0]
}
 80029d2:	bf00      	nop
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <LL_RCC_MSI_IsReady>:
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80029e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d101      	bne.n	80029f2 <LL_RCC_MSI_IsReady+0x16>
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <LL_RCC_MSI_IsReady+0x18>
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <LL_RCC_MSI_SetRange>:
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002a06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <LL_RCC_MSI_GetRange>:
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002a2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a36:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2bb0      	cmp	r3, #176	@ 0xb0
 8002a3c:	d901      	bls.n	8002a42 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002a3e:	23b0      	movs	r3, #176	@ 0xb0
 8002a40:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002a42:	687b      	ldr	r3, [r7, #4]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	021b      	lsls	r3, r3, #8
 8002a66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	604b      	str	r3, [r1, #4]
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <LL_RCC_SetSysClkSource>:
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002a82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f023 0203 	bic.w	r2, r3, #3
 8002a8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <LL_RCC_GetSysClkSource>:
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002aa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 030c 	and.w	r3, r3, #12
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <LL_RCC_SetAHBPrescaler>:
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002ac2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002acc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002aea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002af2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002af6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <LL_RCC_SetAHB4Prescaler>:
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002b16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002b1e:	f023 020f 	bic.w	r2, r3, #15
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <LL_RCC_SetAPB1Prescaler>:
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002b44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	608b      	str	r3, [r1, #8]
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_RCC_SetAPB2Prescaler>:
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	608b      	str	r3, [r1, #8]
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_RCC_GetAHBPrescaler>:
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <LL_RCC_GetAHB4Prescaler>:
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002ba8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bac:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <LL_RCC_GetAPB1Prescaler>:
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002bc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <LL_RCC_GetAPB2Prescaler>:
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002bdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002bf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c02:	6013      	str	r3, [r2, #0]
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c20:	6013      	str	r3, [r2, #0]
}
 8002c22:	bf00      	nop
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002c30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c3e:	d101      	bne.n	8002c44 <LL_RCC_PLL_IsReady+0x18>
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <LL_RCC_PLL_IsReady+0x1a>
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	0a1b      	lsrs	r3, r3, #8
 8002c5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002c6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002c82:	b480      	push	{r7}
 8002c84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002c86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002c9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002cb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cc4:	d101      	bne.n	8002cca <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002cda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cde:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002cea:	d101      	bne.n	8002cf0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d04:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d10:	d101      	bne.n	8002d16 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002d22:	b480      	push	{r7}
 8002d24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002d26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d34:	d101      	bne.n	8002d3a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002d46:	b480      	push	{r7}
 8002d48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d58:	d101      	bne.n	8002d5e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
	...

08002d6c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d6c:	b590      	push	{r4, r7, lr}
 8002d6e:	b08d      	sub	sp, #52	@ 0x34
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e363      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0320 	and.w	r3, r3, #32
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 808d 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d8c:	f7ff fe89 	bl	8002aa2 <LL_RCC_GetSysClkSource>
 8002d90:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d92:	f7ff ff82 	bl	8002c9a <LL_RCC_PLL_GetMainSource>
 8002d96:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d005      	beq.n	8002daa <HAL_RCC_OscConfig+0x3e>
 8002d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002da0:	2b0c      	cmp	r3, #12
 8002da2:	d147      	bne.n	8002e34 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d144      	bne.n	8002e34 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e347      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8002dba:	f7ff fe34 	bl	8002a26 <LL_RCC_MSI_GetRange>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	429c      	cmp	r4, r3
 8002dc2:	d914      	bls.n	8002dee <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 fd2f 	bl	800382c <RCC_SetFlashLatencyFromMSIRange>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e336      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fe0e 	bl	80029fe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fe32 	bl	8002a50 <LL_RCC_MSI_SetCalibTrimming>
 8002dec:	e013      	b.n	8002e16 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fe03 	bl	80029fe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fe27 	bl	8002a50 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fd10 	bl	800382c <RCC_SetFlashLatencyFromMSIRange>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e317      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e16:	f000 fcc9 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4aa4      	ldr	r2, [pc, #656]	@ (80030b0 <HAL_RCC_OscConfig+0x344>)
 8002e1e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e20:	4ba4      	ldr	r3, [pc, #656]	@ (80030b4 <HAL_RCC_OscConfig+0x348>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fe ff35 	bl	8001c94 <HAL_InitTick>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d039      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e308      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d01e      	beq.n	8002e7a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e3c:	f7ff fdb0 	bl	80029a0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e40:	f7fe ff76 	bl	8001d30 <HAL_GetTick>
 8002e44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e48:	f7fe ff72 	bl	8001d30 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e2f5      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e5a:	f7ff fdbf 	bl	80029dc <LL_RCC_MSI_IsReady>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0f1      	beq.n	8002e48 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fdc8 	bl	80029fe <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fdec 	bl	8002a50 <LL_RCC_MSI_SetCalibTrimming>
 8002e78:	e015      	b.n	8002ea6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e7a:	f7ff fda0 	bl	80029be <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e7e:	f7fe ff57 	bl	8001d30 <HAL_GetTick>
 8002e82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e86:	f7fe ff53 	bl	8001d30 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e2d6      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e98:	f7ff fda0 	bl	80029dc <LL_RCC_MSI_IsReady>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f1      	bne.n	8002e86 <HAL_RCC_OscConfig+0x11a>
 8002ea2:	e000      	b.n	8002ea6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002ea4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d047      	beq.n	8002f42 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eb2:	f7ff fdf6 	bl	8002aa2 <LL_RCC_GetSysClkSource>
 8002eb6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eb8:	f7ff feef 	bl	8002c9a <LL_RCC_PLL_GetMainSource>
 8002ebc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d005      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x164>
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	2b0c      	cmp	r3, #12
 8002ec8:	d108      	bne.n	8002edc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d105      	bne.n	8002edc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d134      	bne.n	8002f42 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e2b4      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee4:	d102      	bne.n	8002eec <HAL_RCC_OscConfig+0x180>
 8002ee6:	f7ff fbdd 	bl	80026a4 <LL_RCC_HSE_Enable>
 8002eea:	e001      	b.n	8002ef0 <HAL_RCC_OscConfig+0x184>
 8002eec:	f7ff fbe9 	bl	80026c2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d012      	beq.n	8002f1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe ff1a 	bl	8001d30 <HAL_GetTick>
 8002efc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f00:	f7fe ff16 	bl	8001d30 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b64      	cmp	r3, #100	@ 0x64
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e299      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f12:	f7ff fbe5 	bl	80026e0 <LL_RCC_HSE_IsReady>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f1      	beq.n	8002f00 <HAL_RCC_OscConfig+0x194>
 8002f1c:	e011      	b.n	8002f42 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1e:	f7fe ff07 	bl	8001d30 <HAL_GetTick>
 8002f22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f26:	f7fe ff03 	bl	8001d30 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b64      	cmp	r3, #100	@ 0x64
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e286      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f38:	f7ff fbd2 	bl	80026e0 <LL_RCC_HSE_IsReady>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f1      	bne.n	8002f26 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d04c      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f4e:	f7ff fda8 	bl	8002aa2 <LL_RCC_GetSysClkSource>
 8002f52:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f54:	f7ff fea1 	bl	8002c9a <LL_RCC_PLL_GetMainSource>
 8002f58:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d005      	beq.n	8002f6c <HAL_RCC_OscConfig+0x200>
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b0c      	cmp	r3, #12
 8002f64:	d10e      	bne.n	8002f84 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d10b      	bne.n	8002f84 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e266      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff fbf1 	bl	8002764 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002f82:	e031      	b.n	8002fe8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d019      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f8c:	f7ff fbba 	bl	8002704 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fe fece 	bl	8001d30 <HAL_GetTick>
 8002f94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f98:	f7fe feca 	bl	8001d30 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e24d      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002faa:	f7ff fbc9 	bl	8002740 <LL_RCC_HSI_IsReady>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0f1      	beq.n	8002f98 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff fbd3 	bl	8002764 <LL_RCC_HSI_SetCalibTrimming>
 8002fbe:	e013      	b.n	8002fe8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fc0:	f7ff fbaf 	bl	8002722 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc4:	f7fe feb4 	bl	8001d30 <HAL_GetTick>
 8002fc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fcc:	f7fe feb0 	bl	8001d30 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e233      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002fde:	f7ff fbaf 	bl	8002740 <LL_RCC_HSI_IsReady>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1f1      	bne.n	8002fcc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d106      	bne.n	8003002 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 80a3 	beq.w	8003148 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d076      	beq.n	80030f8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b00      	cmp	r3, #0
 8003014:	d046      	beq.n	80030a4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003016:	f7ff fc66 	bl	80028e6 <LL_RCC_LSI1_IsReady>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d113      	bne.n	8003048 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003020:	f7ff fc3f 	bl	80028a2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003024:	f7fe fe84 	bl	8001d30 <HAL_GetTick>
 8003028:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800302c:	f7fe fe80 	bl	8001d30 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e203      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800303e:	f7ff fc52 	bl	80028e6 <LL_RCC_LSI1_IsReady>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f1      	beq.n	800302c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003048:	f7ff fc5f 	bl	800290a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7fe fe70 	bl	8001d30 <HAL_GetTick>
 8003050:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003054:	f7fe fe6c 	bl	8001d30 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b03      	cmp	r3, #3
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e1ef      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003066:	f7ff fc72 	bl	800294e <LL_RCC_LSI2_IsReady>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0f1      	beq.n	8003054 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fc7c 	bl	8002972 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800307a:	f7ff fc23 	bl	80028c4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307e:	f7fe fe57 	bl	8001d30 <HAL_GetTick>
 8003082:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003086:	f7fe fe53 	bl	8001d30 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e1d6      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003098:	f7ff fc25 	bl	80028e6 <LL_RCC_LSI1_IsReady>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f1      	bne.n	8003086 <HAL_RCC_OscConfig+0x31a>
 80030a2:	e051      	b.n	8003148 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80030a4:	f7ff fbfd 	bl	80028a2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a8:	f7fe fe42 	bl	8001d30 <HAL_GetTick>
 80030ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80030ae:	e00c      	b.n	80030ca <HAL_RCC_OscConfig+0x35e>
 80030b0:	20000008 	.word	0x20000008
 80030b4:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80030b8:	f7fe fe3a 	bl	8001d30 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e1bd      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80030ca:	f7ff fc0c 	bl	80028e6 <LL_RCC_LSI1_IsReady>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f1      	beq.n	80030b8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80030d4:	f7ff fc2a 	bl	800292c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80030da:	f7fe fe29 	bl	8001d30 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e1ac      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80030ec:	f7ff fc2f 	bl	800294e <LL_RCC_LSI2_IsReady>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f1      	bne.n	80030da <HAL_RCC_OscConfig+0x36e>
 80030f6:	e027      	b.n	8003148 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80030f8:	f7ff fc18 	bl	800292c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fc:	f7fe fe18 	bl	8001d30 <HAL_GetTick>
 8003100:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003104:	f7fe fe14 	bl	8001d30 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b03      	cmp	r3, #3
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e197      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003116:	f7ff fc1a 	bl	800294e <LL_RCC_LSI2_IsReady>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f1      	bne.n	8003104 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003120:	f7ff fbd0 	bl	80028c4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003124:	f7fe fe04 	bl	8001d30 <HAL_GetTick>
 8003128:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800312c:	f7fe fe00 	bl	8001d30 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e183      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800313e:	f7ff fbd2 	bl	80028e6 <LL_RCC_LSI1_IsReady>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1f1      	bne.n	800312c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d05b      	beq.n	800320c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003154:	4ba7      	ldr	r3, [pc, #668]	@ (80033f4 <HAL_RCC_OscConfig+0x688>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d114      	bne.n	800318a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003160:	f7ff fa70 	bl	8002644 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003164:	f7fe fde4 	bl	8001d30 <HAL_GetTick>
 8003168:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316c:	f7fe fde0 	bl	8001d30 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e163      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800317e:	4b9d      	ldr	r3, [pc, #628]	@ (80033f4 <HAL_RCC_OscConfig+0x688>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f0      	beq.n	800316c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d102      	bne.n	8003198 <HAL_RCC_OscConfig+0x42c>
 8003192:	f7ff fb30 	bl	80027f6 <LL_RCC_LSE_Enable>
 8003196:	e00c      	b.n	80031b2 <HAL_RCC_OscConfig+0x446>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b05      	cmp	r3, #5
 800319e:	d104      	bne.n	80031aa <HAL_RCC_OscConfig+0x43e>
 80031a0:	f7ff fb4b 	bl	800283a <LL_RCC_LSE_EnableBypass>
 80031a4:	f7ff fb27 	bl	80027f6 <LL_RCC_LSE_Enable>
 80031a8:	e003      	b.n	80031b2 <HAL_RCC_OscConfig+0x446>
 80031aa:	f7ff fb35 	bl	8002818 <LL_RCC_LSE_Disable>
 80031ae:	f7ff fb55 	bl	800285c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d014      	beq.n	80031e4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ba:	f7fe fdb9 	bl	8001d30 <HAL_GetTick>
 80031be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80031c0:	e00a      	b.n	80031d8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c2:	f7fe fdb5 	bl	8001d30 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e136      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80031d8:	f7ff fb51 	bl	800287e <LL_RCC_LSE_IsReady>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0ef      	beq.n	80031c2 <HAL_RCC_OscConfig+0x456>
 80031e2:	e013      	b.n	800320c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e4:	f7fe fda4 	bl	8001d30 <HAL_GetTick>
 80031e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80031ea:	e00a      	b.n	8003202 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ec:	f7fe fda0 	bl	8001d30 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e121      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003202:	f7ff fb3c 	bl	800287e <LL_RCC_LSE_IsReady>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1ef      	bne.n	80031ec <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003214:	2b00      	cmp	r3, #0
 8003216:	d02c      	beq.n	8003272 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800321c:	2b00      	cmp	r3, #0
 800321e:	d014      	beq.n	800324a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003220:	f7ff fab5 	bl	800278e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003224:	f7fe fd84 	bl	8001d30 <HAL_GetTick>
 8003228:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800322c:	f7fe fd80 	bl	8001d30 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e103      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800323e:	f7ff fac8 	bl	80027d2 <LL_RCC_HSI48_IsReady>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0f1      	beq.n	800322c <HAL_RCC_OscConfig+0x4c0>
 8003248:	e013      	b.n	8003272 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800324a:	f7ff fab1 	bl	80027b0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324e:	f7fe fd6f 	bl	8001d30 <HAL_GetTick>
 8003252:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003256:	f7fe fd6b 	bl	8001d30 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e0ee      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003268:	f7ff fab3 	bl	80027d2 <LL_RCC_HSI48_IsReady>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f1      	bne.n	8003256 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 80e4 	beq.w	8003444 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800327c:	f7ff fc11 	bl	8002aa2 <LL_RCC_GetSysClkSource>
 8003280:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003282:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328e:	2b02      	cmp	r3, #2
 8003290:	f040 80b4 	bne.w	80033fc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f003 0203 	and.w	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329e:	429a      	cmp	r2, r3
 80032a0:	d123      	bne.n	80032ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d11c      	bne.n	80032ea <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	0a1b      	lsrs	r3, r3, #8
 80032b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032bc:	429a      	cmp	r2, r3
 80032be:	d114      	bne.n	80032ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d10d      	bne.n	80032ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032d8:	429a      	cmp	r2, r3
 80032da:	d106      	bne.n	80032ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d05d      	beq.n	80033a6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b0c      	cmp	r3, #12
 80032ee:	d058      	beq.n	80033a2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e0a1      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003302:	f7ff fc84 	bl	8002c0e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003306:	f7fe fd13 	bl	8001d30 <HAL_GetTick>
 800330a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330e:	f7fe fd0f 	bl	8001d30 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e092      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003320:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1ef      	bne.n	800330e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800332e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	4b30      	ldr	r3, [pc, #192]	@ (80033f8 <HAL_RCC_OscConfig+0x68c>)
 8003336:	4013      	ands	r3, r2
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003340:	4311      	orrs	r1, r2
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003346:	0212      	lsls	r2, r2, #8
 8003348:	4311      	orrs	r1, r2
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800334e:	4311      	orrs	r1, r2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003354:	4311      	orrs	r1, r2
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800335a:	430a      	orrs	r2, r1
 800335c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003360:	4313      	orrs	r3, r2
 8003362:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003364:	f7ff fc44 	bl	8002bf0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003372:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003376:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003378:	f7fe fcda 	bl	8001d30 <HAL_GetTick>
 800337c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003380:	f7fe fcd6 	bl	8001d30 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e059      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003392:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0ef      	beq.n	8003380 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033a0:	e050      	b.n	8003444 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e04f      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d147      	bne.n	8003444 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033b4:	f7ff fc1c 	bl	8002bf0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033c8:	f7fe fcb2 	bl	8001d30 <HAL_GetTick>
 80033cc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d0:	f7fe fcae 	bl	8001d30 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e031      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0ef      	beq.n	80033d0 <HAL_RCC_OscConfig+0x664>
 80033f0:	e028      	b.n	8003444 <HAL_RCC_OscConfig+0x6d8>
 80033f2:	bf00      	nop
 80033f4:	58000400 	.word	0x58000400
 80033f8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b0c      	cmp	r3, #12
 8003400:	d01e      	beq.n	8003440 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003402:	f7ff fc04 	bl	8002c0e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003406:	f7fe fc93 	bl	8001d30 <HAL_GetTick>
 800340a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340e:	f7fe fc8f 	bl	8001d30 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e012      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003420:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1ef      	bne.n	800340e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800342e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003438:	4b05      	ldr	r3, [pc, #20]	@ (8003450 <HAL_RCC_OscConfig+0x6e4>)
 800343a:	4013      	ands	r3, r2
 800343c:	60cb      	str	r3, [r1, #12]
 800343e:	e001      	b.n	8003444 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3734      	adds	r7, #52	@ 0x34
 800344a:	46bd      	mov	sp, r7
 800344c:	bd90      	pop	{r4, r7, pc}
 800344e:	bf00      	nop
 8003450:	eefefffc 	.word	0xeefefffc

08003454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e12d      	b.n	80036c4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003468:	4b98      	ldr	r3, [pc, #608]	@ (80036cc <HAL_RCC_ClockConfig+0x278>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d91b      	bls.n	80034ae <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003476:	4b95      	ldr	r3, [pc, #596]	@ (80036cc <HAL_RCC_ClockConfig+0x278>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 0207 	bic.w	r2, r3, #7
 800347e:	4993      	ldr	r1, [pc, #588]	@ (80036cc <HAL_RCC_ClockConfig+0x278>)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	4313      	orrs	r3, r2
 8003484:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003486:	f7fe fc53 	bl	8001d30 <HAL_GetTick>
 800348a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800348e:	f7fe fc4f 	bl	8001d30 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e111      	b.n	80036c4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a0:	4b8a      	ldr	r3, [pc, #552]	@ (80036cc <HAL_RCC_ClockConfig+0x278>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d1ef      	bne.n	800348e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d016      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff fafb 	bl	8002aba <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034c4:	f7fe fc34 	bl	8001d30 <HAL_GetTick>
 80034c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034ca:	e008      	b.n	80034de <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034cc:	f7fe fc30 	bl	8001d30 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e0f2      	b.n	80036c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034de:	f7ff fbe8 	bl	8002cb2 <LL_RCC_IsActiveFlag_HPRE>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f1      	beq.n	80034cc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0320 	and.w	r3, r3, #32
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d016      	beq.n	8003522 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff faf2 	bl	8002ae2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034fe:	f7fe fc17 	bl	8001d30 <HAL_GetTick>
 8003502:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003504:	e008      	b.n	8003518 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003506:	f7fe fc13 	bl	8001d30 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e0d5      	b.n	80036c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003518:	f7ff fbdd 	bl	8002cd6 <LL_RCC_IsActiveFlag_C2HPRE>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f1      	beq.n	8003506 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d016      	beq.n	800355c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff faeb 	bl	8002b0e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003538:	f7fe fbfa 	bl	8001d30 <HAL_GetTick>
 800353c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003540:	f7fe fbf6 	bl	8001d30 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e0b8      	b.n	80036c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003552:	f7ff fbd3 	bl	8002cfc <LL_RCC_IsActiveFlag_SHDHPRE>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f1      	beq.n	8003540 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d016      	beq.n	8003596 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff fae5 	bl	8002b3c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003572:	f7fe fbdd 	bl	8001d30 <HAL_GetTick>
 8003576:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003578:	e008      	b.n	800358c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800357a:	f7fe fbd9 	bl	8001d30 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e09b      	b.n	80036c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800358c:	f7ff fbc9 	bl	8002d22 <LL_RCC_IsActiveFlag_PPRE1>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f1      	beq.n	800357a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d017      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff fadb 	bl	8002b64 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035ae:	f7fe fbbf 	bl	8001d30 <HAL_GetTick>
 80035b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035b6:	f7fe fbbb 	bl	8001d30 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e07d      	b.n	80036c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80035c8:	f7ff fbbd 	bl	8002d46 <LL_RCC_IsActiveFlag_PPRE2>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f1      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d043      	beq.n	8003666 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d106      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80035e6:	f7ff f87b 	bl	80026e0 <LL_RCC_HSE_IsReady>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d11e      	bne.n	800362e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e067      	b.n	80036c4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d106      	bne.n	800360a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80035fc:	f7ff fb16 	bl	8002c2c <LL_RCC_PLL_IsReady>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d113      	bne.n	800362e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e05c      	b.n	80036c4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003612:	f7ff f9e3 	bl	80029dc <LL_RCC_MSI_IsReady>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d108      	bne.n	800362e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e051      	b.n	80036c4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003620:	f7ff f88e 	bl	8002740 <LL_RCC_HSI_IsReady>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e04a      	b.n	80036c4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fa21 	bl	8002a7a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003638:	f7fe fb7a 	bl	8001d30 <HAL_GetTick>
 800363c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	e00a      	b.n	8003656 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003640:	f7fe fb76 	bl	8001d30 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e036      	b.n	80036c4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	f7ff fa24 	bl	8002aa2 <LL_RCC_GetSysClkSource>
 800365a:	4602      	mov	r2, r0
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	429a      	cmp	r2, r3
 8003664:	d1ec      	bne.n	8003640 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003666:	4b19      	ldr	r3, [pc, #100]	@ (80036cc <HAL_RCC_ClockConfig+0x278>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d21b      	bcs.n	80036ac <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003674:	4b15      	ldr	r3, [pc, #84]	@ (80036cc <HAL_RCC_ClockConfig+0x278>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f023 0207 	bic.w	r2, r3, #7
 800367c:	4913      	ldr	r1, [pc, #76]	@ (80036cc <HAL_RCC_ClockConfig+0x278>)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	4313      	orrs	r3, r2
 8003682:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003684:	f7fe fb54 	bl	8001d30 <HAL_GetTick>
 8003688:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800368a:	e008      	b.n	800369e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800368c:	f7fe fb50 	bl	8001d30 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e012      	b.n	80036c4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800369e:	4b0b      	ldr	r3, [pc, #44]	@ (80036cc <HAL_RCC_ClockConfig+0x278>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d1ef      	bne.n	800368c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80036ac:	f000 f87e 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 80036b0:	4603      	mov	r3, r0
 80036b2:	4a07      	ldr	r2, [pc, #28]	@ (80036d0 <HAL_RCC_ClockConfig+0x27c>)
 80036b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80036b6:	f7fe fb47 	bl	8001d48 <HAL_GetTickPrio>
 80036ba:	4603      	mov	r3, r0
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fe fae9 	bl	8001c94 <HAL_InitTick>
 80036c2:	4603      	mov	r3, r0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	58004000 	.word	0x58004000
 80036d0:	20000008 	.word	0x20000008

080036d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036da:	f7ff f9e2 	bl	8002aa2 <LL_RCC_GetSysClkSource>
 80036de:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10a      	bne.n	80036fc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80036e6:	f7ff f99e 	bl	8002a26 <LL_RCC_MSI_GetRange>
 80036ea:	4603      	mov	r3, r0
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	4a2b      	ldr	r2, [pc, #172]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 80036f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	e04b      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d102      	bne.n	8003708 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003702:	4b28      	ldr	r3, [pc, #160]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	e045      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b08      	cmp	r3, #8
 800370c:	d10a      	bne.n	8003724 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800370e:	f7fe ffb7 	bl	8002680 <LL_RCC_HSE_IsEnabledDiv2>
 8003712:	4603      	mov	r3, r0
 8003714:	2b01      	cmp	r3, #1
 8003716:	d102      	bne.n	800371e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003718:	4b22      	ldr	r3, [pc, #136]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	e03a      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800371e:	4b22      	ldr	r3, [pc, #136]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	e037      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003724:	f7ff fab9 	bl	8002c9a <LL_RCC_PLL_GetMainSource>
 8003728:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d003      	beq.n	8003738 <HAL_RCC_GetSysClockFreq+0x64>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2b03      	cmp	r3, #3
 8003734:	d003      	beq.n	800373e <HAL_RCC_GetSysClockFreq+0x6a>
 8003736:	e00d      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003738:	4b1a      	ldr	r3, [pc, #104]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800373a:	60bb      	str	r3, [r7, #8]
        break;
 800373c:	e015      	b.n	800376a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800373e:	f7fe ff9f 	bl	8002680 <LL_RCC_HSE_IsEnabledDiv2>
 8003742:	4603      	mov	r3, r0
 8003744:	2b01      	cmp	r3, #1
 8003746:	d102      	bne.n	800374e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003748:	4b16      	ldr	r3, [pc, #88]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800374a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800374c:	e00d      	b.n	800376a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800374e:	4b16      	ldr	r3, [pc, #88]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003750:	60bb      	str	r3, [r7, #8]
        break;
 8003752:	e00a      	b.n	800376a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003754:	f7ff f967 	bl	8002a26 <LL_RCC_MSI_GetRange>
 8003758:	4603      	mov	r3, r0
 800375a:	091b      	lsrs	r3, r3, #4
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	4a0f      	ldr	r2, [pc, #60]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003766:	60bb      	str	r3, [r7, #8]
        break;
 8003768:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800376a:	f7ff fa71 	bl	8002c50 <LL_RCC_PLL_GetN>
 800376e:	4602      	mov	r2, r0
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	fb03 f402 	mul.w	r4, r3, r2
 8003776:	f7ff fa84 	bl	8002c82 <LL_RCC_PLL_GetDivider>
 800377a:	4603      	mov	r3, r0
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	3301      	adds	r3, #1
 8003780:	fbb4 f4f3 	udiv	r4, r4, r3
 8003784:	f7ff fa71 	bl	8002c6a <LL_RCC_PLL_GetR>
 8003788:	4603      	mov	r3, r0
 800378a:	0f5b      	lsrs	r3, r3, #29
 800378c:	3301      	adds	r3, #1
 800378e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003792:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003794:	68fb      	ldr	r3, [r7, #12]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	bd90      	pop	{r4, r7, pc}
 800379e:	bf00      	nop
 80037a0:	08009a30 	.word	0x08009a30
 80037a4:	00f42400 	.word	0x00f42400
 80037a8:	01e84800 	.word	0x01e84800

080037ac <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037ac:	b598      	push	{r3, r4, r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80037b0:	f7ff ff90 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 80037b4:	4604      	mov	r4, r0
 80037b6:	f7ff f9e9 	bl	8002b8c <LL_RCC_GetAHBPrescaler>
 80037ba:	4603      	mov	r3, r0
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	4a03      	ldr	r2, [pc, #12]	@ (80037d0 <HAL_RCC_GetHCLKFreq+0x24>)
 80037c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	bd98      	pop	{r3, r4, r7, pc}
 80037d0:	080099d0 	.word	0x080099d0

080037d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d4:	b598      	push	{r3, r4, r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80037d8:	f7ff ffe8 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 80037dc:	4604      	mov	r4, r0
 80037de:	f7ff f9ef 	bl	8002bc0 <LL_RCC_GetAPB1Prescaler>
 80037e2:	4603      	mov	r3, r0
 80037e4:	0a1b      	lsrs	r3, r3, #8
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	4a04      	ldr	r2, [pc, #16]	@ (80037fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80037ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f0:	f003 031f 	and.w	r3, r3, #31
 80037f4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	bd98      	pop	{r3, r4, r7, pc}
 80037fc:	08009a10 	.word	0x08009a10

08003800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003800:	b598      	push	{r3, r4, r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003804:	f7ff ffd2 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 8003808:	4604      	mov	r4, r0
 800380a:	f7ff f9e5 	bl	8002bd8 <LL_RCC_GetAPB2Prescaler>
 800380e:	4603      	mov	r3, r0
 8003810:	0adb      	lsrs	r3, r3, #11
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	4a04      	ldr	r2, [pc, #16]	@ (8003828 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003824:	4618      	mov	r0, r3
 8003826:	bd98      	pop	{r3, r4, r7, pc}
 8003828:	08009a10 	.word	0x08009a10

0800382c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800382c:	b590      	push	{r4, r7, lr}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2bb0      	cmp	r3, #176	@ 0xb0
 8003838:	d903      	bls.n	8003842 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800383a:	4b15      	ldr	r3, [pc, #84]	@ (8003890 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800383c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	e007      	b.n	8003852 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	091b      	lsrs	r3, r3, #4
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	4a11      	ldr	r2, [pc, #68]	@ (8003890 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800384c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003850:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003852:	f7ff f9a7 	bl	8002ba4 <LL_RCC_GetAHB4Prescaler>
 8003856:	4603      	mov	r3, r0
 8003858:	091b      	lsrs	r3, r3, #4
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	4a0d      	ldr	r2, [pc, #52]	@ (8003894 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	fbb2 f3f3 	udiv	r3, r2, r3
 800386a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4a0a      	ldr	r2, [pc, #40]	@ (8003898 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003870:	fba2 2303 	umull	r2, r3, r2, r3
 8003874:	0c9c      	lsrs	r4, r3, #18
 8003876:	f7fe fef5 	bl	8002664 <HAL_PWREx_GetVoltageRange>
 800387a:	4603      	mov	r3, r0
 800387c:	4619      	mov	r1, r3
 800387e:	4620      	mov	r0, r4
 8003880:	f000 f80c 	bl	800389c <RCC_SetFlashLatency>
 8003884:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	bd90      	pop	{r4, r7, pc}
 800388e:	bf00      	nop
 8003890:	08009a30 	.word	0x08009a30
 8003894:	080099d0 	.word	0x080099d0
 8003898:	431bde83 	.word	0x431bde83

0800389c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800389c:	b590      	push	{r4, r7, lr}
 800389e:	b093      	sub	sp, #76	@ 0x4c
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80038a6:	4b37      	ldr	r3, [pc, #220]	@ (8003984 <RCC_SetFlashLatency+0xe8>)
 80038a8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80038ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80038b2:	4a35      	ldr	r2, [pc, #212]	@ (8003988 <RCC_SetFlashLatency+0xec>)
 80038b4:	f107 031c 	add.w	r3, r7, #28
 80038b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80038ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80038be:	4b33      	ldr	r3, [pc, #204]	@ (800398c <RCC_SetFlashLatency+0xf0>)
 80038c0:	f107 040c 	add.w	r4, r7, #12
 80038c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80038ca:	2300      	movs	r3, #0
 80038cc:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038d4:	d11a      	bne.n	800390c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80038d6:	2300      	movs	r3, #0
 80038d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80038da:	e013      	b.n	8003904 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80038dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	3348      	adds	r3, #72	@ 0x48
 80038e2:	443b      	add	r3, r7
 80038e4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d807      	bhi.n	80038fe <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80038ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	3348      	adds	r3, #72	@ 0x48
 80038f4:	443b      	add	r3, r7
 80038f6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80038fa:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80038fc:	e020      	b.n	8003940 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80038fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003900:	3301      	adds	r3, #1
 8003902:	643b      	str	r3, [r7, #64]	@ 0x40
 8003904:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003906:	2b03      	cmp	r3, #3
 8003908:	d9e8      	bls.n	80038dc <RCC_SetFlashLatency+0x40>
 800390a:	e019      	b.n	8003940 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800390c:	2300      	movs	r3, #0
 800390e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003910:	e013      	b.n	800393a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	3348      	adds	r3, #72	@ 0x48
 8003918:	443b      	add	r3, r7
 800391a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	429a      	cmp	r2, r3
 8003922:	d807      	bhi.n	8003934 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	3348      	adds	r3, #72	@ 0x48
 800392a:	443b      	add	r3, r7
 800392c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003930:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003932:	e005      	b.n	8003940 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003936:	3301      	adds	r3, #1
 8003938:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800393a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800393c:	2b02      	cmp	r3, #2
 800393e:	d9e8      	bls.n	8003912 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003940:	4b13      	ldr	r3, [pc, #76]	@ (8003990 <RCC_SetFlashLatency+0xf4>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f023 0207 	bic.w	r2, r3, #7
 8003948:	4911      	ldr	r1, [pc, #68]	@ (8003990 <RCC_SetFlashLatency+0xf4>)
 800394a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800394c:	4313      	orrs	r3, r2
 800394e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003950:	f7fe f9ee 	bl	8001d30 <HAL_GetTick>
 8003954:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003956:	e008      	b.n	800396a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003958:	f7fe f9ea 	bl	8001d30 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e007      	b.n	800397a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800396a:	4b09      	ldr	r3, [pc, #36]	@ (8003990 <RCC_SetFlashLatency+0xf4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003974:	429a      	cmp	r2, r3
 8003976:	d1ef      	bne.n	8003958 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	374c      	adds	r7, #76	@ 0x4c
 800397e:	46bd      	mov	sp, r7
 8003980:	bd90      	pop	{r4, r7, pc}
 8003982:	bf00      	nop
 8003984:	0800982c 	.word	0x0800982c
 8003988:	0800983c 	.word	0x0800983c
 800398c:	08009848 	.word	0x08009848
 8003990:	58004000 	.word	0x58004000

08003994 <LL_RCC_LSE_IsEnabled>:
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800399c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <LL_RCC_LSE_IsEnabled+0x18>
 80039a8:	2301      	movs	r3, #1
 80039aa:	e000      	b.n	80039ae <LL_RCC_LSE_IsEnabled+0x1a>
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <LL_RCC_LSE_IsReady>:
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80039bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d101      	bne.n	80039d0 <LL_RCC_LSE_IsReady+0x18>
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <LL_RCC_LSE_IsReady+0x1a>
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <LL_RCC_SetRFWKPClockSource>:
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80039e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <LL_RCC_SetSMPSClockSource>:
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003a10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a16:	f023 0203 	bic.w	r2, r3, #3
 8003a1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <LL_RCC_SetSMPSPrescaler>:
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003a38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003a42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <LL_RCC_SetUSARTClockSource>:
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003a60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a68:	f023 0203 	bic.w	r2, r3, #3
 8003a6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <LL_RCC_SetLPUARTClockSource>:
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003a8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a94:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003a98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <LL_RCC_SetI2CClockSource>:
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003ab8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003abc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	091b      	lsrs	r3, r3, #4
 8003ac4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	401a      	ands	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003ad4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <LL_RCC_SetLPTIMClockSource>:
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003af2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003af6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	0c1b      	lsrs	r3, r3, #16
 8003afe:	041b      	lsls	r3, r3, #16
 8003b00:	43db      	mvns	r3, r3
 8003b02:	401a      	ands	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	041b      	lsls	r3, r3, #16
 8003b08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <LL_RCC_SetSAIClockSource>:
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <LL_RCC_SetRNGClockSource>:
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003b52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003b5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <LL_RCC_SetCLK48ClockSource>:
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003b7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <LL_RCC_SetUSBClockSource>:
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7ff ffe3 	bl	8003b76 <LL_RCC_SetCLK48ClockSource>
}
 8003bb0:	bf00      	nop
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <LL_RCC_SetADCClockSource>:
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003bc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003bcc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <LL_RCC_SetRTCClockSource>:
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003bec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bf8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <LL_RCC_GetRTCClockSource>:
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003c14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <LL_RCC_ForceBackupDomainReset>:
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003c42:	bf00      	nop
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <LL_RCC_ReleaseBackupDomainReset>:
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003c64:	bf00      	nop
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <LL_RCC_PLLSAI1_Enable>:
{
 8003c6e:	b480      	push	{r7}
 8003c70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c7c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c80:	6013      	str	r3, [r2, #0]
}
 8003c82:	bf00      	nop
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <LL_RCC_PLLSAI1_Disable>:
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003c90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003c9e:	6013      	str	r3, [r2, #0]
}
 8003ca0:	bf00      	nop
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <LL_RCC_PLLSAI1_IsReady>:
{
 8003caa:	b480      	push	{r7}
 8003cac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003cae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cbc:	d101      	bne.n	8003cc2 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b088      	sub	sp, #32
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003cda:	2300      	movs	r3, #0
 8003cdc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d034      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003cf2:	d021      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003cf4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003cf8:	d81b      	bhi.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cfa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cfe:	d01d      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003d00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d04:	d815      	bhi.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00b      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003d0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d0e:	d110      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d1e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d20:	e00d      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3304      	adds	r3, #4
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 f947 	bl	8003fba <RCCEx_PLLSAI1_ConfigNP>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d30:	e005      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	77fb      	strb	r3, [r7, #31]
        break;
 8003d36:	e002      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003d38:	bf00      	nop
 8003d3a:	e000      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d3e:	7ffb      	ldrb	r3, [r7, #31]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d105      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff fee8 	bl	8003b1e <LL_RCC_SetSAIClockSource>
 8003d4e:	e001      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d50:	7ffb      	ldrb	r3, [r7, #31]
 8003d52:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d046      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003d60:	f7ff ff56 	bl	8003c10 <LL_RCC_GetRTCClockSource>
 8003d64:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d03c      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003d70:	f7fe fc68 	bl	8002644 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d105      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff ff30 	bl	8003be4 <LL_RCC_SetRTCClockSource>
 8003d84:	e02e      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003d86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d8e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003d90:	f7ff ff4b 	bl	8003c2a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003d94:	f7ff ff5a 	bl	8003c4c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	4313      	orrs	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003da6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003db0:	f7ff fdf0 	bl	8003994 <LL_RCC_LSE_IsEnabled>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d114      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dba:	f7fd ffb9 	bl	8001d30 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003dc0:	e00b      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc2:	f7fd ffb5 	bl	8001d30 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d902      	bls.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	77fb      	strb	r3, [r7, #31]
              break;
 8003dd8:	e004      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003dda:	f7ff fded 	bl	80039b8 <LL_RCC_LSE_IsReady>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d1ee      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003de4:	7ffb      	ldrb	r3, [r7, #31]
 8003de6:	77bb      	strb	r3, [r7, #30]
 8003de8:	e001      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dea:	7ffb      	ldrb	r3, [r7, #31]
 8003dec:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d004      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff fe2a 	bl	8003a58 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d004      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff fe35 	bl	8003a84 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0310 	and.w	r3, r3, #16
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d004      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff fe5d 	bl	8003aea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d004      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff fe52 	bl	8003aea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d004      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff fe2a 	bl	8003ab0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d004      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff fe1f 	bl	8003ab0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d022      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff fe8d 	bl	8003ba2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e90:	d107      	bne.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003e92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ea0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003eaa:	d10b      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 f8dd 	bl	8004070 <RCCEx_PLLSAI1_ConfigNQ>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003eba:	7ffb      	ldrb	r3, [r7, #31]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003ec0:	7ffb      	ldrb	r3, [r7, #31]
 8003ec2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d02b      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ed8:	d008      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ede:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ee2:	d003      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d105      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff fe2a 	bl	8003b4a <LL_RCC_SetRNGClockSource>
 8003ef6:	e00a      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	2000      	movs	r0, #0
 8003f04:	f7ff fe21 	bl	8003b4a <LL_RCC_SetRNGClockSource>
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f7ff fe34 	bl	8003b76 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f12:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003f16:	d107      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f26:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d022      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff fe3d 	bl	8003bb8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f46:	d107      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f56:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f60:	d10b      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3304      	adds	r3, #4
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 f8dd 	bl	8004126 <RCCEx_PLLSAI1_ConfigNR>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003f70:	7ffb      	ldrb	r3, [r7, #31]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003f76:	7ffb      	ldrb	r3, [r7, #31]
 8003f78:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d004      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff fd26 	bl	80039dc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d009      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff fd45 	bl	8003a30 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff fd2c 	bl	8003a08 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003fb0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3720      	adds	r7, #32
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b084      	sub	sp, #16
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003fc6:	f7ff fe61 	bl	8003c8c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003fca:	f7fd feb1 	bl	8001d30 <HAL_GetTick>
 8003fce:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003fd0:	e009      	b.n	8003fe6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fd2:	f7fd fead 	bl	8001d30 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d902      	bls.n	8003fe6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe4:	e004      	b.n	8003ff0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003fe6:	f7ff fe60 	bl	8003caa <LL_RCC_PLLSAI1_IsReady>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1f0      	bne.n	8003fd2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d137      	bne.n	8004066 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003ff6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	021b      	lsls	r3, r3, #8
 8004006:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800400a:	4313      	orrs	r3, r2
 800400c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800400e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004020:	4313      	orrs	r3, r2
 8004022:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004024:	f7ff fe23 	bl	8003c6e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004028:	f7fd fe82 	bl	8001d30 <HAL_GetTick>
 800402c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800402e:	e009      	b.n	8004044 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004030:	f7fd fe7e 	bl	8001d30 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d902      	bls.n	8004044 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	73fb      	strb	r3, [r7, #15]
        break;
 8004042:	e004      	b.n	800404e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004044:	f7ff fe31 	bl	8003caa <LL_RCC_PLLSAI1_IsReady>
 8004048:	4603      	mov	r3, r0
 800404a:	2b01      	cmp	r3, #1
 800404c:	d1f0      	bne.n	8004030 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800404e:	7bfb      	ldrb	r3, [r7, #15]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d108      	bne.n	8004066 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004054:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004058:	691a      	ldr	r2, [r3, #16]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004062:	4313      	orrs	r3, r2
 8004064:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004066:	7bfb      	ldrb	r3, [r7, #15]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800407c:	f7ff fe06 	bl	8003c8c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004080:	f7fd fe56 	bl	8001d30 <HAL_GetTick>
 8004084:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004086:	e009      	b.n	800409c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004088:	f7fd fe52 	bl	8001d30 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d902      	bls.n	800409c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	73fb      	strb	r3, [r7, #15]
      break;
 800409a:	e004      	b.n	80040a6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800409c:	f7ff fe05 	bl	8003caa <LL_RCC_PLLSAI1_IsReady>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f0      	bne.n	8004088 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d137      	bne.n	800411c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80040ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	021b      	lsls	r3, r3, #8
 80040bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040c0:	4313      	orrs	r3, r2
 80040c2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80040c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040d6:	4313      	orrs	r3, r2
 80040d8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80040da:	f7ff fdc8 	bl	8003c6e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040de:	f7fd fe27 	bl	8001d30 <HAL_GetTick>
 80040e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80040e4:	e009      	b.n	80040fa <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040e6:	f7fd fe23 	bl	8001d30 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d902      	bls.n	80040fa <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	73fb      	strb	r3, [r7, #15]
        break;
 80040f8:	e004      	b.n	8004104 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80040fa:	f7ff fdd6 	bl	8003caa <LL_RCC_PLLSAI1_IsReady>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b01      	cmp	r3, #1
 8004102:	d1f0      	bne.n	80040e6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d108      	bne.n	800411c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800410a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004118:	4313      	orrs	r3, r2
 800411a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800411c:	7bfb      	ldrb	r3, [r7, #15]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b084      	sub	sp, #16
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004132:	f7ff fdab 	bl	8003c8c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004136:	f7fd fdfb 	bl	8001d30 <HAL_GetTick>
 800413a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800413c:	e009      	b.n	8004152 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800413e:	f7fd fdf7 	bl	8001d30 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d902      	bls.n	8004152 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	73fb      	strb	r3, [r7, #15]
      break;
 8004150:	e004      	b.n	800415c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004152:	f7ff fdaa 	bl	8003caa <LL_RCC_PLLSAI1_IsReady>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1f0      	bne.n	800413e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d137      	bne.n	80041d2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	021b      	lsls	r3, r3, #8
 8004172:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004176:	4313      	orrs	r3, r2
 8004178:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800417a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800418c:	4313      	orrs	r3, r2
 800418e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004190:	f7ff fd6d 	bl	8003c6e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004194:	f7fd fdcc 	bl	8001d30 <HAL_GetTick>
 8004198:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800419a:	e009      	b.n	80041b0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800419c:	f7fd fdc8 	bl	8001d30 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d902      	bls.n	80041b0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	73fb      	strb	r3, [r7, #15]
        break;
 80041ae:	e004      	b.n	80041ba <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80041b0:	f7ff fd7b 	bl	8003caa <LL_RCC_PLLSAI1_IsReady>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d1f0      	bne.n	800419c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d108      	bne.n	80041d2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80041c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041ce:	4313      	orrs	r3, r2
 80041d0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e07a      	b.n	80042e8 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_RTC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fd fc0c 	bl	8001a24 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b10      	cmp	r3, #16
 8004220:	d058      	beq.n	80042d4 <HAL_RTC_Init+0xf8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	22ca      	movs	r2, #202	@ 0xca
 8004228:	625a      	str	r2, [r3, #36]	@ 0x24
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2253      	movs	r2, #83	@ 0x53
 8004230:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f882 	bl	800433c <RTC_EnterInitMode>
 8004238:	4603      	mov	r3, r0
 800423a:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d12c      	bne.n	800429c <HAL_RTC_Init+0xc0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004250:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004254:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6899      	ldr	r1, [r3, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	431a      	orrs	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	68d2      	ldr	r2, [r2, #12]
 800427c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6919      	ldr	r1, [r3, #16]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	041a      	lsls	r2, r3, #16
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f88a 	bl	80043ac <RTC_ExitInitMode>
 8004298:	4603      	mov	r3, r0
 800429a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d113      	bne.n	80042ca <HAL_RTC_Init+0xee>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0203 	bic.w	r2, r2, #3
 80042b0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69da      	ldr	r2, [r3, #28]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	22ff      	movs	r2, #255	@ 0xff
 80042d0:	625a      	str	r2, [r3, #36]	@ 0x24
 80042d2:	e001      	b.n	80042d8 <HAL_RTC_Init+0xfc>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d103      	bne.n	80042e6 <HAL_RTC_Init+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a0d      	ldr	r2, [pc, #52]	@ (8004338 <HAL_RTC_WaitForSynchro+0x48>)
 8004302:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004304:	f7fd fd14 	bl	8001d30 <HAL_GetTick>
 8004308:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800430a:	e009      	b.n	8004320 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800430c:	f7fd fd10 	bl	8001d30 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800431a:	d901      	bls.n	8004320 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e007      	b.n	8004330 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0ee      	beq.n	800430c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	0001ff5f 	.word	0x0001ff5f

0800433c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	d123      	bne.n	80043a2 <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004368:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800436a:	f7fd fce1 	bl	8001d30 <HAL_GetTick>
 800436e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004370:	e00d      	b.n	800438e <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004372:	f7fd fcdd 	bl	8001d30 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004380:	d905      	bls.n	800438e <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2204      	movs	r2, #4
 8004386:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d102      	bne.n	80043a2 <RTC_EnterInitMode+0x66>
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d1e7      	bne.n	8004372 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043c6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10b      	bne.n	80043ee <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff ff8a 	bl	80042f0 <HAL_RTC_WaitForSynchro>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d005      	beq.n	80043ee <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2204      	movs	r2, #4
 80043e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004404:	4b5f      	ldr	r3, [pc, #380]	@ (8004584 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a5f      	ldr	r2, [pc, #380]	@ (8004588 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 800440a:	fba2 2303 	umull	r2, r3, r2, r3
 800440e:	0adb      	lsrs	r3, r3, #11
 8004410:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004414:	fb02 f303 	mul.w	r3, r2, r3
 8004418:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
 8004424:	2302      	movs	r3, #2
 8004426:	e0a7      	b.n	8004578 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	22ca      	movs	r2, #202	@ 0xca
 800443e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2253      	movs	r2, #83	@ 0x53
 8004446:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004452:	2b00      	cmp	r3, #0
 8004454:	d01a      	beq.n	800448c <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	3b01      	subs	r3, #1
 800445a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10d      	bne.n	800447e <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	22ff      	movs	r2, #255	@ 0xff
 8004468:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2203      	movs	r2, #3
 800446e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e07c      	b.n	8004578 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1e4      	bne.n	8004456 <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800449a:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80044ac:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80044ae:	4b35      	ldr	r3, [pc, #212]	@ (8004584 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a35      	ldr	r2, [pc, #212]	@ (8004588 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 80044b4:	fba2 2303 	umull	r2, r3, r2, r3
 80044b8:	0adb      	lsrs	r3, r3, #11
 80044ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80044be:	fb02 f303 	mul.w	r3, r2, r3
 80044c2:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10d      	bne.n	80044ec <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	22ff      	movs	r2, #255	@ 0xff
 80044d6:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2203      	movs	r2, #3
 80044dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e045      	b.n	8004578 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0e4      	beq.n	80044c4 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0207 	bic.w	r2, r2, #7
 8004508:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6899      	ldr	r1, [r3, #8]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	430a      	orrs	r2, r1
 8004518:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004522:	4b1a      	ldr	r3, [pc, #104]	@ (800458c <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8004524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004528:	4a18      	ldr	r2, [pc, #96]	@ (800458c <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800452a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800452e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004532:	4b16      	ldr	r3, [pc, #88]	@ (800458c <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a15      	ldr	r2, [pc, #84]	@ (800458c <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8004538:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800453c:	6013      	str	r3, [r2, #0]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800454c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800455c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	22ff      	movs	r2, #255	@ 0xff
 8004564:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	371c      	adds	r7, #28
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	20000008 	.word	0x20000008
 8004588:	10624dd3 	.word	0x10624dd3
 800458c:	58000800 	.word	0x58000800

08004590 <LL_RCC_GetUSARTClockSource>:
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004598:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800459c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4013      	ands	r3, r2
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <LL_RCC_GetLPUARTClockSource>:
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80045b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4013      	ands	r3, r2
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e042      	b.n	8004668 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d106      	bne.n	80045fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7fd f9c9 	bl	800198c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2224      	movs	r2, #36	@ 0x24
 80045fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0201 	bic.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fdb2 	bl	8005184 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fb87 	bl	8004d34 <UART_SetConfig>
 8004626:	4603      	mov	r3, r0
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e01b      	b.n	8004668 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800463e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800464e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 fe31 	bl	80052c8 <UART_CheckIdleState>
 8004666:	4603      	mov	r3, r0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b0ba      	sub	sp, #232	@ 0xe8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004696:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800469a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800469e:	4013      	ands	r3, r2
 80046a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80046a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d11b      	bne.n	80046e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80046ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d015      	beq.n	80046e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80046b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d105      	bne.n	80046d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80046c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d009      	beq.n	80046e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 8300 	beq.w	8004cda <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	4798      	blx	r3
      }
      return;
 80046e2:	e2fa      	b.n	8004cda <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80046e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 8123 	beq.w	8004934 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80046ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80046f2:	4b8d      	ldr	r3, [pc, #564]	@ (8004928 <HAL_UART_IRQHandler+0x2b8>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80046fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80046fe:	4b8b      	ldr	r3, [pc, #556]	@ (800492c <HAL_UART_IRQHandler+0x2bc>)
 8004700:	4013      	ands	r3, r2
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 8116 	beq.w	8004934 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d011      	beq.n	8004738 <HAL_UART_IRQHandler+0xc8>
 8004714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00b      	beq.n	8004738 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2201      	movs	r2, #1
 8004726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800472e:	f043 0201 	orr.w	r2, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d011      	beq.n	8004768 <HAL_UART_IRQHandler+0xf8>
 8004744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00b      	beq.n	8004768 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2202      	movs	r2, #2
 8004756:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800475e:	f043 0204 	orr.w	r2, r3, #4
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d011      	beq.n	8004798 <HAL_UART_IRQHandler+0x128>
 8004774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00b      	beq.n	8004798 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2204      	movs	r2, #4
 8004786:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800478e:	f043 0202 	orr.w	r2, r3, #2
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d017      	beq.n	80047d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80047a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d105      	bne.n	80047bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80047b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80047b4:	4b5c      	ldr	r3, [pc, #368]	@ (8004928 <HAL_UART_IRQHandler+0x2b8>)
 80047b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00b      	beq.n	80047d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2208      	movs	r2, #8
 80047c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ca:	f043 0208 	orr.w	r2, r3, #8
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d012      	beq.n	8004806 <HAL_UART_IRQHandler+0x196>
 80047e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00c      	beq.n	8004806 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fc:	f043 0220 	orr.w	r2, r3, #32
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 8266 	beq.w	8004cde <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004816:	f003 0320 	and.w	r3, r3, #32
 800481a:	2b00      	cmp	r3, #0
 800481c:	d013      	beq.n	8004846 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800481e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004822:	f003 0320 	and.w	r3, r3, #32
 8004826:	2b00      	cmp	r3, #0
 8004828:	d105      	bne.n	8004836 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800482a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800482e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d007      	beq.n	8004846 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800485a:	2b40      	cmp	r3, #64	@ 0x40
 800485c:	d005      	beq.n	800486a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800485e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004862:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004866:	2b00      	cmp	r3, #0
 8004868:	d054      	beq.n	8004914 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fe43 	bl	80054f6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800487a:	2b40      	cmp	r3, #64	@ 0x40
 800487c:	d146      	bne.n	800490c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3308      	adds	r3, #8
 8004884:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004894:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004898:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800489c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3308      	adds	r3, #8
 80048a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80048aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80048ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80048b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80048c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1d9      	bne.n	800487e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d017      	beq.n	8004904 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048da:	4a15      	ldr	r2, [pc, #84]	@ (8004930 <HAL_UART_IRQHandler+0x2c0>)
 80048dc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fd fc33 	bl	8002150 <HAL_DMA_Abort_IT>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d019      	beq.n	8004924 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80048fe:	4610      	mov	r0, r2
 8004900:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004902:	e00f      	b.n	8004924 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f9ff 	bl	8004d08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800490a:	e00b      	b.n	8004924 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f9fb 	bl	8004d08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004912:	e007      	b.n	8004924 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f9f7 	bl	8004d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004922:	e1dc      	b.n	8004cde <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004924:	bf00      	nop
    return;
 8004926:	e1da      	b.n	8004cde <HAL_UART_IRQHandler+0x66e>
 8004928:	10000001 	.word	0x10000001
 800492c:	04000120 	.word	0x04000120
 8004930:	080055c3 	.word	0x080055c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004938:	2b01      	cmp	r3, #1
 800493a:	f040 8170 	bne.w	8004c1e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800493e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004942:	f003 0310 	and.w	r3, r3, #16
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 8169 	beq.w	8004c1e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800494c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 8162 	beq.w	8004c1e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2210      	movs	r2, #16
 8004960:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800496c:	2b40      	cmp	r3, #64	@ 0x40
 800496e:	f040 80d8 	bne.w	8004b22 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004980:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 80af 	beq.w	8004ae8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004990:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004994:	429a      	cmp	r2, r3
 8004996:	f080 80a7 	bcs.w	8004ae8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80049a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f040 8087 	bne.w	8004ac6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80049cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80049d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	461a      	mov	r2, r3
 80049de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80049e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80049e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80049ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80049f2:	e841 2300 	strex	r3, r2, [r1]
 80049f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80049fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1da      	bne.n	80049b8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3308      	adds	r3, #8
 8004a08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a0c:	e853 3f00 	ldrex	r3, [r3]
 8004a10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004a12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a14:	f023 0301 	bic.w	r3, r3, #1
 8004a18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3308      	adds	r3, #8
 8004a22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a26:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004a2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004a2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004a32:	e841 2300 	strex	r3, r2, [r1]
 8004a36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004a38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e1      	bne.n	8004a02 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3308      	adds	r3, #8
 8004a44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a48:	e853 3f00 	ldrex	r3, [r3]
 8004a4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004a4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004a62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004a68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004a70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e3      	bne.n	8004a3e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a8c:	e853 3f00 	ldrex	r3, [r3]
 8004a90:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a94:	f023 0310 	bic.w	r3, r3, #16
 8004a98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004aa6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004aa8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aaa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004aac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004aae:	e841 2300 	strex	r3, r2, [r1]
 8004ab2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004ab4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1e4      	bne.n	8004a84 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fd fae6 	bl	8002092 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	4619      	mov	r1, r3
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f91b 	bl	8004d1c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004ae6:	e0fc      	b.n	8004ce2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004aee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004af2:	429a      	cmp	r2, r3
 8004af4:	f040 80f5 	bne.w	8004ce2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	f040 80eb 	bne.w	8004ce2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004b18:	4619      	mov	r1, r3
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f8fe 	bl	8004d1c <HAL_UARTEx_RxEventCallback>
      return;
 8004b20:	e0df      	b.n	8004ce2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 80d1 	beq.w	8004ce6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004b44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 80cc 	beq.w	8004ce6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b56:	e853 3f00 	ldrex	r3, [r3]
 8004b5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b70:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b78:	e841 2300 	strex	r3, r2, [r1]
 8004b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1e4      	bne.n	8004b4e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	3308      	adds	r3, #8
 8004b8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8e:	e853 3f00 	ldrex	r3, [r3]
 8004b92:	623b      	str	r3, [r7, #32]
   return(result);
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b9a:	f023 0301 	bic.w	r3, r3, #1
 8004b9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3308      	adds	r3, #8
 8004ba8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004bac:	633a      	str	r2, [r7, #48]	@ 0x30
 8004bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e1      	bne.n	8004b84 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	e853 3f00 	ldrex	r3, [r3]
 8004be0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f023 0310 	bic.w	r3, r3, #16
 8004be8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004bf6:	61fb      	str	r3, [r7, #28]
 8004bf8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfa:	69b9      	ldr	r1, [r7, #24]
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	e841 2300 	strex	r3, r2, [r1]
 8004c02:	617b      	str	r3, [r7, #20]
   return(result);
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1e4      	bne.n	8004bd4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c14:	4619      	mov	r1, r3
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f880 	bl	8004d1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c1c:	e063      	b.n	8004ce6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00e      	beq.n	8004c48 <HAL_UART_IRQHandler+0x5d8>
 8004c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d008      	beq.n	8004c48 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004c3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fcfb 	bl	800563c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c46:	e051      	b.n	8004cec <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d014      	beq.n	8004c7e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d105      	bne.n	8004c6c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d008      	beq.n	8004c7e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d03a      	beq.n	8004cea <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	4798      	blx	r3
    }
    return;
 8004c7c:	e035      	b.n	8004cea <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d009      	beq.n	8004c9e <HAL_UART_IRQHandler+0x62e>
 8004c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fca5 	bl	80055e6 <UART_EndTransmit_IT>
    return;
 8004c9c:	e026      	b.n	8004cec <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ca2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d009      	beq.n	8004cbe <HAL_UART_IRQHandler+0x64e>
 8004caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cae:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fcd4 	bl	8005664 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cbc:	e016      	b.n	8004cec <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cc2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d010      	beq.n	8004cec <HAL_UART_IRQHandler+0x67c>
 8004cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	da0c      	bge.n	8004cec <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fcbc 	bl	8005650 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cd8:	e008      	b.n	8004cec <HAL_UART_IRQHandler+0x67c>
      return;
 8004cda:	bf00      	nop
 8004cdc:	e006      	b.n	8004cec <HAL_UART_IRQHandler+0x67c>
    return;
 8004cde:	bf00      	nop
 8004ce0:	e004      	b.n	8004cec <HAL_UART_IRQHandler+0x67c>
      return;
 8004ce2:	bf00      	nop
 8004ce4:	e002      	b.n	8004cec <HAL_UART_IRQHandler+0x67c>
      return;
 8004ce6:	bf00      	nop
 8004ce8:	e000      	b.n	8004cec <HAL_UART_IRQHandler+0x67c>
    return;
 8004cea:	bf00      	nop
  }
}
 8004cec:	37e8      	adds	r7, #232	@ 0xe8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop

08004cf4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	460b      	mov	r3, r1
 8004d26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d38:	b08c      	sub	sp, #48	@ 0x30
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	431a      	orrs	r2, r3
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	4baf      	ldr	r3, [pc, #700]	@ (8005020 <UART_SetConfig+0x2ec>)
 8004d64:	4013      	ands	r3, r2
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	6812      	ldr	r2, [r2, #0]
 8004d6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	68da      	ldr	r2, [r3, #12]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4aa4      	ldr	r2, [pc, #656]	@ (8005024 <UART_SetConfig+0x2f0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d004      	beq.n	8004da0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004daa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	6812      	ldr	r2, [r2, #0]
 8004db2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004db4:	430b      	orrs	r3, r1
 8004db6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbe:	f023 010f 	bic.w	r1, r3, #15
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a95      	ldr	r2, [pc, #596]	@ (8005028 <UART_SetConfig+0x2f4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d125      	bne.n	8004e24 <UART_SetConfig+0xf0>
 8004dd8:	2003      	movs	r0, #3
 8004dda:	f7ff fbd9 	bl	8004590 <LL_RCC_GetUSARTClockSource>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b03      	cmp	r3, #3
 8004de2:	d81b      	bhi.n	8004e1c <UART_SetConfig+0xe8>
 8004de4:	a201      	add	r2, pc, #4	@ (adr r2, 8004dec <UART_SetConfig+0xb8>)
 8004de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dea:	bf00      	nop
 8004dec:	08004dfd 	.word	0x08004dfd
 8004df0:	08004e0d 	.word	0x08004e0d
 8004df4:	08004e05 	.word	0x08004e05
 8004df8:	08004e15 	.word	0x08004e15
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e02:	e042      	b.n	8004e8a <UART_SetConfig+0x156>
 8004e04:	2302      	movs	r3, #2
 8004e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e0a:	e03e      	b.n	8004e8a <UART_SetConfig+0x156>
 8004e0c:	2304      	movs	r3, #4
 8004e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e12:	e03a      	b.n	8004e8a <UART_SetConfig+0x156>
 8004e14:	2308      	movs	r3, #8
 8004e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e1a:	e036      	b.n	8004e8a <UART_SetConfig+0x156>
 8004e1c:	2310      	movs	r3, #16
 8004e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e22:	e032      	b.n	8004e8a <UART_SetConfig+0x156>
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a7e      	ldr	r2, [pc, #504]	@ (8005024 <UART_SetConfig+0x2f0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d12a      	bne.n	8004e84 <UART_SetConfig+0x150>
 8004e2e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004e32:	f7ff fbbd 	bl	80045b0 <LL_RCC_GetLPUARTClockSource>
 8004e36:	4603      	mov	r3, r0
 8004e38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e3c:	d01a      	beq.n	8004e74 <UART_SetConfig+0x140>
 8004e3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e42:	d81b      	bhi.n	8004e7c <UART_SetConfig+0x148>
 8004e44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e48:	d00c      	beq.n	8004e64 <UART_SetConfig+0x130>
 8004e4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e4e:	d815      	bhi.n	8004e7c <UART_SetConfig+0x148>
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <UART_SetConfig+0x128>
 8004e54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e58:	d008      	beq.n	8004e6c <UART_SetConfig+0x138>
 8004e5a:	e00f      	b.n	8004e7c <UART_SetConfig+0x148>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e62:	e012      	b.n	8004e8a <UART_SetConfig+0x156>
 8004e64:	2302      	movs	r3, #2
 8004e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e6a:	e00e      	b.n	8004e8a <UART_SetConfig+0x156>
 8004e6c:	2304      	movs	r3, #4
 8004e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e72:	e00a      	b.n	8004e8a <UART_SetConfig+0x156>
 8004e74:	2308      	movs	r3, #8
 8004e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e7a:	e006      	b.n	8004e8a <UART_SetConfig+0x156>
 8004e7c:	2310      	movs	r3, #16
 8004e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e82:	e002      	b.n	8004e8a <UART_SetConfig+0x156>
 8004e84:	2310      	movs	r3, #16
 8004e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a65      	ldr	r2, [pc, #404]	@ (8005024 <UART_SetConfig+0x2f0>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	f040 8097 	bne.w	8004fc4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d823      	bhi.n	8004ee6 <UART_SetConfig+0x1b2>
 8004e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea4 <UART_SetConfig+0x170>)
 8004ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea4:	08004ec9 	.word	0x08004ec9
 8004ea8:	08004ee7 	.word	0x08004ee7
 8004eac:	08004ed1 	.word	0x08004ed1
 8004eb0:	08004ee7 	.word	0x08004ee7
 8004eb4:	08004ed7 	.word	0x08004ed7
 8004eb8:	08004ee7 	.word	0x08004ee7
 8004ebc:	08004ee7 	.word	0x08004ee7
 8004ec0:	08004ee7 	.word	0x08004ee7
 8004ec4:	08004edf 	.word	0x08004edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ec8:	f7fe fc84 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8004ecc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ece:	e010      	b.n	8004ef2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ed0:	4b56      	ldr	r3, [pc, #344]	@ (800502c <UART_SetConfig+0x2f8>)
 8004ed2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ed4:	e00d      	b.n	8004ef2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ed6:	f7fe fbfd 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8004eda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004edc:	e009      	b.n	8004ef2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ede:	f248 0306 	movw	r3, #32774	@ 0x8006
 8004ee2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ee4:	e005      	b.n	8004ef2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004ef0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 812b 	beq.w	8005150 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efe:	4a4c      	ldr	r2, [pc, #304]	@ (8005030 <UART_SetConfig+0x2fc>)
 8004f00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f04:	461a      	mov	r2, r3
 8004f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f08:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f0c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	4413      	add	r3, r2
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d305      	bcc.n	8004f2a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d903      	bls.n	8004f32 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004f30:	e10e      	b.n	8005150 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f34:	2200      	movs	r2, #0
 8004f36:	60bb      	str	r3, [r7, #8]
 8004f38:	60fa      	str	r2, [r7, #12]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3e:	4a3c      	ldr	r2, [pc, #240]	@ (8005030 <UART_SetConfig+0x2fc>)
 8004f40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	2200      	movs	r2, #0
 8004f48:	603b      	str	r3, [r7, #0]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f54:	f7fb f91a 	bl	800018c <__aeabi_uldivmod>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	4619      	mov	r1, r3
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	020b      	lsls	r3, r1, #8
 8004f6a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f6e:	0202      	lsls	r2, r0, #8
 8004f70:	6979      	ldr	r1, [r7, #20]
 8004f72:	6849      	ldr	r1, [r1, #4]
 8004f74:	0849      	lsrs	r1, r1, #1
 8004f76:	2000      	movs	r0, #0
 8004f78:	460c      	mov	r4, r1
 8004f7a:	4605      	mov	r5, r0
 8004f7c:	eb12 0804 	adds.w	r8, r2, r4
 8004f80:	eb43 0905 	adc.w	r9, r3, r5
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	469a      	mov	sl, r3
 8004f8c:	4693      	mov	fp, r2
 8004f8e:	4652      	mov	r2, sl
 8004f90:	465b      	mov	r3, fp
 8004f92:	4640      	mov	r0, r8
 8004f94:	4649      	mov	r1, r9
 8004f96:	f7fb f8f9 	bl	800018c <__aeabi_uldivmod>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fa8:	d308      	bcc.n	8004fbc <UART_SetConfig+0x288>
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fb0:	d204      	bcs.n	8004fbc <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6a3a      	ldr	r2, [r7, #32]
 8004fb8:	60da      	str	r2, [r3, #12]
 8004fba:	e0c9      	b.n	8005150 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004fc2:	e0c5      	b.n	8005150 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fcc:	d16d      	bne.n	80050aa <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004fce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	2b07      	cmp	r3, #7
 8004fd6:	d82d      	bhi.n	8005034 <UART_SetConfig+0x300>
 8004fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe0 <UART_SetConfig+0x2ac>)
 8004fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fde:	bf00      	nop
 8004fe0:	08005001 	.word	0x08005001
 8004fe4:	08005009 	.word	0x08005009
 8004fe8:	08005035 	.word	0x08005035
 8004fec:	0800500f 	.word	0x0800500f
 8004ff0:	08005035 	.word	0x08005035
 8004ff4:	08005035 	.word	0x08005035
 8004ff8:	08005035 	.word	0x08005035
 8004ffc:	08005017 	.word	0x08005017
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005000:	f7fe fbfe 	bl	8003800 <HAL_RCC_GetPCLK2Freq>
 8005004:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005006:	e01b      	b.n	8005040 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005008:	4b08      	ldr	r3, [pc, #32]	@ (800502c <UART_SetConfig+0x2f8>)
 800500a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800500c:	e018      	b.n	8005040 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800500e:	f7fe fb61 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8005012:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005014:	e014      	b.n	8005040 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005016:	f248 0306 	movw	r3, #32774	@ 0x8006
 800501a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800501c:	e010      	b.n	8005040 <UART_SetConfig+0x30c>
 800501e:	bf00      	nop
 8005020:	cfff69f3 	.word	0xcfff69f3
 8005024:	40008000 	.word	0x40008000
 8005028:	40013800 	.word	0x40013800
 800502c:	00f42400 	.word	0x00f42400
 8005030:	08009a70 	.word	0x08009a70
      default:
        pclk = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800503e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 8084 	beq.w	8005150 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504c:	4a4b      	ldr	r2, [pc, #300]	@ (800517c <UART_SetConfig+0x448>)
 800504e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005052:	461a      	mov	r2, r3
 8005054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005056:	fbb3 f3f2 	udiv	r3, r3, r2
 800505a:	005a      	lsls	r2, r3, #1
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	085b      	lsrs	r3, r3, #1
 8005062:	441a      	add	r2, r3
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	fbb2 f3f3 	udiv	r3, r2, r3
 800506c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	2b0f      	cmp	r3, #15
 8005072:	d916      	bls.n	80050a2 <UART_SetConfig+0x36e>
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800507a:	d212      	bcs.n	80050a2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	b29b      	uxth	r3, r3
 8005080:	f023 030f 	bic.w	r3, r3, #15
 8005084:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	085b      	lsrs	r3, r3, #1
 800508a:	b29b      	uxth	r3, r3
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	b29a      	uxth	r2, r3
 8005092:	8bfb      	ldrh	r3, [r7, #30]
 8005094:	4313      	orrs	r3, r2
 8005096:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	8bfa      	ldrh	r2, [r7, #30]
 800509e:	60da      	str	r2, [r3, #12]
 80050a0:	e056      	b.n	8005150 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80050a8:	e052      	b.n	8005150 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80050ae:	3b01      	subs	r3, #1
 80050b0:	2b07      	cmp	r3, #7
 80050b2:	d822      	bhi.n	80050fa <UART_SetConfig+0x3c6>
 80050b4:	a201      	add	r2, pc, #4	@ (adr r2, 80050bc <UART_SetConfig+0x388>)
 80050b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ba:	bf00      	nop
 80050bc:	080050dd 	.word	0x080050dd
 80050c0:	080050e5 	.word	0x080050e5
 80050c4:	080050fb 	.word	0x080050fb
 80050c8:	080050eb 	.word	0x080050eb
 80050cc:	080050fb 	.word	0x080050fb
 80050d0:	080050fb 	.word	0x080050fb
 80050d4:	080050fb 	.word	0x080050fb
 80050d8:	080050f3 	.word	0x080050f3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050dc:	f7fe fb90 	bl	8003800 <HAL_RCC_GetPCLK2Freq>
 80050e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050e2:	e010      	b.n	8005106 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050e4:	4b26      	ldr	r3, [pc, #152]	@ (8005180 <UART_SetConfig+0x44c>)
 80050e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050e8:	e00d      	b.n	8005106 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ea:	f7fe faf3 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 80050ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050f0:	e009      	b.n	8005106 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050f2:	f248 0306 	movw	r3, #32774	@ 0x8006
 80050f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050f8:	e005      	b.n	8005106 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005104:	bf00      	nop
    }

    if (pclk != 0U)
 8005106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005108:	2b00      	cmp	r3, #0
 800510a:	d021      	beq.n	8005150 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005110:	4a1a      	ldr	r2, [pc, #104]	@ (800517c <UART_SetConfig+0x448>)
 8005112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005116:	461a      	mov	r2, r3
 8005118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511a:	fbb3 f2f2 	udiv	r2, r3, r2
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	085b      	lsrs	r3, r3, #1
 8005124:	441a      	add	r2, r3
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	fbb2 f3f3 	udiv	r3, r2, r3
 800512e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	2b0f      	cmp	r3, #15
 8005134:	d909      	bls.n	800514a <UART_SetConfig+0x416>
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800513c:	d205      	bcs.n	800514a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	b29a      	uxth	r2, r3
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60da      	str	r2, [r3, #12]
 8005148:	e002      	b.n	8005150 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2201      	movs	r2, #1
 8005154:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2201      	movs	r2, #1
 800515c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	2200      	movs	r2, #0
 8005164:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2200      	movs	r2, #0
 800516a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800516c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005170:	4618      	mov	r0, r3
 8005172:	3730      	adds	r7, #48	@ 0x30
 8005174:	46bd      	mov	sp, r7
 8005176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800517a:	bf00      	nop
 800517c:	08009a70 	.word	0x08009a70
 8005180:	00f42400 	.word	0x00f42400

08005184 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005190:	f003 0308 	and.w	r3, r3, #8
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f6:	f003 0304 	and.w	r3, r3, #4
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005218:	f003 0310 	and.w	r3, r3, #16
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005260:	2b00      	cmp	r3, #0
 8005262:	d01a      	beq.n	800529a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005282:	d10a      	bne.n	800529a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	605a      	str	r2, [r3, #4]
  }
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b098      	sub	sp, #96	@ 0x60
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052d8:	f7fc fd2a 	bl	8001d30 <HAL_GetTick>
 80052dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0308 	and.w	r3, r3, #8
 80052e8:	2b08      	cmp	r3, #8
 80052ea:	d12f      	bne.n	800534c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052f4:	2200      	movs	r2, #0
 80052f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f88e 	bl	800541c <UART_WaitOnFlagUntilTimeout>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d022      	beq.n	800534c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530e:	e853 3f00 	ldrex	r3, [r3]
 8005312:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005316:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800531a:	653b      	str	r3, [r7, #80]	@ 0x50
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	461a      	mov	r2, r3
 8005322:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005324:	647b      	str	r3, [r7, #68]	@ 0x44
 8005326:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005328:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800532a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800532c:	e841 2300 	strex	r3, r2, [r1]
 8005330:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1e6      	bne.n	8005306 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2220      	movs	r2, #32
 800533c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e063      	b.n	8005414 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0304 	and.w	r3, r3, #4
 8005356:	2b04      	cmp	r3, #4
 8005358:	d149      	bne.n	80053ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800535a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005362:	2200      	movs	r2, #0
 8005364:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f857 	bl	800541c <UART_WaitOnFlagUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d03c      	beq.n	80053ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	623b      	str	r3, [r7, #32]
   return(result);
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005388:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005392:	633b      	str	r3, [r7, #48]	@ 0x30
 8005394:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005396:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005398:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800539a:	e841 2300 	strex	r3, r2, [r1]
 800539e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1e6      	bne.n	8005374 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3308      	adds	r3, #8
 80053ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	e853 3f00 	ldrex	r3, [r3]
 80053b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f023 0301 	bic.w	r3, r3, #1
 80053bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3308      	adds	r3, #8
 80053c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053c6:	61fa      	str	r2, [r7, #28]
 80053c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ca:	69b9      	ldr	r1, [r7, #24]
 80053cc:	69fa      	ldr	r2, [r7, #28]
 80053ce:	e841 2300 	strex	r3, r2, [r1]
 80053d2:	617b      	str	r3, [r7, #20]
   return(result);
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1e5      	bne.n	80053a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2220      	movs	r2, #32
 80053de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e012      	b.n	8005414 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2220      	movs	r2, #32
 80053f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3758      	adds	r7, #88	@ 0x58
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	603b      	str	r3, [r7, #0]
 8005428:	4613      	mov	r3, r2
 800542a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800542c:	e04f      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005434:	d04b      	beq.n	80054ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005436:	f7fc fc7b 	bl	8001d30 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	429a      	cmp	r2, r3
 8005444:	d302      	bcc.n	800544c <UART_WaitOnFlagUntilTimeout+0x30>
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e04e      	b.n	80054ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b00      	cmp	r3, #0
 800545c:	d037      	beq.n	80054ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2b80      	cmp	r3, #128	@ 0x80
 8005462:	d034      	beq.n	80054ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2b40      	cmp	r3, #64	@ 0x40
 8005468:	d031      	beq.n	80054ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b08      	cmp	r3, #8
 8005476:	d110      	bne.n	800549a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2208      	movs	r2, #8
 800547e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 f838 	bl	80054f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2208      	movs	r2, #8
 800548a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e029      	b.n	80054ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69db      	ldr	r3, [r3, #28]
 80054a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054a8:	d111      	bne.n	80054ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 f81e 	bl	80054f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2220      	movs	r2, #32
 80054be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e00f      	b.n	80054ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	69da      	ldr	r2, [r3, #28]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	4013      	ands	r3, r2
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	429a      	cmp	r2, r3
 80054dc:	bf0c      	ite	eq
 80054de:	2301      	moveq	r3, #1
 80054e0:	2300      	movne	r3, #0
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	461a      	mov	r2, r3
 80054e6:	79fb      	ldrb	r3, [r7, #7]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d0a0      	beq.n	800542e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b095      	sub	sp, #84	@ 0x54
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005506:	e853 3f00 	ldrex	r3, [r3]
 800550a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800550c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005512:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	461a      	mov	r2, r3
 800551a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800551c:	643b      	str	r3, [r7, #64]	@ 0x40
 800551e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005520:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005522:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005524:	e841 2300 	strex	r3, r2, [r1]
 8005528:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800552a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1e6      	bne.n	80054fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3308      	adds	r3, #8
 8005536:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	e853 3f00 	ldrex	r3, [r3]
 800553e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005546:	f023 0301 	bic.w	r3, r3, #1
 800554a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	3308      	adds	r3, #8
 8005552:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005554:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005556:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005558:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800555a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800555c:	e841 2300 	strex	r3, r2, [r1]
 8005560:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1e3      	bne.n	8005530 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800556c:	2b01      	cmp	r3, #1
 800556e:	d118      	bne.n	80055a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	60bb      	str	r3, [r7, #8]
   return(result);
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	f023 0310 	bic.w	r3, r3, #16
 8005584:	647b      	str	r3, [r7, #68]	@ 0x44
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800558e:	61bb      	str	r3, [r7, #24]
 8005590:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	6979      	ldr	r1, [r7, #20]
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	613b      	str	r3, [r7, #16]
   return(result);
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e6      	bne.n	8005570 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80055b6:	bf00      	nop
 80055b8:	3754      	adds	r7, #84	@ 0x54
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b084      	sub	sp, #16
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f7ff fb95 	bl	8004d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055de:	bf00      	nop
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b088      	sub	sp, #32
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	e853 3f00 	ldrex	r3, [r3]
 80055fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005602:	61fb      	str	r3, [r7, #28]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	61bb      	str	r3, [r7, #24]
 800560e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	6979      	ldr	r1, [r7, #20]
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	e841 2300 	strex	r3, r2, [r1]
 8005618:	613b      	str	r3, [r7, #16]
   return(result);
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1e6      	bne.n	80055ee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7ff fb60 	bl	8004cf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005634:	bf00      	nop
 8005636:	3720      	adds	r7, #32
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005686:	2b01      	cmp	r3, #1
 8005688:	d101      	bne.n	800568e <HAL_UARTEx_DisableFifoMode+0x16>
 800568a:	2302      	movs	r3, #2
 800568c:	e027      	b.n	80056de <HAL_UARTEx_DisableFifoMode+0x66>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2224      	movs	r2, #36	@ 0x24
 800569a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0201 	bic.w	r2, r2, #1
 80056b4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80056bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b084      	sub	sp, #16
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
 80056f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d101      	bne.n	8005702 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80056fe:	2302      	movs	r3, #2
 8005700:	e02d      	b.n	800575e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2224      	movs	r2, #36	@ 0x24
 800570e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0201 	bic.w	r2, r2, #1
 8005728:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f850 	bl	80057e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b084      	sub	sp, #16
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005776:	2b01      	cmp	r3, #1
 8005778:	d101      	bne.n	800577e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800577a:	2302      	movs	r3, #2
 800577c:	e02d      	b.n	80057da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2224      	movs	r2, #36	@ 0x24
 800578a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0201 	bic.w	r2, r2, #1
 80057a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f812 	bl	80057e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
	...

080057e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d108      	bne.n	8005806 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005804:	e031      	b.n	800586a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005806:	2308      	movs	r3, #8
 8005808:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800580a:	2308      	movs	r3, #8
 800580c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	0e5b      	lsrs	r3, r3, #25
 8005816:	b2db      	uxtb	r3, r3
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	0f5b      	lsrs	r3, r3, #29
 8005826:	b2db      	uxtb	r3, r3
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800582e:	7bbb      	ldrb	r3, [r7, #14]
 8005830:	7b3a      	ldrb	r2, [r7, #12]
 8005832:	4911      	ldr	r1, [pc, #68]	@ (8005878 <UARTEx_SetNbDataToProcess+0x94>)
 8005834:	5c8a      	ldrb	r2, [r1, r2]
 8005836:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800583a:	7b3a      	ldrb	r2, [r7, #12]
 800583c:	490f      	ldr	r1, [pc, #60]	@ (800587c <UARTEx_SetNbDataToProcess+0x98>)
 800583e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005840:	fb93 f3f2 	sdiv	r3, r3, r2
 8005844:	b29a      	uxth	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	7b7a      	ldrb	r2, [r7, #13]
 8005850:	4909      	ldr	r1, [pc, #36]	@ (8005878 <UARTEx_SetNbDataToProcess+0x94>)
 8005852:	5c8a      	ldrb	r2, [r1, r2]
 8005854:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005858:	7b7a      	ldrb	r2, [r7, #13]
 800585a:	4908      	ldr	r1, [pc, #32]	@ (800587c <UARTEx_SetNbDataToProcess+0x98>)
 800585c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800585e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005862:	b29a      	uxth	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800586a:	bf00      	nop
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	08009a88 	.word	0x08009a88
 800587c:	08009a90 	.word	0x08009a90

08005880 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005886:	2300      	movs	r3, #0
 8005888:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800588a:	f107 0308 	add.w	r3, r7, #8
 800588e:	2218      	movs	r2, #24
 8005890:	2100      	movs	r1, #0
 8005892:	4618      	mov	r0, r3
 8005894:	f001 f92d 	bl	8006af2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005898:	233f      	movs	r3, #63	@ 0x3f
 800589a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800589c:	2381      	movs	r3, #129	@ 0x81
 800589e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80058a0:	1dfb      	adds	r3, r7, #7
 80058a2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80058a4:	2301      	movs	r3, #1
 80058a6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80058a8:	f107 0308 	add.w	r3, r7, #8
 80058ac:	2100      	movs	r1, #0
 80058ae:	4618      	mov	r0, r3
 80058b0:	f001 fba8 	bl	8007004 <hci_send_req>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	da01      	bge.n	80058be <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80058ba:	23ff      	movs	r3, #255	@ 0xff
 80058bc:	e000      	b.n	80058c0 <aci_gap_set_non_discoverable+0x40>
  return status;
 80058be:	79fb      	ldrb	r3, [r7, #7]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3720      	adds	r7, #32
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80058c8:	b5b0      	push	{r4, r5, r7, lr}
 80058ca:	b0ce      	sub	sp, #312	@ 0x138
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	4605      	mov	r5, r0
 80058d0:	460c      	mov	r4, r1
 80058d2:	4610      	mov	r0, r2
 80058d4:	4619      	mov	r1, r3
 80058d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80058da:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80058de:	462a      	mov	r2, r5
 80058e0:	701a      	strb	r2, [r3, #0]
 80058e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80058e6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80058ea:	4622      	mov	r2, r4
 80058ec:	801a      	strh	r2, [r3, #0]
 80058ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80058f2:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80058f6:	4602      	mov	r2, r0
 80058f8:	801a      	strh	r2, [r3, #0]
 80058fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80058fe:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8005902:	460a      	mov	r2, r1
 8005904:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8005906:	f107 0310 	add.w	r3, r7, #16
 800590a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800590e:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8005912:	3308      	adds	r3, #8
 8005914:	f107 0210 	add.w	r2, r7, #16
 8005918:	4413      	add	r3, r2
 800591a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800591e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8005922:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8005926:	4413      	add	r3, r2
 8005928:	3309      	adds	r3, #9
 800592a:	f107 0210 	add.w	r2, r7, #16
 800592e:	4413      	add	r3, r2
 8005930:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005934:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005938:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800593c:	2200      	movs	r2, #0
 800593e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005940:	2300      	movs	r3, #0
 8005942:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8005946:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800594a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800594e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8005952:	7812      	ldrb	r2, [r2, #0]
 8005954:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005956:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800595a:	3301      	adds	r3, #1
 800595c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8005960:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005964:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005968:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800596c:	8812      	ldrh	r2, [r2, #0]
 800596e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8005972:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005976:	3302      	adds	r3, #2
 8005978:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800597c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005980:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005984:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8005988:	8812      	ldrh	r2, [r2, #0]
 800598a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800598e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005992:	3302      	adds	r3, #2
 8005994:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8005998:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800599c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80059a0:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80059a4:	7812      	ldrb	r2, [r2, #0]
 80059a6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80059a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80059ac:	3301      	adds	r3, #1
 80059ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80059b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80059b6:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80059ba:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80059bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80059c0:	3301      	adds	r3, #1
 80059c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80059c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80059ca:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80059ce:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80059d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80059d4:	3301      	adds	r3, #1
 80059d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80059da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80059de:	3308      	adds	r3, #8
 80059e0:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80059e4:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80059e8:	4618      	mov	r0, r3
 80059ea:	f001 f872 	bl	8006ad2 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80059ee:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80059f2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80059f6:	4413      	add	r3, r2
 80059f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80059fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005a00:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005a04:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005a06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8005a10:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005a14:	3301      	adds	r3, #1
 8005a16:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005a1a:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f001 f857 	bl	8006ad2 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8005a24:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8005a28:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8005a32:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005a36:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8005a3a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005a3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a40:	3302      	adds	r3, #2
 8005a42:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8005a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005a4a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8005a4e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8005a50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a54:	3302      	adds	r3, #2
 8005a56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005a5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a5e:	2218      	movs	r2, #24
 8005a60:	2100      	movs	r1, #0
 8005a62:	4618      	mov	r0, r3
 8005a64:	f001 f845 	bl	8006af2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005a68:	233f      	movs	r3, #63	@ 0x3f
 8005a6a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8005a6e:	2383      	movs	r3, #131	@ 0x83
 8005a70:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005a74:	f107 0310 	add.w	r3, r7, #16
 8005a78:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005a7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a80:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005a84:	f107 030f 	add.w	r3, r7, #15
 8005a88:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005a92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a96:	2100      	movs	r1, #0
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f001 fab3 	bl	8007004 <hci_send_req>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	da01      	bge.n	8005aa8 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8005aa4:	23ff      	movs	r3, #255	@ 0xff
 8005aa6:	e004      	b.n	8005ab2 <aci_gap_set_discoverable+0x1ea>
  return status;
 8005aa8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005aac:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005ab0:	781b      	ldrb	r3, [r3, #0]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bdb0      	pop	{r4, r5, r7, pc}

08005abc <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b0cc      	sub	sp, #304	@ 0x130
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ac8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005acc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8005ace:	f107 0310 	add.w	r3, r7, #16
 8005ad2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005ad6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ada:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005ade:	2200      	movs	r2, #0
 8005ae0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8005ae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005aec:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005af0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005af4:	7812      	ldrb	r2, [r2, #0]
 8005af6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005af8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005afc:	3301      	adds	r3, #1
 8005afe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005b02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005b06:	2218      	movs	r2, #24
 8005b08:	2100      	movs	r1, #0
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fff1 	bl	8006af2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005b10:	233f      	movs	r3, #63	@ 0x3f
 8005b12:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8005b16:	2385      	movs	r3, #133	@ 0x85
 8005b18:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005b1c:	f107 0310 	add.w	r3, r7, #16
 8005b20:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005b24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b28:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005b2c:	f107 030f 	add.w	r3, r7, #15
 8005b30:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005b34:	2301      	movs	r3, #1
 8005b36:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005b3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005b3e:	2100      	movs	r1, #0
 8005b40:	4618      	mov	r0, r3
 8005b42:	f001 fa5f 	bl	8007004 <hci_send_req>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	da01      	bge.n	8005b50 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8005b4c:	23ff      	movs	r3, #255	@ 0xff
 8005b4e:	e004      	b.n	8005b5a <aci_gap_set_io_capability+0x9e>
  return status;
 8005b50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b54:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005b58:	781b      	ldrb	r3, [r3, #0]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8005b64:	b5b0      	push	{r4, r5, r7, lr}
 8005b66:	b0cc      	sub	sp, #304	@ 0x130
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	4605      	mov	r5, r0
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	4610      	mov	r0, r2
 8005b70:	4619      	mov	r1, r3
 8005b72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b76:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005b7a:	462a      	mov	r2, r5
 8005b7c:	701a      	strb	r2, [r3, #0]
 8005b7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b82:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005b86:	4622      	mov	r2, r4
 8005b88:	701a      	strb	r2, [r3, #0]
 8005b8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b8e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005b92:	4602      	mov	r2, r0
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005b9e:	460a      	mov	r2, r1
 8005ba0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8005ba2:	f107 0310 	add.w	r3, r7, #16
 8005ba6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005baa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005bae:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8005bbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005bc0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005bc4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005bc8:	7812      	ldrb	r2, [r2, #0]
 8005bca:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005bcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8005bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005bda:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005bde:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005be2:	7812      	ldrb	r2, [r2, #0]
 8005be4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005be6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005bea:	3301      	adds	r3, #1
 8005bec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8005bf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005bf4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005bf8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005bfc:	7812      	ldrb	r2, [r2, #0]
 8005bfe:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005c00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c04:	3301      	adds	r3, #1
 8005c06:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8005c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c0e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005c12:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8005c16:	7812      	ldrb	r2, [r2, #0]
 8005c18:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8005c1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c1e:	3301      	adds	r3, #1
 8005c20:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8005c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c28:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8005c2c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005c2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c32:	3301      	adds	r3, #1
 8005c34:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8005c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c3c:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8005c40:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005c42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c46:	3301      	adds	r3, #1
 8005c48:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8005c4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c50:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8005c54:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005c56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8005c60:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c64:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8005c68:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8005c6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c70:	3304      	adds	r3, #4
 8005c72:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8005c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c7a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8005c7e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005c80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c84:	3301      	adds	r3, #1
 8005c86:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005c8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005c8e:	2218      	movs	r2, #24
 8005c90:	2100      	movs	r1, #0
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 ff2d 	bl	8006af2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005c98:	233f      	movs	r3, #63	@ 0x3f
 8005c9a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8005c9e:	2386      	movs	r3, #134	@ 0x86
 8005ca0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005ca4:	f107 0310 	add.w	r3, r7, #16
 8005ca8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005cac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005cb0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005cb4:	f107 030f 	add.w	r3, r7, #15
 8005cb8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005cc2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f001 f99b 	bl	8007004 <hci_send_req>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	da01      	bge.n	8005cd8 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8005cd4:	23ff      	movs	r3, #255	@ 0xff
 8005cd6:	e004      	b.n	8005ce2 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8005cd8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005cdc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005ce0:	781b      	ldrb	r3, [r3, #0]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bdb0      	pop	{r4, r5, r7, pc}

08005cec <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b0cc      	sub	sp, #304	@ 0x130
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005cf8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005cfc:	6019      	str	r1, [r3, #0]
 8005cfe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d02:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005d06:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8005d08:	f107 0310 	add.w	r3, r7, #16
 8005d0c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005d10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d14:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005d18:	2200      	movs	r2, #0
 8005d1a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005d22:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d26:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005d2a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005d2e:	8812      	ldrh	r2, [r2, #0]
 8005d30:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005d32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d36:	3302      	adds	r3, #2
 8005d38:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8005d3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d40:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005d44:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8005d48:	6812      	ldr	r2, [r2, #0]
 8005d4a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8005d4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d52:	3304      	adds	r3, #4
 8005d54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005d58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005d5c:	2218      	movs	r2, #24
 8005d5e:	2100      	movs	r1, #0
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 fec6 	bl	8006af2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005d66:	233f      	movs	r3, #63	@ 0x3f
 8005d68:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8005d6c:	2388      	movs	r3, #136	@ 0x88
 8005d6e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005d72:	f107 0310 	add.w	r3, r7, #16
 8005d76:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005d7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d7e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005d82:	f107 030f 	add.w	r3, r7, #15
 8005d86:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005d90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005d94:	2100      	movs	r1, #0
 8005d96:	4618      	mov	r0, r3
 8005d98:	f001 f934 	bl	8007004 <hci_send_req>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	da01      	bge.n	8005da6 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8005da2:	23ff      	movs	r3, #255	@ 0xff
 8005da4:	e004      	b.n	8005db0 <aci_gap_pass_key_resp+0xc4>
  return status;
 8005da6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005daa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005dae:	781b      	ldrb	r3, [r3, #0]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8005dba:	b590      	push	{r4, r7, lr}
 8005dbc:	b0cd      	sub	sp, #308	@ 0x134
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	4608      	mov	r0, r1
 8005dc4:	4611      	mov	r1, r2
 8005dc6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005dca:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005dd4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005dd8:	4622      	mov	r2, r4
 8005dda:	701a      	strb	r2, [r3, #0]
 8005ddc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005de0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005de4:	4602      	mov	r2, r0
 8005de6:	701a      	strb	r2, [r3, #0]
 8005de8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005dec:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005df0:	460a      	mov	r2, r1
 8005df2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8005df4:	f107 0310 	add.w	r3, r7, #16
 8005df8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005dfc:	f107 0308 	add.w	r3, r7, #8
 8005e00:	2207      	movs	r2, #7
 8005e02:	2100      	movs	r1, #0
 8005e04:	4618      	mov	r0, r3
 8005e06:	f000 fe74 	bl	8006af2 <Osal_MemSet>
  int index_input = 0;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8005e10:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005e14:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005e18:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005e1c:	7812      	ldrb	r2, [r2, #0]
 8005e1e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005e20:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e24:	3301      	adds	r3, #1
 8005e26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8005e2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005e2e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005e32:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005e36:	7812      	ldrb	r2, [r2, #0]
 8005e38:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005e3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e3e:	3301      	adds	r3, #1
 8005e40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8005e44:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005e48:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005e4c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005e50:	7812      	ldrb	r2, [r2, #0]
 8005e52:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005e54:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e58:	3301      	adds	r3, #1
 8005e5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005e5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005e62:	2218      	movs	r2, #24
 8005e64:	2100      	movs	r1, #0
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fe43 	bl	8006af2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005e6c:	233f      	movs	r3, #63	@ 0x3f
 8005e6e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8005e72:	238a      	movs	r3, #138	@ 0x8a
 8005e74:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005e78:	f107 0310 	add.w	r3, r7, #16
 8005e7c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005e80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e84:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8005e88:	f107 0308 	add.w	r3, r7, #8
 8005e8c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8005e90:	2307      	movs	r3, #7
 8005e92:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005e96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f001 f8b1 	bl	8007004 <hci_send_req>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	da01      	bge.n	8005eac <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8005ea8:	23ff      	movs	r3, #255	@ 0xff
 8005eaa:	e02e      	b.n	8005f0a <aci_gap_init+0x150>
  if ( resp.Status )
 8005eac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005eb0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d005      	beq.n	8005ec6 <aci_gap_init+0x10c>
    return resp.Status;
 8005eba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ebe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	e021      	b.n	8005f0a <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8005ec6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005eca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005ece:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ed8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8005ee0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ee4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005ee8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8005ef2:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8005ef4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ef8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005efc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005f06:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd90      	pop	{r4, r7, pc}

08005f14 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b0cc      	sub	sp, #304	@ 0x130
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f20:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005f24:	6019      	str	r1, [r3, #0]
 8005f26:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f2a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005f2e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8005f30:	f107 0310 	add.w	r3, r7, #16
 8005f34:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005f38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f3c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005f40:	2200      	movs	r2, #0
 8005f42:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005f44:	2300      	movs	r3, #0
 8005f46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8005f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f4e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005f52:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005f56:	7812      	ldrb	r2, [r2, #0]
 8005f58:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005f5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f5e:	3301      	adds	r3, #1
 8005f60:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8005f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f68:	1c58      	adds	r0, r3, #1
 8005f6a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f6e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005f72:	781a      	ldrb	r2, [r3, #0]
 8005f74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f78:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005f7c:	6819      	ldr	r1, [r3, #0]
 8005f7e:	f000 fda8 	bl	8006ad2 <Osal_MemCpy>
  index_input += AdvDataLen;
 8005f82:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f86:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005f90:	4413      	add	r3, r2
 8005f92:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005f96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005f9a:	2218      	movs	r2, #24
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f000 fda7 	bl	8006af2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005fa4:	233f      	movs	r3, #63	@ 0x3f
 8005fa6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8005faa:	238e      	movs	r3, #142	@ 0x8e
 8005fac:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005fb0:	f107 0310 	add.w	r3, r7, #16
 8005fb4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005fb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005fbc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005fc0:	f107 030f 	add.w	r3, r7, #15
 8005fc4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005fce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f001 f815 	bl	8007004 <hci_send_req>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	da01      	bge.n	8005fe4 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8005fe0:	23ff      	movs	r3, #255	@ 0xff
 8005fe2:	e004      	b.n	8005fee <aci_gap_update_adv_data+0xda>
  return status;
 8005fe4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005fe8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005fec:	781b      	ldrb	r3, [r3, #0]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b088      	sub	sp, #32
 8005ffc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006002:	f107 0308 	add.w	r3, r7, #8
 8006006:	2218      	movs	r2, #24
 8006008:	2100      	movs	r1, #0
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fd71 	bl	8006af2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006010:	233f      	movs	r3, #63	@ 0x3f
 8006012:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8006014:	2392      	movs	r3, #146	@ 0x92
 8006016:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006018:	1dfb      	adds	r3, r7, #7
 800601a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800601c:	2301      	movs	r3, #1
 800601e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006020:	f107 0308 	add.w	r3, r7, #8
 8006024:	2100      	movs	r1, #0
 8006026:	4618      	mov	r0, r3
 8006028:	f000 ffec 	bl	8007004 <hci_send_req>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	da01      	bge.n	8006036 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006032:	23ff      	movs	r3, #255	@ 0xff
 8006034:	e000      	b.n	8006038 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8006036:	79fb      	ldrb	r3, [r7, #7]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3720      	adds	r7, #32
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b0cc      	sub	sp, #304	@ 0x130
 8006044:	af00      	add	r7, sp, #0
 8006046:	4602      	mov	r2, r0
 8006048:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800604c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006050:	801a      	strh	r2, [r3, #0]
 8006052:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006056:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800605a:	460a      	mov	r2, r1
 800605c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800605e:	f107 0310 	add.w	r3, r7, #16
 8006062:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006066:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800606a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800606e:	2200      	movs	r2, #0
 8006070:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006072:	2300      	movs	r3, #0
 8006074:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006078:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800607c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006080:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006084:	8812      	ldrh	r2, [r2, #0]
 8006086:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006088:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800608c:	3302      	adds	r3, #2
 800608e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8006092:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006096:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800609a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800609e:	7812      	ldrb	r2, [r2, #0]
 80060a0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80060a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80060a6:	3301      	adds	r3, #1
 80060a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80060ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80060b0:	2218      	movs	r2, #24
 80060b2:	2100      	movs	r1, #0
 80060b4:	4618      	mov	r0, r3
 80060b6:	f000 fd1c 	bl	8006af2 <Osal_MemSet>
  rq.ogf = 0x3f;
 80060ba:	233f      	movs	r3, #63	@ 0x3f
 80060bc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 80060c0:	23a5      	movs	r3, #165	@ 0xa5
 80060c2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80060c6:	f107 0310 	add.w	r3, r7, #16
 80060ca:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80060ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80060d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80060d6:	f107 030f 	add.w	r3, r7, #15
 80060da:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80060de:	2301      	movs	r3, #1
 80060e0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80060e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80060e8:	2100      	movs	r1, #0
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 ff8a 	bl	8007004 <hci_send_req>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	da01      	bge.n	80060fa <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80060f6:	23ff      	movs	r3, #255	@ 0xff
 80060f8:	e004      	b.n	8006104 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80060fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060fe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006102:	781b      	ldrb	r3, [r3, #0]
}
 8006104:	4618      	mov	r0, r3
 8006106:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b088      	sub	sp, #32
 8006112:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006114:	2300      	movs	r3, #0
 8006116:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006118:	f107 0308 	add.w	r3, r7, #8
 800611c:	2218      	movs	r2, #24
 800611e:	2100      	movs	r1, #0
 8006120:	4618      	mov	r0, r3
 8006122:	f000 fce6 	bl	8006af2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006126:	233f      	movs	r3, #63	@ 0x3f
 8006128:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800612a:	f240 1301 	movw	r3, #257	@ 0x101
 800612e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006130:	1dfb      	adds	r3, r7, #7
 8006132:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006134:	2301      	movs	r3, #1
 8006136:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006138:	f107 0308 	add.w	r3, r7, #8
 800613c:	2100      	movs	r1, #0
 800613e:	4618      	mov	r0, r3
 8006140:	f000 ff60 	bl	8007004 <hci_send_req>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	da01      	bge.n	800614e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800614a:	23ff      	movs	r3, #255	@ 0xff
 800614c:	e000      	b.n	8006150 <aci_gatt_init+0x42>
  return status;
 800614e:	79fb      	ldrb	r3, [r7, #7]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3720      	adds	r7, #32
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8006158:	b590      	push	{r4, r7, lr}
 800615a:	b0cf      	sub	sp, #316	@ 0x13c
 800615c:	af00      	add	r7, sp, #0
 800615e:	4604      	mov	r4, r0
 8006160:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8006164:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8006168:	6001      	str	r1, [r0, #0]
 800616a:	4610      	mov	r0, r2
 800616c:	4619      	mov	r1, r3
 800616e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006172:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006176:	4622      	mov	r2, r4
 8006178:	701a      	strb	r2, [r3, #0]
 800617a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800617e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8006182:	4602      	mov	r2, r0
 8006184:	701a      	strb	r2, [r3, #0]
 8006186:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800618a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800618e:	460a      	mov	r2, r1
 8006190:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8006192:	f107 0310 	add.w	r3, r7, #16
 8006196:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800619a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800619e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d00a      	beq.n	80061be <aci_gatt_add_service+0x66>
 80061a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80061ac:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d101      	bne.n	80061ba <aci_gatt_add_service+0x62>
 80061b6:	2311      	movs	r3, #17
 80061b8:	e002      	b.n	80061c0 <aci_gatt_add_service+0x68>
 80061ba:	2301      	movs	r3, #1
 80061bc:	e000      	b.n	80061c0 <aci_gatt_add_service+0x68>
 80061be:	2303      	movs	r3, #3
 80061c0:	f107 0210 	add.w	r2, r7, #16
 80061c4:	4413      	add	r3, r2
 80061c6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80061ca:	f107 030c 	add.w	r3, r7, #12
 80061ce:	2203      	movs	r2, #3
 80061d0:	2100      	movs	r1, #0
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fc8d 	bl	8006af2 <Osal_MemSet>
  int index_input = 0;
 80061d8:	2300      	movs	r3, #0
 80061da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80061de:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80061e2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80061e6:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80061ea:	7812      	ldrb	r2, [r2, #0]
 80061ec:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80061ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80061f2:	3301      	adds	r3, #1
 80061f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80061f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80061fc:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d002      	beq.n	800620c <aci_gatt_add_service+0xb4>
 8006206:	2b02      	cmp	r3, #2
 8006208:	d004      	beq.n	8006214 <aci_gatt_add_service+0xbc>
 800620a:	e007      	b.n	800621c <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800620c:	2302      	movs	r3, #2
 800620e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8006212:	e005      	b.n	8006220 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8006214:	2310      	movs	r3, #16
 8006216:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800621a:	e001      	b.n	8006220 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800621c:	2397      	movs	r3, #151	@ 0x97
 800621e:	e06c      	b.n	80062fa <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8006220:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006224:	1c58      	adds	r0, r3, #1
 8006226:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800622a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800622e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006232:	6819      	ldr	r1, [r3, #0]
 8006234:	f000 fc4d 	bl	8006ad2 <Osal_MemCpy>
    index_input += size;
 8006238:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800623c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006240:	4413      	add	r3, r2
 8006242:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8006246:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800624a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800624e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8006252:	7812      	ldrb	r2, [r2, #0]
 8006254:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006256:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800625a:	3301      	adds	r3, #1
 800625c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8006260:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006264:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006268:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800626c:	7812      	ldrb	r2, [r2, #0]
 800626e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8006270:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006274:	3301      	adds	r3, #1
 8006276:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800627a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800627e:	2218      	movs	r2, #24
 8006280:	2100      	movs	r1, #0
 8006282:	4618      	mov	r0, r3
 8006284:	f000 fc35 	bl	8006af2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006288:	233f      	movs	r3, #63	@ 0x3f
 800628a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800628e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8006292:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006296:	f107 0310 	add.w	r3, r7, #16
 800629a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800629e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80062a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80062a6:	f107 030c 	add.w	r3, r7, #12
 80062aa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80062ae:	2303      	movs	r3, #3
 80062b0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80062b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80062b8:	2100      	movs	r1, #0
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 fea2 	bl	8007004 <hci_send_req>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	da01      	bge.n	80062ca <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80062c6:	23ff      	movs	r3, #255	@ 0xff
 80062c8:	e017      	b.n	80062fa <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80062ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80062ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d005      	beq.n	80062e4 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80062d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80062dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	e00a      	b.n	80062fa <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80062e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80062e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80062ec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80062f6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8006300:	46bd      	mov	sp, r7
 8006302:	bd90      	pop	{r4, r7, pc}

08006304 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8006304:	b590      	push	{r4, r7, lr}
 8006306:	b0d1      	sub	sp, #324	@ 0x144
 8006308:	af00      	add	r7, sp, #0
 800630a:	4604      	mov	r4, r0
 800630c:	4608      	mov	r0, r1
 800630e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8006312:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8006316:	600a      	str	r2, [r1, #0]
 8006318:	4619      	mov	r1, r3
 800631a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800631e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8006322:	4622      	mov	r2, r4
 8006324:	801a      	strh	r2, [r3, #0]
 8006326:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800632a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800632e:	4602      	mov	r2, r0
 8006330:	701a      	strb	r2, [r3, #0]
 8006332:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006336:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800633a:	460a      	mov	r2, r1
 800633c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800633e:	f107 0318 	add.w	r3, r7, #24
 8006342:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8006346:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800634a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d00a      	beq.n	800636a <aci_gatt_add_char+0x66>
 8006354:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006358:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2b02      	cmp	r3, #2
 8006360:	d101      	bne.n	8006366 <aci_gatt_add_char+0x62>
 8006362:	2313      	movs	r3, #19
 8006364:	e002      	b.n	800636c <aci_gatt_add_char+0x68>
 8006366:	2303      	movs	r3, #3
 8006368:	e000      	b.n	800636c <aci_gatt_add_char+0x68>
 800636a:	2305      	movs	r3, #5
 800636c:	f107 0218 	add.w	r2, r7, #24
 8006370:	4413      	add	r3, r2
 8006372:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006376:	f107 0314 	add.w	r3, r7, #20
 800637a:	2203      	movs	r2, #3
 800637c:	2100      	movs	r1, #0
 800637e:	4618      	mov	r0, r3
 8006380:	f000 fbb7 	bl	8006af2 <Osal_MemSet>
  int index_input = 0;
 8006384:	2300      	movs	r3, #0
 8006386:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800638a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800638e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8006392:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8006396:	8812      	ldrh	r2, [r2, #0]
 8006398:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800639a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800639e:	3302      	adds	r3, #2
 80063a0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80063a4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80063a8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80063ac:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80063b0:	7812      	ldrb	r2, [r2, #0]
 80063b2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80063b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80063b8:	3301      	adds	r3, #1
 80063ba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80063be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80063c2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d002      	beq.n	80063d2 <aci_gatt_add_char+0xce>
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d004      	beq.n	80063da <aci_gatt_add_char+0xd6>
 80063d0:	e007      	b.n	80063e2 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80063d2:	2302      	movs	r3, #2
 80063d4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80063d8:	e005      	b.n	80063e6 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80063da:	2310      	movs	r3, #16
 80063dc:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80063e0:	e001      	b.n	80063e6 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80063e2:	2397      	movs	r3, #151	@ 0x97
 80063e4:	e091      	b.n	800650a <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80063e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80063ea:	1cd8      	adds	r0, r3, #3
 80063ec:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 80063f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80063f4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80063f8:	6819      	ldr	r1, [r3, #0]
 80063fa:	f000 fb6a 	bl	8006ad2 <Osal_MemCpy>
    index_input += size;
 80063fe:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8006402:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006406:	4413      	add	r3, r2
 8006408:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800640c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006410:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8006414:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8006418:	8812      	ldrh	r2, [r2, #0]
 800641a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800641c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006420:	3302      	adds	r3, #2
 8006422:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8006426:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800642a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800642e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8006430:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006434:	3301      	adds	r3, #1
 8006436:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800643a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800643e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006442:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8006444:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006448:	3301      	adds	r3, #1
 800644a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800644e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006452:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8006456:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8006458:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800645c:	3301      	adds	r3, #1
 800645e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8006462:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006466:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800646a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800646c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006470:	3301      	adds	r3, #1
 8006472:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8006476:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800647a:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800647e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8006480:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006484:	3301      	adds	r3, #1
 8006486:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800648a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800648e:	2218      	movs	r2, #24
 8006490:	2100      	movs	r1, #0
 8006492:	4618      	mov	r0, r3
 8006494:	f000 fb2d 	bl	8006af2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006498:	233f      	movs	r3, #63	@ 0x3f
 800649a:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800649e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80064a2:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 80064a6:	f107 0318 	add.w	r3, r7, #24
 80064aa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80064ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80064b2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80064b6:	f107 0314 	add.w	r3, r7, #20
 80064ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80064be:	2303      	movs	r3, #3
 80064c0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80064c4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80064c8:	2100      	movs	r1, #0
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 fd9a 	bl	8007004 <hci_send_req>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	da01      	bge.n	80064da <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80064d6:	23ff      	movs	r3, #255	@ 0xff
 80064d8:	e017      	b.n	800650a <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80064da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80064de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d005      	beq.n	80064f4 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80064e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80064ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	e00a      	b.n	800650a <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80064f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80064f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80064fc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006500:	b29a      	uxth	r2, r3
 8006502:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8006506:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8006510:	46bd      	mov	sp, r7
 8006512:	bd90      	pop	{r4, r7, pc}

08006514 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8006514:	b5b0      	push	{r4, r5, r7, lr}
 8006516:	b0cc      	sub	sp, #304	@ 0x130
 8006518:	af00      	add	r7, sp, #0
 800651a:	4605      	mov	r5, r0
 800651c:	460c      	mov	r4, r1
 800651e:	4610      	mov	r0, r2
 8006520:	4619      	mov	r1, r3
 8006522:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006526:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800652a:	462a      	mov	r2, r5
 800652c:	801a      	strh	r2, [r3, #0]
 800652e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006532:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006536:	4622      	mov	r2, r4
 8006538:	801a      	strh	r2, [r3, #0]
 800653a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800653e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8006542:	4602      	mov	r2, r0
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800654a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800654e:	460a      	mov	r2, r1
 8006550:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8006552:	f107 0310 	add.w	r3, r7, #16
 8006556:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800655a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800655e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006562:	2200      	movs	r2, #0
 8006564:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006566:	2300      	movs	r3, #0
 8006568:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800656c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006570:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006574:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006578:	8812      	ldrh	r2, [r2, #0]
 800657a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800657c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006580:	3302      	adds	r3, #2
 8006582:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8006586:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800658a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800658e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8006592:	8812      	ldrh	r2, [r2, #0]
 8006594:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006596:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800659a:	3302      	adds	r3, #2
 800659c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 80065a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065a4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80065a8:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 80065ac:	7812      	ldrb	r2, [r2, #0]
 80065ae:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80065b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80065b4:	3301      	adds	r3, #1
 80065b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80065ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065be:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80065c2:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80065c6:	7812      	ldrb	r2, [r2, #0]
 80065c8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80065ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80065ce:	3301      	adds	r3, #1
 80065d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80065d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065d8:	1d98      	adds	r0, r3, #6
 80065da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065de:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	461a      	mov	r2, r3
 80065e6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80065ea:	f000 fa72 	bl	8006ad2 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80065ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065f2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80065fc:	4413      	add	r3, r2
 80065fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006602:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006606:	2218      	movs	r2, #24
 8006608:	2100      	movs	r1, #0
 800660a:	4618      	mov	r0, r3
 800660c:	f000 fa71 	bl	8006af2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006610:	233f      	movs	r3, #63	@ 0x3f
 8006612:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8006616:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800661a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800661e:	f107 0310 	add.w	r3, r7, #16
 8006622:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006626:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800662a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800662e:	f107 030f 	add.w	r3, r7, #15
 8006632:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006636:	2301      	movs	r3, #1
 8006638:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800663c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006640:	2100      	movs	r1, #0
 8006642:	4618      	mov	r0, r3
 8006644:	f000 fcde 	bl	8007004 <hci_send_req>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	da01      	bge.n	8006652 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800664e:	23ff      	movs	r3, #255	@ 0xff
 8006650:	e004      	b.n	800665c <aci_gatt_update_char_value+0x148>
  return status;
 8006652:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006656:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800665a:	781b      	ldrb	r3, [r3, #0]
}
 800665c:	4618      	mov	r0, r3
 800665e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006662:	46bd      	mov	sp, r7
 8006664:	bdb0      	pop	{r4, r5, r7, pc}

08006666 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b0cc      	sub	sp, #304	@ 0x130
 800666a:	af00      	add	r7, sp, #0
 800666c:	4602      	mov	r2, r0
 800666e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006672:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006676:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8006678:	f107 0310 	add.w	r3, r7, #16
 800667c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006680:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006684:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006688:	2200      	movs	r2, #0
 800668a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800668c:	2300      	movs	r3, #0
 800668e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006692:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006696:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800669a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800669e:	8812      	ldrh	r2, [r2, #0]
 80066a0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80066a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066a6:	3302      	adds	r3, #2
 80066a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80066ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80066b0:	2218      	movs	r2, #24
 80066b2:	2100      	movs	r1, #0
 80066b4:	4618      	mov	r0, r3
 80066b6:	f000 fa1c 	bl	8006af2 <Osal_MemSet>
  rq.ogf = 0x3f;
 80066ba:	233f      	movs	r3, #63	@ 0x3f
 80066bc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 80066c0:	f240 1325 	movw	r3, #293	@ 0x125
 80066c4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80066c8:	f107 0310 	add.w	r3, r7, #16
 80066cc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80066d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066d4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80066d8:	f107 030f 	add.w	r3, r7, #15
 80066dc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80066e0:	2301      	movs	r3, #1
 80066e2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80066e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80066ea:	2100      	movs	r1, #0
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 fc89 	bl	8007004 <hci_send_req>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	da01      	bge.n	80066fc <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 80066f8:	23ff      	movs	r3, #255	@ 0xff
 80066fa:	e004      	b.n	8006706 <aci_gatt_confirm_indication+0xa0>
  return status;
 80066fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006700:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006704:	781b      	ldrb	r3, [r3, #0]
}
 8006706:	4618      	mov	r0, r3
 8006708:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b0cc      	sub	sp, #304	@ 0x130
 8006714:	af00      	add	r7, sp, #0
 8006716:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800671a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006724:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006728:	4602      	mov	r2, r0
 800672a:	701a      	strb	r2, [r3, #0]
 800672c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006730:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006734:	460a      	mov	r2, r1
 8006736:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8006738:	f107 0310 	add.w	r3, r7, #16
 800673c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006740:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006744:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006748:	2200      	movs	r2, #0
 800674a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800674c:	2300      	movs	r3, #0
 800674e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8006752:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006756:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800675a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800675e:	7812      	ldrb	r2, [r2, #0]
 8006760:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006762:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006766:	3301      	adds	r3, #1
 8006768:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800676c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006770:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006774:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006778:	7812      	ldrb	r2, [r2, #0]
 800677a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800677c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006780:	3301      	adds	r3, #1
 8006782:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8006786:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800678a:	1c98      	adds	r0, r3, #2
 800678c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006790:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006794:	781a      	ldrb	r2, [r3, #0]
 8006796:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800679a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800679e:	6819      	ldr	r1, [r3, #0]
 80067a0:	f000 f997 	bl	8006ad2 <Osal_MemCpy>
  index_input += Length;
 80067a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80067a8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80067b2:	4413      	add	r3, r2
 80067b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80067b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80067bc:	2218      	movs	r2, #24
 80067be:	2100      	movs	r1, #0
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 f996 	bl	8006af2 <Osal_MemSet>
  rq.ogf = 0x3f;
 80067c6:	233f      	movs	r3, #63	@ 0x3f
 80067c8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 80067cc:	230c      	movs	r3, #12
 80067ce:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80067d2:	f107 0310 	add.w	r3, r7, #16
 80067d6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80067da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80067de:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80067e2:	f107 030f 	add.w	r3, r7, #15
 80067e6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80067ea:	2301      	movs	r3, #1
 80067ec:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80067f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80067f4:	2100      	movs	r1, #0
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 fc04 	bl	8007004 <hci_send_req>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	da01      	bge.n	8006806 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8006802:	23ff      	movs	r3, #255	@ 0xff
 8006804:	e004      	b.n	8006810 <aci_hal_write_config_data+0x100>
  return status;
 8006806:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800680a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800680e:	781b      	ldrb	r3, [r3, #0]
}
 8006810:	4618      	mov	r0, r3
 8006812:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b0cc      	sub	sp, #304	@ 0x130
 800681e:	af00      	add	r7, sp, #0
 8006820:	4602      	mov	r2, r0
 8006822:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006826:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800682a:	701a      	strb	r2, [r3, #0]
 800682c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006830:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006834:	460a      	mov	r2, r1
 8006836:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8006838:	f107 0310 	add.w	r3, r7, #16
 800683c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006840:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006844:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006848:	2200      	movs	r2, #0
 800684a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800684c:	2300      	movs	r3, #0
 800684e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8006852:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006856:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800685a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800685e:	7812      	ldrb	r2, [r2, #0]
 8006860:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006862:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006866:	3301      	adds	r3, #1
 8006868:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800686c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006870:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006874:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006878:	7812      	ldrb	r2, [r2, #0]
 800687a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800687c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006880:	3301      	adds	r3, #1
 8006882:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006886:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800688a:	2218      	movs	r2, #24
 800688c:	2100      	movs	r1, #0
 800688e:	4618      	mov	r0, r3
 8006890:	f000 f92f 	bl	8006af2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006894:	233f      	movs	r3, #63	@ 0x3f
 8006896:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800689a:	230f      	movs	r3, #15
 800689c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80068a0:	f107 0310 	add.w	r3, r7, #16
 80068a4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80068a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80068ac:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80068b0:	f107 030f 	add.w	r3, r7, #15
 80068b4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80068b8:	2301      	movs	r3, #1
 80068ba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80068be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80068c2:	2100      	movs	r1, #0
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 fb9d 	bl	8007004 <hci_send_req>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	da01      	bge.n	80068d4 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80068d0:	23ff      	movs	r3, #255	@ 0xff
 80068d2:	e004      	b.n	80068de <aci_hal_set_tx_power_level+0xc4>
  return status;
 80068d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80068d8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80068dc:	781b      	ldrb	r3, [r3, #0]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b0cc      	sub	sp, #304	@ 0x130
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	4602      	mov	r2, r0
 80068f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80068f4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80068f8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80068fa:	f107 0310 	add.w	r3, r7, #16
 80068fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006902:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006906:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800690a:	2200      	movs	r2, #0
 800690c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800690e:	2300      	movs	r3, #0
 8006910:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8006914:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006918:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800691c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006920:	8812      	ldrh	r2, [r2, #0]
 8006922:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006924:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006928:	3302      	adds	r3, #2
 800692a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800692e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006932:	2218      	movs	r2, #24
 8006934:	2100      	movs	r1, #0
 8006936:	4618      	mov	r0, r3
 8006938:	f000 f8db 	bl	8006af2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800693c:	233f      	movs	r3, #63	@ 0x3f
 800693e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8006942:	2318      	movs	r3, #24
 8006944:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006948:	f107 0310 	add.w	r3, r7, #16
 800694c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006950:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006954:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006958:	f107 030f 	add.w	r3, r7, #15
 800695c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006960:	2301      	movs	r3, #1
 8006962:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006966:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800696a:	2100      	movs	r1, #0
 800696c:	4618      	mov	r0, r3
 800696e:	f000 fb49 	bl	8007004 <hci_send_req>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	da01      	bge.n	800697c <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8006978:	23ff      	movs	r3, #255	@ 0xff
 800697a:	e004      	b.n	8006986 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800697c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006980:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006984:	781b      	ldrb	r3, [r3, #0]
}
 8006986:	4618      	mov	r0, r3
 8006988:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006996:	2300      	movs	r3, #0
 8006998:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800699a:	f107 0308 	add.w	r3, r7, #8
 800699e:	2218      	movs	r2, #24
 80069a0:	2100      	movs	r1, #0
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 f8a5 	bl	8006af2 <Osal_MemSet>
  rq.ogf = 0x03;
 80069a8:	2303      	movs	r3, #3
 80069aa:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80069ac:	2303      	movs	r3, #3
 80069ae:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80069b0:	1dfb      	adds	r3, r7, #7
 80069b2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80069b4:	2301      	movs	r3, #1
 80069b6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80069b8:	f107 0308 	add.w	r3, r7, #8
 80069bc:	2100      	movs	r1, #0
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 fb20 	bl	8007004 <hci_send_req>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	da01      	bge.n	80069ce <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80069ca:	23ff      	movs	r3, #255	@ 0xff
 80069cc:	e000      	b.n	80069d0 <hci_reset+0x40>
  return status;
 80069ce:	79fb      	ldrb	r3, [r7, #7]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3720      	adds	r7, #32
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80069d8:	b590      	push	{r4, r7, lr}
 80069da:	b0cd      	sub	sp, #308	@ 0x134
 80069dc:	af00      	add	r7, sp, #0
 80069de:	4604      	mov	r4, r0
 80069e0:	4608      	mov	r0, r1
 80069e2:	4611      	mov	r1, r2
 80069e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80069e8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80069ec:	4622      	mov	r2, r4
 80069ee:	701a      	strb	r2, [r3, #0]
 80069f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80069f4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80069f8:	4602      	mov	r2, r0
 80069fa:	701a      	strb	r2, [r3, #0]
 80069fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006a00:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006a04:	460a      	mov	r2, r1
 8006a06:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8006a08:	f107 0310 	add.w	r3, r7, #16
 8006a0c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006a10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006a14:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006a18:	2200      	movs	r2, #0
 8006a1a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8006a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006a26:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006a2a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006a2e:	7812      	ldrb	r2, [r2, #0]
 8006a30:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006a32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a36:	3301      	adds	r3, #1
 8006a38:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8006a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006a40:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006a44:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006a48:	7812      	ldrb	r2, [r2, #0]
 8006a4a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006a4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a50:	3301      	adds	r3, #1
 8006a52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8006a56:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006a5a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006a5e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006a62:	7812      	ldrb	r2, [r2, #0]
 8006a64:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006a66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006a70:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006a74:	2218      	movs	r2, #24
 8006a76:	2100      	movs	r1, #0
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 f83a 	bl	8006af2 <Osal_MemSet>
  rq.ogf = 0x08;
 8006a7e:	2308      	movs	r3, #8
 8006a80:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8006a84:	2331      	movs	r3, #49	@ 0x31
 8006a86:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006a8a:	f107 0310 	add.w	r3, r7, #16
 8006a8e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006a92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a96:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006a9a:	f107 030f 	add.w	r3, r7, #15
 8006a9e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006aa8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006aac:	2100      	movs	r1, #0
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 faa8 	bl	8007004 <hci_send_req>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	da01      	bge.n	8006abe <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8006aba:	23ff      	movs	r3, #255	@ 0xff
 8006abc:	e004      	b.n	8006ac8 <hci_le_set_default_phy+0xf0>
  return status;
 8006abe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ac2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006ac6:	781b      	ldrb	r3, [r3, #0]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd90      	pop	{r4, r7, pc}

08006ad2 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b084      	sub	sp, #16
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	60f8      	str	r0, [r7, #12]
 8006ada:	60b9      	str	r1, [r7, #8]
 8006adc:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	68b9      	ldr	r1, [r7, #8]
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f002 fe7a 	bl	80097dc <memcpy>
 8006ae8:	4603      	mov	r3, r0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b084      	sub	sp, #16
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	60f8      	str	r0, [r7, #12]
 8006afa:	60b9      	str	r1, [r7, #8]
 8006afc:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	68b9      	ldr	r1, [r7, #8]
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f002 fe3e 	bl	8009784 <memset>
 8006b08:	4603      	mov	r3, r0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8006b12:	b480      	push	{r7}
 8006b14:	af00      	add	r7, sp, #0
  return;
 8006b16:	bf00      	nop
}
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8006b20:	b480      	push	{r7}
 8006b22:	af00      	add	r7, sp, #0
  return;
 8006b24:	bf00      	nop
}
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8006b2e:	b480      	push	{r7}
 8006b30:	af00      	add	r7, sp, #0
  return;
 8006b32:	bf00      	nop
}
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
  return;
 8006b40:	bf00      	nop
}
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	af00      	add	r7, sp, #0
  return;
 8006b4e:	bf00      	nop
}
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8006b58:	b480      	push	{r7}
 8006b5a:	af00      	add	r7, sp, #0
  return;
 8006b5c:	bf00      	nop
}
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8006b66:	b480      	push	{r7}
 8006b68:	af00      	add	r7, sp, #0
  return;
 8006b6a:	bf00      	nop
}
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8006b74:	b480      	push	{r7}
 8006b76:	af00      	add	r7, sp, #0
  return;
 8006b78:	bf00      	nop
}
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8006b82:	b480      	push	{r7}
 8006b84:	af00      	add	r7, sp, #0
  return;
 8006b86:	bf00      	nop
}
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8006b90:	b480      	push	{r7}
 8006b92:	af00      	add	r7, sp, #0
  return;
 8006b94:	bf00      	nop
}
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	af00      	add	r7, sp, #0
  return;
 8006ba2:	bf00      	nop
}
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8006bac:	b480      	push	{r7}
 8006bae:	af00      	add	r7, sp, #0
  return;
 8006bb0:	bf00      	nop
}
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8006bba:	b480      	push	{r7}
 8006bbc:	af00      	add	r7, sp, #0
  return;
 8006bbe:	bf00      	nop
}
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8006bc8:	b480      	push	{r7}
 8006bca:	af00      	add	r7, sp, #0
  return;
 8006bcc:	bf00      	nop
}
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	af00      	add	r7, sp, #0
  return;
 8006bda:	bf00      	nop
}
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8006be4:	b480      	push	{r7}
 8006be6:	af00      	add	r7, sp, #0
  return;
 8006be8:	bf00      	nop
}
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	af00      	add	r7, sp, #0
  return;
 8006bf6:	bf00      	nop
}
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8006c04:	4b04      	ldr	r3, [pc, #16]	@ (8006c18 <SVCCTL_Init+0x18>)
 8006c06:	2200      	movs	r2, #0
 8006c08:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8006c0a:	4b04      	ldr	r3, [pc, #16]	@ (8006c1c <SVCCTL_Init+0x1c>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8006c10:	f000 f806 	bl	8006c20 <SVCCTL_SvcInit>

  return;
 8006c14:	bf00      	nop
}
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	20000030 	.word	0x20000030
 8006c1c:	20000050 	.word	0x20000050

08006c20 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	af00      	add	r7, sp, #0
  BAS_Init();
 8006c24:	f7ff ff75 	bl	8006b12 <BAS_Init>

  BLS_Init();
 8006c28:	f7ff ff7a 	bl	8006b20 <BLS_Init>

  CRS_STM_Init();
 8006c2c:	f7ff ff7f 	bl	8006b2e <CRS_STM_Init>

  DIS_Init();
 8006c30:	f7ff ff84 	bl	8006b3c <DIS_Init>

  EDS_STM_Init();
 8006c34:	f7ff ff89 	bl	8006b4a <EDS_STM_Init>

  HIDS_Init();
 8006c38:	f7ff ff8e 	bl	8006b58 <HIDS_Init>

  HRS_Init();
 8006c3c:	f7ff ff93 	bl	8006b66 <HRS_Init>

  HTS_Init();
 8006c40:	f7ff ff98 	bl	8006b74 <HTS_Init>

  IAS_Init();
 8006c44:	f7ff ff9d 	bl	8006b82 <IAS_Init>

  LLS_Init();
 8006c48:	f7ff ffa2 	bl	8006b90 <LLS_Init>

  TPS_Init();
 8006c4c:	f7ff ffa7 	bl	8006b9e <TPS_Init>

  MOTENV_STM_Init();
 8006c50:	f7ff ffac 	bl	8006bac <MOTENV_STM_Init>

  P2PS_STM_Init();
 8006c54:	f7ff ffb1 	bl	8006bba <P2PS_STM_Init>

  ZDD_STM_Init();
 8006c58:	f7ff ffb6 	bl	8006bc8 <ZDD_STM_Init>

  OTAS_STM_Init();
 8006c5c:	f7ff ffbb 	bl	8006bd6 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8006c60:	f7ff ffc7 	bl	8006bf2 <BVOPUS_STM_Init>

  MESH_Init();
 8006c64:	f7ff ffbe 	bl	8006be4 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8006c68:	f001 fc66 	bl	8008538 <SVCCTL_InitCustomSvc>
  
  return;
 8006c6c:	bf00      	nop
}
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8006c78:	4b09      	ldr	r3, [pc, #36]	@ (8006ca0 <SVCCTL_RegisterSvcHandler+0x30>)
 8006c7a:	7f1b      	ldrb	r3, [r3, #28]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	4a08      	ldr	r2, [pc, #32]	@ (8006ca0 <SVCCTL_RegisterSvcHandler+0x30>)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8006c86:	4b06      	ldr	r3, [pc, #24]	@ (8006ca0 <SVCCTL_RegisterSvcHandler+0x30>)
 8006c88:	7f1b      	ldrb	r3, [r3, #28]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	4b04      	ldr	r3, [pc, #16]	@ (8006ca0 <SVCCTL_RegisterSvcHandler+0x30>)
 8006c90:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8006c92:	bf00      	nop
}
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	20000030 	.word	0x20000030

08006ca4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	2bff      	cmp	r3, #255	@ 0xff
 8006cbc:	d125      	bne.n	8006d0a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	3302      	adds	r3, #2
 8006cc2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	881b      	ldrh	r3, [r3, #0]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006cce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006cd2:	d118      	bne.n	8006d06 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	757b      	strb	r3, [r7, #21]
 8006cd8:	e00d      	b.n	8006cf6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8006cda:	7d7b      	ldrb	r3, [r7, #21]
 8006cdc:	4a1a      	ldr	r2, [pc, #104]	@ (8006d48 <SVCCTL_UserEvtRx+0xa4>)
 8006cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	4798      	blx	r3
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8006cea:	7dfb      	ldrb	r3, [r7, #23]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d108      	bne.n	8006d02 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006cf0:	7d7b      	ldrb	r3, [r7, #21]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	757b      	strb	r3, [r7, #21]
 8006cf6:	4b14      	ldr	r3, [pc, #80]	@ (8006d48 <SVCCTL_UserEvtRx+0xa4>)
 8006cf8:	7f1b      	ldrb	r3, [r3, #28]
 8006cfa:	7d7a      	ldrb	r2, [r7, #21]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d3ec      	bcc.n	8006cda <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8006d00:	e002      	b.n	8006d08 <SVCCTL_UserEvtRx+0x64>
              break;
 8006d02:	bf00      	nop
          break;
 8006d04:	e000      	b.n	8006d08 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8006d06:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8006d08:	e000      	b.n	8006d0c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8006d0a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d00f      	beq.n	8006d32 <SVCCTL_UserEvtRx+0x8e>
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	dc10      	bgt.n	8006d38 <SVCCTL_UserEvtRx+0x94>
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d002      	beq.n	8006d20 <SVCCTL_UserEvtRx+0x7c>
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d006      	beq.n	8006d2c <SVCCTL_UserEvtRx+0x88>
 8006d1e:	e00b      	b.n	8006d38 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 ff8f 	bl	8007c44 <SVCCTL_App_Notification>
 8006d26:	4603      	mov	r3, r0
 8006d28:	75bb      	strb	r3, [r7, #22]
      break;
 8006d2a:	e008      	b.n	8006d3e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	75bb      	strb	r3, [r7, #22]
      break;
 8006d30:	e005      	b.n	8006d3e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8006d32:	2300      	movs	r3, #0
 8006d34:	75bb      	strb	r3, [r7, #22]
      break;
 8006d36:	e002      	b.n	8006d3e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	75bb      	strb	r3, [r7, #22]
      break;
 8006d3c:	bf00      	nop
  }

  return (return_status);
 8006d3e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3718      	adds	r7, #24
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	20000030 	.word	0x20000030

08006d4c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006d54:	f107 030c 	add.w	r3, r7, #12
 8006d58:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	212e      	movs	r1, #46	@ 0x2e
 8006d64:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8006d68:	f000 fae8 	bl	800733c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	330b      	adds	r3, #11
 8006d70:	78db      	ldrb	r3, [r3, #3]
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3720      	adds	r7, #32
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b088      	sub	sp, #32
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006d82:	f107 030c 	add.w	r3, r7, #12
 8006d86:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	210f      	movs	r1, #15
 8006d92:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8006d96:	f000 fad1 	bl	800733c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	330b      	adds	r3, #11
 8006d9e:	78db      	ldrb	r3, [r3, #3]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3720      	adds	r7, #32
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b088      	sub	sp, #32
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006db0:	f107 030c 	add.w	r3, r7, #12
 8006db4:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	2110      	movs	r1, #16
 8006dbc:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8006dc0:	f000 fabc 	bl	800733c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	330b      	adds	r3, #11
 8006dc8:	78db      	ldrb	r3, [r3, #3]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3720      	adds	r7, #32
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
	...

08006dd4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b08b      	sub	sp, #44	@ 0x2c
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8006de0:	2300      	movs	r3, #0
 8006de2:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8006de8:	2300      	movs	r3, #0
 8006dea:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8006dec:	2300      	movs	r3, #0
 8006dee:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8006df0:	2300      	movs	r3, #0
 8006df2:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8006df4:	2300      	movs	r3, #0
 8006df6:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8006dfc:	4b4a      	ldr	r3, [pc, #296]	@ (8006f28 <SHCI_GetWirelessFwInfo+0x154>)
 8006dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e00:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006e04:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006e0e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a44      	ldr	r2, [pc, #272]	@ (8006f2c <SHCI_GetWirelessFwInfo+0x158>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d10f      	bne.n	8006e40 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	617b      	str	r3, [r7, #20]
 8006e3e:	e01a      	b.n	8006e76 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006e48:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8006e4c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e78:	0e1b      	lsrs	r3, r3, #24
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e82:	0c1b      	lsrs	r3, r3, #16
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8c:	0a1b      	lsrs	r3, r3, #8
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8006e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e96:	091b      	lsrs	r3, r3, #4
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	f003 030f 	and.w	r3, r3, #15
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	f003 030f 	and.w	r3, r3, #15
 8006eac:	b2da      	uxtb	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	0e1b      	lsrs	r3, r3, #24
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	0c1b      	lsrs	r3, r3, #16
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	0a1b      	lsrs	r3, r3, #8
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	b2da      	uxtb	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	0e1b      	lsrs	r3, r3, #24
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	0c1b      	lsrs	r3, r3, #16
 8006eee:	b2da      	uxtb	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	0a1b      	lsrs	r3, r3, #8
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	0e1b      	lsrs	r3, r3, #24
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	0c1b      	lsrs	r3, r3, #16
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	372c      	adds	r7, #44	@ 0x2c
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	58004000 	.word	0x58004000
 8006f2c:	a94656b9 	.word	0xa94656b9

08006f30 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	4a08      	ldr	r2, [pc, #32]	@ (8006f60 <hci_init+0x30>)
 8006f40:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8006f42:	4a08      	ldr	r2, [pc, #32]	@ (8006f64 <hci_init+0x34>)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8006f48:	4806      	ldr	r0, [pc, #24]	@ (8006f64 <hci_init+0x34>)
 8006f4a:	f000 f979 	bl	8007240 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 f8da 	bl	800710c <TlInit>

  return;
 8006f58:	bf00      	nop
}
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	20000258 	.word	0x20000258
 8006f64:	20000230 	.word	0x20000230

08006f68 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006f6e:	4822      	ldr	r0, [pc, #136]	@ (8006ff8 <hci_user_evt_proc+0x90>)
 8006f70:	f000 fd32 	bl	80079d8 <LST_is_empty>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d12b      	bne.n	8006fd2 <hci_user_evt_proc+0x6a>
 8006f7a:	4b20      	ldr	r3, [pc, #128]	@ (8006ffc <hci_user_evt_proc+0x94>)
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d027      	beq.n	8006fd2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006f82:	f107 030c 	add.w	r3, r7, #12
 8006f86:	4619      	mov	r1, r3
 8006f88:	481b      	ldr	r0, [pc, #108]	@ (8006ff8 <hci_user_evt_proc+0x90>)
 8006f8a:	f000 fdb4 	bl	8007af6 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8006f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8007000 <hci_user_evt_proc+0x98>)
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00c      	beq.n	8006fb0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006f9e:	4b18      	ldr	r3, [pc, #96]	@ (8007000 <hci_user_evt_proc+0x98>)
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	1d3a      	adds	r2, r7, #4
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8006fa8:	793a      	ldrb	r2, [r7, #4]
 8006faa:	4b14      	ldr	r3, [pc, #80]	@ (8006ffc <hci_user_evt_proc+0x94>)
 8006fac:	701a      	strb	r2, [r3, #0]
 8006fae:	e002      	b.n	8006fb6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006fb0:	4b12      	ldr	r3, [pc, #72]	@ (8006ffc <hci_user_evt_proc+0x94>)
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006fb6:	4b11      	ldr	r3, [pc, #68]	@ (8006ffc <hci_user_evt_proc+0x94>)
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d004      	beq.n	8006fc8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f000 fc0d 	bl	80077e0 <TL_MM_EvtDone>
 8006fc6:	e004      	b.n	8006fd2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	4619      	mov	r1, r3
 8006fcc:	480a      	ldr	r0, [pc, #40]	@ (8006ff8 <hci_user_evt_proc+0x90>)
 8006fce:	f000 fd25 	bl	8007a1c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006fd2:	4809      	ldr	r0, [pc, #36]	@ (8006ff8 <hci_user_evt_proc+0x90>)
 8006fd4:	f000 fd00 	bl	80079d8 <LST_is_empty>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d107      	bne.n	8006fee <hci_user_evt_proc+0x86>
 8006fde:	4b07      	ldr	r3, [pc, #28]	@ (8006ffc <hci_user_evt_proc+0x94>)
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8006fe6:	4804      	ldr	r0, [pc, #16]	@ (8006ff8 <hci_user_evt_proc+0x90>)
 8006fe8:	f001 f860 	bl	80080ac <hci_notify_asynch_evt>
  }


  return;
 8006fec:	bf00      	nop
 8006fee:	bf00      	nop
}
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20000058 	.word	0x20000058
 8006ffc:	20000064 	.word	0x20000064
 8007000:	20000230 	.word	0x20000230

08007004 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b088      	sub	sp, #32
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8007010:	2000      	movs	r0, #0
 8007012:	f000 f8d1 	bl	80071b8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8007016:	2300      	movs	r3, #0
 8007018:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	885b      	ldrh	r3, [r3, #2]
 800701e:	b21b      	sxth	r3, r3
 8007020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007024:	b21a      	sxth	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	b21b      	sxth	r3, r3
 800702c:	029b      	lsls	r3, r3, #10
 800702e:	b21b      	sxth	r3, r3
 8007030:	4313      	orrs	r3, r2
 8007032:	b21b      	sxth	r3, r3
 8007034:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8007036:	4b33      	ldr	r3, [pc, #204]	@ (8007104 <hci_send_req+0x100>)
 8007038:	2201      	movs	r2, #1
 800703a:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	b2d9      	uxtb	r1, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	689a      	ldr	r2, [r3, #8]
 8007046:	8bbb      	ldrh	r3, [r7, #28]
 8007048:	4618      	mov	r0, r3
 800704a:	f000 f88f 	bl	800716c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800704e:	e04e      	b.n	80070ee <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007050:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8007054:	f001 f841 	bl	80080da <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007058:	e043      	b.n	80070e2 <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800705a:	f107 030c 	add.w	r3, r7, #12
 800705e:	4619      	mov	r1, r3
 8007060:	4829      	ldr	r0, [pc, #164]	@ (8007108 <hci_send_req+0x104>)
 8007062:	f000 fd48 	bl	8007af6 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	7a5b      	ldrb	r3, [r3, #9]
 800706a:	2b0f      	cmp	r3, #15
 800706c:	d114      	bne.n	8007098 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	330b      	adds	r3, #11
 8007072:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	885b      	ldrh	r3, [r3, #2]
 8007078:	b29b      	uxth	r3, r3
 800707a:	8bba      	ldrh	r2, [r7, #28]
 800707c:	429a      	cmp	r2, r3
 800707e:	d104      	bne.n	800708a <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	7812      	ldrb	r2, [r2, #0]
 8007088:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	785b      	ldrb	r3, [r3, #1]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d027      	beq.n	80070e2 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007092:	2301      	movs	r3, #1
 8007094:	77fb      	strb	r3, [r7, #31]
 8007096:	e024      	b.n	80070e2 <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	330b      	adds	r3, #11
 800709c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	8bba      	ldrh	r2, [r7, #28]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d114      	bne.n	80070d6 <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	7a9b      	ldrb	r3, [r3, #10]
 80070b0:	3b03      	subs	r3, #3
 80070b2:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	695a      	ldr	r2, [r3, #20]
 80070b8:	7dfb      	ldrb	r3, [r7, #23]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	bfa8      	it	ge
 80070be:	461a      	movge	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6918      	ldr	r0, [r3, #16]
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	1cd9      	adds	r1, r3, #3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	461a      	mov	r2, r3
 80070d2:	f002 fb83 	bl	80097dc <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d001      	beq.n	80070e2 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80070de:	2301      	movs	r3, #1
 80070e0:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80070e2:	4809      	ldr	r0, [pc, #36]	@ (8007108 <hci_send_req+0x104>)
 80070e4:	f000 fc78 	bl	80079d8 <LST_is_empty>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d0b5      	beq.n	800705a <hci_send_req+0x56>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80070ee:	7ffb      	ldrb	r3, [r7, #31]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d0ad      	beq.n	8007050 <hci_send_req+0x4c>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80070f4:	2001      	movs	r0, #1
 80070f6:	f000 f85f 	bl	80071b8 <NotifyCmdStatus>

  return 0;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3720      	adds	r7, #32
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	2000025c 	.word	0x2000025c
 8007108:	20000250 	.word	0x20000250

0800710c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8007114:	480f      	ldr	r0, [pc, #60]	@ (8007154 <TlInit+0x48>)
 8007116:	f000 fc4f 	bl	80079b8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800711a:	4a0f      	ldr	r2, [pc, #60]	@ (8007158 <TlInit+0x4c>)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007120:	480e      	ldr	r0, [pc, #56]	@ (800715c <TlInit+0x50>)
 8007122:	f000 fc49 	bl	80079b8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007126:	4b0e      	ldr	r3, [pc, #56]	@ (8007160 <TlInit+0x54>)
 8007128:	2201      	movs	r2, #1
 800712a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800712c:	4b0d      	ldr	r3, [pc, #52]	@ (8007164 <TlInit+0x58>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00a      	beq.n	800714a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8007138:	4b0b      	ldr	r3, [pc, #44]	@ (8007168 <TlInit+0x5c>)
 800713a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800713c:	4b09      	ldr	r3, [pc, #36]	@ (8007164 <TlInit+0x58>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f107 0208 	add.w	r2, r7, #8
 8007144:	4610      	mov	r0, r2
 8007146:	4798      	blx	r3
  }

  return;
 8007148:	bf00      	nop
 800714a:	bf00      	nop
}
 800714c:	3718      	adds	r7, #24
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	20000250 	.word	0x20000250
 8007158:	20000060 	.word	0x20000060
 800715c:	20000058 	.word	0x20000058
 8007160:	20000064 	.word	0x20000064
 8007164:	20000230 	.word	0x20000230
 8007168:	080071f9 	.word	0x080071f9

0800716c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	4603      	mov	r3, r0
 8007174:	603a      	str	r2, [r7, #0]
 8007176:	80fb      	strh	r3, [r7, #6]
 8007178:	460b      	mov	r3, r1
 800717a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800717c:	4b0c      	ldr	r3, [pc, #48]	@ (80071b0 <SendCmd+0x44>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	88fa      	ldrh	r2, [r7, #6]
 8007182:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8007186:	4b0a      	ldr	r3, [pc, #40]	@ (80071b0 <SendCmd+0x44>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	797a      	ldrb	r2, [r7, #5]
 800718c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800718e:	4b08      	ldr	r3, [pc, #32]	@ (80071b0 <SendCmd+0x44>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	330c      	adds	r3, #12
 8007194:	797a      	ldrb	r2, [r7, #5]
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	4618      	mov	r0, r3
 800719a:	f002 fb1f 	bl	80097dc <memcpy>

  hciContext.io.Send(0,0);
 800719e:	4b05      	ldr	r3, [pc, #20]	@ (80071b4 <SendCmd+0x48>)
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	2100      	movs	r1, #0
 80071a4:	2000      	movs	r0, #0
 80071a6:	4798      	blx	r3

  return;
 80071a8:	bf00      	nop
}
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	20000060 	.word	0x20000060
 80071b4:	20000230 	.word	0x20000230

080071b8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	4603      	mov	r3, r0
 80071c0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80071c2:	79fb      	ldrb	r3, [r7, #7]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d108      	bne.n	80071da <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80071c8:	4b0a      	ldr	r3, [pc, #40]	@ (80071f4 <NotifyCmdStatus+0x3c>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00d      	beq.n	80071ec <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80071d0:	4b08      	ldr	r3, [pc, #32]	@ (80071f4 <NotifyCmdStatus+0x3c>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2000      	movs	r0, #0
 80071d6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80071d8:	e008      	b.n	80071ec <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80071da:	4b06      	ldr	r3, [pc, #24]	@ (80071f4 <NotifyCmdStatus+0x3c>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d004      	beq.n	80071ec <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80071e2:	4b04      	ldr	r3, [pc, #16]	@ (80071f4 <NotifyCmdStatus+0x3c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2001      	movs	r0, #1
 80071e8:	4798      	blx	r3
  return;
 80071ea:	bf00      	nop
 80071ec:	bf00      	nop
}
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	20000258 	.word	0x20000258

080071f8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	7a5b      	ldrb	r3, [r3, #9]
 8007204:	2b0f      	cmp	r3, #15
 8007206:	d003      	beq.n	8007210 <TlEvtReceived+0x18>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	7a5b      	ldrb	r3, [r3, #9]
 800720c:	2b0e      	cmp	r3, #14
 800720e:	d107      	bne.n	8007220 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8007210:	6879      	ldr	r1, [r7, #4]
 8007212:	4809      	ldr	r0, [pc, #36]	@ (8007238 <TlEvtReceived+0x40>)
 8007214:	f000 fc28 	bl	8007a68 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8007218:	2000      	movs	r0, #0
 800721a:	f000 ff53 	bl	80080c4 <hci_cmd_resp_release>
 800721e:	e006      	b.n	800722e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8007220:	6879      	ldr	r1, [r7, #4]
 8007222:	4806      	ldr	r0, [pc, #24]	@ (800723c <TlEvtReceived+0x44>)
 8007224:	f000 fc20 	bl	8007a68 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007228:	4804      	ldr	r0, [pc, #16]	@ (800723c <TlEvtReceived+0x44>)
 800722a:	f000 ff3f 	bl	80080ac <hci_notify_asynch_evt>
  }

  return;
 800722e:	bf00      	nop
}
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	20000250 	.word	0x20000250
 800723c:	20000058 	.word	0x20000058

08007240 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a05      	ldr	r2, [pc, #20]	@ (8007260 <hci_register_io_bus+0x20>)
 800724c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a04      	ldr	r2, [pc, #16]	@ (8007264 <hci_register_io_bus+0x24>)
 8007252:	611a      	str	r2, [r3, #16]

  return;
 8007254:	bf00      	nop
}
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	08007559 	.word	0x08007559
 8007264:	080075c1 	.word	0x080075c1

08007268 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	4a08      	ldr	r2, [pc, #32]	@ (8007298 <shci_init+0x30>)
 8007278:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800727a:	4a08      	ldr	r2, [pc, #32]	@ (800729c <shci_init+0x34>)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007280:	4806      	ldr	r0, [pc, #24]	@ (800729c <shci_init+0x34>)
 8007282:	f000 f915 	bl	80074b0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4618      	mov	r0, r3
 800728c:	f000 f898 	bl	80073c0 <TlInit>

  return;
 8007290:	bf00      	nop
}
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	20000280 	.word	0x20000280
 800729c:	20000260 	.word	0x20000260

080072a0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80072a6:	4822      	ldr	r0, [pc, #136]	@ (8007330 <shci_user_evt_proc+0x90>)
 80072a8:	f000 fb96 	bl	80079d8 <LST_is_empty>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d12b      	bne.n	800730a <shci_user_evt_proc+0x6a>
 80072b2:	4b20      	ldr	r3, [pc, #128]	@ (8007334 <shci_user_evt_proc+0x94>)
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d027      	beq.n	800730a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80072ba:	f107 030c 	add.w	r3, r7, #12
 80072be:	4619      	mov	r1, r3
 80072c0:	481b      	ldr	r0, [pc, #108]	@ (8007330 <shci_user_evt_proc+0x90>)
 80072c2:	f000 fc18 	bl	8007af6 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80072c6:	4b1c      	ldr	r3, [pc, #112]	@ (8007338 <shci_user_evt_proc+0x98>)
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00c      	beq.n	80072e8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80072d2:	2301      	movs	r3, #1
 80072d4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80072d6:	4b18      	ldr	r3, [pc, #96]	@ (8007338 <shci_user_evt_proc+0x98>)
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	1d3a      	adds	r2, r7, #4
 80072dc:	4610      	mov	r0, r2
 80072de:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80072e0:	793a      	ldrb	r2, [r7, #4]
 80072e2:	4b14      	ldr	r3, [pc, #80]	@ (8007334 <shci_user_evt_proc+0x94>)
 80072e4:	701a      	strb	r2, [r3, #0]
 80072e6:	e002      	b.n	80072ee <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80072e8:	4b12      	ldr	r3, [pc, #72]	@ (8007334 <shci_user_evt_proc+0x94>)
 80072ea:	2201      	movs	r2, #1
 80072ec:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80072ee:	4b11      	ldr	r3, [pc, #68]	@ (8007334 <shci_user_evt_proc+0x94>)
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d004      	beq.n	8007300 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f000 fa71 	bl	80077e0 <TL_MM_EvtDone>
 80072fe:	e004      	b.n	800730a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	4619      	mov	r1, r3
 8007304:	480a      	ldr	r0, [pc, #40]	@ (8007330 <shci_user_evt_proc+0x90>)
 8007306:	f000 fb89 	bl	8007a1c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800730a:	4809      	ldr	r0, [pc, #36]	@ (8007330 <shci_user_evt_proc+0x90>)
 800730c:	f000 fb64 	bl	80079d8 <LST_is_empty>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d107      	bne.n	8007326 <shci_user_evt_proc+0x86>
 8007316:	4b07      	ldr	r3, [pc, #28]	@ (8007334 <shci_user_evt_proc+0x94>)
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800731e:	4804      	ldr	r0, [pc, #16]	@ (8007330 <shci_user_evt_proc+0x90>)
 8007320:	f7f9 fad8 	bl	80008d4 <shci_notify_asynch_evt>
  }


  return;
 8007324:	bf00      	nop
 8007326:	bf00      	nop
}
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	20000068 	.word	0x20000068
 8007334:	20000078 	.word	0x20000078
 8007338:	20000260 	.word	0x20000260

0800733c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	60ba      	str	r2, [r7, #8]
 8007344:	607b      	str	r3, [r7, #4]
 8007346:	4603      	mov	r3, r0
 8007348:	81fb      	strh	r3, [r7, #14]
 800734a:	460b      	mov	r3, r1
 800734c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800734e:	2000      	movs	r0, #0
 8007350:	f000 f868 	bl	8007424 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8007354:	4b17      	ldr	r3, [pc, #92]	@ (80073b4 <shci_send+0x78>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	89fa      	ldrh	r2, [r7, #14]
 800735a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800735e:	4b15      	ldr	r3, [pc, #84]	@ (80073b4 <shci_send+0x78>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	7b7a      	ldrb	r2, [r7, #13]
 8007364:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8007366:	4b13      	ldr	r3, [pc, #76]	@ (80073b4 <shci_send+0x78>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	330c      	adds	r3, #12
 800736c:	7b7a      	ldrb	r2, [r7, #13]
 800736e:	68b9      	ldr	r1, [r7, #8]
 8007370:	4618      	mov	r0, r3
 8007372:	f002 fa33 	bl	80097dc <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8007376:	4b10      	ldr	r3, [pc, #64]	@ (80073b8 <shci_send+0x7c>)
 8007378:	2201      	movs	r2, #1
 800737a:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800737c:	4b0f      	ldr	r3, [pc, #60]	@ (80073bc <shci_send+0x80>)
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	2100      	movs	r1, #0
 8007382:	2000      	movs	r0, #0
 8007384:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8007386:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800738a:	f7f9 faba 	bl	8000902 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f103 0008 	add.w	r0, r3, #8
 8007394:	4b07      	ldr	r3, [pc, #28]	@ (80073b4 <shci_send+0x78>)
 8007396:	6819      	ldr	r1, [r3, #0]
 8007398:	4b06      	ldr	r3, [pc, #24]	@ (80073b4 <shci_send+0x78>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	789b      	ldrb	r3, [r3, #2]
 800739e:	3303      	adds	r3, #3
 80073a0:	461a      	mov	r2, r3
 80073a2:	f002 fa1b 	bl	80097dc <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80073a6:	2001      	movs	r0, #1
 80073a8:	f000 f83c 	bl	8007424 <Cmd_SetStatus>

  return;
 80073ac:	bf00      	nop
}
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	20000074 	.word	0x20000074
 80073b8:	20000284 	.word	0x20000284
 80073bc:	20000260 	.word	0x20000260

080073c0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80073c8:	4a10      	ldr	r2, [pc, #64]	@ (800740c <TlInit+0x4c>)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80073ce:	4810      	ldr	r0, [pc, #64]	@ (8007410 <TlInit+0x50>)
 80073d0:	f000 faf2 	bl	80079b8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80073d4:	2001      	movs	r0, #1
 80073d6:	f000 f825 	bl	8007424 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80073da:	4b0e      	ldr	r3, [pc, #56]	@ (8007414 <TlInit+0x54>)
 80073dc:	2201      	movs	r2, #1
 80073de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80073e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007418 <TlInit+0x58>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00c      	beq.n	8007402 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80073ec:	4b0b      	ldr	r3, [pc, #44]	@ (800741c <TlInit+0x5c>)
 80073ee:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80073f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007420 <TlInit+0x60>)
 80073f2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80073f4:	4b08      	ldr	r3, [pc, #32]	@ (8007418 <TlInit+0x58>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f107 020c 	add.w	r2, r7, #12
 80073fc:	4610      	mov	r0, r2
 80073fe:	4798      	blx	r3
  }

  return;
 8007400:	bf00      	nop
 8007402:	bf00      	nop
}
 8007404:	3718      	adds	r7, #24
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	20000074 	.word	0x20000074
 8007410:	20000068 	.word	0x20000068
 8007414:	20000078 	.word	0x20000078
 8007418:	20000260 	.word	0x20000260
 800741c:	08007475 	.word	0x08007475
 8007420:	0800748d 	.word	0x0800748d

08007424 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	4603      	mov	r3, r0
 800742c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800742e:	79fb      	ldrb	r3, [r7, #7]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10b      	bne.n	800744c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8007434:	4b0d      	ldr	r3, [pc, #52]	@ (800746c <Cmd_SetStatus+0x48>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d003      	beq.n	8007444 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800743c:	4b0b      	ldr	r3, [pc, #44]	@ (800746c <Cmd_SetStatus+0x48>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2000      	movs	r0, #0
 8007442:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8007444:	4b0a      	ldr	r3, [pc, #40]	@ (8007470 <Cmd_SetStatus+0x4c>)
 8007446:	2200      	movs	r2, #0
 8007448:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800744a:	e00b      	b.n	8007464 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800744c:	4b08      	ldr	r3, [pc, #32]	@ (8007470 <Cmd_SetStatus+0x4c>)
 800744e:	2201      	movs	r2, #1
 8007450:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8007452:	4b06      	ldr	r3, [pc, #24]	@ (800746c <Cmd_SetStatus+0x48>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d004      	beq.n	8007464 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800745a:	4b04      	ldr	r3, [pc, #16]	@ (800746c <Cmd_SetStatus+0x48>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2001      	movs	r0, #1
 8007460:	4798      	blx	r3
  return;
 8007462:	bf00      	nop
 8007464:	bf00      	nop
}
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	20000280 	.word	0x20000280
 8007470:	20000070 	.word	0x20000070

08007474 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800747c:	2000      	movs	r0, #0
 800747e:	f7f9 fa35 	bl	80008ec <shci_cmd_resp_release>

  return;
 8007482:	bf00      	nop
}
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
	...

0800748c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8007494:	6879      	ldr	r1, [r7, #4]
 8007496:	4805      	ldr	r0, [pc, #20]	@ (80074ac <TlUserEvtReceived+0x20>)
 8007498:	f000 fae6 	bl	8007a68 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800749c:	4803      	ldr	r0, [pc, #12]	@ (80074ac <TlUserEvtReceived+0x20>)
 800749e:	f7f9 fa19 	bl	80008d4 <shci_notify_asynch_evt>

  return;
 80074a2:	bf00      	nop
}
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	20000068 	.word	0x20000068

080074b0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a05      	ldr	r2, [pc, #20]	@ (80074d0 <shci_register_io_bus+0x20>)
 80074bc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a04      	ldr	r2, [pc, #16]	@ (80074d4 <shci_register_io_bus+0x24>)
 80074c2:	611a      	str	r2, [r3, #16]

  return;
 80074c4:	bf00      	nop
}
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	0800766d 	.word	0x0800766d
 80074d4:	080076c1 	.word	0x080076c1

080074d8 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80074dc:	f001 fd9a 	bl	8009014 <HW_IPCC_Enable>

  return;
 80074e0:	bf00      	nop
}
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <TL_Init>:


void TL_Init( void )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80074e8:	4b10      	ldr	r3, [pc, #64]	@ (800752c <TL_Init+0x48>)
 80074ea:	4a11      	ldr	r2, [pc, #68]	@ (8007530 <TL_Init+0x4c>)
 80074ec:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80074ee:	4b0f      	ldr	r3, [pc, #60]	@ (800752c <TL_Init+0x48>)
 80074f0:	4a10      	ldr	r2, [pc, #64]	@ (8007534 <TL_Init+0x50>)
 80074f2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80074f4:	4b0d      	ldr	r3, [pc, #52]	@ (800752c <TL_Init+0x48>)
 80074f6:	4a10      	ldr	r2, [pc, #64]	@ (8007538 <TL_Init+0x54>)
 80074f8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80074fa:	4b0c      	ldr	r3, [pc, #48]	@ (800752c <TL_Init+0x48>)
 80074fc:	4a0f      	ldr	r2, [pc, #60]	@ (800753c <TL_Init+0x58>)
 80074fe:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8007500:	4b0a      	ldr	r3, [pc, #40]	@ (800752c <TL_Init+0x48>)
 8007502:	4a0f      	ldr	r2, [pc, #60]	@ (8007540 <TL_Init+0x5c>)
 8007504:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8007506:	4b09      	ldr	r3, [pc, #36]	@ (800752c <TL_Init+0x48>)
 8007508:	4a0e      	ldr	r2, [pc, #56]	@ (8007544 <TL_Init+0x60>)
 800750a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800750c:	4b07      	ldr	r3, [pc, #28]	@ (800752c <TL_Init+0x48>)
 800750e:	4a0e      	ldr	r2, [pc, #56]	@ (8007548 <TL_Init+0x64>)
 8007510:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8007512:	4b06      	ldr	r3, [pc, #24]	@ (800752c <TL_Init+0x48>)
 8007514:	4a0d      	ldr	r2, [pc, #52]	@ (800754c <TL_Init+0x68>)
 8007516:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8007518:	4b04      	ldr	r3, [pc, #16]	@ (800752c <TL_Init+0x48>)
 800751a:	4a0d      	ldr	r2, [pc, #52]	@ (8007550 <TL_Init+0x6c>)
 800751c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800751e:	4b03      	ldr	r3, [pc, #12]	@ (800752c <TL_Init+0x48>)
 8007520:	4a0c      	ldr	r2, [pc, #48]	@ (8007554 <TL_Init+0x70>)
 8007522:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8007524:	f001 fd8a 	bl	800903c <HW_IPCC_Init>

  return;
 8007528:	bf00      	nop
}
 800752a:	bd80      	pop	{r7, pc}
 800752c:	20030000 	.word	0x20030000
 8007530:	20030028 	.word	0x20030028
 8007534:	20030048 	.word	0x20030048
 8007538:	20030058 	.word	0x20030058
 800753c:	20030068 	.word	0x20030068
 8007540:	20030070 	.word	0x20030070
 8007544:	20030078 	.word	0x20030078
 8007548:	20030080 	.word	0x20030080
 800754c:	2003009c 	.word	0x2003009c
 8007550:	200300a0 	.word	0x200300a0
 8007554:	200300ac 	.word	0x200300ac

08007558 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8007564:	4811      	ldr	r0, [pc, #68]	@ (80075ac <TL_BLE_Init+0x54>)
 8007566:	f000 fa27 	bl	80079b8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800756a:	4b11      	ldr	r3, [pc, #68]	@ (80075b0 <TL_BLE_Init+0x58>)
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	689a      	ldr	r2, [r3, #8]
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	68da      	ldr	r2, [r3, #12]
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	4a0c      	ldr	r2, [pc, #48]	@ (80075b4 <TL_BLE_Init+0x5c>)
 8007584:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	4a08      	ldr	r2, [pc, #32]	@ (80075ac <TL_BLE_Init+0x54>)
 800758a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800758c:	f001 fd6c 	bl	8009068 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a08      	ldr	r2, [pc, #32]	@ (80075b8 <TL_BLE_Init+0x60>)
 8007596:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	4a07      	ldr	r2, [pc, #28]	@ (80075bc <TL_BLE_Init+0x64>)
 800759e:	6013      	str	r3, [r2, #0]

  return 0;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	200300c8 	.word	0x200300c8
 80075b0:	20030000 	.word	0x20030000
 80075b4:	20030a58 	.word	0x20030a58
 80075b8:	20000290 	.word	0x20000290
 80075bc:	20000294 	.word	0x20000294

080075c0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	460b      	mov	r3, r1
 80075ca:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80075cc:	4b09      	ldr	r3, [pc, #36]	@ (80075f4 <TL_BLE_SendCmd+0x34>)
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2201      	movs	r2, #1
 80075d4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80075d6:	4b07      	ldr	r3, [pc, #28]	@ (80075f4 <TL_BLE_SendCmd+0x34>)
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4619      	mov	r1, r3
 80075de:	2001      	movs	r0, #1
 80075e0:	f000 f96c 	bl	80078bc <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80075e4:	f001 fd5a 	bl	800909c <HW_IPCC_BLE_SendCmd>

  return 0;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	20030000 	.word	0x20030000

080075f8 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80075fe:	e01c      	b.n	800763a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8007600:	1d3b      	adds	r3, r7, #4
 8007602:	4619      	mov	r1, r3
 8007604:	4812      	ldr	r0, [pc, #72]	@ (8007650 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007606:	f000 fa76 	bl	8007af6 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	7a5b      	ldrb	r3, [r3, #9]
 800760e:	2b0f      	cmp	r3, #15
 8007610:	d003      	beq.n	800761a <HW_IPCC_BLE_RxEvtNot+0x22>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	7a5b      	ldrb	r3, [r3, #9]
 8007616:	2b0e      	cmp	r3, #14
 8007618:	d105      	bne.n	8007626 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4619      	mov	r1, r3
 800761e:	2002      	movs	r0, #2
 8007620:	f000 f94c 	bl	80078bc <OutputDbgTrace>
 8007624:	e004      	b.n	8007630 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4619      	mov	r1, r3
 800762a:	2003      	movs	r0, #3
 800762c:	f000 f946 	bl	80078bc <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8007630:	4b08      	ldr	r3, [pc, #32]	@ (8007654 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	4610      	mov	r0, r2
 8007638:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800763a:	4805      	ldr	r0, [pc, #20]	@ (8007650 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800763c:	f000 f9cc 	bl	80079d8 <LST_is_empty>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d0dc      	beq.n	8007600 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8007646:	bf00      	nop
}
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	200300c8 	.word	0x200300c8
 8007654:	20000290 	.word	0x20000290

08007658 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800765c:	4b02      	ldr	r3, [pc, #8]	@ (8007668 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4798      	blx	r3

  return;
 8007662:	bf00      	nop
}
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	20000294 	.word	0x20000294

0800766c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8007678:	480d      	ldr	r0, [pc, #52]	@ (80076b0 <TL_SYS_Init+0x44>)
 800767a:	f000 f99d 	bl	80079b8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800767e:	4b0d      	ldr	r3, [pc, #52]	@ (80076b4 <TL_SYS_Init+0x48>)
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	689a      	ldr	r2, [r3, #8]
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	4a08      	ldr	r2, [pc, #32]	@ (80076b0 <TL_SYS_Init+0x44>)
 8007690:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8007692:	f001 fd35 	bl	8009100 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a07      	ldr	r2, [pc, #28]	@ (80076b8 <TL_SYS_Init+0x4c>)
 800769c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	4a06      	ldr	r2, [pc, #24]	@ (80076bc <TL_SYS_Init+0x50>)
 80076a4:	6013      	str	r3, [r2, #0]

  return 0;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	200300d0 	.word	0x200300d0
 80076b4:	20030000 	.word	0x20030000
 80076b8:	20000298 	.word	0x20000298
 80076bc:	2000029c 	.word	0x2000029c

080076c0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	460b      	mov	r3, r1
 80076ca:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80076cc:	4b09      	ldr	r3, [pc, #36]	@ (80076f4 <TL_SYS_SendCmd+0x34>)
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2210      	movs	r2, #16
 80076d4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80076d6:	4b07      	ldr	r3, [pc, #28]	@ (80076f4 <TL_SYS_SendCmd+0x34>)
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4619      	mov	r1, r3
 80076de:	2004      	movs	r0, #4
 80076e0:	f000 f8ec 	bl	80078bc <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80076e4:	f001 fd26 	bl	8009134 <HW_IPCC_SYS_SendCmd>

  return 0;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	20030000 	.word	0x20030000

080076f8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80076fc:	4b07      	ldr	r3, [pc, #28]	@ (800771c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4619      	mov	r1, r3
 8007704:	2005      	movs	r0, #5
 8007706:	f000 f8d9 	bl	80078bc <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800770a:	4b05      	ldr	r3, [pc, #20]	@ (8007720 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a03      	ldr	r2, [pc, #12]	@ (800771c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007710:	68d2      	ldr	r2, [r2, #12]
 8007712:	6812      	ldr	r2, [r2, #0]
 8007714:	4610      	mov	r0, r2
 8007716:	4798      	blx	r3

  return;
 8007718:	bf00      	nop
}
 800771a:	bd80      	pop	{r7, pc}
 800771c:	20030000 	.word	0x20030000
 8007720:	20000298 	.word	0x20000298

08007724 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800772a:	e00e      	b.n	800774a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800772c:	1d3b      	adds	r3, r7, #4
 800772e:	4619      	mov	r1, r3
 8007730:	480b      	ldr	r0, [pc, #44]	@ (8007760 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007732:	f000 f9e0 	bl	8007af6 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4619      	mov	r1, r3
 800773a:	2006      	movs	r0, #6
 800773c:	f000 f8be 	bl	80078bc <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8007740:	4b08      	ldr	r3, [pc, #32]	@ (8007764 <HW_IPCC_SYS_EvtNot+0x40>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	4610      	mov	r0, r2
 8007748:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800774a:	4805      	ldr	r0, [pc, #20]	@ (8007760 <HW_IPCC_SYS_EvtNot+0x3c>)
 800774c:	f000 f944 	bl	80079d8 <LST_is_empty>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d0ea      	beq.n	800772c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8007756:	bf00      	nop
}
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	200300d0 	.word	0x200300d0
 8007764:	2000029c 	.word	0x2000029c

08007768 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8007770:	4817      	ldr	r0, [pc, #92]	@ (80077d0 <TL_MM_Init+0x68>)
 8007772:	f000 f921 	bl	80079b8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8007776:	4817      	ldr	r0, [pc, #92]	@ (80077d4 <TL_MM_Init+0x6c>)
 8007778:	f000 f91e 	bl	80079b8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800777c:	4b16      	ldr	r3, [pc, #88]	@ (80077d8 <TL_MM_Init+0x70>)
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	4a16      	ldr	r2, [pc, #88]	@ (80077dc <TL_MM_Init+0x74>)
 8007782:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8007784:	4b15      	ldr	r3, [pc, #84]	@ (80077dc <TL_MM_Init+0x74>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	6892      	ldr	r2, [r2, #8]
 800778c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800778e:	4b13      	ldr	r3, [pc, #76]	@ (80077dc <TL_MM_Init+0x74>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	68d2      	ldr	r2, [r2, #12]
 8007796:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8007798:	4b10      	ldr	r3, [pc, #64]	@ (80077dc <TL_MM_Init+0x74>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a0c      	ldr	r2, [pc, #48]	@ (80077d0 <TL_MM_Init+0x68>)
 800779e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80077a0:	4b0e      	ldr	r3, [pc, #56]	@ (80077dc <TL_MM_Init+0x74>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	6812      	ldr	r2, [r2, #0]
 80077a8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80077aa:	4b0c      	ldr	r3, [pc, #48]	@ (80077dc <TL_MM_Init+0x74>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	6852      	ldr	r2, [r2, #4]
 80077b2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80077b4:	4b09      	ldr	r3, [pc, #36]	@ (80077dc <TL_MM_Init+0x74>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	6912      	ldr	r2, [r2, #16]
 80077bc:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80077be:	4b07      	ldr	r3, [pc, #28]	@ (80077dc <TL_MM_Init+0x74>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	6952      	ldr	r2, [r2, #20]
 80077c6:	619a      	str	r2, [r3, #24]

  return;
 80077c8:	bf00      	nop
}
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	200300b8 	.word	0x200300b8
 80077d4:	20000288 	.word	0x20000288
 80077d8:	20030000 	.word	0x20030000
 80077dc:	200002a0 	.word	0x200002a0

080077e0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80077e8:	6879      	ldr	r1, [r7, #4]
 80077ea:	4807      	ldr	r0, [pc, #28]	@ (8007808 <TL_MM_EvtDone+0x28>)
 80077ec:	f000 f93c 	bl	8007a68 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80077f0:	6879      	ldr	r1, [r7, #4]
 80077f2:	2000      	movs	r0, #0
 80077f4:	f000 f862 	bl	80078bc <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80077f8:	4804      	ldr	r0, [pc, #16]	@ (800780c <TL_MM_EvtDone+0x2c>)
 80077fa:	f001 fce1 	bl	80091c0 <HW_IPCC_MM_SendFreeBuf>

  return;
 80077fe:	bf00      	nop
}
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	20000288 	.word	0x20000288
 800780c:	08007811 	.word	0x08007811

08007810 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007816:	e00c      	b.n	8007832 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8007818:	1d3b      	adds	r3, r7, #4
 800781a:	4619      	mov	r1, r3
 800781c:	480a      	ldr	r0, [pc, #40]	@ (8007848 <SendFreeBuf+0x38>)
 800781e:	f000 f96a 	bl	8007af6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8007822:	4b0a      	ldr	r3, [pc, #40]	@ (800784c <SendFreeBuf+0x3c>)
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	4611      	mov	r1, r2
 800782c:	4618      	mov	r0, r3
 800782e:	f000 f91b 	bl	8007a68 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007832:	4805      	ldr	r0, [pc, #20]	@ (8007848 <SendFreeBuf+0x38>)
 8007834:	f000 f8d0 	bl	80079d8 <LST_is_empty>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d0ec      	beq.n	8007818 <SendFreeBuf+0x8>
  }

  return;
 800783e:	bf00      	nop
}
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	20000288 	.word	0x20000288
 800784c:	20030000 	.word	0x20030000

08007850 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8007854:	4805      	ldr	r0, [pc, #20]	@ (800786c <TL_TRACES_Init+0x1c>)
 8007856:	f000 f8af 	bl	80079b8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800785a:	4b05      	ldr	r3, [pc, #20]	@ (8007870 <TL_TRACES_Init+0x20>)
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	4a03      	ldr	r2, [pc, #12]	@ (800786c <TL_TRACES_Init+0x1c>)
 8007860:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8007862:	f001 fcff 	bl	8009264 <HW_IPCC_TRACES_Init>

  return;
 8007866:	bf00      	nop
}
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	200300c0 	.word	0x200300c0
 8007870:	20030000 	.word	0x20030000

08007874 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800787a:	e008      	b.n	800788e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800787c:	1d3b      	adds	r3, r7, #4
 800787e:	4619      	mov	r1, r3
 8007880:	4808      	ldr	r0, [pc, #32]	@ (80078a4 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007882:	f000 f938 	bl	8007af6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4618      	mov	r0, r3
 800788a:	f000 f80d 	bl	80078a8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800788e:	4805      	ldr	r0, [pc, #20]	@ (80078a4 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007890:	f000 f8a2 	bl	80079d8 <LST_is_empty>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d0f0      	beq.n	800787c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800789a:	bf00      	nop
}
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	200300c0 	.word	0x200300c0

080078a8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80078bc:	b480      	push	{r7}
 80078be:	b087      	sub	sp, #28
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	4603      	mov	r3, r0
 80078c4:	6039      	str	r1, [r7, #0]
 80078c6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 80078c8:	79fb      	ldrb	r3, [r7, #7]
 80078ca:	2b06      	cmp	r3, #6
 80078cc:	d845      	bhi.n	800795a <OutputDbgTrace+0x9e>
 80078ce:	a201      	add	r2, pc, #4	@ (adr r2, 80078d4 <OutputDbgTrace+0x18>)
 80078d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d4:	080078f1 	.word	0x080078f1
 80078d8:	08007915 	.word	0x08007915
 80078dc:	0800791b 	.word	0x0800791b
 80078e0:	0800792f 	.word	0x0800792f
 80078e4:	0800793b 	.word	0x0800793b
 80078e8:	08007941 	.word	0x08007941
 80078ec:	0800794f 	.word	0x0800794f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	7a5b      	ldrb	r3, [r3, #9]
 80078f8:	2bff      	cmp	r3, #255	@ 0xff
 80078fa:	d005      	beq.n	8007908 <OutputDbgTrace+0x4c>
 80078fc:	2bff      	cmp	r3, #255	@ 0xff
 80078fe:	dc05      	bgt.n	800790c <OutputDbgTrace+0x50>
 8007900:	2b0e      	cmp	r3, #14
 8007902:	d005      	beq.n	8007910 <OutputDbgTrace+0x54>
 8007904:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8007906:	e001      	b.n	800790c <OutputDbgTrace+0x50>
          break;
 8007908:	bf00      	nop
 800790a:	e027      	b.n	800795c <OutputDbgTrace+0xa0>
          break;
 800790c:	bf00      	nop
 800790e:	e025      	b.n	800795c <OutputDbgTrace+0xa0>
          break;
 8007910:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8007912:	e023      	b.n	800795c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007918:	e020      	b.n	800795c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	7a5b      	ldrb	r3, [r3, #9]
 8007922:	2b0e      	cmp	r3, #14
 8007924:	d001      	beq.n	800792a <OutputDbgTrace+0x6e>
 8007926:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007928:	e000      	b.n	800792c <OutputDbgTrace+0x70>
          break;
 800792a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800792c:	e016      	b.n	800795c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	7a5b      	ldrb	r3, [r3, #9]
 8007936:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007938:	e010      	b.n	800795c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800793e:	e00d      	b.n	800795c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	785b      	ldrb	r3, [r3, #1]
 8007948:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 800794a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 800794c:	e006      	b.n	800795c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	7a5b      	ldrb	r3, [r3, #9]
 8007956:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007958:	e000      	b.n	800795c <OutputDbgTrace+0xa0>

    default:
      break;
 800795a:	bf00      	nop
  }

  return;
 800795c:	bf00      	nop
}
 800795e:	371c      	adds	r7, #28
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	4603      	mov	r3, r0
 8007970:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8007972:	4b0f      	ldr	r3, [pc, #60]	@ (80079b0 <OTP_Read+0x48>)
 8007974:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007976:	e002      	b.n	800797e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	3b08      	subs	r3, #8
 800797c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	3307      	adds	r3, #7
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	79fa      	ldrb	r2, [r7, #7]
 8007986:	429a      	cmp	r2, r3
 8007988:	d003      	beq.n	8007992 <OTP_Read+0x2a>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	4a09      	ldr	r2, [pc, #36]	@ (80079b4 <OTP_Read+0x4c>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d1f2      	bne.n	8007978 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	3307      	adds	r3, #7
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	79fa      	ldrb	r2, [r7, #7]
 800799a:	429a      	cmp	r2, r3
 800799c:	d001      	beq.n	80079a2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800799e:	2300      	movs	r3, #0
 80079a0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80079a2:	68fb      	ldr	r3, [r7, #12]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	1fff73f8 	.word	0x1fff73f8
 80079b4:	1fff7000 	.word	0x1fff7000

080079b8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	605a      	str	r2, [r3, #4]
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079e0:	f3ef 8310 	mrs	r3, PRIMASK
 80079e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80079e6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80079e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80079ea:	b672      	cpsid	i
}
 80079ec:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d102      	bne.n	80079fe <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80079f8:	2301      	movs	r3, #1
 80079fa:	75fb      	strb	r3, [r7, #23]
 80079fc:	e001      	b.n	8007a02 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80079fe:	2300      	movs	r3, #0
 8007a00:	75fb      	strb	r3, [r7, #23]
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	f383 8810 	msr	PRIMASK, r3
}
 8007a0c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8007a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	371c      	adds	r7, #28
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a26:	f3ef 8310 	mrs	r3, PRIMASK
 8007a2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007a2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007a30:	b672      	cpsid	i
}
 8007a32:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	605a      	str	r2, [r3, #4]
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	f383 8810 	msr	PRIMASK, r3
}
 8007a5a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007a5c:	bf00      	nop
 8007a5e:	371c      	adds	r7, #28
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b087      	sub	sp, #28
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a72:	f3ef 8310 	mrs	r3, PRIMASK
 8007a76:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a78:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007a7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007a7c:	b672      	cpsid	i
}
 8007a7e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	f383 8810 	msr	PRIMASK, r3
}
 8007aa6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007aa8:	bf00      	nop
 8007aaa:	371c      	adds	r7, #28
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b087      	sub	sp, #28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007abc:	f3ef 8310 	mrs	r3, PRIMASK
 8007ac0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007ac4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007ac6:	b672      	cpsid	i
}
 8007ac8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	6812      	ldr	r2, [r2, #0]
 8007ad2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	6852      	ldr	r2, [r2, #4]
 8007adc:	605a      	str	r2, [r3, #4]
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	f383 8810 	msr	PRIMASK, r3
}
 8007ae8:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007aea:	bf00      	nop
 8007aec:	371c      	adds	r7, #28
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b086      	sub	sp, #24
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b00:	f3ef 8310 	mrs	r3, PRIMASK
 8007b04:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b06:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007b08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007b0a:	b672      	cpsid	i
}
 8007b0c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7ff ffca 	bl	8007ab4 <LST_remove_node>
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	f383 8810 	msr	PRIMASK, r3
}
 8007b2a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007b2c:	bf00      	nop
 8007b2e:	3718      	adds	r7, #24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8007b34:	b480      	push	{r7}
 8007b36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8007b38:	4b03      	ldr	r3, [pc, #12]	@ (8007b48 <LL_FLASH_GetUDN+0x14>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	1fff7580 	.word	0x1fff7580

08007b4c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8007b50:	4b03      	ldr	r3, [pc, #12]	@ (8007b60 <LL_FLASH_GetDeviceID+0x14>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	b2db      	uxtb	r3, r3
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	1fff7584 	.word	0x1fff7584

08007b64 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8007b64:	b480      	push	{r7}
 8007b66:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8007b68:	4b03      	ldr	r3, [pc, #12]	@ (8007b78 <LL_FLASH_GetSTCompanyID+0x14>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	0a1b      	lsrs	r3, r3, #8
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	1fff7584 	.word	0x1fff7584

08007b7c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8007b7c:	b5b0      	push	{r4, r5, r7, lr}
 8007b7e:	b090      	sub	sp, #64	@ 0x40
 8007b80:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007b82:	2392      	movs	r3, #146	@ 0x92
 8007b84:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1<<CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 8007b88:	4a29      	ldr	r2, [pc, #164]	@ (8007c30 <APP_BLE_Init+0xb4>)
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	2004      	movs	r0, #4
 8007b8e:	f001 fccd 	bl	800952c <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1<<CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 8007b92:	2100      	movs	r1, #0
 8007b94:	2004      	movs	r0, #4
 8007b96:	f001 fceb 	bl	8009570 <UTIL_SEQ_SetTask>

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007b9a:	4b26      	ldr	r3, [pc, #152]	@ (8007c34 <APP_BLE_Init+0xb8>)
 8007b9c:	1d3c      	adds	r4, r7, #4
 8007b9e:	461d      	mov	r5, r3
 8007ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007bb0:	c403      	stmia	r4!, {r0, r1}
 8007bb2:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8007bb4:	f000 f922 	bl	8007dfc <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8007bb8:	2101      	movs	r1, #1
 8007bba:	2002      	movs	r0, #2
 8007bbc:	f001 fb8a 	bl	80092d4 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8007bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8007c38 <APP_BLE_Init+0xbc>)
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	2002      	movs	r0, #2
 8007bc6:	f001 fcb1 	bl	800952c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8007bca:	1d3b      	adds	r3, r7, #4
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7ff f8bd 	bl	8006d4c <SHCI_C2_BLE_Init>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8007bd8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <APP_BLE_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8007be0:	f7f9 fe1d 	bl	800181e <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8007be4:	f000 f920 	bl	8007e28 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8007be8:	f7ff f80a 	bl	8006c00 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007bec:	4b13      	ldr	r3, [pc, #76]	@ (8007c3c <APP_BLE_Init+0xc0>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8007bf4:	4b11      	ldr	r3, [pc, #68]	@ (8007c3c <APP_BLE_Init+0xc0>)
 8007bf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007bfa:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8007bfc:	4a10      	ldr	r2, [pc, #64]	@ (8007c40 <APP_BLE_Init+0xc4>)
 8007bfe:	2100      	movs	r1, #0
 8007c00:	2001      	movs	r0, #1
 8007c02:	f001 fc93 	bl	800952c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8007c06:	2006      	movs	r0, #6
 8007c08:	f7fe fe6e 	bl	80068e8 <aci_hal_set_radio_activity_mask>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8007c12:	f000 fbaf 	bl	8008374 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8007c16:	4b09      	ldr	r3, [pc, #36]	@ (8007c3c <APP_BLE_Init+0xc0>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8007c1c:	4b07      	ldr	r3, [pc, #28]	@ (8007c3c <APP_BLE_Init+0xc0>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8007c22:	2001      	movs	r0, #1
 8007c24:	f000 f9b4 	bl	8007f90 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8007c28:	bf00      	nop
}
 8007c2a:	3740      	adds	r7, #64	@ 0x40
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bdb0      	pop	{r4, r5, r7, pc}
 8007c30:	080081a1 	.word	0x080081a1
 8007c34:	08009858 	.word	0x08009858
 8007c38:	08006f69 	.word	0x08006f69
 8007c3c:	200002ac 	.word	0x200002ac
 8007c40:	08008079 	.word	0x08008079

08007c44 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b08c      	sub	sp, #48	@ 0x30
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8007c4c:	2392      	movs	r3, #146	@ 0x92
 8007c4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	3301      	adds	r3, #1
 8007c56:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8007c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	2bff      	cmp	r3, #255	@ 0xff
 8007c5e:	d05c      	beq.n	8007d1a <SVCCTL_App_Notification+0xd6>
 8007c60:	2bff      	cmp	r3, #255	@ 0xff
 8007c62:	f300 80bd 	bgt.w	8007de0 <SVCCTL_App_Notification+0x19c>
 8007c66:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c68:	d02b      	beq.n	8007cc2 <SVCCTL_App_Notification+0x7e>
 8007c6a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c6c:	f300 80b8 	bgt.w	8007de0 <SVCCTL_App_Notification+0x19c>
 8007c70:	2b05      	cmp	r3, #5
 8007c72:	d002      	beq.n	8007c7a <SVCCTL_App_Notification+0x36>
 8007c74:	2b10      	cmp	r3, #16
 8007c76:	d020      	beq.n	8007cba <SVCCTL_App_Notification+0x76>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8007c78:	e0b2      	b.n	8007de0 <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8007c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c7c:	3302      	adds	r3, #2
 8007c7e:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	4b59      	ldr	r3, [pc, #356]	@ (8007df0 <SVCCTL_App_Notification+0x1ac>)
 8007c8a:	8adb      	ldrh	r3, [r3, #22]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d106      	bne.n	8007c9e <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8007c90:	4b57      	ldr	r3, [pc, #348]	@ (8007df0 <SVCCTL_App_Notification+0x1ac>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007c96:	4b56      	ldr	r3, [pc, #344]	@ (8007df0 <SVCCTL_App_Notification+0x1ac>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8007c9e:	2001      	movs	r0, #1
 8007ca0:	f000 f976 	bl	8007f90 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8007ca4:	4b53      	ldr	r3, [pc, #332]	@ (8007df4 <SVCCTL_App_Notification+0x1b0>)
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007caa:	4b51      	ldr	r3, [pc, #324]	@ (8007df0 <SVCCTL_App_Notification+0x1ac>)
 8007cac:	8ada      	ldrh	r2, [r3, #22]
 8007cae:	4b51      	ldr	r3, [pc, #324]	@ (8007df4 <SVCCTL_App_Notification+0x1b0>)
 8007cb0:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8007cb2:	4850      	ldr	r0, [pc, #320]	@ (8007df4 <SVCCTL_App_Notification+0x1b0>)
 8007cb4:	f000 fb4a 	bl	800834c <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8007cb8:	e095      	b.n	8007de6 <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 8007cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cbc:	3302      	adds	r3, #2
 8007cbe:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 8007cc0:	e091      	b.n	8007de6 <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8007cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc4:	3302      	adds	r3, #2
 8007cc6:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d001      	beq.n	8007cd4 <SVCCTL_App_Notification+0x90>
 8007cd0:	2b03      	cmp	r3, #3
          break;
 8007cd2:	e021      	b.n	8007d18 <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8007cda:	4b45      	ldr	r3, [pc, #276]	@ (8007df0 <SVCCTL_App_Notification+0x1ac>)
 8007cdc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007ce0:	2b04      	cmp	r3, #4
 8007ce2:	d104      	bne.n	8007cee <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8007ce4:	4b42      	ldr	r3, [pc, #264]	@ (8007df0 <SVCCTL_App_Notification+0x1ac>)
 8007ce6:	2206      	movs	r2, #6
 8007ce8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8007cec:	e003      	b.n	8007cf6 <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8007cee:	4b40      	ldr	r3, [pc, #256]	@ (8007df0 <SVCCTL_App_Notification+0x1ac>)
 8007cf0:	2205      	movs	r2, #5
 8007cf2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8007df0 <SVCCTL_App_Notification+0x1ac>)
 8007d00:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8007d02:	4b3c      	ldr	r3, [pc, #240]	@ (8007df4 <SVCCTL_App_Notification+0x1b0>)
 8007d04:	2200      	movs	r2, #0
 8007d06:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007d08:	4b39      	ldr	r3, [pc, #228]	@ (8007df0 <SVCCTL_App_Notification+0x1ac>)
 8007d0a:	8ada      	ldrh	r2, [r3, #22]
 8007d0c:	4b39      	ldr	r3, [pc, #228]	@ (8007df4 <SVCCTL_App_Notification+0x1b0>)
 8007d0e:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8007d10:	4838      	ldr	r0, [pc, #224]	@ (8007df4 <SVCCTL_App_Notification+0x1b0>)
 8007d12:	f000 fb1b 	bl	800834c <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8007d16:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8007d18:	e065      	b.n	8007de6 <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8007d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d1c:	3302      	adds	r3, #2
 8007d1e:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 8007d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d048      	beq.n	8007dc0 <SVCCTL_App_Notification+0x17c>
 8007d2e:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8007d32:	4293      	cmp	r3, r2
 8007d34:	dc56      	bgt.n	8007de4 <SVCCTL_App_Notification+0x1a0>
 8007d36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d3a:	d04b      	beq.n	8007dd4 <SVCCTL_App_Notification+0x190>
 8007d3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d40:	dc50      	bgt.n	8007de4 <SVCCTL_App_Notification+0x1a0>
 8007d42:	f240 420a 	movw	r2, #1034	@ 0x40a
 8007d46:	4293      	cmp	r3, r2
 8007d48:	dc4c      	bgt.n	8007de4 <SVCCTL_App_Notification+0x1a0>
 8007d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d4e:	dc04      	bgt.n	8007d5a <SVCCTL_App_Notification+0x116>
 8007d50:	2b04      	cmp	r3, #4
 8007d52:	d041      	beq.n	8007dd8 <SVCCTL_App_Notification+0x194>
 8007d54:	2b06      	cmp	r3, #6
 8007d56:	d039      	beq.n	8007dcc <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007d58:	e044      	b.n	8007de4 <SVCCTL_App_Notification+0x1a0>
      switch (p_blecore_evt->ecode)
 8007d5a:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8007d5e:	2b09      	cmp	r3, #9
 8007d60:	d840      	bhi.n	8007de4 <SVCCTL_App_Notification+0x1a0>
 8007d62:	a201      	add	r2, pc, #4	@ (adr r2, 8007d68 <SVCCTL_App_Notification+0x124>)
 8007d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d68:	08007db9 	.word	0x08007db9
 8007d6c:	08007d91 	.word	0x08007d91
 8007d70:	08007de5 	.word	0x08007de5
 8007d74:	08007de5 	.word	0x08007de5
 8007d78:	08007de5 	.word	0x08007de5
 8007d7c:	08007de5 	.word	0x08007de5
 8007d80:	08007ddd 	.word	0x08007ddd
 8007d84:	08007de5 	.word	0x08007de5
 8007d88:	08007da5 	.word	0x08007da5
 8007d8c:	08007ddd 	.word	0x08007ddd
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8007d90:	4b17      	ldr	r3, [pc, #92]	@ (8007df0 <SVCCTL_App_Notification+0x1ac>)
 8007d92:	8adb      	ldrh	r3, [r3, #22]
 8007d94:	4918      	ldr	r1, [pc, #96]	@ (8007df8 <SVCCTL_App_Notification+0x1b4>)
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fd ffa8 	bl	8005cec <aci_gap_pass_key_resp>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8007da2:	e01c      	b.n	8007dde <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8007da4:	4b12      	ldr	r3, [pc, #72]	@ (8007df0 <SVCCTL_App_Notification+0x1ac>)
 8007da6:	8adb      	ldrh	r3, [r3, #22]
 8007da8:	2101      	movs	r1, #1
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe f948 	bl	8006040 <aci_gap_numeric_comparison_value_confirm_yesno>
 8007db0:	4603      	mov	r3, r0
 8007db2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8007db6:	e012      	b.n	8007dde <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8007db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dba:	3302      	adds	r3, #2
 8007dbc:	623b      	str	r3, [r7, #32]
          break;
 8007dbe:	e00e      	b.n	8007dde <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8007dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8007df0 <SVCCTL_App_Notification+0x1ac>)
 8007dc2:	8adb      	ldrh	r3, [r3, #22]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fe fc4e 	bl	8006666 <aci_gatt_confirm_indication>
        break;
 8007dca:	e008      	b.n	8007dde <SVCCTL_App_Notification+0x19a>
	      p_warning_event = (aci_hal_warning_event_rp0 *)p_blecore_evt->data;
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dce:	3302      	adds	r3, #2
 8007dd0:	61fb      	str	r3, [r7, #28]
          break;
 8007dd2:	e004      	b.n	8007dde <SVCCTL_App_Notification+0x19a>
          break;
 8007dd4:	bf00      	nop
 8007dd6:	e005      	b.n	8007de4 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8007dd8:	bf00      	nop
 8007dda:	e003      	b.n	8007de4 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8007ddc:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007dde:	e001      	b.n	8007de4 <SVCCTL_App_Notification+0x1a0>
      break;
 8007de0:	bf00      	nop
 8007de2:	e000      	b.n	8007de6 <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007de4:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8007de6:	2301      	movs	r3, #1
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3730      	adds	r7, #48	@ 0x30
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	200002ac 	.word	0x200002ac
 8007df4:	20000330 	.word	0x20000330
 8007df8:	0001b207 	.word	0x0001b207

08007dfc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8007e02:	4b06      	ldr	r3, [pc, #24]	@ (8007e1c <Ble_Tl_Init+0x20>)
 8007e04:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8007e06:	4b06      	ldr	r3, [pc, #24]	@ (8007e20 <Ble_Tl_Init+0x24>)
 8007e08:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8007e0a:	463b      	mov	r3, r7
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4805      	ldr	r0, [pc, #20]	@ (8007e24 <Ble_Tl_Init+0x28>)
 8007e10:	f7ff f88e 	bl	8006f30 <hci_init>

  return;
 8007e14:	bf00      	nop
}
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	200300d8 	.word	0x200300d8
 8007e20:	08008129 	.word	0x08008129
 8007e24:	080080f1 	.word	0x080080f1

08007e28 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8007e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e2a:	b08d      	sub	sp, #52	@ 0x34
 8007e2c:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8007e2e:	2300      	movs	r3, #0
 8007e30:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007e32:	2392      	movs	r3, #146	@ 0x92
 8007e34:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8007e36:	f7fe fdab 	bl	8006990 <hci_reset>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8007e3e:	f000 f8d7 	bl	8007ff0 <BleGetBdAddress>
 8007e42:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, CONFIG_DATA_PUBLIC_ADDRESS_LEN, (uint8_t*) p_bd_addr);
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	2106      	movs	r1, #6
 8007e48:	2000      	movs	r0, #0
 8007e4a:	f7fe fc61 	bl	8006710 <aci_hal_write_config_data>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8007e52:	4a4a      	ldr	r2, [pc, #296]	@ (8007f7c <Ble_Hci_Gap_Gatt_Init+0x154>)
 8007e54:	2110      	movs	r1, #16
 8007e56:	2018      	movs	r0, #24
 8007e58:	f7fe fc5a 	bl	8006710 <aci_hal_write_config_data>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8007e60:	4a47      	ldr	r2, [pc, #284]	@ (8007f80 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8007e62:	2110      	movs	r1, #16
 8007e64:	2008      	movs	r0, #8
 8007e66:	f7fe fc53 	bl	8006710 <aci_hal_write_config_data>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8007e6e:	2118      	movs	r1, #24
 8007e70:	2001      	movs	r0, #1
 8007e72:	f7fe fcd2 	bl	800681a <aci_hal_set_tx_power_level>
 8007e76:	4603      	mov	r3, r0
 8007e78:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8007e7a:	f7fe f948 	bl	800610e <aci_gatt_init>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8007e82:	2300      	movs	r3, #0
 8007e84:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8007e86:	7bfb      	ldrb	r3, [r7, #15]
 8007e88:	f043 0301 	orr.w	r3, r3, #1
 8007e8c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d01f      	beq.n	8007ed4 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8007e94:	4b3b      	ldr	r3, [pc, #236]	@ (8007f84 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8007e96:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8007e98:	1dba      	adds	r2, r7, #6
 8007e9a:	7bf8      	ldrb	r0, [r7, #15]
 8007e9c:	1cbb      	adds	r3, r7, #2
 8007e9e:	9301      	str	r3, [sp, #4]
 8007ea0:	1d3b      	adds	r3, r7, #4
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	2208      	movs	r2, #8
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	f7fd ff86 	bl	8005dba <aci_gap_init>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8007eb2:	88fc      	ldrh	r4, [r7, #6]
 8007eb4:	88bd      	ldrh	r5, [r7, #4]
 8007eb6:	68b8      	ldr	r0, [r7, #8]
 8007eb8:	f7f8 f960 	bl	800017c <strlen>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	b2da      	uxtb	r2, r3
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	4629      	mov	r1, r5
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f7fe fb22 	bl	8006514 <aci_gatt_update_char_value>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8007ed4:	88f8      	ldrh	r0, [r7, #6]
 8007ed6:	8879      	ldrh	r1, [r7, #2]
 8007ed8:	463b      	mov	r3, r7
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	2302      	movs	r3, #2
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f7fe fb18 	bl	8006514 <aci_gatt_update_char_value>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8007ee8:	2202      	movs	r2, #2
 8007eea:	2102      	movs	r1, #2
 8007eec:	2000      	movs	r0, #0
 8007eee:	f7fe fd73 	bl	80069d8 <hci_le_set_default_phy>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8007ef6:	4b24      	ldr	r3, [pc, #144]	@ (8007f88 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ef8:	2201      	movs	r2, #1
 8007efa:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8007efc:	4b22      	ldr	r3, [pc, #136]	@ (8007f88 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fd fddb 	bl	8005abc <aci_gap_set_io_capability>
 8007f06:	4603      	mov	r3, r0
 8007f08:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8007f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8007f88 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8007f10:	4b1d      	ldr	r3, [pc, #116]	@ (8007f88 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f12:	2208      	movs	r2, #8
 8007f14:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8007f16:	4b1c      	ldr	r3, [pc, #112]	@ (8007f88 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f18:	2210      	movs	r2, #16
 8007f1a:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8007f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8007f88 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8007f22:	4b19      	ldr	r3, [pc, #100]	@ (8007f88 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f24:	4a19      	ldr	r2, [pc, #100]	@ (8007f8c <Ble_Hci_Gap_Gatt_Init+0x164>)
 8007f26:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8007f28:	4b17      	ldr	r3, [pc, #92]	@ (8007f88 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8007f2e:	4b16      	ldr	r3, [pc, #88]	@ (8007f88 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f30:	789c      	ldrb	r4, [r3, #2]
 8007f32:	4b15      	ldr	r3, [pc, #84]	@ (8007f88 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f34:	785d      	ldrb	r5, [r3, #1]
 8007f36:	4b14      	ldr	r3, [pc, #80]	@ (8007f88 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f38:	791b      	ldrb	r3, [r3, #4]
 8007f3a:	4a13      	ldr	r2, [pc, #76]	@ (8007f88 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f3c:	7952      	ldrb	r2, [r2, #5]
 8007f3e:	4912      	ldr	r1, [pc, #72]	@ (8007f88 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f40:	78c9      	ldrb	r1, [r1, #3]
 8007f42:	4811      	ldr	r0, [pc, #68]	@ (8007f88 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f44:	6880      	ldr	r0, [r0, #8]
 8007f46:	2600      	movs	r6, #0
 8007f48:	9604      	str	r6, [sp, #16]
 8007f4a:	9003      	str	r0, [sp, #12]
 8007f4c:	9102      	str	r1, [sp, #8]
 8007f4e:	9201      	str	r2, [sp, #4]
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	2300      	movs	r3, #0
 8007f54:	2201      	movs	r2, #1
 8007f56:	4629      	mov	r1, r5
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f7fd fe03 	bl	8005b64 <aci_gap_set_authentication_requirement>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8007f62:	4b09      	ldr	r3, [pc, #36]	@ (8007f88 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f64:	789b      	ldrb	r3, [r3, #2]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8007f6a:	f7fe f845 	bl	8005ff8 <aci_gap_configure_filter_accept_list>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8007f72:	bf00      	nop
 8007f74:	371c      	adds	r7, #28
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	08009aa0 	.word	0x08009aa0
 8007f80:	08009ab0 	.word	0x08009ab0
 8007f84:	08009894 	.word	0x08009894
 8007f88:	200002ac 	.word	0x200002ac
 8007f8c:	0001b207 	.word	0x0001b207

08007f90 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b08c      	sub	sp, #48	@ 0x30
 8007f94:	af08      	add	r7, sp, #32
 8007f96:	4603      	mov	r3, r0
 8007f98:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007f9a:	2392      	movs	r3, #146	@ 0x92
 8007f9c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8007f9e:	4a12      	ldr	r2, [pc, #72]	@ (8007fe8 <Adv_Request+0x58>)
 8007fa0:	79fb      	ldrb	r3, [r7, #7]
 8007fa2:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	9306      	str	r3, [sp, #24]
 8007faa:	2300      	movs	r3, #0
 8007fac:	9305      	str	r3, [sp, #20]
 8007fae:	2300      	movs	r3, #0
 8007fb0:	9304      	str	r3, [sp, #16]
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	9303      	str	r3, [sp, #12]
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	9302      	str	r3, [sp, #8]
 8007fba:	2300      	movs	r3, #0
 8007fbc:	9301      	str	r3, [sp, #4]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	22a0      	movs	r2, #160	@ 0xa0
 8007fc6:	2180      	movs	r1, #128	@ 0x80
 8007fc8:	2000      	movs	r0, #0
 8007fca:	f7fd fc7d 	bl	80058c8 <aci_gap_set_discoverable>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8007fd2:	4906      	ldr	r1, [pc, #24]	@ (8007fec <Adv_Request+0x5c>)
 8007fd4:	200e      	movs	r0, #14
 8007fd6:	f7fd ff9d 	bl	8005f14 <aci_gap_update_adv_data>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8007fde:	bf00      	nop
}
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	200002ac 	.word	0x200002ac
 8007fec:	20000014 	.word	0x20000014

08007ff0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8007ff6:	f7ff fd9d 	bl	8007b34 <LL_FLASH_GetUDN>
 8007ffa:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008002:	d023      	beq.n	800804c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8008004:	f7ff fdae 	bl	8007b64 <LL_FLASH_GetSTCompanyID>
 8008008:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800800a:	f7ff fd9f 	bl	8007b4c <LL_FLASH_GetDeviceID>
 800800e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	b2da      	uxtb	r2, r3
 8008014:	4b16      	ldr	r3, [pc, #88]	@ (8008070 <BleGetBdAddress+0x80>)
 8008016:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	0a1b      	lsrs	r3, r3, #8
 800801c:	b2da      	uxtb	r2, r3
 800801e:	4b14      	ldr	r3, [pc, #80]	@ (8008070 <BleGetBdAddress+0x80>)
 8008020:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	b2da      	uxtb	r2, r3
 8008026:	4b12      	ldr	r3, [pc, #72]	@ (8008070 <BleGetBdAddress+0x80>)
 8008028:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	b2da      	uxtb	r2, r3
 800802e:	4b10      	ldr	r3, [pc, #64]	@ (8008070 <BleGetBdAddress+0x80>)
 8008030:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	0a1b      	lsrs	r3, r3, #8
 8008036:	b2da      	uxtb	r2, r3
 8008038:	4b0d      	ldr	r3, [pc, #52]	@ (8008070 <BleGetBdAddress+0x80>)
 800803a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	0c1b      	lsrs	r3, r3, #16
 8008040:	b2da      	uxtb	r2, r3
 8008042:	4b0b      	ldr	r3, [pc, #44]	@ (8008070 <BleGetBdAddress+0x80>)
 8008044:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8008046:	4b0a      	ldr	r3, [pc, #40]	@ (8008070 <BleGetBdAddress+0x80>)
 8008048:	617b      	str	r3, [r7, #20]
 800804a:	e00b      	b.n	8008064 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800804c:	2000      	movs	r0, #0
 800804e:	f7ff fc8b 	bl	8007968 <OTP_Read>
 8008052:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d002      	beq.n	8008060 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	617b      	str	r3, [r7, #20]
 800805e:	e001      	b.n	8008064 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8008060:	4b04      	ldr	r3, [pc, #16]	@ (8008074 <BleGetBdAddress+0x84>)
 8008062:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8008064:	697b      	ldr	r3, [r7, #20]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3718      	adds	r7, #24
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	200002a4 	.word	0x200002a4
 8008074:	08009a98 	.word	0x08009a98

08008078 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800807e:	4b0a      	ldr	r3, [pc, #40]	@ (80080a8 <Adv_Cancel+0x30>)
 8008080:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008084:	2b05      	cmp	r3, #5
 8008086:	d00a      	beq.n	800809e <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008088:	2392      	movs	r3, #146	@ 0x92
 800808a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800808c:	f7fd fbf8 	bl	8005880 <aci_gap_set_non_discoverable>
 8008090:	4603      	mov	r3, r0
 8008092:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008094:	4b04      	ldr	r3, [pc, #16]	@ (80080a8 <Adv_Cancel+0x30>)
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800809c:	bf00      	nop
 800809e:	bf00      	nop
}
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	200002ac 	.word	0x200002ac

080080ac <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80080b4:	2100      	movs	r1, #0
 80080b6:	2002      	movs	r0, #2
 80080b8:	f001 fa5a 	bl	8009570 <UTIL_SEQ_SetTask>

  return;
 80080bc:	bf00      	nop
}
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80080cc:	2001      	movs	r0, #1
 80080ce:	f001 fabb 	bl	8009648 <UTIL_SEQ_SetEvt>

  return;
 80080d2:	bf00      	nop
}
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b082      	sub	sp, #8
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80080e2:	2001      	movs	r0, #1
 80080e4:	f001 fad0 	bl	8009688 <UTIL_SEQ_WaitEvt>

  return;
 80080e8:	bf00      	nop
}
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	3308      	adds	r3, #8
 8008102:	4618      	mov	r0, r3
 8008104:	f7fe fdce 	bl	8006ca4 <SVCCTL_UserEvtRx>
 8008108:	4603      	mov	r3, r0
 800810a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800810c:	7afb      	ldrb	r3, [r7, #11]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2201      	movs	r2, #1
 8008116:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8008118:	e003      	b.n	8008122 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	701a      	strb	r2, [r3, #0]
  return;
 8008120:	bf00      	nop
}
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	4603      	mov	r3, r0
 8008130:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8008132:	79fb      	ldrb	r3, [r7, #7]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d002      	beq.n	800813e <BLE_StatusNot+0x16>
 8008138:	2b01      	cmp	r3, #1
 800813a:	d006      	beq.n	800814a <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800813c:	e00b      	b.n	8008156 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800813e:	2307      	movs	r3, #7
 8008140:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f001 fa40 	bl	80095c8 <UTIL_SEQ_PauseTask>
      break;
 8008148:	e005      	b.n	8008156 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800814a:	2307      	movs	r3, #7
 800814c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f001 fa5a 	bl	8009608 <UTIL_SEQ_ResumeTask>
      break;
 8008154:	bf00      	nop
  }

  return;
 8008156:	bf00      	nop
}
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <ble_calculate_chksum>:

#include "ble_custom_utils.h"



uint8_t ble_calculate_chksum(uint8_t *pck, uint8_t length){
 800815e:	b480      	push	{r7}
 8008160:	b085      	sub	sp, #20
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	460b      	mov	r3, r1
 8008168:	70fb      	strb	r3, [r7, #3]
	uint8_t chksum=0x00;
 800816a:	2300      	movs	r3, #0
 800816c:	73fb      	strb	r3, [r7, #15]
	uint16_t i;


	for(i=0; i<length; i++){
 800816e:	2300      	movs	r3, #0
 8008170:	81bb      	strh	r3, [r7, #12]
 8008172:	e009      	b.n	8008188 <ble_calculate_chksum+0x2a>
		chksum= (*(pck+i)) +chksum;
 8008174:	89bb      	ldrh	r3, [r7, #12]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	4413      	add	r3, r2
 800817a:	781a      	ldrb	r2, [r3, #0]
 800817c:	7bfb      	ldrb	r3, [r7, #15]
 800817e:	4413      	add	r3, r2
 8008180:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<length; i++){
 8008182:	89bb      	ldrh	r3, [r7, #12]
 8008184:	3301      	adds	r3, #1
 8008186:	81bb      	strh	r3, [r7, #12]
 8008188:	78fb      	ldrb	r3, [r7, #3]
 800818a:	b29b      	uxth	r3, r3
 800818c:	89ba      	ldrh	r2, [r7, #12]
 800818e:	429a      	cmp	r2, r3
 8008190:	d3f0      	bcc.n	8008174 <ble_calculate_chksum+0x16>
	}

	return chksum;
 8008192:	7bfb      	ldrb	r3, [r7, #15]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <myTask>:
/* HealthMonitoringS */
static void Custom_Charnotify_Update_Char(void);
static void Custom_Charnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
void myTask(void){
 80081a0:	b580      	push	{r7, lr}
 80081a2:	af00      	add	r7, sp, #0
	//This task Controls notifycation Char. Check Pending Notification and execute it
	if(Notify_Interface.Status==Notify_Pending){
 80081a4:	4b07      	ldr	r3, [pc, #28]	@ (80081c4 <myTask+0x24>)
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d104      	bne.n	80081b6 <myTask+0x16>
		Notify_Interface.Status=Notify_None;
 80081ac:	4b05      	ldr	r3, [pc, #20]	@ (80081c4 <myTask+0x24>)
 80081ae:	2200      	movs	r2, #0
 80081b0:	701a      	strb	r2, [r3, #0]
//		UpdateCharData[0]+=0x01;


		Custom_Charnotify_Update_Char(); // This function triggers the Notificaation of the the content of NotifyCharData array
 80081b2:	f000 f8f7 	bl	80083a4 <Custom_Charnotify_Update_Char>

	}


	//Re-Schedule the task
	UTIL_SEQ_SetTask(1<<CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 80081b6:	2100      	movs	r1, #0
 80081b8:	2004      	movs	r0, #4
 80081ba:	f001 f9d9 	bl	8009570 <UTIL_SEQ_SetTask>
}
 80081be:	bf00      	nop
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	20000534 	.word	0x20000534

080081c8 <ble_notify_interface_get>:


Custom_BLE_Notify_interface_t* ble_notify_interface_get(){
 80081c8:	b480      	push	{r7}
 80081ca:	af00      	add	r7, sp, #0
	return &Notify_Interface;
 80081cc:	4b02      	ldr	r3, [pc, #8]	@ (80081d8 <ble_notify_interface_get+0x10>)
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr
 80081d8:	20000534 	.word	0x20000534

080081dc <Custom_STM_App_Notification>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08a      	sub	sp, #40	@ 0x28
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	f200 80a7 	bhi.w	800833c <Custom_STM_App_Notification+0x160>
 80081ee:	a201      	add	r2, pc, #4	@ (adr r2, 80081f4 <Custom_STM_App_Notification+0x18>)
 80081f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f4:	08008205 	.word	0x08008205
 80081f8:	0800833d 	.word	0x0800833d
 80081fc:	0800833d 	.word	0x0800833d
 8008200:	0800833d 	.word	0x0800833d

    /* HealthMonitoringS */
    case CUSTOM_STM_CHARWRITE_WRITE_EVT:
      /* USER CODE BEGIN CUSTOM_STM_CHARWRITE_WRITE_EVT */

    	uint8_t * p_Payload = pNotification->DataTransfered.pPayload ;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	627b      	str	r3, [r7, #36]	@ 0x24
    	uint8_t req_length = pNotification->DataTransfered.Length ;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	7a1b      	ldrb	r3, [r3, #8]
 800820e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    	// Sanity check for minimal packet size (CMD + LEN + CRC)
//		if (req_length < 7)
//			break;
		uint8_t cmd = p_Payload[0];
 8008212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		uint8_t len = p_Payload[1];
 800821a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821c:	785b      	ldrb	r3, [r3, #1]
 800821e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		uint8_t *params = &p_Payload[2];
 8008222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008224:	3302      	adds	r3, #2
 8008226:	61fb      	str	r3, [r7, #28]
		uint8_t chksum_rcv = p_Payload[req_length - 1];
 8008228:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800822c:	3b01      	subs	r3, #1
 800822e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008230:	4413      	add	r3, r2
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	76fb      	strb	r3, [r7, #27]
		uint8_t chksum_calc = ble_calculate_chksum(p_Payload, req_length - 1);
 8008236:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800823a:	3b01      	subs	r3, #1
 800823c:	b2db      	uxtb	r3, r3
 800823e:	4619      	mov	r1, r3
 8008240:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008242:	f7ff ff8c 	bl	800815e <ble_calculate_chksum>
 8008246:	4603      	mov	r3, r0
 8008248:	76bb      	strb	r3, [r7, #26]
//		}


		// Filter the CMds

		    if (cmd == 0x01) { // REQ_HR_SPO2_DATA
 800824a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800824e:	2b01      	cmp	r3, #1
 8008250:	d102      	bne.n	8008258 <Custom_STM_App_Notification+0x7c>
		    	data_handler_req_hr_spo2();
 8008252:	f000 fce3 	bl	8008c1c <data_handler_req_hr_spo2>


//    	Notify_Interface.Status=Notify_Pending; // Schedule a new Notification

      /* USER CODE END CUSTOM_STM_CHARWRITE_WRITE_EVT */
      break;
 8008256:	e073      	b.n	8008340 <Custom_STM_App_Notification+0x164>
		    } else if (cmd == 0x02) { // REQ_TEMP_DATA
 8008258:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800825c:	2b02      	cmp	r3, #2
 800825e:	d107      	bne.n	8008270 <Custom_STM_App_Notification+0x94>
		        uint8_t temp_type = params[0];  // 0x01 = Body, 0x02 = Env, 0x03 = Both
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	72fb      	strb	r3, [r7, #11]
		        data_handler_req_temp(temp_type);
 8008266:	7afb      	ldrb	r3, [r7, #11]
 8008268:	4618      	mov	r0, r3
 800826a:	f000 fcdd 	bl	8008c28 <data_handler_req_temp>
      break;
 800826e:	e067      	b.n	8008340 <Custom_STM_App_Notification+0x164>
		    } else if (cmd == 0x03) { // REQ_PRESSURE_DATA
 8008270:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8008274:	2b03      	cmp	r3, #3
 8008276:	d102      	bne.n	800827e <Custom_STM_App_Notification+0xa2>
		    	data_handler_req_pressure();
 8008278:	f000 fce3 	bl	8008c42 <data_handler_req_pressure>
      break;
 800827c:	e060      	b.n	8008340 <Custom_STM_App_Notification+0x164>
		    } else if (cmd == 0x04) { // REQ_ALL_DATA
 800827e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8008282:	2b04      	cmp	r3, #4
 8008284:	d102      	bne.n	800828c <Custom_STM_App_Notification+0xb0>
		    	data_handler_req_all_data();
 8008286:	f000 fce2 	bl	8008c4e <data_handler_req_all_data>
      break;
 800828a:	e059      	b.n	8008340 <Custom_STM_App_Notification+0x164>
		    } else if (cmd == 0x10) { // REQ_HISTORICAL_DATA
 800828c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8008290:	2b10      	cmp	r3, #16
 8008292:	d115      	bne.n	80082c0 <Custom_STM_App_Notification+0xe4>
		        uint32_t start_time = (params[0] << 24) | (params[1] << 16) | (params[2] << 8) | params[3];
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	061a      	lsls	r2, r3, #24
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	3301      	adds	r3, #1
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	041b      	lsls	r3, r3, #16
 80082a2:	431a      	orrs	r2, r3
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	3302      	adds	r3, #2
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	021b      	lsls	r3, r3, #8
 80082ac:	4313      	orrs	r3, r2
 80082ae:	69fa      	ldr	r2, [r7, #28]
 80082b0:	3203      	adds	r2, #3
 80082b2:	7812      	ldrb	r2, [r2, #0]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	60fb      	str	r3, [r7, #12]
		        data_handler_req_historical_data(start_time);
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f000 fcce 	bl	8008c5a <data_handler_req_historical_data>
      break;
 80082be:	e03f      	b.n	8008340 <Custom_STM_App_Notification+0x164>
		    } else if (cmd == 0x20) { // SET_UNIX_TIME
 80082c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80082c4:	2b20      	cmp	r3, #32
 80082c6:	d115      	bne.n	80082f4 <Custom_STM_App_Notification+0x118>
		        uint32_t unix_time = (params[0] << 24) | (params[1] << 16) | (params[2] << 8) | params[3];
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	061a      	lsls	r2, r3, #24
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	3301      	adds	r3, #1
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	041b      	lsls	r3, r3, #16
 80082d6:	431a      	orrs	r2, r3
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	3302      	adds	r3, #2
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	021b      	lsls	r3, r3, #8
 80082e0:	4313      	orrs	r3, r2
 80082e2:	69fa      	ldr	r2, [r7, #28]
 80082e4:	3203      	adds	r2, #3
 80082e6:	7812      	ldrb	r2, [r2, #0]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	613b      	str	r3, [r7, #16]
		        data_handler_req_set_unix_time(unix_time);
 80082ec:	6938      	ldr	r0, [r7, #16]
 80082ee:	f000 fccd 	bl	8008c8c <data_handler_req_set_unix_time>
      break;
 80082f2:	e025      	b.n	8008340 <Custom_STM_App_Notification+0x164>
		    } else if (cmd == 0x30) { // SET_SENSOR_CONFIG
 80082f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80082f8:	2b30      	cmp	r3, #48	@ 0x30
 80082fa:	d10c      	bne.n	8008316 <Custom_STM_App_Notification+0x13a>
		        uint8_t sensor_type = params[0]; // Igual al tipo de dato (HR, SpO2, Temp, etc.)
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	763b      	strb	r3, [r7, #24]
		        uint8_t config_val  = params[1]; // Valor de configuración (más detalles en el futuro)
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	785b      	ldrb	r3, [r3, #1]
 8008306:	75fb      	strb	r3, [r7, #23]
		        data_handler_req_set_sensor_config(sensor_type, config_val);
 8008308:	7dfa      	ldrb	r2, [r7, #23]
 800830a:	7e3b      	ldrb	r3, [r7, #24]
 800830c:	4611      	mov	r1, r2
 800830e:	4618      	mov	r0, r3
 8008310:	f000 fcd5 	bl	8008cbe <data_handler_req_set_sensor_config>
      break;
 8008314:	e014      	b.n	8008340 <Custom_STM_App_Notification+0x164>
		    } else if (cmd == 0x40) { // START_STREAM
 8008316:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800831a:	2b40      	cmp	r3, #64	@ 0x40
 800831c:	d107      	bne.n	800832e <Custom_STM_App_Notification+0x152>
		        uint8_t stream_mask = params[0];
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	767b      	strb	r3, [r7, #25]
		        data_handler_req_start_stream(stream_mask);
 8008324:	7e7b      	ldrb	r3, [r7, #25]
 8008326:	4618      	mov	r0, r3
 8008328:	f000 fcdf 	bl	8008cea <data_handler_req_start_stream>
      break;
 800832c:	e008      	b.n	8008340 <Custom_STM_App_Notification+0x164>
		    } else if (cmd == 0x41) { // STOP_STREAM
 800832e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8008332:	2b41      	cmp	r3, #65	@ 0x41
 8008334:	d104      	bne.n	8008340 <Custom_STM_App_Notification+0x164>
		    	data_handler_req_stop_stream();
 8008336:	f000 fceb 	bl	8008d10 <data_handler_req_stop_stream>
      break;
 800833a:	e001      	b.n	8008340 <Custom_STM_App_Notification+0x164>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800833c:	bf00      	nop
 800833e:	e000      	b.n	8008342 <Custom_STM_App_Notification+0x166>
      break;
 8008340:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8008342:	bf00      	nop
}
 8008344:	3728      	adds	r7, #40	@ 0x28
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop

0800834c <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d002      	beq.n	8008362 <Custom_APP_Notification+0x16>
 800835c:	2b01      	cmp	r3, #1
 800835e:	d002      	beq.n	8008366 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8008360:	e002      	b.n	8008368 <Custom_APP_Notification+0x1c>
      break;
 8008362:	bf00      	nop
 8008364:	e000      	b.n	8008368 <Custom_APP_Notification+0x1c>
      break;
 8008366:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8008368:	bf00      	nop
}
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8008374:	b480      	push	{r7}
 8008376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	Notify_Interface.Status=Notify_None;
 8008378:	4b08      	ldr	r3, [pc, #32]	@ (800839c <Custom_APP_Init+0x28>)
 800837a:	2200      	movs	r2, #0
 800837c:	701a      	strb	r2, [r3, #0]
	Notify_Interface.checkSum=0;
 800837e:	4b07      	ldr	r3, [pc, #28]	@ (800839c <Custom_APP_Init+0x28>)
 8008380:	2200      	movs	r2, #0
 8008382:	721a      	strb	r2, [r3, #8]
	Notify_Interface.length=0;
 8008384:	4b05      	ldr	r3, [pc, #20]	@ (800839c <Custom_APP_Init+0x28>)
 8008386:	2200      	movs	r2, #0
 8008388:	725a      	strb	r2, [r3, #9]
	Notify_Interface.pck=UpdateCharData;
 800838a:	4b04      	ldr	r3, [pc, #16]	@ (800839c <Custom_APP_Init+0x28>)
 800838c:	4a04      	ldr	r2, [pc, #16]	@ (80083a0 <Custom_APP_Init+0x2c>)
 800838e:	605a      	str	r2, [r3, #4]

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8008390:	bf00      	nop
}
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	20000534 	.word	0x20000534
 80083a0:	20000334 	.word	0x20000334

080083a4 <Custom_Charnotify_Update_Char>:
 *
 *************************************************************/

/* HealthMonitoringS */
__USED void Custom_Charnotify_Update_Char(void) /* Property Read */
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 80083aa:	2300      	movs	r3, #0
 80083ac:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Charnotify_UC_1*/
  updateflag=1;
 80083ae:	2301      	movs	r3, #1
 80083b0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE END Charnotify_UC_1*/

  if (updateflag != 0)
 80083b2:	79fb      	ldrb	r3, [r7, #7]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d004      	beq.n	80083c2 <Custom_Charnotify_Update_Char+0x1e>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_CHARNOTIFY, (uint8_t *)UpdateCharData);
 80083b8:	4904      	ldr	r1, [pc, #16]	@ (80083cc <Custom_Charnotify_Update_Char+0x28>)
 80083ba:	2001      	movs	r0, #1
 80083bc:	f000 f96c 	bl	8008698 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Charnotify_UC_Last*/

  /* USER CODE END Charnotify_UC_Last*/
  return;
 80083c0:	bf00      	nop
 80083c2:	bf00      	nop
}
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	20000334 	.word	0x20000334

080083d0 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b08c      	sub	sp, #48	@ 0x30
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80083d8:	2300      	movs	r3, #0
 80083da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	3301      	adds	r3, #1
 80083e2:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 80083e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	2bff      	cmp	r3, #255	@ 0xff
 80083ea:	f040 809b 	bne.w	8008524 <Custom_STM_Event_Handler+0x154>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80083ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f0:	3302      	adds	r3, #2
 80083f2:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 80083f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 80083fe:	2b1a      	cmp	r3, #26
 8008400:	f200 808c 	bhi.w	800851c <Custom_STM_Event_Handler+0x14c>
 8008404:	a201      	add	r2, pc, #4	@ (adr r2, 800840c <Custom_STM_Event_Handler+0x3c>)
 8008406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840a:	bf00      	nop
 800840c:	08008479 	.word	0x08008479
 8008410:	0800851d 	.word	0x0800851d
 8008414:	0800851d 	.word	0x0800851d
 8008418:	0800851d 	.word	0x0800851d
 800841c:	0800851d 	.word	0x0800851d
 8008420:	0800851d 	.word	0x0800851d
 8008424:	0800851d 	.word	0x0800851d
 8008428:	0800851d 	.word	0x0800851d
 800842c:	0800851d 	.word	0x0800851d
 8008430:	0800851d 	.word	0x0800851d
 8008434:	0800851d 	.word	0x0800851d
 8008438:	0800851d 	.word	0x0800851d
 800843c:	0800851d 	.word	0x0800851d
 8008440:	0800851d 	.word	0x0800851d
 8008444:	0800851d 	.word	0x0800851d
 8008448:	0800851d 	.word	0x0800851d
 800844c:	0800851d 	.word	0x0800851d
 8008450:	0800851d 	.word	0x0800851d
 8008454:	0800851d 	.word	0x0800851d
 8008458:	0800851d 	.word	0x0800851d
 800845c:	0800851d 	.word	0x0800851d
 8008460:	0800851d 	.word	0x0800851d
 8008464:	0800851d 	.word	0x0800851d
 8008468:	0800851d 	.word	0x0800851d
 800846c:	0800851d 	.word	0x0800851d
 8008470:	0800851d 	.word	0x0800851d
 8008474:	080084ff 	.word	0x080084ff
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8008478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847a:	3302      	adds	r3, #2
 800847c:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomCharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	885b      	ldrh	r3, [r3, #2]
 8008482:	b29b      	uxth	r3, r3
 8008484:	461a      	mov	r2, r3
 8008486:	4b2b      	ldr	r3, [pc, #172]	@ (8008534 <Custom_STM_Event_Handler+0x164>)
 8008488:	889b      	ldrh	r3, [r3, #4]
 800848a:	3302      	adds	r3, #2
 800848c:	429a      	cmp	r2, r3
 800848e:	d119      	bne.n	80084c4 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8008490:	2301      	movs	r3, #1
 8008492:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	7a1b      	ldrb	r3, [r3, #8]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d002      	beq.n	80084a4 <Custom_STM_Event_Handler+0xd4>
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d008      	beq.n	80084b4 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 80084a2:	e02b      	b.n	80084fc <Custom_STM_Event_Handler+0x12c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_CHARNOTIFY_NOTIFY_DISABLED_EVT;
 80084a4:	2302      	movs	r3, #2
 80084a6:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80084a8:	f107 0308 	add.w	r3, r7, #8
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7ff fe95 	bl	80081dc <Custom_STM_App_Notification>
                break;
 80084b2:	e023      	b.n	80084fc <Custom_STM_Event_Handler+0x12c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_CHARNOTIFY_NOTIFY_ENABLED_EVT;
 80084b4:	2301      	movs	r3, #1
 80084b6:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80084b8:	f107 0308 	add.w	r3, r7, #8
 80084bc:	4618      	mov	r0, r3
 80084be:	f7ff fe8d 	bl	80081dc <Custom_STM_App_Notification>
                break;
 80084c2:	e01b      	b.n	80084fc <Custom_STM_Event_Handler+0x12c>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomCharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	885b      	ldrh	r3, [r3, #2]
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	461a      	mov	r2, r3
 80084cc:	4b19      	ldr	r3, [pc, #100]	@ (8008534 <Custom_STM_Event_Handler+0x164>)
 80084ce:	885b      	ldrh	r3, [r3, #2]
 80084d0:	3301      	adds	r3, #1
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d124      	bne.n	8008520 <Custom_STM_Event_Handler+0x150>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80084d6:	2301      	movs	r3, #1
 80084d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            Notification.Custom_Evt_Opcode = CUSTOM_STM_CHARWRITE_WRITE_EVT;
 80084dc:	2300      	movs	r3, #0
 80084de:	723b      	strb	r3, [r7, #8]
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	88db      	ldrh	r3, [r3, #6]
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	743b      	strb	r3, [r7, #16]
            Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	3308      	adds	r3, #8
 80084ee:	60fb      	str	r3, [r7, #12]
            Custom_STM_App_Notification(&Notification);
 80084f0:	f107 0308 	add.w	r3, r7, #8
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7ff fe71 	bl	80081dc <Custom_STM_App_Notification>
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 80084fa:	e011      	b.n	8008520 <Custom_STM_Event_Handler+0x150>
 80084fc:	e010      	b.n	8008520 <Custom_STM_Event_Handler+0x150>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 80084fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008500:	3302      	adds	r3, #2
 8008502:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8008504:	2303      	movs	r3, #3
 8008506:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8008508:	6a3b      	ldr	r3, [r7, #32]
 800850a:	881b      	ldrh	r3, [r3, #0]
 800850c:	b29b      	uxth	r3, r3
 800850e:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 8008510:	f107 0308 	add.w	r3, r7, #8
 8008514:	4618      	mov	r0, r3
 8008516:	f7ff fe61 	bl	80081dc <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800851a:	e002      	b.n	8008522 <Custom_STM_Event_Handler+0x152>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800851c:	bf00      	nop
 800851e:	e002      	b.n	8008526 <Custom_STM_Event_Handler+0x156>
          break;
 8008520:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008522:	e000      	b.n	8008526 <Custom_STM_Event_Handler+0x156>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8008524:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8008526:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 800852a:	4618      	mov	r0, r3
 800852c:	3730      	adds	r7, #48	@ 0x30
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	20000540 	.word	0x20000540

08008538 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b08c      	sub	sp, #48	@ 0x30
 800853c:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800853e:	2392      	movs	r3, #146	@ 0x92
 8008540:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8008542:	484f      	ldr	r0, [pc, #316]	@ (8008680 <SVCCTL_InitCustomSvc+0x148>)
 8008544:	f7fe fb94 	bl	8006c70 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 8008548:	2306      	movs	r3, #6
 800854a:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService1 */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService1 */

  COPY_HEALTHMONITORINGS_UUID(uuid.Char_UUID_128);
 800854c:	238f      	movs	r3, #143	@ 0x8f
 800854e:	713b      	strb	r3, [r7, #4]
 8008550:	23e5      	movs	r3, #229	@ 0xe5
 8008552:	717b      	strb	r3, [r7, #5]
 8008554:	23b3      	movs	r3, #179	@ 0xb3
 8008556:	71bb      	strb	r3, [r7, #6]
 8008558:	23d5      	movs	r3, #213	@ 0xd5
 800855a:	71fb      	strb	r3, [r7, #7]
 800855c:	232e      	movs	r3, #46	@ 0x2e
 800855e:	723b      	strb	r3, [r7, #8]
 8008560:	237f      	movs	r3, #127	@ 0x7f
 8008562:	727b      	strb	r3, [r7, #9]
 8008564:	234a      	movs	r3, #74	@ 0x4a
 8008566:	72bb      	strb	r3, [r7, #10]
 8008568:	2398      	movs	r3, #152	@ 0x98
 800856a:	72fb      	strb	r3, [r7, #11]
 800856c:	232a      	movs	r3, #42	@ 0x2a
 800856e:	733b      	strb	r3, [r7, #12]
 8008570:	2348      	movs	r3, #72	@ 0x48
 8008572:	737b      	strb	r3, [r7, #13]
 8008574:	237a      	movs	r3, #122	@ 0x7a
 8008576:	73bb      	strb	r3, [r7, #14]
 8008578:	23cc      	movs	r3, #204	@ 0xcc
 800857a:	73fb      	strb	r3, [r7, #15]
 800857c:	2300      	movs	r3, #0
 800857e:	743b      	strb	r3, [r7, #16]
 8008580:	2300      	movs	r3, #0
 8008582:	747b      	strb	r3, [r7, #17]
 8008584:	2300      	movs	r3, #0
 8008586:	74bb      	strb	r3, [r7, #18]
 8008588:	2300      	movs	r3, #0
 800858a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800858c:	7dbb      	ldrb	r3, [r7, #22]
 800858e:	1d39      	adds	r1, r7, #4
 8008590:	4a3c      	ldr	r2, [pc, #240]	@ (8008684 <SVCCTL_InitCustomSvc+0x14c>)
 8008592:	9200      	str	r2, [sp, #0]
 8008594:	2201      	movs	r2, #1
 8008596:	2002      	movs	r0, #2
 8008598:	f7fd fdde 	bl	8006158 <aci_gatt_add_service>
 800859c:	4603      	mov	r3, r0
 800859e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  CharWrite
   */
  COPY_CHARWRITE_UUID(uuid.Char_UUID_128);
 80085a0:	2319      	movs	r3, #25
 80085a2:	713b      	strb	r3, [r7, #4]
 80085a4:	23ed      	movs	r3, #237	@ 0xed
 80085a6:	717b      	strb	r3, [r7, #5]
 80085a8:	2382      	movs	r3, #130	@ 0x82
 80085aa:	71bb      	strb	r3, [r7, #6]
 80085ac:	23ae      	movs	r3, #174	@ 0xae
 80085ae:	71fb      	strb	r3, [r7, #7]
 80085b0:	23ed      	movs	r3, #237	@ 0xed
 80085b2:	723b      	strb	r3, [r7, #8]
 80085b4:	2321      	movs	r3, #33	@ 0x21
 80085b6:	727b      	strb	r3, [r7, #9]
 80085b8:	234c      	movs	r3, #76	@ 0x4c
 80085ba:	72bb      	strb	r3, [r7, #10]
 80085bc:	239d      	movs	r3, #157	@ 0x9d
 80085be:	72fb      	strb	r3, [r7, #11]
 80085c0:	2341      	movs	r3, #65	@ 0x41
 80085c2:	733b      	strb	r3, [r7, #12]
 80085c4:	2345      	movs	r3, #69	@ 0x45
 80085c6:	737b      	strb	r3, [r7, #13]
 80085c8:	2322      	movs	r3, #34	@ 0x22
 80085ca:	73bb      	strb	r3, [r7, #14]
 80085cc:	238e      	movs	r3, #142	@ 0x8e
 80085ce:	73fb      	strb	r3, [r7, #15]
 80085d0:	2300      	movs	r3, #0
 80085d2:	743b      	strb	r3, [r7, #16]
 80085d4:	2300      	movs	r3, #0
 80085d6:	747b      	strb	r3, [r7, #17]
 80085d8:	2300      	movs	r3, #0
 80085da:	74bb      	strb	r3, [r7, #18]
 80085dc:	2300      	movs	r3, #0
 80085de:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomHmHdle,
 80085e0:	4b28      	ldr	r3, [pc, #160]	@ (8008684 <SVCCTL_InitCustomSvc+0x14c>)
 80085e2:	8818      	ldrh	r0, [r3, #0]
 80085e4:	4b28      	ldr	r3, [pc, #160]	@ (8008688 <SVCCTL_InitCustomSvc+0x150>)
 80085e6:	881b      	ldrh	r3, [r3, #0]
 80085e8:	1d3a      	adds	r2, r7, #4
 80085ea:	4928      	ldr	r1, [pc, #160]	@ (800868c <SVCCTL_InitCustomSvc+0x154>)
 80085ec:	9105      	str	r1, [sp, #20]
 80085ee:	2100      	movs	r1, #0
 80085f0:	9104      	str	r1, [sp, #16]
 80085f2:	2110      	movs	r1, #16
 80085f4:	9103      	str	r1, [sp, #12]
 80085f6:	2101      	movs	r1, #1
 80085f8:	9102      	str	r1, [sp, #8]
 80085fa:	2100      	movs	r1, #0
 80085fc:	9101      	str	r1, [sp, #4]
 80085fe:	2108      	movs	r1, #8
 8008600:	9100      	str	r1, [sp, #0]
 8008602:	2102      	movs	r1, #2
 8008604:	f7fd fe7e 	bl	8006304 <aci_gatt_add_char>
 8008608:	4603      	mov	r3, r0
 800860a:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  CharNotify
   */
  COPY_CHARNOTIFY_UUID(uuid.Char_UUID_128);
 800860c:	2319      	movs	r3, #25
 800860e:	713b      	strb	r3, [r7, #4]
 8008610:	23ed      	movs	r3, #237	@ 0xed
 8008612:	717b      	strb	r3, [r7, #5]
 8008614:	2382      	movs	r3, #130	@ 0x82
 8008616:	71bb      	strb	r3, [r7, #6]
 8008618:	23ae      	movs	r3, #174	@ 0xae
 800861a:	71fb      	strb	r3, [r7, #7]
 800861c:	23ed      	movs	r3, #237	@ 0xed
 800861e:	723b      	strb	r3, [r7, #8]
 8008620:	2321      	movs	r3, #33	@ 0x21
 8008622:	727b      	strb	r3, [r7, #9]
 8008624:	234c      	movs	r3, #76	@ 0x4c
 8008626:	72bb      	strb	r3, [r7, #10]
 8008628:	239d      	movs	r3, #157	@ 0x9d
 800862a:	72fb      	strb	r3, [r7, #11]
 800862c:	2341      	movs	r3, #65	@ 0x41
 800862e:	733b      	strb	r3, [r7, #12]
 8008630:	2345      	movs	r3, #69	@ 0x45
 8008632:	737b      	strb	r3, [r7, #13]
 8008634:	2322      	movs	r3, #34	@ 0x22
 8008636:	73bb      	strb	r3, [r7, #14]
 8008638:	238e      	movs	r3, #142	@ 0x8e
 800863a:	73fb      	strb	r3, [r7, #15]
 800863c:	2301      	movs	r3, #1
 800863e:	743b      	strb	r3, [r7, #16]
 8008640:	2300      	movs	r3, #0
 8008642:	747b      	strb	r3, [r7, #17]
 8008644:	2300      	movs	r3, #0
 8008646:	74bb      	strb	r3, [r7, #18]
 8008648:	2300      	movs	r3, #0
 800864a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomHmHdle,
 800864c:	4b0d      	ldr	r3, [pc, #52]	@ (8008684 <SVCCTL_InitCustomSvc+0x14c>)
 800864e:	8818      	ldrh	r0, [r3, #0]
 8008650:	4b0f      	ldr	r3, [pc, #60]	@ (8008690 <SVCCTL_InitCustomSvc+0x158>)
 8008652:	881b      	ldrh	r3, [r3, #0]
 8008654:	1d3a      	adds	r2, r7, #4
 8008656:	490f      	ldr	r1, [pc, #60]	@ (8008694 <SVCCTL_InitCustomSvc+0x15c>)
 8008658:	9105      	str	r1, [sp, #20]
 800865a:	2100      	movs	r1, #0
 800865c:	9104      	str	r1, [sp, #16]
 800865e:	2110      	movs	r1, #16
 8008660:	9103      	str	r1, [sp, #12]
 8008662:	2107      	movs	r1, #7
 8008664:	9102      	str	r1, [sp, #8]
 8008666:	2100      	movs	r1, #0
 8008668:	9101      	str	r1, [sp, #4]
 800866a:	2110      	movs	r1, #16
 800866c:	9100      	str	r1, [sp, #0]
 800866e:	2102      	movs	r1, #2
 8008670:	f7fd fe48 	bl	8006304 <aci_gatt_add_char>
 8008674:	4603      	mov	r3, r0
 8008676:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8008678:	bf00      	nop
}
 800867a:	3718      	adds	r7, #24
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	080083d1 	.word	0x080083d1
 8008684:	20000540 	.word	0x20000540
 8008688:	20000022 	.word	0x20000022
 800868c:	20000542 	.word	0x20000542
 8008690:	20000024 	.word	0x20000024
 8008694:	20000544 	.word	0x20000544

08008698 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af02      	add	r7, sp, #8
 800869e:	4603      	mov	r3, r0
 80086a0:	6039      	str	r1, [r7, #0]
 80086a2:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80086a4:	2392      	movs	r3, #146	@ 0x92
 80086a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 80086a8:	79fb      	ldrb	r3, [r7, #7]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d002      	beq.n	80086b4 <Custom_STM_App_Update_Char+0x1c>
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d010      	beq.n	80086d4 <Custom_STM_App_Update_Char+0x3c>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 80086b2:	e01f      	b.n	80086f4 <Custom_STM_App_Update_Char+0x5c>
      ret = aci_gatt_update_char_value(CustomContext.CustomHmHdle,
 80086b4:	4b12      	ldr	r3, [pc, #72]	@ (8008700 <Custom_STM_App_Update_Char+0x68>)
 80086b6:	8818      	ldrh	r0, [r3, #0]
 80086b8:	4b11      	ldr	r3, [pc, #68]	@ (8008700 <Custom_STM_App_Update_Char+0x68>)
 80086ba:	8859      	ldrh	r1, [r3, #2]
 80086bc:	4b11      	ldr	r3, [pc, #68]	@ (8008704 <Custom_STM_App_Update_Char+0x6c>)
 80086be:	881b      	ldrh	r3, [r3, #0]
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	9300      	str	r3, [sp, #0]
 80086c6:	4613      	mov	r3, r2
 80086c8:	2200      	movs	r2, #0
 80086ca:	f7fd ff23 	bl	8006514 <aci_gatt_update_char_value>
 80086ce:	4603      	mov	r3, r0
 80086d0:	73fb      	strb	r3, [r7, #15]
      break;
 80086d2:	e00f      	b.n	80086f4 <Custom_STM_App_Update_Char+0x5c>
      ret = aci_gatt_update_char_value(CustomContext.CustomHmHdle,
 80086d4:	4b0a      	ldr	r3, [pc, #40]	@ (8008700 <Custom_STM_App_Update_Char+0x68>)
 80086d6:	8818      	ldrh	r0, [r3, #0]
 80086d8:	4b09      	ldr	r3, [pc, #36]	@ (8008700 <Custom_STM_App_Update_Char+0x68>)
 80086da:	8899      	ldrh	r1, [r3, #4]
 80086dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008708 <Custom_STM_App_Update_Char+0x70>)
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	b2da      	uxtb	r2, r3
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	4613      	mov	r3, r2
 80086e8:	2200      	movs	r2, #0
 80086ea:	f7fd ff13 	bl	8006514 <aci_gatt_update_char_value>
 80086ee:	4603      	mov	r3, r0
 80086f0:	73fb      	strb	r3, [r7, #15]
      break;
 80086f2:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 80086f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	20000540 	.word	0x20000540
 8008704:	20000022 	.word	0x20000022
 8008708:	20000024 	.word	0x20000024

0800870c <send_dummy_hr_spo2>:
/**
 * @brief  Generate and send a dummy HR & SpO₂ notification over BLE.
 *         Structure: [CMD][LEN][DATA(5)][TIMESTAMP(4)][CRC]
 */
static void send_dummy_hr_spo2(void)
{
 800870c:	b590      	push	{r4, r7, lr}
 800870e:	b087      	sub	sp, #28
 8008710:	af00      	add	r7, sp, #0
	Custom_BLE_Notify_interface_t* p_ble_notify =ble_notify_interface_get();
 8008712:	f7ff fd59 	bl	80081c8 <ble_notify_interface_get>
 8008716:	6178      	str	r0, [r7, #20]
    uint8_t* notif= p_ble_notify->pck ;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	613b      	str	r3, [r7, #16]
    uint8_t idx = 0;
 800871e:	2300      	movs	r3, #0
 8008720:	73fb      	strb	r3, [r7, #15]

    // DATA_TYPE: bitmask for HR (0x01) + SpO₂ (0x02) = 0x03
	notif[idx++] = 0x01;
 8008722:	7bfb      	ldrb	r3, [r7, #15]
 8008724:	1c5a      	adds	r2, r3, #1
 8008726:	73fa      	strb	r2, [r7, #15]
 8008728:	461a      	mov	r2, r3
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	4413      	add	r3, r2
 800872e:	2201      	movs	r2, #1
 8008730:	701a      	strb	r2, [r3, #0]
	// LEN: always 0x05
	notif[idx++] = 0x05;
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	1c5a      	adds	r2, r3, #1
 8008736:	73fa      	strb	r2, [r7, #15]
 8008738:	461a      	mov	r2, r3
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	4413      	add	r3, r2
 800873e:	2205      	movs	r2, #5
 8008740:	701a      	strb	r2, [r3, #0]

	// DATA: HR (2 bytes), SpO₂ (2 bytes), padding (1 byte)
	uint16_t dummy_hr = 70;    // e.g., 70 bpm -> 0x0046
 8008742:	2346      	movs	r3, #70	@ 0x46
 8008744:	81bb      	strh	r3, [r7, #12]
	uint16_t dummy_spo2 = 98;  // e.g., 98% -> 0x0062
 8008746:	2362      	movs	r3, #98	@ 0x62
 8008748:	817b      	strh	r3, [r7, #10]

	notif[idx++] = 0x00;       // Padding
 800874a:	7bfb      	ldrb	r3, [r7, #15]
 800874c:	1c5a      	adds	r2, r3, #1
 800874e:	73fa      	strb	r2, [r7, #15]
 8008750:	461a      	mov	r2, r3
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	4413      	add	r3, r2
 8008756:	2200      	movs	r2, #0
 8008758:	701a      	strb	r2, [r3, #0]
	notif[idx++] = (dummy_hr >> 8) & 0xFF;
 800875a:	89bb      	ldrh	r3, [r7, #12]
 800875c:	0a1b      	lsrs	r3, r3, #8
 800875e:	b29a      	uxth	r2, r3
 8008760:	7bfb      	ldrb	r3, [r7, #15]
 8008762:	1c59      	adds	r1, r3, #1
 8008764:	73f9      	strb	r1, [r7, #15]
 8008766:	4619      	mov	r1, r3
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	440b      	add	r3, r1
 800876c:	b2d2      	uxtb	r2, r2
 800876e:	701a      	strb	r2, [r3, #0]
	notif[idx++] = (dummy_hr >> 0) & 0xFF;
 8008770:	7bfb      	ldrb	r3, [r7, #15]
 8008772:	1c5a      	adds	r2, r3, #1
 8008774:	73fa      	strb	r2, [r7, #15]
 8008776:	461a      	mov	r2, r3
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	4413      	add	r3, r2
 800877c:	89ba      	ldrh	r2, [r7, #12]
 800877e:	b2d2      	uxtb	r2, r2
 8008780:	701a      	strb	r2, [r3, #0]
	notif[idx++] = (dummy_spo2 >> 8) & 0xFF;
 8008782:	897b      	ldrh	r3, [r7, #10]
 8008784:	0a1b      	lsrs	r3, r3, #8
 8008786:	b29a      	uxth	r2, r3
 8008788:	7bfb      	ldrb	r3, [r7, #15]
 800878a:	1c59      	adds	r1, r3, #1
 800878c:	73f9      	strb	r1, [r7, #15]
 800878e:	4619      	mov	r1, r3
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	440b      	add	r3, r1
 8008794:	b2d2      	uxtb	r2, r2
 8008796:	701a      	strb	r2, [r3, #0]
	notif[idx++] = (dummy_spo2 >> 0) & 0xFF;
 8008798:	7bfb      	ldrb	r3, [r7, #15]
 800879a:	1c5a      	adds	r2, r3, #1
 800879c:	73fa      	strb	r2, [r7, #15]
 800879e:	461a      	mov	r2, r3
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	4413      	add	r3, r2
 80087a4:	897a      	ldrh	r2, [r7, #10]
 80087a6:	b2d2      	uxtb	r2, r2
 80087a8:	701a      	strb	r2, [r3, #0]

    // TIMESTAMP: fixed dummy Unix time, e.g., 1620000000 (0x60D4A000)
    uint32_t ts = 0x60D4A000;
 80087aa:	4b1c      	ldr	r3, [pc, #112]	@ (800881c <send_dummy_hr_spo2+0x110>)
 80087ac:	607b      	str	r3, [r7, #4]
    notif[idx++] = (ts >> 24) & 0xFF;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	0e1a      	lsrs	r2, r3, #24
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
 80087b4:	1c59      	adds	r1, r3, #1
 80087b6:	73f9      	strb	r1, [r7, #15]
 80087b8:	4619      	mov	r1, r3
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	440b      	add	r3, r1
 80087be:	b2d2      	uxtb	r2, r2
 80087c0:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 16) & 0xFF;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	0c1a      	lsrs	r2, r3, #16
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
 80087c8:	1c59      	adds	r1, r3, #1
 80087ca:	73f9      	strb	r1, [r7, #15]
 80087cc:	4619      	mov	r1, r3
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	440b      	add	r3, r1
 80087d2:	b2d2      	uxtb	r2, r2
 80087d4:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 8)  & 0xFF;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	0a1a      	lsrs	r2, r3, #8
 80087da:	7bfb      	ldrb	r3, [r7, #15]
 80087dc:	1c59      	adds	r1, r3, #1
 80087de:	73f9      	strb	r1, [r7, #15]
 80087e0:	4619      	mov	r1, r3
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	440b      	add	r3, r1
 80087e6:	b2d2      	uxtb	r2, r2
 80087e8:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 0)  & 0xFF;
 80087ea:	7bfb      	ldrb	r3, [r7, #15]
 80087ec:	1c5a      	adds	r2, r3, #1
 80087ee:	73fa      	strb	r2, [r7, #15]
 80087f0:	461a      	mov	r2, r3
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	4413      	add	r3, r2
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	b2d2      	uxtb	r2, r2
 80087fa:	701a      	strb	r2, [r3, #0]

    // CRC: sum of bytes [0..10] mod 256
    notif[idx] = ble_calculate_chksum(notif, 11);
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	18d4      	adds	r4, r2, r3
 8008802:	210b      	movs	r1, #11
 8008804:	6938      	ldr	r0, [r7, #16]
 8008806:	f7ff fcaa 	bl	800815e <ble_calculate_chksum>
 800880a:	4603      	mov	r3, r0
 800880c:	7023      	strb	r3, [r4, #0]


    p_ble_notify->Status=Notify_Pending;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2201      	movs	r2, #1
 8008812:	701a      	strb	r2, [r3, #0]
}
 8008814:	bf00      	nop
 8008816:	371c      	adds	r7, #28
 8008818:	46bd      	mov	sp, r7
 800881a:	bd90      	pop	{r4, r7, pc}
 800881c:	60d4a000 	.word	0x60d4a000

08008820 <send_dummy_temp>:
/**
 * @brief  Generate and send a dummy Temperature notification over BLE.
 * @param  temp_type: 0x01 = Body, 0x02 = Environmental, 0x03 = Both
 */
static void send_dummy_temp(uint8_t temp_type)
{
 8008820:	b590      	push	{r4, r7, lr}
 8008822:	b089      	sub	sp, #36	@ 0x24
 8008824:	af00      	add	r7, sp, #0
 8008826:	4603      	mov	r3, r0
 8008828:	71fb      	strb	r3, [r7, #7]
	Custom_BLE_Notify_interface_t* p_ble_notify = ble_notify_interface_get();
 800882a:	f7ff fccd 	bl	80081c8 <ble_notify_interface_get>
 800882e:	61b8      	str	r0, [r7, #24]
	uint8_t *notif = p_ble_notify->pck;
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	617b      	str	r3, [r7, #20]
	uint8_t idx = 0;
 8008836:	2300      	movs	r3, #0
 8008838:	77fb      	strb	r3, [r7, #31]

    // DATA_TYPE: bitmask for Temperature = 0x04
    notif[idx++] = 0x02;
 800883a:	7ffb      	ldrb	r3, [r7, #31]
 800883c:	1c5a      	adds	r2, r3, #1
 800883e:	77fa      	strb	r2, [r7, #31]
 8008840:	461a      	mov	r2, r3
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	4413      	add	r3, r2
 8008846:	2202      	movs	r2, #2
 8008848:	701a      	strb	r2, [r3, #0]
    // LEN: always 0x05
    notif[idx++] = 0x05;
 800884a:	7ffb      	ldrb	r3, [r7, #31]
 800884c:	1c5a      	adds	r2, r3, #1
 800884e:	77fa      	strb	r2, [r7, #31]
 8008850:	461a      	mov	r2, r3
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	4413      	add	r3, r2
 8008856:	2205      	movs	r2, #5
 8008858:	701a      	strb	r2, [r3, #0]

    // DATA: depends on temp_type
    // Use dummy values: Ambient = 25.0°C -> 250 (0x00FA), Body = 36.5°C -> 365 (0x016D)
    uint16_t amb = 250;
 800885a:	23fa      	movs	r3, #250	@ 0xfa
 800885c:	827b      	strh	r3, [r7, #18]
    uint16_t body = 365;
 800885e:	f240 136d 	movw	r3, #365	@ 0x16d
 8008862:	823b      	strh	r3, [r7, #16]

    if (temp_type == 0x01) {
 8008864:	79fb      	ldrb	r3, [r7, #7]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d12c      	bne.n	80088c4 <send_dummy_temp+0xa4>
        // Body only
        notif[idx++] = 0x01;
 800886a:	7ffb      	ldrb	r3, [r7, #31]
 800886c:	1c5a      	adds	r2, r3, #1
 800886e:	77fa      	strb	r2, [r7, #31]
 8008870:	461a      	mov	r2, r3
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	4413      	add	r3, r2
 8008876:	2201      	movs	r2, #1
 8008878:	701a      	strb	r2, [r3, #0]
        notif[idx++] = (body >> 8) & 0xFF;
 800887a:	8a3b      	ldrh	r3, [r7, #16]
 800887c:	0a1b      	lsrs	r3, r3, #8
 800887e:	b29a      	uxth	r2, r3
 8008880:	7ffb      	ldrb	r3, [r7, #31]
 8008882:	1c59      	adds	r1, r3, #1
 8008884:	77f9      	strb	r1, [r7, #31]
 8008886:	4619      	mov	r1, r3
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	440b      	add	r3, r1
 800888c:	b2d2      	uxtb	r2, r2
 800888e:	701a      	strb	r2, [r3, #0]
        notif[idx++] = (body >> 0) & 0xFF;
 8008890:	7ffb      	ldrb	r3, [r7, #31]
 8008892:	1c5a      	adds	r2, r3, #1
 8008894:	77fa      	strb	r2, [r7, #31]
 8008896:	461a      	mov	r2, r3
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	4413      	add	r3, r2
 800889c:	8a3a      	ldrh	r2, [r7, #16]
 800889e:	b2d2      	uxtb	r2, r2
 80088a0:	701a      	strb	r2, [r3, #0]
        notif[idx++] = 0x00;
 80088a2:	7ffb      	ldrb	r3, [r7, #31]
 80088a4:	1c5a      	adds	r2, r3, #1
 80088a6:	77fa      	strb	r2, [r7, #31]
 80088a8:	461a      	mov	r2, r3
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	4413      	add	r3, r2
 80088ae:	2200      	movs	r2, #0
 80088b0:	701a      	strb	r2, [r3, #0]
        notif[idx++] = 0x00; // Padding
 80088b2:	7ffb      	ldrb	r3, [r7, #31]
 80088b4:	1c5a      	adds	r2, r3, #1
 80088b6:	77fa      	strb	r2, [r7, #31]
 80088b8:	461a      	mov	r2, r3
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	4413      	add	r3, r2
 80088be:	2200      	movs	r2, #0
 80088c0:	701a      	strb	r2, [r3, #0]
 80088c2:	e05f      	b.n	8008984 <send_dummy_temp+0x164>
    } else if (temp_type == 0x02) {
 80088c4:	79fb      	ldrb	r3, [r7, #7]
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d12c      	bne.n	8008924 <send_dummy_temp+0x104>
        // Ambient only
        notif[idx++] = 0x02;
 80088ca:	7ffb      	ldrb	r3, [r7, #31]
 80088cc:	1c5a      	adds	r2, r3, #1
 80088ce:	77fa      	strb	r2, [r7, #31]
 80088d0:	461a      	mov	r2, r3
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	4413      	add	r3, r2
 80088d6:	2202      	movs	r2, #2
 80088d8:	701a      	strb	r2, [r3, #0]
        notif[idx++] = (amb >> 8) & 0xFF;
 80088da:	8a7b      	ldrh	r3, [r7, #18]
 80088dc:	0a1b      	lsrs	r3, r3, #8
 80088de:	b29a      	uxth	r2, r3
 80088e0:	7ffb      	ldrb	r3, [r7, #31]
 80088e2:	1c59      	adds	r1, r3, #1
 80088e4:	77f9      	strb	r1, [r7, #31]
 80088e6:	4619      	mov	r1, r3
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	440b      	add	r3, r1
 80088ec:	b2d2      	uxtb	r2, r2
 80088ee:	701a      	strb	r2, [r3, #0]
        notif[idx++] = (amb >> 0) & 0xFF;
 80088f0:	7ffb      	ldrb	r3, [r7, #31]
 80088f2:	1c5a      	adds	r2, r3, #1
 80088f4:	77fa      	strb	r2, [r7, #31]
 80088f6:	461a      	mov	r2, r3
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	4413      	add	r3, r2
 80088fc:	8a7a      	ldrh	r2, [r7, #18]
 80088fe:	b2d2      	uxtb	r2, r2
 8008900:	701a      	strb	r2, [r3, #0]
        notif[idx++] = 0x00;
 8008902:	7ffb      	ldrb	r3, [r7, #31]
 8008904:	1c5a      	adds	r2, r3, #1
 8008906:	77fa      	strb	r2, [r7, #31]
 8008908:	461a      	mov	r2, r3
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	4413      	add	r3, r2
 800890e:	2200      	movs	r2, #0
 8008910:	701a      	strb	r2, [r3, #0]
        notif[idx++] = 0x00; // Padding
 8008912:	7ffb      	ldrb	r3, [r7, #31]
 8008914:	1c5a      	adds	r2, r3, #1
 8008916:	77fa      	strb	r2, [r7, #31]
 8008918:	461a      	mov	r2, r3
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	4413      	add	r3, r2
 800891e:	2200      	movs	r2, #0
 8008920:	701a      	strb	r2, [r3, #0]
 8008922:	e02f      	b.n	8008984 <send_dummy_temp+0x164>
    } else {
        // Both: pack ambient then body, pad 1 byte
    	notif[idx++] = 0x03; // Padding
 8008924:	7ffb      	ldrb	r3, [r7, #31]
 8008926:	1c5a      	adds	r2, r3, #1
 8008928:	77fa      	strb	r2, [r7, #31]
 800892a:	461a      	mov	r2, r3
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	4413      	add	r3, r2
 8008930:	2203      	movs	r2, #3
 8008932:	701a      	strb	r2, [r3, #0]
        notif[idx++] = (amb >> 8) & 0xFF;
 8008934:	8a7b      	ldrh	r3, [r7, #18]
 8008936:	0a1b      	lsrs	r3, r3, #8
 8008938:	b29a      	uxth	r2, r3
 800893a:	7ffb      	ldrb	r3, [r7, #31]
 800893c:	1c59      	adds	r1, r3, #1
 800893e:	77f9      	strb	r1, [r7, #31]
 8008940:	4619      	mov	r1, r3
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	440b      	add	r3, r1
 8008946:	b2d2      	uxtb	r2, r2
 8008948:	701a      	strb	r2, [r3, #0]
        notif[idx++] = (amb >> 0) & 0xFF;
 800894a:	7ffb      	ldrb	r3, [r7, #31]
 800894c:	1c5a      	adds	r2, r3, #1
 800894e:	77fa      	strb	r2, [r7, #31]
 8008950:	461a      	mov	r2, r3
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	4413      	add	r3, r2
 8008956:	8a7a      	ldrh	r2, [r7, #18]
 8008958:	b2d2      	uxtb	r2, r2
 800895a:	701a      	strb	r2, [r3, #0]
        notif[idx++] = (body >> 8) & 0xFF;
 800895c:	8a3b      	ldrh	r3, [r7, #16]
 800895e:	0a1b      	lsrs	r3, r3, #8
 8008960:	b29a      	uxth	r2, r3
 8008962:	7ffb      	ldrb	r3, [r7, #31]
 8008964:	1c59      	adds	r1, r3, #1
 8008966:	77f9      	strb	r1, [r7, #31]
 8008968:	4619      	mov	r1, r3
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	440b      	add	r3, r1
 800896e:	b2d2      	uxtb	r2, r2
 8008970:	701a      	strb	r2, [r3, #0]
        notif[idx++] = (body >> 0) & 0xFF;
 8008972:	7ffb      	ldrb	r3, [r7, #31]
 8008974:	1c5a      	adds	r2, r3, #1
 8008976:	77fa      	strb	r2, [r7, #31]
 8008978:	461a      	mov	r2, r3
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	4413      	add	r3, r2
 800897e:	8a3a      	ldrh	r2, [r7, #16]
 8008980:	b2d2      	uxtb	r2, r2
 8008982:	701a      	strb	r2, [r3, #0]

    }

    // TIMESTAMP: fixed dummy Unix time
    uint32_t ts = 0x60D4A000;
 8008984:	4b1c      	ldr	r3, [pc, #112]	@ (80089f8 <send_dummy_temp+0x1d8>)
 8008986:	60fb      	str	r3, [r7, #12]
    notif[idx++] = (ts >> 24) & 0xFF;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	0e1a      	lsrs	r2, r3, #24
 800898c:	7ffb      	ldrb	r3, [r7, #31]
 800898e:	1c59      	adds	r1, r3, #1
 8008990:	77f9      	strb	r1, [r7, #31]
 8008992:	4619      	mov	r1, r3
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	440b      	add	r3, r1
 8008998:	b2d2      	uxtb	r2, r2
 800899a:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 16) & 0xFF;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	0c1a      	lsrs	r2, r3, #16
 80089a0:	7ffb      	ldrb	r3, [r7, #31]
 80089a2:	1c59      	adds	r1, r3, #1
 80089a4:	77f9      	strb	r1, [r7, #31]
 80089a6:	4619      	mov	r1, r3
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	440b      	add	r3, r1
 80089ac:	b2d2      	uxtb	r2, r2
 80089ae:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 8)  & 0xFF;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	0a1a      	lsrs	r2, r3, #8
 80089b4:	7ffb      	ldrb	r3, [r7, #31]
 80089b6:	1c59      	adds	r1, r3, #1
 80089b8:	77f9      	strb	r1, [r7, #31]
 80089ba:	4619      	mov	r1, r3
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	440b      	add	r3, r1
 80089c0:	b2d2      	uxtb	r2, r2
 80089c2:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 0)  & 0xFF;
 80089c4:	7ffb      	ldrb	r3, [r7, #31]
 80089c6:	1c5a      	adds	r2, r3, #1
 80089c8:	77fa      	strb	r2, [r7, #31]
 80089ca:	461a      	mov	r2, r3
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	4413      	add	r3, r2
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	b2d2      	uxtb	r2, r2
 80089d4:	701a      	strb	r2, [r3, #0]

    // CRC: sum of bytes [0..10] mod 256
    notif[idx] = ble_calculate_chksum(notif, 11);
 80089d6:	7ffb      	ldrb	r3, [r7, #31]
 80089d8:	697a      	ldr	r2, [r7, #20]
 80089da:	18d4      	adds	r4, r2, r3
 80089dc:	210b      	movs	r1, #11
 80089de:	6978      	ldr	r0, [r7, #20]
 80089e0:	f7ff fbbd 	bl	800815e <ble_calculate_chksum>
 80089e4:	4603      	mov	r3, r0
 80089e6:	7023      	strb	r3, [r4, #0]

    p_ble_notify->Status=Notify_Pending;
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	2201      	movs	r2, #1
 80089ec:	701a      	strb	r2, [r3, #0]
}
 80089ee:	bf00      	nop
 80089f0:	3724      	adds	r7, #36	@ 0x24
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd90      	pop	{r4, r7, pc}
 80089f6:	bf00      	nop
 80089f8:	60d4a000 	.word	0x60d4a000

080089fc <send_dummy_pressure>:

/**
 * @brief  Generate and send a dummy Pressure notification over BLE.
 */
static void send_dummy_pressure(void)
{
 80089fc:	b590      	push	{r4, r7, lr}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
	Custom_BLE_Notify_interface_t* p_ble_notify = ble_notify_interface_get();
 8008a02:	f7ff fbe1 	bl	80081c8 <ble_notify_interface_get>
 8008a06:	60f8      	str	r0, [r7, #12]
	uint8_t *notif = p_ble_notify->pck;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	60bb      	str	r3, [r7, #8]
    uint8_t idx = 0;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	71fb      	strb	r3, [r7, #7]

    // DATA_TYPE: bitmask for Pressure = 0x08
    notif[idx++] = 0x03;
 8008a12:	79fb      	ldrb	r3, [r7, #7]
 8008a14:	1c5a      	adds	r2, r3, #1
 8008a16:	71fa      	strb	r2, [r7, #7]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	2203      	movs	r2, #3
 8008a20:	701a      	strb	r2, [r3, #0]
    // LEN: always 0x05
    notif[idx++] = 0x05;
 8008a22:	79fb      	ldrb	r3, [r7, #7]
 8008a24:	1c5a      	adds	r2, r3, #1
 8008a26:	71fa      	strb	r2, [r7, #7]
 8008a28:	461a      	mov	r2, r3
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	2205      	movs	r2, #5
 8008a30:	701a      	strb	r2, [r3, #0]

    // DATA: Pressure (e.g., 1013 hPa -> 0x03F5), pad 3 bytes
    uint16_t dummy_press = 1013;
 8008a32:	f240 33f5 	movw	r3, #1013	@ 0x3f5
 8008a36:	80bb      	strh	r3, [r7, #4]
    notif[idx++] = 0x00;
 8008a38:	79fb      	ldrb	r3, [r7, #7]
 8008a3a:	1c5a      	adds	r2, r3, #1
 8008a3c:	71fa      	strb	r2, [r7, #7]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	4413      	add	r3, r2
 8008a44:	2200      	movs	r2, #0
 8008a46:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (dummy_press >> 8) & 0xFF;
 8008a48:	88bb      	ldrh	r3, [r7, #4]
 8008a4a:	0a1b      	lsrs	r3, r3, #8
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	79fb      	ldrb	r3, [r7, #7]
 8008a50:	1c59      	adds	r1, r3, #1
 8008a52:	71f9      	strb	r1, [r7, #7]
 8008a54:	4619      	mov	r1, r3
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	440b      	add	r3, r1
 8008a5a:	b2d2      	uxtb	r2, r2
 8008a5c:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (dummy_press >> 0) & 0xFF;
 8008a5e:	79fb      	ldrb	r3, [r7, #7]
 8008a60:	1c5a      	adds	r2, r3, #1
 8008a62:	71fa      	strb	r2, [r7, #7]
 8008a64:	461a      	mov	r2, r3
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	4413      	add	r3, r2
 8008a6a:	88ba      	ldrh	r2, [r7, #4]
 8008a6c:	b2d2      	uxtb	r2, r2
 8008a6e:	701a      	strb	r2, [r3, #0]
    notif[idx++] = 0x00;
 8008a70:	79fb      	ldrb	r3, [r7, #7]
 8008a72:	1c5a      	adds	r2, r3, #1
 8008a74:	71fa      	strb	r2, [r7, #7]
 8008a76:	461a      	mov	r2, r3
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	701a      	strb	r2, [r3, #0]
    notif[idx++] = 0x00; // Padding
 8008a80:	79fb      	ldrb	r3, [r7, #7]
 8008a82:	1c5a      	adds	r2, r3, #1
 8008a84:	71fa      	strb	r2, [r7, #7]
 8008a86:	461a      	mov	r2, r3
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	701a      	strb	r2, [r3, #0]

    // TIMESTAMP: fixed dummy Unix time
    uint32_t ts = 0x60D4A000;
 8008a90:	4b1c      	ldr	r3, [pc, #112]	@ (8008b04 <send_dummy_pressure+0x108>)
 8008a92:	603b      	str	r3, [r7, #0]
    notif[idx++] = (ts >> 24) & 0xFF;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	0e1a      	lsrs	r2, r3, #24
 8008a98:	79fb      	ldrb	r3, [r7, #7]
 8008a9a:	1c59      	adds	r1, r3, #1
 8008a9c:	71f9      	strb	r1, [r7, #7]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	440b      	add	r3, r1
 8008aa4:	b2d2      	uxtb	r2, r2
 8008aa6:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 16) & 0xFF;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	0c1a      	lsrs	r2, r3, #16
 8008aac:	79fb      	ldrb	r3, [r7, #7]
 8008aae:	1c59      	adds	r1, r3, #1
 8008ab0:	71f9      	strb	r1, [r7, #7]
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	440b      	add	r3, r1
 8008ab8:	b2d2      	uxtb	r2, r2
 8008aba:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 8)  & 0xFF;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	0a1a      	lsrs	r2, r3, #8
 8008ac0:	79fb      	ldrb	r3, [r7, #7]
 8008ac2:	1c59      	adds	r1, r3, #1
 8008ac4:	71f9      	strb	r1, [r7, #7]
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	440b      	add	r3, r1
 8008acc:	b2d2      	uxtb	r2, r2
 8008ace:	701a      	strb	r2, [r3, #0]
    notif[idx++] = (ts >> 0)  & 0xFF;
 8008ad0:	79fb      	ldrb	r3, [r7, #7]
 8008ad2:	1c5a      	adds	r2, r3, #1
 8008ad4:	71fa      	strb	r2, [r7, #7]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	4413      	add	r3, r2
 8008adc:	683a      	ldr	r2, [r7, #0]
 8008ade:	b2d2      	uxtb	r2, r2
 8008ae0:	701a      	strb	r2, [r3, #0]

    // CRC: sum of bytes [0..10] mod 256
    notif[idx] = ble_calculate_chksum(notif, 11);
 8008ae2:	79fb      	ldrb	r3, [r7, #7]
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	18d4      	adds	r4, r2, r3
 8008ae8:	210b      	movs	r1, #11
 8008aea:	68b8      	ldr	r0, [r7, #8]
 8008aec:	f7ff fb37 	bl	800815e <ble_calculate_chksum>
 8008af0:	4603      	mov	r3, r0
 8008af2:	7023      	strb	r3, [r4, #0]

    p_ble_notify->Status=Notify_Pending;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2201      	movs	r2, #1
 8008af8:	701a      	strb	r2, [r3, #0]
}
 8008afa:	bf00      	nop
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd90      	pop	{r4, r7, pc}
 8008b02:	bf00      	nop
 8008b04:	60d4a000 	.word	0x60d4a000

08008b08 <send_dummy_all_data>:
/**
 * @brief  Generate and send dummy “all data” notifications over BLE.
 *         Splits into two notifications: [HR+SpO₂], then [Temp+Pressure].
 */
static void send_dummy_all_data(void)
{
 8008b08:	b590      	push	{r4, r7, lr}
 8008b0a:	b087      	sub	sp, #28
 8008b0c:	af00      	add	r7, sp, #0
    // First packet: HR (0x01) + SpO₂ (0x02) = data_type 0x03
//    {
		Custom_BLE_Notify_interface_t* p_ble_notify =ble_notify_interface_get();
 8008b0e:	f7ff fb5b 	bl	80081c8 <ble_notify_interface_get>
 8008b12:	6178      	str	r0, [r7, #20]
		uint8_t *notif = p_ble_notify->pck;
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	613b      	str	r3, [r7, #16]
        uint8_t idx1 = 0;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	73fb      	strb	r3, [r7, #15]
        notif[idx1++] = 0x04;  // DATA_TYPE
 8008b1e:	7bfb      	ldrb	r3, [r7, #15]
 8008b20:	1c5a      	adds	r2, r3, #1
 8008b22:	73fa      	strb	r2, [r7, #15]
 8008b24:	461a      	mov	r2, r3
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	4413      	add	r3, r2
 8008b2a:	2204      	movs	r2, #4
 8008b2c:	701a      	strb	r2, [r3, #0]
        notif[idx1++] = 0x05;  // LEN
 8008b2e:	7bfb      	ldrb	r3, [r7, #15]
 8008b30:	1c5a      	adds	r2, r3, #1
 8008b32:	73fa      	strb	r2, [r7, #15]
 8008b34:	461a      	mov	r2, r3
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	4413      	add	r3, r2
 8008b3a:	2205      	movs	r2, #5
 8008b3c:	701a      	strb	r2, [r3, #0]

        uint16_t dummy_hr = 70;
 8008b3e:	2346      	movs	r3, #70	@ 0x46
 8008b40:	81bb      	strh	r3, [r7, #12]
        uint16_t dummy_spo2 = 98;
 8008b42:	2362      	movs	r3, #98	@ 0x62
 8008b44:	817b      	strh	r3, [r7, #10]

        notif[idx1++] = 0x00;  // Padding
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
 8008b48:	1c5a      	adds	r2, r3, #1
 8008b4a:	73fa      	strb	r2, [r7, #15]
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	4413      	add	r3, r2
 8008b52:	2200      	movs	r2, #0
 8008b54:	701a      	strb	r2, [r3, #0]
        notif[idx1++] = (dummy_hr >> 8) & 0xFF;
 8008b56:	89bb      	ldrh	r3, [r7, #12]
 8008b58:	0a1b      	lsrs	r3, r3, #8
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	1c59      	adds	r1, r3, #1
 8008b60:	73f9      	strb	r1, [r7, #15]
 8008b62:	4619      	mov	r1, r3
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	440b      	add	r3, r1
 8008b68:	b2d2      	uxtb	r2, r2
 8008b6a:	701a      	strb	r2, [r3, #0]
        notif[idx1++] = (dummy_hr >> 0) & 0xFF;
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	1c5a      	adds	r2, r3, #1
 8008b70:	73fa      	strb	r2, [r7, #15]
 8008b72:	461a      	mov	r2, r3
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	4413      	add	r3, r2
 8008b78:	89ba      	ldrh	r2, [r7, #12]
 8008b7a:	b2d2      	uxtb	r2, r2
 8008b7c:	701a      	strb	r2, [r3, #0]
        notif[idx1++] = (dummy_spo2 >> 8) & 0xFF;
 8008b7e:	897b      	ldrh	r3, [r7, #10]
 8008b80:	0a1b      	lsrs	r3, r3, #8
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	7bfb      	ldrb	r3, [r7, #15]
 8008b86:	1c59      	adds	r1, r3, #1
 8008b88:	73f9      	strb	r1, [r7, #15]
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	440b      	add	r3, r1
 8008b90:	b2d2      	uxtb	r2, r2
 8008b92:	701a      	strb	r2, [r3, #0]
        notif[idx1++] = (dummy_spo2 >> 0) & 0xFF;
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
 8008b96:	1c5a      	adds	r2, r3, #1
 8008b98:	73fa      	strb	r2, [r7, #15]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	897a      	ldrh	r2, [r7, #10]
 8008ba2:	b2d2      	uxtb	r2, r2
 8008ba4:	701a      	strb	r2, [r3, #0]


        uint32_t ts = 0x60D4A000;
 8008ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8008c18 <send_dummy_all_data+0x110>)
 8008ba8:	607b      	str	r3, [r7, #4]
        notif[idx1++] = (ts >> 24) & 0xFF;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	0e1a      	lsrs	r2, r3, #24
 8008bae:	7bfb      	ldrb	r3, [r7, #15]
 8008bb0:	1c59      	adds	r1, r3, #1
 8008bb2:	73f9      	strb	r1, [r7, #15]
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	440b      	add	r3, r1
 8008bba:	b2d2      	uxtb	r2, r2
 8008bbc:	701a      	strb	r2, [r3, #0]
        notif[idx1++] = (ts >> 16) & 0xFF;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	0c1a      	lsrs	r2, r3, #16
 8008bc2:	7bfb      	ldrb	r3, [r7, #15]
 8008bc4:	1c59      	adds	r1, r3, #1
 8008bc6:	73f9      	strb	r1, [r7, #15]
 8008bc8:	4619      	mov	r1, r3
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	440b      	add	r3, r1
 8008bce:	b2d2      	uxtb	r2, r2
 8008bd0:	701a      	strb	r2, [r3, #0]
        notif[idx1++] = (ts >> 8)  & 0xFF;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	0a1a      	lsrs	r2, r3, #8
 8008bd6:	7bfb      	ldrb	r3, [r7, #15]
 8008bd8:	1c59      	adds	r1, r3, #1
 8008bda:	73f9      	strb	r1, [r7, #15]
 8008bdc:	4619      	mov	r1, r3
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	440b      	add	r3, r1
 8008be2:	b2d2      	uxtb	r2, r2
 8008be4:	701a      	strb	r2, [r3, #0]
        notif[idx1++] = (ts >> 0)  & 0xFF;
 8008be6:	7bfb      	ldrb	r3, [r7, #15]
 8008be8:	1c5a      	adds	r2, r3, #1
 8008bea:	73fa      	strb	r2, [r7, #15]
 8008bec:	461a      	mov	r2, r3
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	b2d2      	uxtb	r2, r2
 8008bf6:	701a      	strb	r2, [r3, #0]

        notif[idx1] = ble_calculate_chksum(notif, 11);
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
 8008bfa:	693a      	ldr	r2, [r7, #16]
 8008bfc:	18d4      	adds	r4, r2, r3
 8008bfe:	210b      	movs	r1, #11
 8008c00:	6938      	ldr	r0, [r7, #16]
 8008c02:	f7ff faac 	bl	800815e <ble_calculate_chksum>
 8008c06:	4603      	mov	r3, r0
 8008c08:	7023      	strb	r3, [r4, #0]
        p_ble_notify->Status=Notify_Pending;
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	701a      	strb	r2, [r3, #0]

        notif3[idx3] = calc_crc(notif3, 11);
        send_ble_notification(notif3, sizeof(notif3));
//        */
//    }
}
 8008c10:	bf00      	nop
 8008c12:	371c      	adds	r7, #28
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd90      	pop	{r4, r7, pc}
 8008c18:	60d4a000 	.word	0x60d4a000

08008c1c <data_handler_req_hr_spo2>:

/**
 * @brief  Request current Heart Rate & SpO₂ + timestamp from the other MCU.
 */
void data_handler_req_hr_spo2(void)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	af00      	add	r7, sp, #0
#ifdef BLE_DEBUG_DUMMY_DATA
    send_dummy_hr_spo2();
 8008c20:	f7ff fd74 	bl	800870c <send_dummy_hr_spo2>
#else
    uint8_t params[4] = {0x00, 0x00, 0x00, 0x00};
    uart_send_frame(0x01, params);
    uart_receive_response();
#endif
}
 8008c24:	bf00      	nop
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <data_handler_req_temp>:
/**
 * @brief  Request Temperature.
 * @param  temp_type: 0x01 = Body, 0x02 = Environmental, 0x03 = Both
 */
void data_handler_req_temp(uint8_t temp_type)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	4603      	mov	r3, r0
 8008c30:	71fb      	strb	r3, [r7, #7]
#ifdef BLE_DEBUG_DUMMY_DATA
    send_dummy_temp(temp_type);
 8008c32:	79fb      	ldrb	r3, [r7, #7]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7ff fdf3 	bl	8008820 <send_dummy_temp>
#else
    uint8_t params[4] = { temp_type, 0x00, 0x00, 0x00 };
    uart_send_frame(0x02, params);
    uart_receive_response();
#endif
}
 8008c3a:	bf00      	nop
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <data_handler_req_pressure>:

/**
 * @brief  Request Pressure.
 */
void data_handler_req_pressure(void)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	af00      	add	r7, sp, #0
#ifdef BLE_DEBUG_DUMMY_DATA
    send_dummy_pressure();
 8008c46:	f7ff fed9 	bl	80089fc <send_dummy_pressure>
#else
    uint8_t params[4] = {0x00, 0x00, 0x00, 0x00};
    uart_send_frame(0x03, params);
    uart_receive_response();
#endif
}
 8008c4a:	bf00      	nop
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <data_handler_req_all_data>:

/**
 * @brief  Request all sensor data (HR, SpO₂, Temp, Pressure).
 */
void data_handler_req_all_data(void)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	af00      	add	r7, sp, #0
#ifdef BLE_DEBUG_DUMMY_DATA
    send_dummy_all_data();
 8008c52:	f7ff ff59 	bl	8008b08 <send_dummy_all_data>
#else
    uint8_t params[4] = {0x00, 0x00, 0x00, 0x00};
    uart_send_frame(0x04, params);
    uart_receive_response();
#endif
}
 8008c56:	bf00      	nop
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <data_handler_req_historical_data>:
/**
 * @brief  Request historical data starting from a Unix timestamp.
 * @param  start_time: 32-bit Unix timestamp (big-endian).
 */
void data_handler_req_historical_data(uint32_t start_time)
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	b085      	sub	sp, #20
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
    uint8_t params[4];
    params[0] = (start_time >> 24) & 0xFF;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	0e1b      	lsrs	r3, r3, #24
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	733b      	strb	r3, [r7, #12]
    params[1] = (start_time >> 16) & 0xFF;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	0c1b      	lsrs	r3, r3, #16
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	737b      	strb	r3, [r7, #13]
    params[2] = (start_time >> 8)  & 0xFF;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	0a1b      	lsrs	r3, r3, #8
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	73bb      	strb	r3, [r7, #14]
    params[3] = (start_time >> 0)  & 0xFF;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	73fb      	strb	r3, [r7, #15]

//    uart_send_frame(0x10, params);
//    uart_receive_response();
    // Note: might require multiple responses if there are many historical records.
}
 8008c80:	bf00      	nop
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <data_handler_req_set_unix_time>:
/**
 * @brief  Send current Unix time to the other MCU.
 * @param  unix_time: 32-bit Unix time (big-endian).
 */
void data_handler_req_set_unix_time(uint32_t unix_time)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
    uint8_t params[4];
    params[0] = (unix_time >> 24) & 0xFF;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	0e1b      	lsrs	r3, r3, #24
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	733b      	strb	r3, [r7, #12]
    params[1] = (unix_time >> 16) & 0xFF;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	0c1b      	lsrs	r3, r3, #16
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	737b      	strb	r3, [r7, #13]
    params[2] = (unix_time >> 8)  & 0xFF;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	0a1b      	lsrs	r3, r3, #8
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	73bb      	strb	r3, [r7, #14]
    params[3] = (unix_time >> 0)  & 0xFF;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	73fb      	strb	r3, [r7, #15]

//    uart_send_frame(0x20, params);
//    uart_receive_response();
}
 8008cb2:	bf00      	nop
 8008cb4:	3714      	adds	r7, #20
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <data_handler_req_set_sensor_config>:
 * @brief  Configure a sensor (sampling rate or future features).
 * @param  sensor_type: 1-byte ID (same as BLE data type).
 * @param  config_val:  1-byte configuration value (TBD).
 */
void data_handler_req_set_sensor_config(uint8_t sensor_type, uint8_t config_val)
{
 8008cbe:	b480      	push	{r7}
 8008cc0:	b085      	sub	sp, #20
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	460a      	mov	r2, r1
 8008cc8:	71fb      	strb	r3, [r7, #7]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	71bb      	strb	r3, [r7, #6]
    uint8_t params[4] = { sensor_type, config_val, 0x00, 0x00 };
 8008cce:	79fb      	ldrb	r3, [r7, #7]
 8008cd0:	733b      	strb	r3, [r7, #12]
 8008cd2:	79bb      	ldrb	r3, [r7, #6]
 8008cd4:	737b      	strb	r3, [r7, #13]
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	73bb      	strb	r3, [r7, #14]
 8008cda:	2300      	movs	r3, #0
 8008cdc:	73fb      	strb	r3, [r7, #15]
//    uart_send_frame(0x30, params);
//    uart_receive_response();
}
 8008cde:	bf00      	nop
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <data_handler_req_start_stream>:
/**
 * @brief  Start live data streaming.
 * @param  stream_mask: bitmask (e.g., 0x1F = HR | SpO₂ | Temp | Pressure).
 */
void data_handler_req_start_stream(uint8_t stream_mask)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b085      	sub	sp, #20
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	71fb      	strb	r3, [r7, #7]
    uint8_t params[4] = { stream_mask, 0x00, 0x00, 0x00 };
 8008cf4:	79fb      	ldrb	r3, [r7, #7]
 8008cf6:	733b      	strb	r3, [r7, #12]
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	737b      	strb	r3, [r7, #13]
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	73bb      	strb	r3, [r7, #14]
 8008d00:	2300      	movs	r3, #0
 8008d02:	73fb      	strb	r3, [r7, #15]
//    uart_send_frame(0x40, params);
//    // The secondary MCU will begin sending periodic frames:
//    // [START][DATA_TYPE][LEN][DATA...][TIMESTAMP][CRC]
//    uart_receive_response();
}
 8008d04:	bf00      	nop
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <data_handler_req_stop_stream>:

/**
 * @brief  Stop any ongoing live streaming.
 */
void data_handler_req_stop_stream(void)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
    uint8_t params[4] = {0x00, 0x00, 0x00, 0x00};
 8008d16:	2300      	movs	r3, #0
 8008d18:	607b      	str	r3, [r7, #4]
//    uart_send_frame(0x41, params);
//    uart_receive_response();
}
 8008d1a:	bf00      	nop
 8008d1c:	370c      	adds	r7, #12
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
	...

08008d28 <LL_PWR_EnableBootC2>:
{
 8008d28:	b480      	push	{r7}
 8008d2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8008d2c:	4b05      	ldr	r3, [pc, #20]	@ (8008d44 <LL_PWR_EnableBootC2+0x1c>)
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	4a04      	ldr	r2, [pc, #16]	@ (8008d44 <LL_PWR_EnableBootC2+0x1c>)
 8008d32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d36:	60d3      	str	r3, [r2, #12]
}
 8008d38:	bf00      	nop
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	58000400 	.word	0x58000400

08008d48 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8008d50:	4b06      	ldr	r3, [pc, #24]	@ (8008d6c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008d52:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8008d56:	4905      	ldr	r1, [pc, #20]	@ (8008d6c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	58000800 	.word	0x58000800

08008d70 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8008d78:	4b05      	ldr	r3, [pc, #20]	@ (8008d90 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008d7a:	6a1a      	ldr	r2, [r3, #32]
 8008d7c:	4904      	ldr	r1, [pc, #16]	@ (8008d90 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	620b      	str	r3, [r1, #32]
}
 8008d84:	bf00      	nop
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr
 8008d90:	58000800 	.word	0x58000800

08008d94 <LL_AHB3_GRP1_EnableClock>:
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8008d9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008da0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008da2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008dac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008db0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4013      	ands	r3, r2
 8008db6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008db8:	68fb      	ldr	r3, [r7, #12]
}
 8008dba:	bf00      	nop
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b085      	sub	sp, #20
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8008dce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008dd2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8008dd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8008de2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008de6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4013      	ands	r3, r2
 8008dee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008df0:	68fb      	ldr	r3, [r7, #12]
}
 8008df2:	bf00      	nop
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8008dfe:	b480      	push	{r7}
 8008e00:	b083      	sub	sp, #12
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	601a      	str	r2, [r3, #0]
}
 8008e12:	bf00      	nop
 8008e14:	370c      	adds	r7, #12
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b083      	sub	sp, #12
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f043 0201 	orr.w	r2, r3, #1
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	601a      	str	r2, [r3, #0]
}
 8008e32:	bf00      	nop
 8008e34:	370c      	adds	r7, #12
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b083      	sub	sp, #12
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	041b      	lsls	r3, r3, #16
 8008e50:	43db      	mvns	r3, r3
 8008e52:	401a      	ands	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	605a      	str	r2, [r3, #4]
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	685a      	ldr	r2, [r3, #4]
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	041b      	lsls	r3, r3, #16
 8008e76:	431a      	orrs	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	605a      	str	r2, [r3, #4]
}
 8008e7c:	bf00      	nop
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	685a      	ldr	r2, [r3, #4]
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	43db      	mvns	r3, r3
 8008e9a:	401a      	ands	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	605a      	str	r2, [r3, #4]
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	683a      	ldr	r2, [r7, #0]
 8008eba:	609a      	str	r2, [r3, #8]
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	041a      	lsls	r2, r3, #16
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	609a      	str	r2, [r3, #8]
}
 8008eda:	bf00      	nop
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b083      	sub	sp, #12
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	68da      	ldr	r2, [r3, #12]
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	4013      	ands	r3, r2
 8008ef8:	683a      	ldr	r2, [r7, #0]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d101      	bne.n	8008f02 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8008efe:	2301      	movs	r3, #1
 8008f00:	e000      	b.n	8008f04 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	69da      	ldr	r2, [r3, #28]
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	4013      	ands	r3, r2
 8008f22:	683a      	ldr	r2, [r7, #0]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d101      	bne.n	8008f2c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e000      	b.n	8008f2e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	370c      	adds	r7, #12
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
	...

08008f3c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8008f40:	2102      	movs	r1, #2
 8008f42:	4818      	ldr	r0, [pc, #96]	@ (8008fa4 <HW_IPCC_Rx_Handler+0x68>)
 8008f44:	f7ff ffe4 	bl	8008f10 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d008      	beq.n	8008f60 <HW_IPCC_Rx_Handler+0x24>
 8008f4e:	4b15      	ldr	r3, [pc, #84]	@ (8008fa4 <HW_IPCC_Rx_Handler+0x68>)
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	f003 0302 	and.w	r3, r3, #2
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d102      	bne.n	8008f60 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8008f5a:	f000 f925 	bl	80091a8 <HW_IPCC_SYS_EvtHandler>
 8008f5e:	e01e      	b.n	8008f9e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8008f60:	2101      	movs	r1, #1
 8008f62:	4810      	ldr	r0, [pc, #64]	@ (8008fa4 <HW_IPCC_Rx_Handler+0x68>)
 8008f64:	f7ff ffd4 	bl	8008f10 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d008      	beq.n	8008f80 <HW_IPCC_Rx_Handler+0x44>
 8008f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8008fa4 <HW_IPCC_Rx_Handler+0x68>)
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d102      	bne.n	8008f80 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8008f7a:	f000 f899 	bl	80090b0 <HW_IPCC_BLE_EvtHandler>
 8008f7e:	e00e      	b.n	8008f9e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8008f80:	2108      	movs	r1, #8
 8008f82:	4808      	ldr	r0, [pc, #32]	@ (8008fa4 <HW_IPCC_Rx_Handler+0x68>)
 8008f84:	f7ff ffc4 	bl	8008f10 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d008      	beq.n	8008fa0 <HW_IPCC_Rx_Handler+0x64>
 8008f8e:	4b05      	ldr	r3, [pc, #20]	@ (8008fa4 <HW_IPCC_Rx_Handler+0x68>)
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	f003 0308 	and.w	r3, r3, #8
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d102      	bne.n	8008fa0 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8008f9a:	f000 f97d 	bl	8009298 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8008f9e:	bf00      	nop
 8008fa0:	bf00      	nop
}
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	58000c00 	.word	0x58000c00

08008fa8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8008fac:	2102      	movs	r1, #2
 8008fae:	4818      	ldr	r0, [pc, #96]	@ (8009010 <HW_IPCC_Tx_Handler+0x68>)
 8008fb0:	f7ff ff99 	bl	8008ee6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d108      	bne.n	8008fcc <HW_IPCC_Tx_Handler+0x24>
 8008fba:	4b15      	ldr	r3, [pc, #84]	@ (8009010 <HW_IPCC_Tx_Handler+0x68>)
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d102      	bne.n	8008fcc <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008fc6:	f000 f8d3 	bl	8009170 <HW_IPCC_SYS_CmdEvtHandler>
 8008fca:	e01e      	b.n	800900a <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8008fcc:	2108      	movs	r1, #8
 8008fce:	4810      	ldr	r0, [pc, #64]	@ (8009010 <HW_IPCC_Tx_Handler+0x68>)
 8008fd0:	f7ff ff89 	bl	8008ee6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d108      	bne.n	8008fec <HW_IPCC_Tx_Handler+0x44>
 8008fda:	4b0d      	ldr	r3, [pc, #52]	@ (8009010 <HW_IPCC_Tx_Handler+0x68>)
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d102      	bne.n	8008fec <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8008fe6:	f000 f919 	bl	800921c <HW_IPCC_MM_FreeBufHandler>
 8008fea:	e00e      	b.n	800900a <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8008fec:	2120      	movs	r1, #32
 8008fee:	4808      	ldr	r0, [pc, #32]	@ (8009010 <HW_IPCC_Tx_Handler+0x68>)
 8008ff0:	f7ff ff79 	bl	8008ee6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d108      	bne.n	800900c <HW_IPCC_Tx_Handler+0x64>
 8008ffa:	4b05      	ldr	r3, [pc, #20]	@ (8009010 <HW_IPCC_Tx_Handler+0x68>)
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009002:	2b00      	cmp	r3, #0
 8009004:	d102      	bne.n	800900c <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8009006:	f000 f85f 	bl	80090c8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800900a:	bf00      	nop
 800900c:	bf00      	nop
}
 800900e:	bd80      	pop	{r7, pc}
 8009010:	58000c00 	.word	0x58000c00

08009014 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8009014:	b580      	push	{r7, lr}
 8009016:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8009018:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800901c:	f7ff fed3 	bl	8008dc6 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8009020:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009024:	f7ff fea4 	bl	8008d70 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8009028:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800902c:	f7ff fe8c 	bl	8008d48 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8009030:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8009032:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8009034:	f7ff fe78 	bl	8008d28 <LL_PWR_EnableBootC2>

  return;
 8009038:	bf00      	nop
}
 800903a:	bd80      	pop	{r7, pc}

0800903c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800903c:	b580      	push	{r7, lr}
 800903e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8009040:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009044:	f7ff fea6 	bl	8008d94 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8009048:	4806      	ldr	r0, [pc, #24]	@ (8009064 <HW_IPCC_Init+0x28>)
 800904a:	f7ff fee8 	bl	8008e1e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800904e:	4805      	ldr	r0, [pc, #20]	@ (8009064 <HW_IPCC_Init+0x28>)
 8009050:	f7ff fed5 	bl	8008dfe <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8009054:	202c      	movs	r0, #44	@ 0x2c
 8009056:	f7f8 ffd8 	bl	800200a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800905a:	202d      	movs	r0, #45	@ 0x2d
 800905c:	f7f8 ffd5 	bl	800200a <HAL_NVIC_EnableIRQ>

  return;
 8009060:	bf00      	nop
}
 8009062:	bd80      	pop	{r7, pc}
 8009064:	58000c00 	.word	0x58000c00

08009068 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800906e:	f3ef 8310 	mrs	r3, PRIMASK
 8009072:	607b      	str	r3, [r7, #4]
  return(result);
 8009074:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8009076:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8009078:	b672      	cpsid	i
}
 800907a:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800907c:	2101      	movs	r1, #1
 800907e:	4806      	ldr	r0, [pc, #24]	@ (8009098 <HW_IPCC_BLE_Init+0x30>)
 8009080:	f7ff ff02 	bl	8008e88 <LL_C1_IPCC_EnableReceiveChannel>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	f383 8810 	msr	PRIMASK, r3
}
 800908e:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8009090:	bf00      	nop
}
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	58000c00 	.word	0x58000c00

0800909c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800909c:	b580      	push	{r7, lr}
 800909e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80090a0:	2101      	movs	r1, #1
 80090a2:	4802      	ldr	r0, [pc, #8]	@ (80090ac <HW_IPCC_BLE_SendCmd+0x10>)
 80090a4:	f7ff ff10 	bl	8008ec8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80090a8:	bf00      	nop
}
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	58000c00 	.word	0x58000c00

080090b0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80090b4:	f7fe faa0 	bl	80075f8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80090b8:	2101      	movs	r1, #1
 80090ba:	4802      	ldr	r0, [pc, #8]	@ (80090c4 <HW_IPCC_BLE_EvtHandler+0x14>)
 80090bc:	f7ff fef6 	bl	8008eac <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80090c0:	bf00      	nop
}
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	58000c00 	.word	0x58000c00

080090c8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090ce:	f3ef 8310 	mrs	r3, PRIMASK
 80090d2:	607b      	str	r3, [r7, #4]
  return(result);
 80090d4:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80090d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80090d8:	b672      	cpsid	i
}
 80090da:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80090dc:	2120      	movs	r1, #32
 80090de:	4807      	ldr	r0, [pc, #28]	@ (80090fc <HW_IPCC_BLE_AclDataEvtHandler+0x34>)
 80090e0:	f7ff fec0 	bl	8008e64 <LL_C1_IPCC_DisableTransmitChannel>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	f383 8810 	msr	PRIMASK, r3
}
 80090ee:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_BLE_AclDataAckNot();
 80090f0:	f7fe fab2 	bl	8007658 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80090f4:	bf00      	nop
}
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	58000c00 	.word	0x58000c00

08009100 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009106:	f3ef 8310 	mrs	r3, PRIMASK
 800910a:	607b      	str	r3, [r7, #4]
  return(result);
 800910c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800910e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8009110:	b672      	cpsid	i
}
 8009112:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009114:	2102      	movs	r1, #2
 8009116:	4806      	ldr	r0, [pc, #24]	@ (8009130 <HW_IPCC_SYS_Init+0x30>)
 8009118:	f7ff feb6 	bl	8008e88 <LL_C1_IPCC_EnableReceiveChannel>
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	f383 8810 	msr	PRIMASK, r3
}
 8009126:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8009128:	bf00      	nop
}
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	58000c00 	.word	0x58000c00

08009134 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800913a:	2102      	movs	r1, #2
 800913c:	480b      	ldr	r0, [pc, #44]	@ (800916c <HW_IPCC_SYS_SendCmd+0x38>)
 800913e:	f7ff fec3 	bl	8008ec8 <LL_C1_IPCC_SetFlag_CHx>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009142:	f3ef 8310 	mrs	r3, PRIMASK
 8009146:	607b      	str	r3, [r7, #4]
  return(result);
 8009148:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800914a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800914c:	b672      	cpsid	i
}
 800914e:	bf00      	nop
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009150:	2102      	movs	r1, #2
 8009152:	4806      	ldr	r0, [pc, #24]	@ (800916c <HW_IPCC_SYS_SendCmd+0x38>)
 8009154:	f7ff fe73 	bl	8008e3e <LL_C1_IPCC_EnableTransmitChannel>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	f383 8810 	msr	PRIMASK, r3
}
 8009162:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8009164:	bf00      	nop
}
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	58000c00 	.word	0x58000c00

08009170 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009176:	f3ef 8310 	mrs	r3, PRIMASK
 800917a:	607b      	str	r3, [r7, #4]
  return(result);
 800917c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800917e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8009180:	b672      	cpsid	i
}
 8009182:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009184:	2102      	movs	r1, #2
 8009186:	4807      	ldr	r0, [pc, #28]	@ (80091a4 <HW_IPCC_SYS_CmdEvtHandler+0x34>)
 8009188:	f7ff fe6c 	bl	8008e64 <LL_C1_IPCC_DisableTransmitChannel>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	f383 8810 	msr	PRIMASK, r3
}
 8009196:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_SYS_CmdEvtNot();
 8009198:	f7fe faae 	bl	80076f8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800919c:	bf00      	nop
}
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	58000c00 	.word	0x58000c00

080091a8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80091ac:	f7fe faba 	bl	8007724 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80091b0:	2102      	movs	r1, #2
 80091b2:	4802      	ldr	r0, [pc, #8]	@ (80091bc <HW_IPCC_SYS_EvtHandler+0x14>)
 80091b4:	f7ff fe7a 	bl	8008eac <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80091b8:	bf00      	nop
}
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	58000c00 	.word	0x58000c00

080091c0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80091c8:	2108      	movs	r1, #8
 80091ca:	4812      	ldr	r0, [pc, #72]	@ (8009214 <HW_IPCC_MM_SendFreeBuf+0x54>)
 80091cc:	f7ff fe8b 	bl	8008ee6 <LL_C1_IPCC_IsActiveFlag_CHx>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d013      	beq.n	80091fe <HW_IPCC_MM_SendFreeBuf+0x3e>
  {
    FreeBufCb = cb;
 80091d6:	4a10      	ldr	r2, [pc, #64]	@ (8009218 <HW_IPCC_MM_SendFreeBuf+0x58>)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091dc:	f3ef 8310 	mrs	r3, PRIMASK
 80091e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80091e2:	68fb      	ldr	r3, [r7, #12]
    UTILS_ENTER_CRITICAL_SECTION();
 80091e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80091e6:	b672      	cpsid	i
}
 80091e8:	bf00      	nop
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80091ea:	2108      	movs	r1, #8
 80091ec:	4809      	ldr	r0, [pc, #36]	@ (8009214 <HW_IPCC_MM_SendFreeBuf+0x54>)
 80091ee:	f7ff fe26 	bl	8008e3e <LL_C1_IPCC_EnableTransmitChannel>
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	f383 8810 	msr	PRIMASK, r3
}
 80091fc:	e005      	b.n	800920a <HW_IPCC_MM_SendFreeBuf+0x4a>
    UTILS_EXIT_CRITICAL_SECTION();
  }
  else
  {
    cb();
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4798      	blx	r3

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009202:	2108      	movs	r1, #8
 8009204:	4803      	ldr	r0, [pc, #12]	@ (8009214 <HW_IPCC_MM_SendFreeBuf+0x54>)
 8009206:	f7ff fe5f 	bl	8008ec8 <LL_C1_IPCC_SetFlag_CHx>
  }

  return;
 800920a:	bf00      	nop
}
 800920c:	3718      	adds	r7, #24
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	58000c00 	.word	0x58000c00
 8009218:	20000548 	.word	0x20000548

0800921c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009222:	f3ef 8310 	mrs	r3, PRIMASK
 8009226:	607b      	str	r3, [r7, #4]
  return(result);
 8009228:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800922a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800922c:	b672      	cpsid	i
}
 800922e:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009230:	2108      	movs	r1, #8
 8009232:	480a      	ldr	r0, [pc, #40]	@ (800925c <HW_IPCC_MM_FreeBufHandler+0x40>)
 8009234:	f7ff fe16 	bl	8008e64 <LL_C1_IPCC_DisableTransmitChannel>
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	f383 8810 	msr	PRIMASK, r3
}
 8009242:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  FreeBufCb();
 8009244:	4b06      	ldr	r3, [pc, #24]	@ (8009260 <HW_IPCC_MM_FreeBufHandler+0x44>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800924a:	2108      	movs	r1, #8
 800924c:	4803      	ldr	r0, [pc, #12]	@ (800925c <HW_IPCC_MM_FreeBufHandler+0x40>)
 800924e:	f7ff fe3b 	bl	8008ec8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009252:	bf00      	nop
}
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	58000c00 	.word	0x58000c00
 8009260:	20000548 	.word	0x20000548

08009264 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800926a:	f3ef 8310 	mrs	r3, PRIMASK
 800926e:	607b      	str	r3, [r7, #4]
  return(result);
 8009270:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8009272:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8009274:	b672      	cpsid	i
}
 8009276:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009278:	2108      	movs	r1, #8
 800927a:	4806      	ldr	r0, [pc, #24]	@ (8009294 <HW_IPCC_TRACES_Init+0x30>)
 800927c:	f7ff fe04 	bl	8008e88 <LL_C1_IPCC_EnableReceiveChannel>
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	f383 8810 	msr	PRIMASK, r3
}
 800928a:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800928c:	bf00      	nop
}
 800928e:	3710      	adds	r7, #16
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	58000c00 	.word	0x58000c00

08009298 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800929c:	f7fe faea 	bl	8007874 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80092a0:	2108      	movs	r1, #8
 80092a2:	4802      	ldr	r0, [pc, #8]	@ (80092ac <HW_IPCC_TRACES_EvtHandler+0x14>)
 80092a4:	f7ff fe02 	bl	8008eac <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80092a8:	bf00      	nop
}
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	58000c00 	.word	0x58000c00

080092b0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80092b0:	b480      	push	{r7}
 80092b2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80092b4:	4b05      	ldr	r3, [pc, #20]	@ (80092cc <UTIL_LPM_Init+0x1c>)
 80092b6:	2200      	movs	r2, #0
 80092b8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80092ba:	4b05      	ldr	r3, [pc, #20]	@ (80092d0 <UTIL_LPM_Init+0x20>)
 80092bc:	2200      	movs	r2, #0
 80092be:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80092c0:	bf00      	nop
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	2000054c 	.word	0x2000054c
 80092d0:	20000550 	.word	0x20000550

080092d4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80092d4:	b480      	push	{r7}
 80092d6:	b087      	sub	sp, #28
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092e0:	f3ef 8310 	mrs	r3, PRIMASK
 80092e4:	613b      	str	r3, [r7, #16]
  return(result);
 80092e6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80092e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80092ea:	b672      	cpsid	i
}
 80092ec:	bf00      	nop
  
  switch(state)
 80092ee:	78fb      	ldrb	r3, [r7, #3]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d008      	beq.n	8009306 <UTIL_LPM_SetOffMode+0x32>
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d10e      	bne.n	8009316 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80092f8:	4b0d      	ldr	r3, [pc, #52]	@ (8009330 <UTIL_LPM_SetOffMode+0x5c>)
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4313      	orrs	r3, r2
 8009300:	4a0b      	ldr	r2, [pc, #44]	@ (8009330 <UTIL_LPM_SetOffMode+0x5c>)
 8009302:	6013      	str	r3, [r2, #0]
      break;
 8009304:	e008      	b.n	8009318 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	43da      	mvns	r2, r3
 800930a:	4b09      	ldr	r3, [pc, #36]	@ (8009330 <UTIL_LPM_SetOffMode+0x5c>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4013      	ands	r3, r2
 8009310:	4a07      	ldr	r2, [pc, #28]	@ (8009330 <UTIL_LPM_SetOffMode+0x5c>)
 8009312:	6013      	str	r3, [r2, #0]
      break;
 8009314:	e000      	b.n	8009318 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8009316:	bf00      	nop
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f383 8810 	msr	PRIMASK, r3
}
 8009322:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8009324:	bf00      	nop
 8009326:	371c      	adds	r7, #28
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr
 8009330:	20000550 	.word	0x20000550

08009334 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b090      	sub	sp, #64	@ 0x40
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800933c:	4b73      	ldr	r3, [pc, #460]	@ (800950c <UTIL_SEQ_Run+0x1d8>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8009342:	4b72      	ldr	r3, [pc, #456]	@ (800950c <UTIL_SEQ_Run+0x1d8>)
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4013      	ands	r3, r2
 800934a:	4a70      	ldr	r2, [pc, #448]	@ (800950c <UTIL_SEQ_Run+0x1d8>)
 800934c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800934e:	4b70      	ldr	r3, [pc, #448]	@ (8009510 <UTIL_SEQ_Run+0x1dc>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8009354:	4b6f      	ldr	r3, [pc, #444]	@ (8009514 <UTIL_SEQ_Run+0x1e0>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800935a:	4b6f      	ldr	r3, [pc, #444]	@ (8009518 <UTIL_SEQ_Run+0x1e4>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8009360:	4b6e      	ldr	r3, [pc, #440]	@ (800951c <UTIL_SEQ_Run+0x1e8>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009366:	e08d      	b.n	8009484 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8009368:	2300      	movs	r3, #0
 800936a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800936c:	e002      	b.n	8009374 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800936e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009370:	3301      	adds	r3, #1
 8009372:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009374:	4a6a      	ldr	r2, [pc, #424]	@ (8009520 <UTIL_SEQ_Run+0x1ec>)
 8009376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009378:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800937c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937e:	401a      	ands	r2, r3
 8009380:	4b62      	ldr	r3, [pc, #392]	@ (800950c <UTIL_SEQ_Run+0x1d8>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4013      	ands	r3, r2
 8009386:	2b00      	cmp	r3, #0
 8009388:	d0f1      	beq.n	800936e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800938a:	4a65      	ldr	r2, [pc, #404]	@ (8009520 <UTIL_SEQ_Run+0x1ec>)
 800938c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800938e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009394:	401a      	ands	r2, r3
 8009396:	4b5d      	ldr	r3, [pc, #372]	@ (800950c <UTIL_SEQ_Run+0x1d8>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4013      	ands	r3, r2
 800939c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800939e:	4a60      	ldr	r2, [pc, #384]	@ (8009520 <UTIL_SEQ_Run+0x1ec>)
 80093a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093a2:	00db      	lsls	r3, r3, #3
 80093a4:	4413      	add	r3, r2
 80093a6:	685a      	ldr	r2, [r3, #4]
 80093a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093aa:	4013      	ands	r3, r2
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d106      	bne.n	80093be <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80093b0:	4a5b      	ldr	r2, [pc, #364]	@ (8009520 <UTIL_SEQ_Run+0x1ec>)
 80093b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093b4:	00db      	lsls	r3, r3, #3
 80093b6:	4413      	add	r3, r2
 80093b8:	f04f 32ff 	mov.w	r2, #4294967295
 80093bc:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80093be:	4a58      	ldr	r2, [pc, #352]	@ (8009520 <UTIL_SEQ_Run+0x1ec>)
 80093c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093c2:	00db      	lsls	r3, r3, #3
 80093c4:	4413      	add	r3, r2
 80093c6:	685a      	ldr	r2, [r3, #4]
 80093c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ca:	4013      	ands	r3, r2
 80093cc:	4618      	mov	r0, r3
 80093ce:	f000 f9c1 	bl	8009754 <SEQ_BitPosition>
 80093d2:	4603      	mov	r3, r0
 80093d4:	461a      	mov	r2, r3
 80093d6:	4b53      	ldr	r3, [pc, #332]	@ (8009524 <UTIL_SEQ_Run+0x1f0>)
 80093d8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80093da:	4a51      	ldr	r2, [pc, #324]	@ (8009520 <UTIL_SEQ_Run+0x1ec>)
 80093dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093de:	00db      	lsls	r3, r3, #3
 80093e0:	4413      	add	r3, r2
 80093e2:	685a      	ldr	r2, [r3, #4]
 80093e4:	4b4f      	ldr	r3, [pc, #316]	@ (8009524 <UTIL_SEQ_Run+0x1f0>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2101      	movs	r1, #1
 80093ea:	fa01 f303 	lsl.w	r3, r1, r3
 80093ee:	43db      	mvns	r3, r3
 80093f0:	401a      	ands	r2, r3
 80093f2:	494b      	ldr	r1, [pc, #300]	@ (8009520 <UTIL_SEQ_Run+0x1ec>)
 80093f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093f6:	00db      	lsls	r3, r3, #3
 80093f8:	440b      	add	r3, r1
 80093fa:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093fc:	f3ef 8310 	mrs	r3, PRIMASK
 8009400:	61bb      	str	r3, [r7, #24]
  return(result);
 8009402:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009404:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8009406:	b672      	cpsid	i
}
 8009408:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800940a:	4b46      	ldr	r3, [pc, #280]	@ (8009524 <UTIL_SEQ_Run+0x1f0>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2201      	movs	r2, #1
 8009410:	fa02 f303 	lsl.w	r3, r2, r3
 8009414:	43da      	mvns	r2, r3
 8009416:	4b3e      	ldr	r3, [pc, #248]	@ (8009510 <UTIL_SEQ_Run+0x1dc>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4013      	ands	r3, r2
 800941c:	4a3c      	ldr	r2, [pc, #240]	@ (8009510 <UTIL_SEQ_Run+0x1dc>)
 800941e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009420:	2301      	movs	r3, #1
 8009422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009424:	e013      	b.n	800944e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8009426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009428:	3b01      	subs	r3, #1
 800942a:	4a3d      	ldr	r2, [pc, #244]	@ (8009520 <UTIL_SEQ_Run+0x1ec>)
 800942c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8009430:	4b3c      	ldr	r3, [pc, #240]	@ (8009524 <UTIL_SEQ_Run+0x1f0>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2201      	movs	r2, #1
 8009436:	fa02 f303 	lsl.w	r3, r2, r3
 800943a:	43da      	mvns	r2, r3
 800943c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800943e:	3b01      	subs	r3, #1
 8009440:	400a      	ands	r2, r1
 8009442:	4937      	ldr	r1, [pc, #220]	@ (8009520 <UTIL_SEQ_Run+0x1ec>)
 8009444:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800944a:	3b01      	subs	r3, #1
 800944c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800944e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009450:	2b00      	cmp	r3, #0
 8009452:	d1e8      	bne.n	8009426 <UTIL_SEQ_Run+0xf2>
 8009454:	6a3b      	ldr	r3, [r7, #32]
 8009456:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	f383 8810 	msr	PRIMASK, r3
}
 800945e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8009460:	4b30      	ldr	r3, [pc, #192]	@ (8009524 <UTIL_SEQ_Run+0x1f0>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a30      	ldr	r2, [pc, #192]	@ (8009528 <UTIL_SEQ_Run+0x1f4>)
 8009466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800946a:	4798      	blx	r3

    local_taskset = TaskSet;
 800946c:	4b28      	ldr	r3, [pc, #160]	@ (8009510 <UTIL_SEQ_Run+0x1dc>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8009472:	4b28      	ldr	r3, [pc, #160]	@ (8009514 <UTIL_SEQ_Run+0x1e0>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8009478:	4b27      	ldr	r3, [pc, #156]	@ (8009518 <UTIL_SEQ_Run+0x1e4>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800947e:	4b27      	ldr	r3, [pc, #156]	@ (800951c <UTIL_SEQ_Run+0x1e8>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009484:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009488:	401a      	ands	r2, r3
 800948a:	4b20      	ldr	r3, [pc, #128]	@ (800950c <UTIL_SEQ_Run+0x1d8>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4013      	ands	r3, r2
 8009490:	2b00      	cmp	r3, #0
 8009492:	d005      	beq.n	80094a0 <UTIL_SEQ_Run+0x16c>
 8009494:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009498:	4013      	ands	r3, r2
 800949a:	2b00      	cmp	r3, #0
 800949c:	f43f af64 	beq.w	8009368 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80094a0:	4b20      	ldr	r3, [pc, #128]	@ (8009524 <UTIL_SEQ_Run+0x1f0>)
 80094a2:	f04f 32ff 	mov.w	r2, #4294967295
 80094a6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80094a8:	f000 f946 	bl	8009738 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094ac:	f3ef 8310 	mrs	r3, PRIMASK
 80094b0:	613b      	str	r3, [r7, #16]
  return(result);
 80094b2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80094b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80094b6:	b672      	cpsid	i
}
 80094b8:	bf00      	nop
  local_taskset = TaskSet;
 80094ba:	4b15      	ldr	r3, [pc, #84]	@ (8009510 <UTIL_SEQ_Run+0x1dc>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80094c0:	4b14      	ldr	r3, [pc, #80]	@ (8009514 <UTIL_SEQ_Run+0x1e0>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80094c6:	4b14      	ldr	r3, [pc, #80]	@ (8009518 <UTIL_SEQ_Run+0x1e4>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80094cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80094ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d0:	401a      	ands	r2, r3
 80094d2:	4b0e      	ldr	r3, [pc, #56]	@ (800950c <UTIL_SEQ_Run+0x1d8>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4013      	ands	r3, r2
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d107      	bne.n	80094ec <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80094dc:	4b0f      	ldr	r3, [pc, #60]	@ (800951c <UTIL_SEQ_Run+0x1e8>)
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094e2:	4013      	ands	r3, r2
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d101      	bne.n	80094ec <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80094e8:	f7f7 f9ed 	bl	80008c6 <UTIL_SEQ_Idle>
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f383 8810 	msr	PRIMASK, r3
}
 80094f6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80094f8:	f000 f925 	bl	8009746 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80094fc:	4a03      	ldr	r2, [pc, #12]	@ (800950c <UTIL_SEQ_Run+0x1d8>)
 80094fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009500:	6013      	str	r3, [r2, #0]

  return;
 8009502:	bf00      	nop
}
 8009504:	3740      	adds	r7, #64	@ 0x40
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	2000002c 	.word	0x2000002c
 8009510:	20000554 	.word	0x20000554
 8009514:	20000558 	.word	0x20000558
 8009518:	20000028 	.word	0x20000028
 800951c:	2000055c 	.word	0x2000055c
 8009520:	200005e4 	.word	0x200005e4
 8009524:	20000560 	.word	0x20000560
 8009528:	20000564 	.word	0x20000564

0800952c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b088      	sub	sp, #32
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009538:	f3ef 8310 	mrs	r3, PRIMASK
 800953c:	617b      	str	r3, [r7, #20]
  return(result);
 800953e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8009540:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009542:	b672      	cpsid	i
}
 8009544:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8009546:	68f8      	ldr	r0, [r7, #12]
 8009548:	f000 f904 	bl	8009754 <SEQ_BitPosition>
 800954c:	4603      	mov	r3, r0
 800954e:	4619      	mov	r1, r3
 8009550:	4a06      	ldr	r2, [pc, #24]	@ (800956c <UTIL_SEQ_RegTask+0x40>)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	f383 8810 	msr	PRIMASK, r3
}
 8009562:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8009564:	bf00      	nop
}
 8009566:	3720      	adds	r7, #32
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	20000564 	.word	0x20000564

08009570 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8009570:	b480      	push	{r7}
 8009572:	b087      	sub	sp, #28
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800957a:	f3ef 8310 	mrs	r3, PRIMASK
 800957e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009580:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009582:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009584:	b672      	cpsid	i
}
 8009586:	bf00      	nop

  TaskSet |= TaskId_bm;
 8009588:	4b0d      	ldr	r3, [pc, #52]	@ (80095c0 <UTIL_SEQ_SetTask+0x50>)
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4313      	orrs	r3, r2
 8009590:	4a0b      	ldr	r2, [pc, #44]	@ (80095c0 <UTIL_SEQ_SetTask+0x50>)
 8009592:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8009594:	4a0b      	ldr	r2, [pc, #44]	@ (80095c4 <UTIL_SEQ_SetTask+0x54>)
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	431a      	orrs	r2, r3
 80095a0:	4908      	ldr	r1, [pc, #32]	@ (80095c4 <UTIL_SEQ_SetTask+0x54>)
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	f383 8810 	msr	PRIMASK, r3
}
 80095b2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80095b4:	bf00      	nop
}
 80095b6:	371c      	adds	r7, #28
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr
 80095c0:	20000554 	.word	0x20000554
 80095c4:	200005e4 	.word	0x200005e4

080095c8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80095c8:	b480      	push	{r7}
 80095ca:	b087      	sub	sp, #28
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095d0:	f3ef 8310 	mrs	r3, PRIMASK
 80095d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80095d6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80095d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80095da:	b672      	cpsid	i
}
 80095dc:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	43da      	mvns	r2, r3
 80095e2:	4b08      	ldr	r3, [pc, #32]	@ (8009604 <UTIL_SEQ_PauseTask+0x3c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4013      	ands	r3, r2
 80095e8:	4a06      	ldr	r2, [pc, #24]	@ (8009604 <UTIL_SEQ_PauseTask+0x3c>)
 80095ea:	6013      	str	r3, [r2, #0]
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	f383 8810 	msr	PRIMASK, r3
}
 80095f6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80095f8:	bf00      	nop
}
 80095fa:	371c      	adds	r7, #28
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr
 8009604:	20000028 	.word	0x20000028

08009608 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009608:	b480      	push	{r7}
 800960a:	b087      	sub	sp, #28
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009610:	f3ef 8310 	mrs	r3, PRIMASK
 8009614:	60fb      	str	r3, [r7, #12]
  return(result);
 8009616:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009618:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800961a:	b672      	cpsid	i
}
 800961c:	bf00      	nop

  TaskMask |= TaskId_bm;
 800961e:	4b09      	ldr	r3, [pc, #36]	@ (8009644 <UTIL_SEQ_ResumeTask+0x3c>)
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4313      	orrs	r3, r2
 8009626:	4a07      	ldr	r2, [pc, #28]	@ (8009644 <UTIL_SEQ_ResumeTask+0x3c>)
 8009628:	6013      	str	r3, [r2, #0]
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	f383 8810 	msr	PRIMASK, r3
}
 8009634:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009636:	bf00      	nop
}
 8009638:	371c      	adds	r7, #28
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop
 8009644:	20000028 	.word	0x20000028

08009648 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8009648:	b480      	push	{r7}
 800964a:	b087      	sub	sp, #28
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009650:	f3ef 8310 	mrs	r3, PRIMASK
 8009654:	60fb      	str	r3, [r7, #12]
  return(result);
 8009656:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009658:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800965a:	b672      	cpsid	i
}
 800965c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800965e:	4b09      	ldr	r3, [pc, #36]	@ (8009684 <UTIL_SEQ_SetEvt+0x3c>)
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4313      	orrs	r3, r2
 8009666:	4a07      	ldr	r2, [pc, #28]	@ (8009684 <UTIL_SEQ_SetEvt+0x3c>)
 8009668:	6013      	str	r3, [r2, #0]
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f383 8810 	msr	PRIMASK, r3
}
 8009674:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009676:	bf00      	nop
}
 8009678:	371c      	adds	r7, #28
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	20000558 	.word	0x20000558

08009688 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b088      	sub	sp, #32
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8009690:	4b1f      	ldr	r3, [pc, #124]	@ (8009710 <UTIL_SEQ_WaitEvt+0x88>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8009696:	4b1e      	ldr	r3, [pc, #120]	@ (8009710 <UTIL_SEQ_WaitEvt+0x88>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800969e:	d102      	bne.n	80096a6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80096a0:	2300      	movs	r3, #0
 80096a2:	61fb      	str	r3, [r7, #28]
 80096a4:	e005      	b.n	80096b2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80096a6:	4b1a      	ldr	r3, [pc, #104]	@ (8009710 <UTIL_SEQ_WaitEvt+0x88>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2201      	movs	r2, #1
 80096ac:	fa02 f303 	lsl.w	r3, r2, r3
 80096b0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80096b2:	4b18      	ldr	r3, [pc, #96]	@ (8009714 <UTIL_SEQ_WaitEvt+0x8c>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80096b8:	4a16      	ldr	r2, [pc, #88]	@ (8009714 <UTIL_SEQ_WaitEvt+0x8c>)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80096be:	e003      	b.n	80096c8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80096c0:	6879      	ldr	r1, [r7, #4]
 80096c2:	69f8      	ldr	r0, [r7, #28]
 80096c4:	f000 f82a 	bl	800971c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80096c8:	4b13      	ldr	r3, [pc, #76]	@ (8009718 <UTIL_SEQ_WaitEvt+0x90>)
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4013      	ands	r3, r2
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d0f5      	beq.n	80096c0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80096d4:	4a0e      	ldr	r2, [pc, #56]	@ (8009710 <UTIL_SEQ_WaitEvt+0x88>)
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096da:	f3ef 8310 	mrs	r3, PRIMASK
 80096de:	60bb      	str	r3, [r7, #8]
  return(result);
 80096e0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80096e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80096e4:	b672      	cpsid	i
}
 80096e6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	43da      	mvns	r2, r3
 80096ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009718 <UTIL_SEQ_WaitEvt+0x90>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4013      	ands	r3, r2
 80096f2:	4a09      	ldr	r2, [pc, #36]	@ (8009718 <UTIL_SEQ_WaitEvt+0x90>)
 80096f4:	6013      	str	r3, [r2, #0]
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f383 8810 	msr	PRIMASK, r3
}
 8009700:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8009702:	4a04      	ldr	r2, [pc, #16]	@ (8009714 <UTIL_SEQ_WaitEvt+0x8c>)
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	6013      	str	r3, [r2, #0]
  return;
 8009708:	bf00      	nop
}
 800970a:	3720      	adds	r7, #32
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	20000560 	.word	0x20000560
 8009714:	2000055c 	.word	0x2000055c
 8009718:	20000558 	.word	0x20000558

0800971c <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	43db      	mvns	r3, r3
 800972a:	4618      	mov	r0, r3
 800972c:	f7ff fe02 	bl	8009334 <UTIL_SEQ_Run>
  return;
 8009730:	bf00      	nop
}
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8009738:	b480      	push	{r7}
 800973a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800973c:	bf00      	nop
}
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr

08009746 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8009746:	b480      	push	{r7}
 8009748:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800974a:	bf00      	nop
}
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8009754:	b480      	push	{r7}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d101      	bne.n	800976a <SEQ_BitPosition+0x16>
    return 32U;
 8009766:	2320      	movs	r3, #32
 8009768:	e003      	b.n	8009772 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	fab3 f383 	clz	r3, r3
 8009770:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 8009772:	f1c3 031f 	rsb	r3, r3, #31
 8009776:	b2db      	uxtb	r3, r3
}
 8009778:	4618      	mov	r0, r3
 800977a:	3714      	adds	r7, #20
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <memset>:
 8009784:	4402      	add	r2, r0
 8009786:	4603      	mov	r3, r0
 8009788:	4293      	cmp	r3, r2
 800978a:	d100      	bne.n	800978e <memset+0xa>
 800978c:	4770      	bx	lr
 800978e:	f803 1b01 	strb.w	r1, [r3], #1
 8009792:	e7f9      	b.n	8009788 <memset+0x4>

08009794 <__libc_init_array>:
 8009794:	b570      	push	{r4, r5, r6, lr}
 8009796:	4d0d      	ldr	r5, [pc, #52]	@ (80097cc <__libc_init_array+0x38>)
 8009798:	4c0d      	ldr	r4, [pc, #52]	@ (80097d0 <__libc_init_array+0x3c>)
 800979a:	1b64      	subs	r4, r4, r5
 800979c:	10a4      	asrs	r4, r4, #2
 800979e:	2600      	movs	r6, #0
 80097a0:	42a6      	cmp	r6, r4
 80097a2:	d109      	bne.n	80097b8 <__libc_init_array+0x24>
 80097a4:	4d0b      	ldr	r5, [pc, #44]	@ (80097d4 <__libc_init_array+0x40>)
 80097a6:	4c0c      	ldr	r4, [pc, #48]	@ (80097d8 <__libc_init_array+0x44>)
 80097a8:	f000 f826 	bl	80097f8 <_init>
 80097ac:	1b64      	subs	r4, r4, r5
 80097ae:	10a4      	asrs	r4, r4, #2
 80097b0:	2600      	movs	r6, #0
 80097b2:	42a6      	cmp	r6, r4
 80097b4:	d105      	bne.n	80097c2 <__libc_init_array+0x2e>
 80097b6:	bd70      	pop	{r4, r5, r6, pc}
 80097b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80097bc:	4798      	blx	r3
 80097be:	3601      	adds	r6, #1
 80097c0:	e7ee      	b.n	80097a0 <__libc_init_array+0xc>
 80097c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80097c6:	4798      	blx	r3
 80097c8:	3601      	adds	r6, #1
 80097ca:	e7f2      	b.n	80097b2 <__libc_init_array+0x1e>
 80097cc:	08009ac8 	.word	0x08009ac8
 80097d0:	08009ac8 	.word	0x08009ac8
 80097d4:	08009ac8 	.word	0x08009ac8
 80097d8:	08009acc 	.word	0x08009acc

080097dc <memcpy>:
 80097dc:	440a      	add	r2, r1
 80097de:	4291      	cmp	r1, r2
 80097e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80097e4:	d100      	bne.n	80097e8 <memcpy+0xc>
 80097e6:	4770      	bx	lr
 80097e8:	b510      	push	{r4, lr}
 80097ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097f2:	4291      	cmp	r1, r2
 80097f4:	d1f9      	bne.n	80097ea <memcpy+0xe>
 80097f6:	bd10      	pop	{r4, pc}

080097f8 <_init>:
 80097f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fa:	bf00      	nop
 80097fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097fe:	bc08      	pop	{r3}
 8009800:	469e      	mov	lr, r3
 8009802:	4770      	bx	lr

08009804 <_fini>:
 8009804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009806:	bf00      	nop
 8009808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800980a:	bc08      	pop	{r3}
 800980c:	469e      	mov	lr, r3
 800980e:	4770      	bx	lr
